{
    "summary": "The code retrieves music file duration, parses LRC file for lyrics and their start times, sorts and filters them, calculates end times based on durations, and prints the final output.",
    "details": [
        {
            "comment": "This code retrieves the duration of a music file, reads its associated LRC file, parses it to extract lyrics and their start times, sorts them, filters out consecutive lyric lines within threshold time intervals, and stores the result in a new list of dictionaries containing \"text\" and \"start\" keys.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/test_pylrc.py\":0-42",
            "content": "import pylrc\nfrom MediaInfo import MediaInfo\ndef getMusicDuration(musicPath):\n    info = MediaInfo(filename=musicPath)\n    info = info.getInfo()\n    # print(info)\n    # breakpoint()\n    length = info[\"duration\"]\n    length = float(length)\n    return length\nmusicPath = \"/root/Desktop/works/pyjom/tests/music_analysis/exciting_bgm.mp3\"\nmusicDuration = getMusicDuration(musicPath)\nlrc_file = open(\"/root/Desktop/works/pyjom/tests/music_analysis/exciting_bgm.lrc\")\nlrc_string = \"\".join(lrc_file.readlines())\nlrc_file.close()\nsubs = pylrc.parse(lrc_string)\nlyricDurationThresholds = (0.5, 4)\ntextArray = []\nfor sub in subs:\n    startTime = sub.time\n    text = sub.text\n    textArray.append((startTime, text))\ntextArray.sort(key=lambda x: x[0])\nlastStartTime = textArray[0][0]\nnewTextArray = [{\"start\": textArray[0][0], \"text\": textArray[0][1]}]\nfor startTime, text in textArray[1:]:\n    if startTime - lastStartTime < lyricDurationThresholds[0]:\n        continue\n    else:\n        lastStartTime = startTime\n        newTextArray.append({\"text\": text, \"start\": startTime})"
        },
        {
            "comment": "This code calculates the end time of each lyric element in a newTextArray based on its start time and the given lyricDurationThresholds. It appends the calculated end times to the lyricDurations list, updates the end time for each element in newTextArray, and then prints all elements with their start and end times.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/test_pylrc.py\":44-72",
            "content": "# now calculate the end time, please?\n# you may want to translate this if you have to.\n# when it does not contains anything in chinese.\n# using deepl?\n# put that aside please? focus on this shit...\nimport numpy as np\nlyricDurations = [np.mean(lyricDurationThresholds)]\nfor index, elem in enumerate(newTextArray):\n    text = elem[\"text\"]\n    start = elem[\"start\"]\n    nextIndex = index + 1\n    if nextIndex < len(newTextArray):\n        nextElem = newTextArray[nextIndex]\n        nextStart = nextElem[\"start\"]\n        end = nextStart - start\n        if end > lyricDurationThresholds[0] and end < lyricDurationThresholds[1]:\n            lyricDurations.append(end)\n        end = min(end, lyricDurationThresholds[1], musicDuration - start) + start\n    else:\n        end = np.mean(lyricDurations) + start\n        end = min(musicDuration, end)\n    newTextArray[index].update({\"end\": end})\nfor elem in newTextArray:\n    print(elem)\n# great. now let's do the freaking work?"
        }
    ]
}