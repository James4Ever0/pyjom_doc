{
    "summary": "The code handles bilibili login/logout, stores credentials in TinyDB, verifies them and provides functions for SMS-based credential input/removal. It uses a decorator `bilibiliCredential` that retrieves user credentials and wraps function calls with them.",
    "details": [
        {
            "comment": "The code manages login/logout and credential storage for the Bilibili API. It retrieves the 'home' directory, creates a TinyDB instance at the specified path to store user credentials, and provides a function `verifyCredential` to check if a given credential is valid. The code also sets geetest_auto_open to False and imports necessary modules for Bilibili API interaction.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/pyjom/platforms/bilibili/credentials.py\":1-37",
            "content": "# you need to manage login/logout and credential storage.\n# first you need to get 'home' directory\nfrom lazero.search.api import getHomeDirectory\nimport os\nfrom bilibili_api import sync, Credential\nfrom bilibili_api.user import get_self_info\nfrom bilibili_api import settings\nfrom bilibili_api.login import (\n    # login_with_password,\n    login_with_sms,\n    send_sms,\n    PhoneNumber,\n    # Check,\n)\nsettings.geetest_auto_open = False\nhome = getHomeDirectory()\ndbPath = os.path.join(home, \".bilibili_api.json\")\nimport tinydb\ndb = tinydb.TinyDB(dbPath)  # is this variable shared in this module?\nUser = tinydb.Query()\ndef verifyCredential(credential, returnName=True):\n    try:\n        name = sync(get_self_info(credential))[\"name\"]\n        print(\"credential is valid for:\", name)\n        db.upsert(\n            {\n                \"name\": name,  # does not show up in credential.\n                \"dedeuserid\": credential.dedeuserid,\n                \"bili_jct\": credential.bili_jct,\n                \"buvid3\": credential.buvid3,\n                \"sessdata\": credential.sessdata,"
        },
        {
            "comment": "The code is a Python implementation for managing bilibili credentials. The `getCredentialViaSMS` function allows users to input their phone number and retrieves the corresponding credential via SMS verification. The `removeCredentialByDedeUserId` function removes a credential from the database based on the provided dedeuserid. Both functions handle exceptions using try-except blocks, providing error messages and returning False if any errors occur during execution.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/pyjom/platforms/bilibili/credentials.py\":38-73",
            "content": "            },\n            User.dedeuserid == credential.dedeuserid,\n        )\n        if returnName:\n            return name\n        else:\n            return True\n    except:\n        import traceback\n        traceback.print_exc()\n        print(\"invalid credential:\", credential)\n        return False\ndef removeCredentialByDedeUserId(dedeuserid: str):\n    try:\n        db.remove(User.dedeuserid == dedeuserid)\n        return True\n    except:\n        import traceback\n        traceback.print_exc()\n        print(\n            \"error when removing credential from database for dedeuserid:\", dedeuserid\n        )\n        return False\n# from lazero.program.functools import skipException\nfrom lazero.program.functools import suppressException\n# @skipException(defaultReturn = None, breakpoint_flag=True, debug_flag=True, global_variables=globals(), local_variables=locals()) # send_sms is not definded here. WTF?\n@suppressException(defaultReturn=None, showException=True)  # trycatch based.\ndef getCredentialViaSMS():\n    phone = input(\"\u8bf7\u8f93\u5165\u624b\u673a\u53f7\uff1a\")"
        },
        {
            "comment": "The code is responsible for logging in to a Bilibili account and retrieving the user's credentials. It first attempts to log in using an SMS verification code, then checks if the provided credential is valid by verifying it with the database. The function `getCredentialByDedeUserId` allows fetching credentials based on the given dedeuserid. If multiple or no credentials are found for the specified id, appropriate error messages are printed and potentially irrelevant records are removed from the database.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/pyjom/platforms/bilibili/credentials.py\":74-100",
            "content": "    print(\"\u6b63\u5728\u767b\u5f55\u3002\")\n    send_sms(PhoneNumber(phone, country=\"+86\"))  # \u9ed8\u8ba4\u8bbe\u7f6e\u5730\u533a\u4e3a\u4e2d\u56fd\u5927\u9646\n    code = input(\"\u8bf7\u8f93\u5165\u9a8c\u8bc1\u7801\uff1a\")\n    c = login_with_sms(PhoneNumber(phone, country=\"+86\"), code)\n    credential = c\n    # first, check if this is a valid credential.\n    name = verifyCredential(credential)\n    return credential, name\ndef getCredentialByDedeUserId(dedeuserid: str = \"397424026\"):\n    dataList = db.search(User.dedeuserid == dedeuserid)\n    if len(dataList) != 1:\n        if len(dataList) != 0:\n            # remove all related records.\n            print(\"multiple credentials found for dedeuserid:\", dedeuserid)\n            removeCredentialByDedeUserId(dedeuserid)\n        else:\n            print(\"no credential found for dedeuserid:\", dedeuserid)\n    else:\n        # check validity.\n        data = dataList[0].copy()\n        print(\"try to login credential fetched from db:\", data)\n        oldName = data.pop(\"name\")\n        print(\"previous name:\", oldName)\n        credential = Credential(**data)\n        name = verifyCredential(credential)"
        },
        {
            "comment": "The code checks if the provided name is not False and prints \"login successful\" along with the name. If the name is False, it prints a failed login message and removes the existing credential associated with the user. The code then allows the user to log in via SMS. It retrieves the credential from SMS and checks if the dedeuserid matches the desired value. If it does, the credential is returned; otherwise, a message is printed indicating that the dedeuserid is incorrect.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/pyjom/platforms/bilibili/credentials.py\":101-124",
            "content": "        if name != False:\n            print(\"login successful:\", name)\n            return credential\n        else:\n            print(\"login failed with existing credential for user:\", oldName)\n            removeCredentialByDedeUserId(\n                dedeuserid\n            )  # warning. my credential has been removed because of that async problem. please relogin.\n    # anyway if you are here, nothing in database related to this dedeuserid now.\n    # you choose to login via SMS.\n    while True:\n        # could be troublesome.\n        result = getCredentialViaSMS()\n        if result != None:  # has type check here?\n            credential, name = result\n            if name != False:\n                print(\"\u767b\u5f55\u6210\u529f\")\n                # update with this credential!\n                # next, check if this is the credential we need.\n                if credential.dedeuserid == dedeuserid:\n                    return credential\n                else:\n                    print(\"dedeuserid not right.\")\n                    print("
        },
        {
            "comment": "The code defines a decorator called `bilibiliCredential` that takes a function as input and returns a new function wrapper. The wrapper retrieves the credentials for a specific `dedeuserid`, and if the user exists, it passes the function call with the credential as an argument. If the keyword arguments are not of type dictionary, it converts them into an empty dictionary.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/pyjom/platforms/bilibili/credentials.py\":125-139",
            "content": "                        \"user %s (dedeuserid: %s) does not have dedeuserid: %s\"\n                        % (name, credential.dedeuserid, dedeuserid)\n                    )\n        else:\n            print(\"\u767b\u9646\u5931\u8d25\")\ndef bilibiliCredential(func):\n    def wrapper(*args, dedeuserid=\"397424026\", **kwargs):\n        credential = getCredentialByDedeUserId(dedeuserid)\n        if type(kwargs) != dict:\n            kwargs = {}\n        return func(*args, **(kwargs | {'credential': credential}))\n    return wrapper"
        }
    ]
}