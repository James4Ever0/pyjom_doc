{
    "summary": "This code retrieves a list of Jina Hub executors in chunks and writes them to a JSON file named \"jina_hub.json\". It first makes an API request to the Hubble server, sorts the results by activities.metaMatched, and returns the data as JSON. Then it calculates the number of pages needed based on the total number of executors and loops through each page, appending the data to a list called 'data'. Finally, it writes the list of executors (in multiple chunks) to the file \"jina_hub.json\" with proper indentation and formatting.",
    "details": [
        {
            "comment": "This code retrieves a list of Jina Hub executors in chunks and writes them to a JSON file named \"jina_hub.json\". It first makes an API request to the Hubble server, sorts the results by activities.metaMatched, and returns the data as JSON. Then it calculates the number of pages needed based on the total number of executors and loops through each page, appending the data to a list called 'data'. Finally, it writes the list of executors (in multiple chunks) to the file \"jina_hub.json\" with proper indentation and formatting.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/jina_multimodal_cross_modal_search_examples_apps/get_jina_hub_list.py\":0-28",
            "content": "import requests\nimport time\nimport json\ndef getJson(pageIndex=1, pageSize=16):\n    url = 'https://api.hubble.jina.ai/v2/rpc/executor.list'\n    query = {\"sort\":\"-activities.metaMatched\",\"pageIndex\":pageIndex,\"pageSize\":pageSize,\"search\":\"\",\"author\":\"\",\"keywords\":[],\"withAnonymous\":True}\n    r = requests.post(url,json=query)\n    jsonData = r.json()\n    return jsonData\npageSize = 16\njsonData = getJson(pageSize=pageSize)\ntotal = jsonData[\"meta\"][\"total\"]\nprint('total:', total)\ndata = [jsonData.copy()]\nimport math\npages = math.ceil(total/pageSize)\nimport progressbar\nfor index in progressbar.progressbar(range(2,pages+1)):\n    time.sleep(2)\n    # print('page index:',index)\n    jsonData = getJson(pageIndex=index, pageSize=pageSize)\n    data.append(jsonData.copy())\nprint(\"writing data\")\nwith open(\"jina_hub.json\", \"w\") as f:\n    f.write(json.dumps(data, indent=4, ensure_ascii=False))"
        }
    ]
}