{
    "summary": "This code sets up a drawing environment and generates typography frames by rendering text onto an image, handling wrapping and tracking position on screen. It also initializes new lists, saves screenshots, and handles different scenarios before exiting.",
    "details": [
        {
            "comment": "This code sets up a drawing environment with a specified size and font, and then generates typography frames by rendering text onto an image. It handles wrapping text to multiple lines if the width is exceeded and keeps track of the number of lines and position on the screen. The code also clears any existing files named \"screenshot*\" and creates a new directory for storing the resulting images.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_practices/bilibili_tarot/generate_typography_with_voice.py\":0-46",
            "content": "from p5 import *\nimport os\nfrom test_common import demo_text\nos.system(\"rm screenshot*\")\ntarget_dir = \"demo_typography\"\nos.system(\"rm -rf {}\".format(target_dir))\nos.system(\"mkdir {}\".format(target_dir))\ntsize = 100\ncounterx = 0\nxcoord = 20\nycoord = 75\nscrwidth = 1920\nscrheight = 1080\nlineNum = 0\n# what fucking ever.\ns = demo_text\ns0 = [\"\"]\ndef setup():\n    size(scrwidth,scrheight)\n    text_font(create_font('./SimHei.ttf', size=tsize))\ndef draw():\n    global counterx,xcoord,ycoord,s,s0,scrheight,scrwidth,lineNum,target_dir\n    if len(s0) ==1:\n        if len(s0[0]) == 0:\n            background(0)\n    if counterx > len(s)-1:\n        exit()\n    s1 = s[counterx]\n    stemp0 = s0[-1]+s1\n    tw = text_width(stemp0)\n    th = tsize*(lineNum+1) + tsize*0.2*lineNum\n    # th = tsize*(stemp0.count(\"\\n\")+1)\n    # if (ycoord+th> scrheight):\n    #     s0 = s1\n    # else:\n    if (tw + xcoord+ tsize*0.5> scrwidth):\n        stemp0 = s1\n        s0.append(stemp0)\n        lineNum +=1\n        th = tsize*(lineNum+1) + tsize*0.2*lineNum\n        if (ycoord+th> scrheight):"
        },
        {
            "comment": "The code handles different scenarios by either initializing a new list 's0' or updating the last element in 's0'. It uses variables like 'l', 'xcoord', 'ycoord', 'target_dir', 'counterx', and 'text9' to handle text placement, saving screenshots, and maintaining state. The font \"SimHei.ttf\" is loaded, and the width of each line of text is calculated using the 'text_width' function. Finally, a screenshot is saved and the script exits.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_practices/bilibili_tarot/generate_typography_with_voice.py\":47-68",
            "content": "            # stemp0 = s1\n            s0 = [stemp0]\n            background(0)\n            lineNum = 0\n    else:\n        s0[-1]= stemp0\n        # no_loop()\n        # clear\n    # s0 = stemp0\n        # end all evil.\n    counterx+=1\n    # load_font(\"SimHei.ttf\")\n    print(\"text w/h:\",tw,th)\n    # for l, text9 in enumerate(s0):\n    text9 = s0[-1][-1]\n    l = len(s0)-1\n    text(text9, (xcoord+text_width(s0[-1][:-1]), ycoord+ l*(tsize*1.2)))  # add str() to key\n    save_frame(\"{}/screenshot.png\".format(target_dir))\nrun()\nprint(\"EXITED.\")"
        }
    ]
}