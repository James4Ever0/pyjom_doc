{
    "summary": "The code creates a karaoke-style animation by calculating syllable positions, applying colors and effects, and using alpha blending and timing utilities for playback.",
    "details": [
        {
            "comment": "This code defines a method for inline effects, allowing exclusive effects to be applied to syllables. It uses the \"Actor\" and \"Effect\" fields to define effects for whole lines. Romajis look for \"m1\" and \"m2\" to choose main effects, while kanjis search for line's field \"Effect\". Star jumping is applied using frame-per-frame positioning. The code also demonstrates the use of ColorUtility for extracting color changes and interpolating them for each generated line.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/starJumping.py\":0-13",
            "content": "\"\"\"\nInline effects is a method to define exclusive effects for syllables.\nFields \"Actor\" and \"Effect\" can also be used to define exclusive effects, but you will define them for the whole line.\nIn this example, romajis are looking for inline effects\n\"m1\" and \"m2\" to choose a main effect to apply to syls' text.\nKanjis are looking for lines' field \"Effect\", to choose what kind of effect we want to apply.\nIn addition, for romaji there's a star jumping over syls by frame-per-frame positioning.\nIn this example we can also see in action another utility provided by PyonFX: ColorUtility.\nIt is used to extract color changes from some lines and interpolate them for each generated line without effort.\nColors will add a really nice touch to your KFXs, so it is important to have a comfy way to set up them and use them in your effects.\nIn the translation lines we will create some clipped text colorated as an example of the application.\nYou can also make some simpler usage, like just applying color changes to the whole line, which is what karaokers normally do."
        },
        {
            "comment": "Creating a star shape and extracting color changes from an input file, setting up delay and offset variables for leadin and leadout effects.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/starJumping.py\":15-52",
            "content": "It could look like much code for such a simple effect, but it's needed and an easy method with much potential for extensions.\n\"\"\"\n### THIS VARIANT IS GREAT. ###\n# from tkinter import CENTER\nfrom pyonfx import *\nimport random\nimport math\nio = Ass(\n    \"/root/Desktop/works/pyjom/tests/karaoke_effects/in2.ass\",\n    path_output=\"starJumping.ass\",\n)\nmeta, styles, lines = io.get_data()\n# Creating the star and extracting all the color changes from the input file\nstar = Shape.star(5, 4, 10)\nCU = ColorUtility(lines)\ndef romaji(line, l):\n    # Setting up a delay, we will use it as duration time of the leadin and leadout effects\n    delay = 100\n    # Setting up offset variables, we will use them for the \\move in leadin and leadout effects\n    off_x = 35\n    off_y = 15\n    # Leadin Effect\n    mDelay = 0\n    # lastStartTime = line.start_time\n    for syl in Utils.all_non_empty(line.syls):\n        l.layer = 0\n        # l.start_time = syl.end_time\n        l.start_time = line.start_time\n        # l.start_time = (\n        #     line.start_time + 25 * syl.i - delay - 80"
        },
        {
            "comment": "This code defines a karaoke effect for star jumping animation. It calculates the layer position, duration, and text formatting for each syllable in a line of lyrics. The main effect starts after the lead-in, with an optional delay, and continues for an additional 100 milliseconds after the end of each syllable.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/starJumping.py\":53-84",
            "content": "        # )  # Remove 80 to start_time to let leadin finish a little bit earlier than the main effect of the first syllable\n        # l.end_time = lastStartTime # wtf?\n        # lastStartTime = syl.start_time\n        l.end_time = syl.start_time\n        # l.end_time = line.start_time + syl.start_time # wtf?\n        l.dur = l.end_time - l.start_time\n        if l.dur <= 0:\n            continue\n        l.text = (\n            \"{\\\\an5\\\\move(%.3f,%.3f,%.3f,%.3f,0,%d)\\\\blur2\\\\t(0,%d,\\\\blur0)\\\\fad(%d,0)}%s\"\n            % (\n                syl.center + math.cos(syl.i / 2) * off_x,\n                syl.middle + math.sin(syl.i / 4) * off_y,\n                syl.center,\n                syl.middle,\n                delay,\n                delay,\n                delay,\n                syl.text,\n            )\n        )\n        io.write_line(l)\n    # Main Effect\n    for syl in Utils.all_non_empty(line.syls):\n        l.layer = 1\n        l.start_time = syl.start_time\n        # l.start_time = line.start_time + syl.start_time\n        l.end_time = syl.end_time + 100"
        },
        {
            "comment": "This code applies colors and rotation to a star shape that jumps over syllables based on the inline_fx value. If inline_fx is \"m1\", it changes the colors; if inline_fx is \"m2,\" it applies rotation. The resulting star shape is then written to a file.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/starJumping.py\":85-121",
            "content": "        l.dur = l.end_time - l.start_time\n        c1 = \"&H81F4FF&\"\n        c3 = \"&H199AAA&\"\n        # Change color if inline_fx is m1\n        if syl.inline_fx == \"m1\":\n            c1 = \"&H8282FF&\"\n            c3 = \"&H191AAA&\"\n        on_inline_effect_2 = \"\"\n        # Apply rotation if inline_fx is m2\n        if syl.inline_fx == \"m2\":\n            on_inline_effect_2 = \"\\\\t(0,%d,\\\\frz%.3f)\\\\t(%d,%d,\\\\frz0)\" % (\n                l.dur / 4,\n                random.uniform(-40, 40),\n                l.dur / 4,\n                l.dur,\n            )\n        l.text = (\n            \"{\\\\an5\\\\pos(%.3f,%.3f)%s\\\\t(0,80,\\\\fscx105\\\\fscy105\\\\1c%s\\\\3c%s)\\\\t(80,%d,\\\\fscx100\\\\fscy100\\\\1c%s\\\\3c%s)}%s\"\n            % (\n                syl.center,\n                syl.middle,\n                on_inline_effect_2,\n                c1,\n                c3,\n                l.dur - 80,\n                line.styleref.color1,\n                line.styleref.color3,\n                syl.text,\n            )\n        )\n        io.write_line(l)\n        # Animating star shape that jumps over the syllables"
        },
        {
            "comment": "Code snippet performs the following:\n1. Jumps into first syllable, with jump height determined by variable `jump_height`.\n2. Uses `FrameUtility` for timing calculations based on line's start time minus lead-in time divided by 2 to start frame.\n3. Loops through each segment of `FrameUtility`, adjusting start and end times, and positioning the text accordingly.\n4. Calculates alpha value, which is then converted using `Convert.alpha_dec_to_ass` for blending effect.\n5. Writes each line to `io` (presumably an output stream).",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/starJumping.py\":122-151",
            "content": "        # Jump-in to the first syl\n        jump_height = 18\n        if syl.i == 0:\n            FU = FrameUtility(line.start_time - line.leadin / 2, line.start_time)\n            for s, e, i, n in FU:\n                l.start_time = s\n                l.end_time = e\n                frame_pct = i / n\n                x = syl.center - syl.width * (1 - frame_pct)\n                y = syl.top - math.sin(frame_pct * math.pi) * jump_height\n                alpha = 255\n                alpha += FU.add(0, syl.duration, -255)\n                alpha = Convert.alpha_dec_to_ass(int(alpha))\n                l.text = (\n                    \"{\\\\alpha%s\\\\pos(%.3f,%.3f)\\\\bord1\\\\blur1\\\\1c%s\\\\3c%s\\\\p1}%s\"\n                    % (alpha, x, y, c1, c3, star)\n                )\n                io.write_line(l)\n        # Jump to the next syl or to the end of line\n        jump_width = (\n            line.syls[syl.i + 1].center - syl.center\n            if syl.i != len(line.syls) - 1\n            else syl.width\n        )\n        # FU = FrameUtility(\n        #     line.start_time + syl.start_time, line.start_time + syl.end_time"
        },
        {
            "comment": "Code snippet applies a star jumping effect to the text of each syllable in a line, and adds a leadout effect at the end. The star jumping effect adjusts the position and fades out the last jump, while the leadout effect is triggered after all syllables have been processed.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/starJumping.py\":152-185",
            "content": "        # )\n        FU = FrameUtility(syl.start_time, syl.end_time)\n        for s, e, i, n in FU:\n            l.start_time = s\n            l.end_time = e\n            frame_pct = i / n\n            x = syl.center + frame_pct * jump_width\n            y = syl.top - math.sin(frame_pct * math.pi) * jump_height\n            alpha = 0\n            # Last jump should fade-out\n            if syl.i == len(line.syls) - 1:\n                alpha += FU.add(0, syl.duration, 255)\n            alpha = Convert.alpha_dec_to_ass(int(alpha))\n            l.text = \"{\\\\alpha%s\\\\pos(%.3f,%.3f)\\\\bord1\\\\blur1\\\\1c%s\\\\3c%s\\\\p1}%s\" % (\n                alpha,\n                x,\n                y,\n                c1,\n                c3,\n                star,\n            )\n            io.write_line(l)\n    # Leadout Effect\n    for syl in Utils.all_non_empty(line.syls):\n        l.layer = 0\n        l.start_time = syl.end_time\n        # l.start_time = line.start_time + syl.end_time + 100\n        l.end_time = line.end_time\n        # l.end_time = line.end_time - 25 * (len(line.syls) - syl.i) + delay + 100"
        },
        {
            "comment": "This code snippet is adding leadin effects to a line of text. It calculates the start time and duration for each syllable in the line, adjusting the position of the \\move effect based on the syllable index. The delay value is used as the duration for leadin and leadout effects.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/starJumping.py\":186-220",
            "content": "        # l.end_time = line.end_time - 25 * (len(line.syls) - syl.i) + delay + 100\n        l.dur = l.end_time - l.start_time\n        if l.dur <= 0:\n            continue\n        l.text = (\n            \"{\\\\an5\\\\move(%.3f,%.3f,%.3f,%.3f,%d,%d)\\\\t(%d,%d,\\\\blur2)\\\\fad(0,%d)}%s\"\n            % (\n                syl.center,\n                syl.middle,\n                syl.center + math.cos(syl.i / 2) * off_x,\n                syl.middle + math.sin(syl.i / 4) * off_y,\n                l.dur - delay,\n                l.dur,\n                l.dur - delay,\n                l.dur,\n                delay,\n                syl.text,\n            )\n        )\n        io.write_line(l)\ndef kanji(line, l):\n    # Setting up a delay, we will use it as duration time of the leadin and leadout effects\n    delay = 300\n    # Setting up offset variables, we will use them for the \\move in leadin and leadout effects\n    off_x = 35\n    off_y = 15\n    # Leadin Effect\n    for syl in Utils.all_non_empty(line.syls):\n        l.layer = 0\n        l.start_time = line.start_time"
        },
        {
            "comment": "Code snippet is defining a star jumping animation effect for syllables in a line of karaoke lyrics. It calculates start and end times, layer, and text positioning based on syllable index and other variables. The main effect is applied to all non-empty syllables with a duration of 100ms extra to ensure it finishes properly.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/starJumping.py\":222-253",
            "content": "        # l.start_time = (\n        #     line.start_time + 25 * syl.i - delay - 80\n        # )  # Remove 80 to start_time to let leadin finish a little bit earlier than the main effect of the first syllable\n        l.end_time = syl.start_time\n        # l.end_time = line.start_time + syl.start_time\n        l.dur = l.end_time - l.start_time\n        if l.dur <= 0:\n            continue\n        l.text = (\n            \"{\\\\an5\\\\move(%.3f,%.3f,%.3f,%.3f,0,%d)\\\\blur2\\\\t(0,%d,\\\\blur0)\\\\fad(%d,0)}%s\"\n            % (\n                syl.center + math.cos(syl.i / 2) * off_x,\n                syl.middle + math.sin(syl.i / 4) * off_y,\n                syl.center,\n                syl.middle,\n                delay,\n                delay,\n                delay,\n                syl.text,\n            )\n        )\n        io.write_line(l)\n    # Main Effect\n    for syl in Utils.all_non_empty(line.syls):\n        l.layer = 1\n        l.start_time = syl.start_time\n        # l.start_time = line.start_time + syl.start_time\n        l.end_time = syl.end_time + 100"
        },
        {
            "comment": "This code dynamically sets the colors and applies rotation based on an \"effect\" field. If \"m1\", it changes colors, if \"m2\", applies rotation using a random angle within -40 to 40 degrees. The applied effects are combined with other formatting attributes to create the final line of text which is then written out.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/starJumping.py\":254-290",
            "content": "        l.dur = l.end_time - l.start_time\n        c1 = \"&H81F4FF&\"\n        c3 = \"&H199AAA&\"\n        # Change color if effect field is m1\n        if line.effect == \"m1\":\n            c1 = \"&H8282FF&\"\n            c3 = \"&H191AAA&\"\n        on_inline_effect_2 = \"\"\n        # Apply rotation if effect field is m2\n        if line.effect == \"m2\":\n            on_inline_effect_2 = \"\\\\t(0,%d,\\\\frz%.3f)\\\\t(%d,%d,\\\\frz0)\" % (\n                l.dur / 4,\n                random.uniform(-40, 40),\n                l.dur / 4,\n                l.dur,\n            )\n        l.text = (\n            \"{\\\\an5\\\\pos(%.3f,%.3f)%s\\\\t(0,80,\\\\fscx105\\\\fscy105\\\\1c%s\\\\3c%s)\\\\t(80,%d,\\\\fscx100\\\\fscy100\\\\1c%s\\\\3c%s)}%s\"\n            % (\n                syl.center,\n                syl.middle,\n                on_inline_effect_2,\n                c1,\n                c3,\n                l.dur - 80,\n                line.styleref.color1,\n                line.styleref.color3,\n                syl.text,\n            )\n        )\n        io.write_line(l)\n    # Leadout Effect"
        },
        {
            "comment": "The code iterates through non-empty syllables in a line, sets the layer and start time for each, calculates end time and duration, then creates a translation effect by writing it to the output.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/starJumping.py\":291-326",
            "content": "    for syl in Utils.all_non_empty(line.syls):\n        l.layer = 0\n        l.start_time = syl.end_time + 100\n        # l.start_time = line.start_time + syl.end_time + 100\n        l.end_time = line.end_time\n        # l.end_time = line.end_time - 25 * (len(line.syls) - syl.i) + delay + 100\n        l.dur = l.end_time - l.start_time\n        if l.dur <= 0:\n            continue\n        l.text = (\n            \"{\\\\an5\\\\move(%.3f,%.3f,%.3f,%.3f,%d,%d)\\\\t(%d,%d,\\\\blur2)\\\\fad(0,%d)}%s\"\n            % (\n                syl.center,\n                syl.middle,\n                syl.center + math.cos(syl.i / 2) * off_x,\n                syl.middle + math.sin(syl.i / 4) * off_y,\n                l.dur - delay,\n                l.dur,\n                l.dur - delay,\n                l.dur,\n                delay,\n                syl.text,\n            )\n        )\n        io.write_line(l)\ndef sub(line, l):\n    # Translation Effect\n    l.layer = 0\n    l.start_time = line.start_time - line.leadin / 2\n    l.end_time = line.end_time + line.leadout / 2"
        },
        {
            "comment": "This code is creating a line of text with interpolated color changes and random clipped, colored text for karaoke effects. It sets the duration, gets color change values, defines the text's position and fade-in/out duration, writes the base text, and generates multiple lines with randomly clipped, colored text based on the line width.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/starJumping.py\":327-364",
            "content": "    l.dur = l.end_time - l.start_time\n    # Getting interpolated color changes (notice that we do that only after having set up all the times, that's important)\n    colors = CU.get_color_change(l)\n    # Base text\n    l.text = \"{\\\\an5\\\\pos(%.3f,%.3f)\\\\fad(%d,%d)}%s\" % (\n        line.center,\n        line.middle,\n        line.leadin / 2,\n        line.leadout / 2,\n        line.text,\n    )\n    io.write_line(l)\n    # Random clipped text colorated\n    l.layer = 1\n    for i in range(1, int(line.width / 80)):\n        x_clip = line.left + random.uniform(0, line.width)\n        y_clip = line.top - 5\n        clip = (\n            x_clip,\n            y_clip,\n            x_clip + random.uniform(10, 30),\n            y_clip + line.height + 10,\n        )\n        l.text = \"{\\\\an5\\\\pos(%.3f,%.3f)\\\\fad(%d,%d)\\\\clip(%d,%d,%d,%d)%s}%s\" % (\n            line.center,\n            line.middle,\n            line.leadin / 2,\n            line.leadout / 2,\n            clip[0],\n            clip[1],\n            clip[2],\n            clip[3],\n            colors,"
        },
        {
            "comment": "The code is generating lines and applying modifications to them based on alignment values. It then creates new line objects with adjusted start and end times, duration, text content, and splits the text into words. The code also calculates word position shifts and other variables for further processing.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/starJumping.py\":365-402",
            "content": "            line.text,\n        )\n        io.write_line(l)\nfor line in lines:\n    # Generating lines\n    if line.styleref.alignment >= 7:\n        lineModSource = line.copy()\n        break\n    elif line.styleref.alignment >= 4:\n        lineModSource = line.copy()\n        break\nfrom test_pylrc import *\n# just a test.\nshiftAdjust = 600\nfor elem in newTextArray:\n    lineMod = lineModSource.copy()\n    lineMod.start_time = max(0, elem[\"start\"] * 1000 - shiftAdjust)\n    lineMod.end_time = elem[\"end\"] * 1000 - shiftAdjust\n    lineMod.duration = lineMod.end_time - lineMod.start_time\n    lineMod.text = elem[\"text\"].strip().replace(\"  \", \"\")\n    # print(lineMod)\n    lineMod.words = lineMod.text.split(\" \")\n    # lineMod.syls =\n    # print(dir(lineMod))\n    # breakpoint()\n    sylList = []\n    wordCount = len(lineMod.words)\n    sylDuration = (lineMod.end_time - lineMod.start_time) / wordCount\n    textLength = len(lineMod.text)\n    charShift = 30\n    absWordCenterShiftList = []\n    prevWordShift = 0\n    CENTER = 1600 / 2\n    wordWidthList = []"
        },
        {
            "comment": "This code calculates word positions and dimensions for a karaoke effect. It iterates through each word in a line, determines the width of each word based on character shift, and then calculates the center position and overall position of the word. Finally, it creates an instance of the Syllable class for each word with the calculated properties and sets the start time based on the word index and duration.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/starJumping.py\":403-428",
            "content": "    for word in lineMod.words:\n        wordWidth = len(word) * charShift\n        wordWidthList.append(wordWidth)\n        wordLength = len(word) + 1\n        wordCenterShift = (charShift * wordLength) / 2\n        wordShift = charShift * wordLength\n        absWordCenterShift = (\n            CENTER - (textLength * charShift) / 2 + prevWordShift + wordCenterShift\n        )\n        absWordCenterShiftList.append(absWordCenterShift)\n        prevWordShift += wordShift\n    # CENTER + centerShift*charShift\n    getCenter = lambda index: absWordCenterShiftList[index]\n    getWidth = lambda index: wordWidthList[index]\n    mSylYShift = 700\n    for index, word in enumerate(lineMod.words):\n        syl = Syllable()\n        syl.text = word\n        syl.i = index\n        syl.center = getCenter(index)\n        syl.width = getWidth(index)\n        syl.top = 25 + mSylYShift\n        syl.inline_fx = \"m2\"\n        syl.middle = 49.0 + mSylYShift\n        syl.bottom = 73.0 + mSylYShift\n        syl.start_time = lineMod.start_time + index * sylDuration"
        },
        {
            "comment": "This code is manipulating and modifying a line of karaoke lyrics by adding a translation shift, updating the syllable positions, and applying kanji (Chinese characters) to specific alignments. It then saves the changes and opens an associated video file for playback.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/starJumping.py\":429-459",
            "content": "        syl.end_time = syl.start_time + sylDuration\n        syl.duration = sylDuration\n        sylList.append(syl)\n    lineMod.syls = sylList\n    # print(lineMod.syls)\n    # breakpoint()\n    # pyonfx.ass_core.Syllable\n    source = lineMod.copy()\n    target = lineMod.copy()\n    romaji(source, target)\n    lineMod2 = lineMod.copy()\n    translateShift = -200\n    for i in range(len(lineMod2.syls)):\n        lineMod2.syls[i].top += translateShift\n        lineMod2.syls[i].middle += translateShift\n        lineMod2.syls[i].bottom += translateShift\n    source = lineMod2.copy()\n    target = lineMod2.copy()\n    # elif line.styleref.alignment >= 4:\n    kanji(source, target)\n    # else:\n    #     sub(line, line.copy())\n# how to deal with the tra\nio.save()\n# io.open_aegisub()\nsample_video = \"/root/Desktop/works/pyjom/samples/video/karaoke_effects_source.mp4\"\nio.open_mpv(video_path=sample_video)  # ain't see shit..."
        }
    ]
}