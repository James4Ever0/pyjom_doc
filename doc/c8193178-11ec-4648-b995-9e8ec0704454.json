{
    "summary": "The code includes two image processing functions, beauty_face and beauty_face2, which enhance facial features using Gaussian blur, bilateral filtering, and custom processing. The results are saved as 'result1.png' and 'result2.png'. The source image file is set to \"IMG_20220515_2220565.jpg\" and the init function is called with this source parameter for potential further manipulations or analysis.",
    "details": [
        {
            "comment": "The code defines two functions, beauty_face and beauty_face2. The beauty_face function applies a series of image processing operations to create a smoothed and enhanced version of the input image. This includes bilateral filtering, subtraction, Gaussian blurring, addition, and weighted addition. The beauty_face2 function is similar but processes a different source image.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/skin_clean/process_image.py\":2-40",
            "content": "import numpy as np\nimport cv2\ndef beauty_face(img):\n    '''\n    Dest =(Src * (100 - Opacity) + (Src + 2 * GuassBlur(EPFFilter(Src) - Src + 128) - 256) * Opacity) /100 ;\n    https://my.oschina.net/wujux/blog/1563461\n    '''\n    dst = np.zeros_like(img)\n    #int value1 = 3, value2 = 1; \u78e8\u76ae\u7a0b\u5ea6\u4e0e\u7ec6\u8282\u7a0b\u5ea6\u7684\u786e\u5b9a\n    v1 = 3\n    v2 = 1\n    dx = v1 * 5 # \u53cc\u8fb9\u6ee4\u6ce2\u53c2\u6570\u4e4b\u4e00 \n    fc = v1 * 12.5 # \u53cc\u8fb9\u6ee4\u6ce2\u53c2\u6570\u4e4b\u4e00 \n    p = 0.1\n    temp4 = np.zeros_like(img)\n    temp1 = cv2.bilateralFilter(img,dx,fc,fc)\n    temp2 = cv2.subtract(temp1,img)\n    temp2 = cv2.add(temp2,(10,10,10,128))\n    temp3 = cv2.GaussianBlur(temp2,(2*v2 - 1,2*v2-1),0)\n    temp4 = cv2.add(img,temp3)\n    dst = cv2.addWeighted(img,p,temp4,1-p,0.0)\n    dst = cv2.add(dst,(10, 10, 10,255))\n    return dst\ndef beauty_face2(src):\n    '''\n    Dest =(Src * (100 - Opacity) + (Src + 2 * GuassBlur(EPFFilter(Src) - Src + 128) - 256) * Opacity) /100 ;\n    '''\n    dst = np.zeros_like(src)\n    #int value1 = 3, value2 = 1; \u78e8\u76ae\u7a0b\u5ea6\u4e0e\u7ec6\u8282\u7a0b\u5ea6\u7684\u786e\u5b9a\n    v1 = 3\n    v2 = 1\n    dx = v1 * 5 # \u53cc\u8fb9\u6ee4\u6ce2\u53c2\u6570\u4e4b\u4e00 \n    fc = v1 * 12.5 # \u53cc\u8fb9\u6ee4\u6ce2\u53c2\u6570\u4e4b\u4e00 "
        },
        {
            "comment": "Code applies image processing techniques to enhance facial features. It uses Gaussian blur, bilateral filtering, and custom beauty_face/beauty_face2 functions. The processed images are displayed in separate windows and saved as 'result1.png' and 'result2.png'.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/skin_clean/process_image.py\":41-78",
            "content": "    p = 0.1\n    temp4 = np.zeros_like(src)\n    temp1 = cv2.bilateralFilter(src,dx,fc,fc)\n    temp2 = cv2.subtract(temp1,src)\n    temp2 = cv2.add(temp2, (10,10,10,128))\n    temp3 = cv2.GaussianBlur(temp2,(2*v2 - 1,2*v2-1),0)\n    temp4 = cv2.subtract(cv2.add(cv2.add(temp3, temp3), src), (10, 10, 10, 255))\n    dst = cv2.addWeighted(src,p,temp4,1-p,0.0)\n    dst = cv2.add(dst, (10, 10, 10,255))\n    return dst\ndef init(source):\n    img = cv2.imread(source)\n    # blur1 = cv2.GaussianBlur(img, (5,5),0)\n    # blur2 = cv2.bilateralFilter(img, 9 , 75, 75)\n    blur3 = beauty_face(img)\n    blur4 = beauty_face2(img)\n    # cv2.imshow('image0', img)\n    # # cv2.imshow('image1', blur1)\n    # # cv2.imshow('image2', blur2)\n    # cv2.imshow('image3', blur3)\n    # cv2.imshow('image4', blur4)\n    # cv2.namedWindow('image', cv2.WINDOW_NORMAL)\n    # cv2.resizeWindow('image', 1000, 1000) #\u5b9a\u4e49frame\u7684\u5927\u5c0f\n    # cv2.waitKey(0)\n    cv2.imwrite('result1.png', blur3)\n    cv2.imwrite('result2.png', blur4)\n    # cv2.destroyAllWindows()\nif __name__ == \"__main__\":"
        },
        {
            "comment": "This code snippet sets the source image file name as \"IMG_20220515_2220565.jpg\" and calls the init function with this source parameter. The purpose of this step might be to initialize the image processing or loading process for further manipulations or analysis.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/skin_clean/process_image.py\":79-80",
            "content": "    source = \"IMG_20220515_2220565.jpg\"\n    init(source)"
        }
    ]
}