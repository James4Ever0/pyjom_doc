{
    "summary": "This code uses BeautifulSoup and JavaScript libraries to extract HTML data, processes it into a JSON object with view count and video length updates.",
    "details": [
        {
            "comment": "This code retrieves HTML from a specific target file, parses it using BeautifulSoup, and searches for scripts containing \"ytInitialData\" or \"ytInitialPlayerResponse\". It then uses JavaScript conversion libraries to extract the data from these scripts as Python objects. The data is stored in variables 'data' and 'data2', respectively.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/get_ytInitialData.py\":0-39",
            "content": "target = \"curl_dump_youtube.html\"\nfrom bs4 import BeautifulSoup\n# this is m.youtube.com/watch?v={videoId}\n# import esprima\nimport js2py\nsoup = open(target,\"r\",encoding=\"utf-8\").read()\nsoup = BeautifulSoup(soup,features=\"lxml\")\nscripts = soup.find_all(\"script\")\njsfunc = lambda x: \"function f9x() { \"+x+ \"  \\n return ytInitialData;}\"\njsfunc2 = lambda x: \"function f9x() { \"+x+ \"  \\n return ytInitialPlayerResponse;}\"\n# breakpoint()\nfrom commons import *\ndata = None\ndata2 = None\nfor script in scripts:\n    content = script.string\n    if content is not None:\n        if \"var ytInitialPlayerResponse = {\" in content:\n            print(\"HAS DATA\") # only one.\n            # script_obj = esprima.parse(content)\n            script_obj = jsfunc2(content)\n            # print(script_obj)\n            obj = js2py.eval_js(script_obj)\n            # print(obj)\n            data2 = obj() # need a json walker, from pyjom.\n            # breakpoint()\n    # print(content)\nfor script in scripts:\n    content = script.string\n    if content is not None:"
        },
        {
            "comment": "This code checks if the content contains \"var ytInitialData = {\" and then parses it using jsfunc, converts to Python object with js2py, extracts data, converts it to dictionaries, and defines some target variables.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/get_ytInitialData.py\":40-66",
            "content": "        if \"var ytInitialData = {\" in content:\n            print(\"HAS DATA\") # only one.\n            # script_obj = esprima.parse(content)\n            script_obj = jsfunc(content)\n            # print(script_obj)\n            obj = js2py.eval_js(script_obj)\n            # print(obj)\n            data = obj() # need a json walker, from pyjom.\n            # breakpoint()\n    # print(content)\n    # print(\"================================\")\n#     # breakpoint()\ndata_dict =  data.to_dict()\ndata2_dict =  data2.to_dict()\n# print(type(data))\n# breakpoint()\ntarget1 = [\"viewCountText\",\"lengthText\",\"publishedTimeText\"]\ntargets = [\"videoId\", \"simpleText\"]\ninits = ['contents', 'twoColumnWatchNextResults', 'secondaryResults', 'secondaryResults', 'results']\n# inits2 = ['contents', 'twoColumnWatchNextResults', 'secondaryResults', 'secondaryResults', 'results']\nends2 = {\"title\":['compactVideoRenderer', 'title', 'simpleText'],\"viewCountText\": ['compactVideoRenderer', 'viewCountText', 'simpleText'],\"publishTime\":['compactVideoRe"
        },
        {
            "comment": "This code appears to extract specific data from a JSON object, specifically looking for keys that match certain endings and initials. The extracted data is then stored in a dictionary called \"videoDicts\" with the index as the key and the type and value of the data as the values. The purpose seems to be extracting specific information from the given JSON data, potentially for further use or processing.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/get_ytInitialData.py\":66-87",
            "content": "nderer', 'publishedTimeText', 'simpleText'],\"lengthText\":['compactVideoRenderer', 'lengthText', 'simpleText'],\"videoId\":['compactVideoRenderer', 'videoId']}\nvideoDetails = data2_dict[\"videoDetails\"]\nvideoDetails = {k:videoDetails[k] for k in [\"viewCount\",\"author\",\"keywords\",\"channelId\",\"shortDescription\",\"lengthSeconds\",\"videoId\",\"title\"]}\n# \"https://i.ytimg.com/vi_webp/{videoId}/maxresdefault.webp # default cover.\nvideoDicts = {}\nfor key, content in json.walk(data_dict):\n    # print(key)\n    final_key = key[-1]\n    if final_key in targets:\n        if list_startswith(key,inits):\n            for k in ends2.keys():\n                v = ends2[k]\n                if list_endswith(key,v):\n                    valueType = k\n                    value = content\n                    valueIndex = key[len(inits)]\n                    if valueIndex not in videoDicts.keys():\n                        videoDicts[valueIndex] = {}\n                    # print(valueIndex,valueType,value)\n                    videoDicts[valueIndex].update({valueType:value})"
        },
        {
            "comment": "This code iterates over the 'videoDicts' dictionary, extracting and updating the view count and video length (in seconds) for each video. The extracted information is stored as values in the dictionary with keys \"viewCount\" and \"lengthSeconds\". Finally, it prints the updated 'videoDicts' dictionary and the 'videoDetails'.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/get_ytInitialData.py\":88-115",
            "content": "                    break\n        # print(key)  # i want to know the views of these.\n    # breakpoint()\ndef getViewCount(vc): return vc.replace(\",\",\"\").split(\" \")[0]\ndef getLengthSeconds(lt):\n    lt0 = lt.split(\":\")\n    assert len(lt0) <=5 # no more than week please?\n    dicIndex = {0:1,1:60,2:60*60,3:60*60*24,4:60*60*24*7}\n    seconds = 0\n    for i,v in enumerate(reversed(lt0)):\n        vn = int(v)\n        vs = vn*dicIndex[i]\n        seconds += vs\n    return str(seconds)\nfor k in videoDicts.keys():\n    v = videoDicts[k]\n    viewCount = getViewCount(v[\"viewCountText\"])\n    v.update({\"viewCount\":viewCount})\n    lengthSeconds = getLengthSeconds(v[\"lengthText\"])\n    v.update({\"lengthSeconds\":lengthSeconds})\n    print(v)\n    # for k0 in ends2.keys():\n    #     assert k0 in v.keys()\nprint(videoDetails)"
        }
    ]
}