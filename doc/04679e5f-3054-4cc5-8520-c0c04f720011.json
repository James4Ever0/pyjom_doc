{
    "summary": "This code generates 30 random clip lengths using a truncated Gaussian distribution with mean and standard deviation, ensuring values are within specified bounds. It utilizes the truncnorm function from scipy.stats for generating the distribution.",
    "details": [
        {
            "comment": "This code generates 30 random clip lengths using a truncated Gaussian distribution with mean and standard deviation, ensuring values are within specified bounds. It utilizes the truncnorm function from scipy.stats for generating the distribution.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/generate_random_clip_lengths.py\":0-20",
            "content": "std, mean = 1.6674874515595588, 2.839698412698412\nscale, loc = std, mean\n# using gaussian distribution\n# accepting both mean and standard deviation\n# this is truncated gaussian, not just normal distribution\nmyclip_a, myclip_b = 0.6, 7.833\n# while you need to make sure the value is in bound.\n# import random\nfrom scipy.stats import truncnorm\na, b = (myclip_a - loc) / scale, (myclip_b - loc) / scale\nrandVar = truncnorm(a,b)\nrandomFunction = lambda: randVar.rvs(1)[0]*scale+loc\n# inBound = lambda number: min(nMax, max(nMin, number))\n# randomFunction = lambda: inBound(random.gauss(mean, std))\nfor _ in range(30):\n    print(randomFunction())"
        }
    ]
}