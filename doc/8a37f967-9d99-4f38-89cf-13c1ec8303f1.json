{
    "summary": "This code defines 'detect_qr' function to detect and decode QR codes using pyzbar library. It prints information about each detected QR code, returns True if found. The code attempts to read a QR code from an image, resizes it for visibility, and calls the \"detect_qr\" function.",
    "details": [
        {
            "comment": "This code defines a function named 'detect_qr' that detects and decodes QR codes from a given input frame. It utilizes the pyzbar library to decode QR codes, converts the input frame to an Image object using PIL, and then prints information about each detected QR code such as its content and polygon coordinates. The function returns True if any QR codes are detected, otherwise it returns False. The image variable is set to \"output_qrcode2.png\", but there's a commented-out line suggesting using \"test_image_with_qr_code.png\" instead.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/zbar_detect_qrcode.py\":1-35",
            "content": "# import sys\nimport cv2\n# import imutils\nfrom PIL import Image\nfrom pyzbar.pyzbar import decode, ZBarSymbol\n# @function 'detect_qr' detect and decode qrcode from frame using pyzbar lib\n# @param 'inputFrame' type <class 'numpy.ndarray'>\n# @return if detected type 'bool'\ndef detect_qr(inputFrame):\n    img = Image.fromarray(inputFrame)\n    decodedImg = decode(img, symbols=[ZBarSymbol.QRCODE])\n    # it reads the content. but where is the code?\n    print('total %d qrcode detected' % len(decodedImg))\n    # breakpoint()\n    # length: 2\n    if len(decodedImg) > 0:\n        for code in decodedImg:\n            decodedBytes = code.data\n            stringData = decodedBytes.decode(\"utf-8\")\n            print(\"QRCode content:\")\n            print(stringData)\n            polygon = code.polygon\n            print('POLYGON CONTENT:')\n            print(polygon)\n            for point in polygon:\n                print('POINT:',point.x,point.y)\n        return True\n    else:\n        return False\nimage = \"output_qrcode2.png\"\n# image = \"test_image_with_qr_code.png\" # what about this?"
        },
        {
            "comment": "This code attempts to read a QR code from an image. If the resolution is low, it resizes the image to ensure the QR code is visible and then calls the \"detect_qr\" function. The code assumes there's usually only one QR code per image for scanning in QQ.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/zbar_detect_qrcode.py\":36-45",
            "content": "# it fails. so we better have some other way to get the barcode.\n# if resolution is low, resize the image and make sure it will contain the qrcode, make it readable.\ninputImage = cv2.imread(image)\n# frame = imutils.resize(inputImage, width=400)\nprint(detect_qr(inputImage))\n# fantastic.\n# usually there should be no more than 1 qrcode in image to allow user to scan the code in qq."
        }
    ]
}