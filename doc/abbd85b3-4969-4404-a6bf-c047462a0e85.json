{
    "summary": "This code resizes an image, generates a video, and creates Editly specification files. It utilizes multiple modules for handling file operations and parameter definitions, then writes the script to a file, executes it, and removes temporary files.",
    "details": [
        {
            "comment": "This code reads an image, calculates its aspect ratio, scales it to a specific resolution (1920x1080), and saves the result. If there's still some padding needed for the new height, it pads the top with white space before saving again. The goal is to create a properly formatted image for use as video cover.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/split_long_image_into_video/generate_video.py\":0-35",
            "content": "# to get a proper cover, let's simply crop.\n# to find a proper title for this video, extract keywords, generate title and find the best cover by embeddings.\n# first, get picture aspect.\nimport cv2\ndef getWidthHeight(impath):\n    d = cv2.imread(impath)\n    # print(d.shape)\n    height, width, channels = d.shape\n    return width, height\nim0 = \"long_and_funny_image_about_ai_painting.jpg\"\nim1 = \"intermediate.png\"\n# very high, low width.\n# calculate actual output?\nmheight, mwidth = 1080, 1920\nwidth, height = getWidthHeight(im0)\nimport ffmpeg\nffmpeg.input(im0).filter(\"scale\", w=mwidth, h=-1).output(im1).run(overwrite_output=True)\nwidth0, height0 = getWidthHeight(im1)\npad_total =( mheight-(height0 % mheight)) % mheight\n# print(\"PAD TOTAL?\", pad_total)\n# breakpoint()\nif pad_total != 0:\n    im2 = \"intermediate_0.png\"\n    pad_above = pad_total // 2\n    pad_below = pad_total - pad_above\n    # then you must rewrite this shit.\n    ffmpeg.input(im1).filter(\n        \"pad\", w=\"iw\", h=\"ih+{}\".format(pad_total), x=0, y=pad_above, color=\"white\""
        },
        {
            "comment": "This code generates a video from a long image, chops it into parts, and then creates an editly specification file for further processing. It handles overwriting files if necessary, sorts the output image files, and defines various parameters such as layout, fps, and duration. The code also imports several modules (os, shutil, math, re) to perform operations like creating directories, removing tree structures, sorting files, and manipulating file paths.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/split_long_image_into_video/generate_video.py\":36-88",
            "content": "    ).output(im2).run(overwrite_output=True)\nelse:\n    im2 = im1\n# then chop it up.\nimport os\nimport shutil\nmdir = \"output\"\nfout = \"output%d.png\"\nif os.path.exists(mdir):\n    shutil.rmtree(mdir)\nos.mkdir(mdir)\nmfout = os.path.join(mdir, fout)\nimport math\nmh = math.ceil(height0 / mheight)\nmlayout = \"1x{}\".format(mh)\nffmpeg.input(im2).filter(\"untile\", layout=mlayout).output(mfout).run(\n    overwrite_output=True\n)\nmfiles = os.listdir(mdir)\nimport re\noutput_path = \"./output.mp4\"\nmfiles.sort(key=lambda x: int(re.findall(r\"[0-9]+\", x)[0]))\neditly_script = {\n    \"width\": mwidth,\n    \"height\": mheight,\n    \"fps\": 60,\n    \"outPath\": output_path,\n    \"defaults\": {\n        \"transition\": {\n            \"duration\": 0.5,\n            \"name\": \"random\",\n            \"audioOutCurve\": \"tri\",\n            \"audioInCurve\": \"tri\",\n        },\n        \"duration\": 3,\n    },\n    \"clips\": [\n        {\"layers\": [{\"type\": \"image\", \"path\": os.path.join(mdir, mfile)}]}\n        for mfile in mfiles\n    ],\n    \"audioFilePath\": \"the_happy_troll.mp3\",\n}\nimport json5\neditly_spec_file = \"spec_file.json5\""
        },
        {
            "comment": "Writing the Editly script to a file, then executing it with temporary environment variables and removing temporary files.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/split_long_image_into_video/generate_video.py\":89-96",
            "content": "with open(editly_spec_file, \"w+\") as fp:\n    json5.dump(editly_script, fp)\n# now execute\nimport os\nos.system(\"rm -rf editly-tmp*\")\nos.system(\"xvfb-run editly {}\".format(editly_spec_file))"
        }
    ]
}