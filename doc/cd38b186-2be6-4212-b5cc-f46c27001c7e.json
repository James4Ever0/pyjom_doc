{
    "summary": "The code initializes and adjusts various objects, calculates aspect ratio, applies image transformations and text painting, creates a play button and QR code using Pixie library, handles ad images with masks, and considers night mode.",
    "details": [
        {
            "comment": "This code reads an image, calculates its aspect ratio, and then performs various tasks like adjusting the font path based on the night mode, creating a QR code string and a stats text string. It also initializes an image object of specific dimensions and creates a white and black color objects using pixie library. If not in framework-only mode, it checks if night mode is active.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/ad_template_2.py\":0-37",
            "content": "import pixie\nfrom lazero.utils.importers import cv2_custom_build_init\ncv2_custom_build_init()\nimport cv2\ndef getImageW2H(image_path):\n    image = cv2.imread(image_path)\n    height, width = image.shape[:2]\n    w2h = width / height\n    return w2h\nnight_mode = True\nframework_only = False\n# framework_only=True\nad_width, ad_height = 1000, 1000\nfont_path = \"./wqy-microhei0.ttf\"\nfont_bold_path = \"./wqy-microhei1.ttf\"\ncover_path = \"sample_cover.jpg\"\nqrcode_path = \"MyQRCode1.png\"\nplay_button_path = \"play_white_b.png\"\n# play_button_path = \"play_b.png\"\nbilibili_logo_path = \"bili_white_b_cropped.png\"\nplay_count = comment_count = danmaku_count = \"1\u4e07\"\n# one extra space.\nstats_text = \" {}\u64ad\u653e {}\u8bc4\u8bba {}\u5f39\u5e55\".format(play_count, comment_count, danmaku_count)\nqrcode_scan_text = \"\\n\" + \"\\n\".join(list(\"\u626b\u7801\u89c2\u770b\"))\ntitle_text = \"\u771f\u00b7\u670b\u514b\uff01\u63ed\u79d8\u300a\u8d5b\u535a\u670b\u514b2077\u300b\u5c4f\u5e55\u4e4b\u5916\u7684\u9b54\u5e7b\u6362\u5f39\u64cd\u4f5c\"\nwhite = pixie.Color(1, 1, 1, 1)\nblack = pixie.Color(0, 0, 0, 1)\nimage = pixie.Image(ad_width, ad_height)\n# we are creating this, not replacing qr code.\nif not framework_only:\n    if night_mode:"
        },
        {
            "comment": "Code resizes cover image to fit 90% of the ad width, sets round corner radius for the cover, reads cover image and creates a gradient paint with two handle positions and color stops. It also generates a rounded rectangular mask path for the cover.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/ad_template_2.py\":38-70",
            "content": "        image.fill(black)\n        # irreversible!\n    else:\n        image.fill(white)\nelse:\n    image2 = image.copy()  # as mask.\n# place the cover.\ncover_w2h = getImageW2H(cover_path)\ncover_width = int(ad_width * 0.9)\ncover_height = int(cover_width / cover_w2h)\ncover_round_corner_radius = int(ad_width * 0.05)\ncover = pixie.read_image(cover_path)\ncover = cover.resize(cover_width, cover_height)\n# cover gradient.\ngradient_paint = pixie.Paint(pixie.LINEAR_GRADIENT_PAINT)\ngradient_paint.gradient_handle_positions.append(\n    pixie.Vector2(100, int(cover_height) * 0.8)\n)\ngradient_paint.gradient_handle_positions.append(pixie.Vector2(100, cover_height))\ngradient_paint.gradient_stops.append(pixie.ColorStop(pixie.Color(0, 0, 0, 0), 0))\ngradient_paint.gradient_stops.append(pixie.ColorStop(pixie.Color(0, 0, 0, 0.3), 1))\ncover_mask_path = pixie.Path()\ncover_mask_path.rounded_rect(\n    0, 0, cover_width, cover_height, *([cover_round_corner_radius] * 4)\n)\nstroke_param = 100\nstroke_width = int(ad_width / stroke_param)\nstroke_width_half = int(ad_width / stroke_param / 2)"
        },
        {
            "comment": "This code generates a rounded rectangle mask for an image, applies it to the cover image, and applies a stroke paint with specific color. It also creates a Paint object for possible future use but does not fill in any content if framework_only is True. The stroke width is specified and the transformed width and height of the cover are calculated.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/ad_template_2.py\":71-109",
            "content": "cover_mask_path2 = pixie.Path()\ncover_round_corner_radius2 = int(cover_round_corner_radius * 0.85)\ncover_mask_path2.rounded_rect(\n    stroke_width_half,\n    stroke_width_half,\n    cover_width - stroke_width,\n    cover_height - stroke_width,\n    *([cover_round_corner_radius2] * 4)\n)\n# path = cover_mask_path\n# cover.fill_path(cover_mask_path, gradient_paint)\ncover_mask = pixie.Mask(cover_width, cover_height)\ncover_mask.fill_path(cover_mask_path)\ncover.mask_draw(cover_mask)\ncover_transform_width = cover_transform_height = int((ad_width - cover_width) / 2)\ncover_transform = pixie.translate(cover_transform_width, cover_transform_height)\nif framework_only:\n    # image2.fill(black)\n    image2_paint = pixie.Paint(pixie.SOLID_PAINT)\n    image2_paint.color = white\n    image2.fill_path(cover_mask_path, image2_paint, cover_transform)\ncover_stroke_paint = pixie.Paint(pixie.SOLID_PAINT)\ncover_stroke_paint.color = pixie.parse_color(\"#FC427B\")\nimage.stroke_path(\n    cover_mask_path,\n    cover_stroke_paint,\n    cover_transform,\n    stroke_width=stroke_width,"
        },
        {
            "comment": "This code draws a cover image and adds the Bilibili logo and play button on top of it. It resizes the logo and play button to be 20% of the ad width, applies gradient fill to the mask path, and positions the elements accordingly.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/ad_template_2.py\":110-137",
            "content": ")\nif not framework_only:\n    image.draw(cover, cover_transform)  # you can choose to discard the cover\nimage.fill_path(cover_mask_path2, gradient_paint, cover_transform)\n# now place the bilibili logo.\nbilibili_logo = pixie.read_image(bilibili_logo_path)\nbilibili_logo_w2h = getImageW2H(bilibili_logo_path)\nbilibili_logo_width = int(ad_width * 0.2)\nbilibili_logo_height = int(bilibili_logo_width / bilibili_logo_w2h)\nbilibili_logo = bilibili_logo.resize(bilibili_logo_width, bilibili_logo_height)\nbilibili_logo_transform = pixie.translate(\n    cover_transform_width + int(bilibili_logo_height / 8),\n    int(cover_transform_width + (bilibili_logo_height / 4)),\n)\n# bilibili_logo_transform = pixie.translate(\n#     cover_transform_width, 0\n# )\nimage.draw(bilibili_logo, bilibili_logo_transform)\n# now place the play button.\nplay_button = pixie.read_image(play_button_path)\nplay_button_w2h = getImageW2H(play_button_path)\nplay_button_width = play_button_height = int(ad_width * 0.2)\nplay_button = play_button.resize(play_button_width, play_button_height)"
        },
        {
            "comment": "This code is positioning and drawing a play button, adding some stats text, placing a QR code with a scan text, and adjusting the font size and color. It uses the Pixie library for image transformations and text painting. The code also considers night mode settings to adjust font color accordingly.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/ad_template_2.py\":139-169",
            "content": "play_button_transform = pixie.translate(\n    int(cover_transform_width + (cover_width - play_button_width) / 2),\n    int(cover_transform_width + (cover_height - play_button_height) / 2),\n)\nimage.draw(play_button, play_button_transform)\n# place some stats.\nfont = pixie.read_font(font_path)\nfont.size = int(ad_width * 0.04)\nfont.paint.color = pixie.Color(1, 1, 1, 1)\nstats_transform = pixie.translate(\n    int(cover_transform_width * 1.3),\n    cover_transform_width + cover_height - int(font.size * 2),\n)\nimage.fill_text(font, stats_text, transform=stats_transform)\n# place the qrcode.\nqrcode = pixie.read_image(qrcode_path)\nqrcode_width = qrcode_height = int(0.3 * ad_width)\nqrcode = qrcode.resize(qrcode_width, qrcode_height)\nfont = pixie.read_font(font_path)\nfont.size = int(ad_width * 0.04)\nif night_mode:\n    font.paint.color = pixie.Color(1, 1, 1, 1)\nelse:\n    font.paint.color = pixie.Color(0, 0, 0, 1)\nqrcode_scan_text_transform_x = int(ad_width - qrcode_width * 1.1 - font.size * 1)\nqrcode_scan_text_transform = pixie.translate("
        },
        {
            "comment": "The code creates a QR code and a title using the Pixie library. It first calculates the positions for both elements, fills text in the QR code, defines rounded corners and stroke path for the QR code, masks the QR code with its stroke path, draws the QR code on the image, selects font for the title, adjusts font color based on night mode, and finally fills the title on the image.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/ad_template_2.py\":170-208",
            "content": "    qrcode_scan_text_transform_x + qrcode_width, int(ad_height - qrcode_height * 1.1)\n)\nimage.fill_text(font, qrcode_scan_text, transform=qrcode_scan_text_transform)\nqrcode_transform = pixie.translate(\n    int(ad_width - qrcode_width * 1.1 - font.size * 1.2),\n    int(ad_height - qrcode_height * 1.1),\n)\nqrcode_rounded_corner = int(0.05 * ad_width)\nqrcode_stroke_path = pixie.Path()\nqrcode_stroke_path.rounded_rect(\n    0, 0, qrcode_width, qrcode_height, *([qrcode_rounded_corner] * 4)\n)\nimage.stroke_path(\n    qrcode_stroke_path,\n    cover_stroke_paint,\n    qrcode_transform,\n    stroke_width=stroke_width,\n)\nqrcode_mask = pixie.Mask(qrcode_width, qrcode_width)\nqrcode_mask.fill_path(qrcode_stroke_path)\nqrcode.mask_draw(qrcode_mask)\nimage.draw(qrcode, qrcode_transform)\n# now for the title\nfont = pixie.read_font(font_bold_path)\nfont.size = int(ad_width * 0.06)\nif night_mode:\n    font.paint.color = pixie.parse_color(\"#B0B0B0\")\nelse:\n    font.paint.color = pixie.parse_color(\"#4F4F4F\")\n# use some gray text.\n# font.paint.color = pixie.parse_color(\"#4F42B5\")"
        },
        {
            "comment": "The code sets the font color, determines text transformation and bounds for a title, fills the text in the image, creates a standalone cover image with a margin, writes the main ad image and optional mask images.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/ad_template_2.py\":209-231",
            "content": "# font.paint.color = pixie.parse_color(\"#FC427B\")\n# font.paint.color = pixie.Color(0,0,0,1)\ntitle_text_transform = pixie.translate(\n    int(font.size * 0.8), int(ad_height - qrcode_height * 1.1)\n)\ntitle_text_bounds = pixie.Vector2(\n    int(qrcode_scan_text_transform_x - font.size * 1.1), int(qrcode_height)\n)\nimage.fill_text(\n    font, title_text, bounds=title_text_bounds, transform=title_text_transform\n)\ndelta = int(cover_width * 0.02)\nsub_image_params = (\n    cover_transform_width - delta,\n    cover_transform_height - delta,\n    cover_width + 2 * delta,\n    cover_height + 2 * delta,\n)\nstandalone_cover_image = image.sub_image(*sub_image_params)\nstandalone_cover_image.write_file(\"ad_2_standalone_cover.png\")\nimage.write_file(\"ad_2.png\")\nif framework_only:\n    image2.sub_image(*sub_image_params).write_file(\"ad_2_mask.png\")"
        }
    ]
}