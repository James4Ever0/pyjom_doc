{
    "summary": "This code sets up a video processing task with image overlay, fade transition, and audio, saving a JSON object for Editly template and running the software using xvfb in subprocess.",
    "details": [
        {
            "comment": "This code is setting up variables for video processing, such as the input video path, uploader logo path, output path, font path, and image path. It also includes a title, audio path, and template name. The code uses the get_duration() function to determine the video duration and get_res() to retrieve the video's width and height. Lastly, it calculates a minimum video scalar value for editing purposes using editly.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py\":0-23",
            "content": "# maybe this time you can burn uploader logo to the video\n# the title of the video, intro, outro.\nvideo_path = \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/sample_video/sample_video.mp4\"\nup_image_path = (\n    \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/up_image.jpg\"\n)\noutput_path = \"output.mp4\"\nfontPath = \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/wqy-microhei0.ttf\"\ncat_image = (\n    \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/cat_image.jpg\"\n)\ntitle = \"\u4e16\u4e0a\u6240\u6709\u7684\u5c0f\u732b\\n\\n\u90fd\u662f\u5929\u4f7f\u53d8\u7684\uff01\" # add newline, change it into another catchy title, as compliment.\naudio_path = \"output.mp3.mp3\"\naudio_duration = 3.31\ntemplate_name = \"template.json\"\nfrom caer.video.frames_and_fps import get_duration, get_res\nvideo_duration = get_duration(video_path)\nvideo_width, video_height = get_res(video_path)\n# we shall use editly to do this job shall we?\nmin_video_scalar = min(video_width, video_height)\nup_image_scalar = int(min_video_scalar * 0.2)"
        },
        {
            "comment": "This code sets up parameters for an editly job, which involves overlaying an image with specific dimensions and applying a fade transition effect. The video's audio will be kept, and the job is set to a fast preview mode.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py\":24-56",
            "content": "up_image_width = up_image_scalar / video_width\nup_image_height = up_image_scalar / video_height\n# some parameters are using floating point numbers between 0 and 1\n# image overlay can be done in editly\n# no need to render that silly karaoke effects.\neditlyJson = {\n    \"outPath\": output_path,\n    \"width\": video_width,\n    \"height\": video_height,\n    \"fps\": 30,  # different from the default value.\n    \"fast\": True,  # just for preview. if not turning this on, will be too slow.\n    \"keepSourceAudio\": True,  # it does!\n    \"defaults\": {\n        \"transition\": {\n            \"duration\": 0.5,\n            \"name\": \"fade\",\n            \"audioOutCurve\": \"tri\",\n            \"audioInCurve\": \"tri\",\n        }\n    },\n    \"clips\": [\n        # {\n        #     \"duration\": 0.5,\n        #     \"layers\": [\n        #         # {\"type\": \"fill-color\", \"color\": \"#000000\"},\n        #         # {\"type\": \"detached-audio\", \"path\": audio_path}, # will make sure nothing visual presents.\n        #     ],\n        # },\n        # we disable this clip.\n        {"
        },
        {
            "comment": "This code is creating a video with a cat image overlay, title text, and an audio track. The order of layers is important, and the audio path comes first. The video is then transitioned with a fade effect and combined with another video file, along with an optional top-left image overlay.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py\":57-85",
            "content": "            \"duration\": audio_duration,\n            \"layers\": [\n                {\n                    \"type\": \"image-overlay\",\n                    \"path\": cat_image,\n                    \"position\": \"center\",\n                    \"width\": 1,\n                    \"height\": 1,\n                },\n                {\n                    # \"type\": \"title-background\",\n                    \"type\": \"title\",\n                    \"text\": title,\n                    # \"background\": \"#000000\",\n                    \"fontPath\": fontPath,\n                    \"textColor\": \"#FFFFFF\",\n                },\n                {\"type\": \"audio\", \"path\": audio_path},  # order matters!\n            ],\n        },\n        {\n            # \"transition\": \"fade\",  # or we just use random?\n            \"duration\": video_duration,\n            \"layers\": [\n                {\"type\": \"video\", \"path\": video_path},  # order is important.\n                {\n                    \"type\": \"image-overlay\",\n                    \"path\": up_image_path,\n                    \"position\": \"top-left\","
        },
        {
            "comment": "Code writes a JSON object for Editly video template, saves it to file, and runs the Editly software using subprocess with xvfb.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py\":86-107",
            "content": "                    \"width\": up_image_width,  # float numbers.\n                    \"height\": up_image_height,\n                },\n            ],\n        },\n        {\"duration\": 0.5, \"layers\": [{\"type\": \"fill-color\", \"color\": \"#000000\"}]},\n    ],\n}\nfrom lazero.filesystem.io import writeJsonObjectToFile\nwriteJsonObjectToFile(template_name, editlyJson)\nimport subprocess\n# use xvfb you SOB\ncommand = [\n    \"xvfb-run\",\n    \"editly\",\n    template_name,\n]  # no need to specify --out outputPath here\nsubprocess.run(command)"
        }
    ]
}