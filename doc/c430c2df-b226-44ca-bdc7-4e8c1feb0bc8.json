{
    "summary": "This code is using the Comby library to recover a Python source file by removing any lines related to reloading or @reloading decorators. It reads the original file, removes specific keywords, and then uses Comby to rewrite the code without those keywords, resulting in a new source file without reloading-related content. The code is executed directly if the script is the main program.",
    "details": [
        {
            "comment": "This code is using the Comby library to recover a Python source file by removing any lines related to reloading or @reloading decorators. It reads the original file, removes specific keywords, and then uses Comby to rewrite the code without those keywords, resulting in a new source file without reloading-related content. The code is executed directly if the script is the main program.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/skipexception_code_and_continue_resurrection_time_travel_debugging/test_code/recover.py\":0-28",
            "content": "from comby import Comby\ncomby = Comby()\ndef recover(source_old):\n    kws = [\"from reloading import reloading\", \"@reloading\"]\n    # source_old = source_old.replace(kw,\"\") # obliterate this thing. shall we?\n    source_old = \"\\n\".join(\n        [\n            line\n            for line in source_old.split(\"\\n\")\n            if not any(line.startswith(elem) for elem in kws)\n        ]\n    )\n    match = \":[prefix~@reloading.*$]def :[functionName](:[args]):\"\n    rewrite = \"def :[functionName](:[args]):\"\n    source_new = comby.rewrite(source_old, match, rewrite, language=\".py\")\n    return source_new\nif __name__ == \"__main__\":\n    # comby = Comby()\n    source_old = open(\"new_test.py\", \"r\").read()\n    source_new = recover(source_old)\n    print(source_new)"
        }
    ]
}