{
    "summary": "The code generates a bilibili video recommendation visual using Pixie library, involving avatars, rounded rectangles, and logos for the final image.",
    "details": [
        {
            "comment": "Code snippet is trying to create an image with Chinese text and a rounded rectangle mask. It loads a font file, sets its size, fills the image with white color, draws text using the loaded font, creates a path for a rounded rectangle, generates a mask of the rectangle shape, reads an existing image (sample_cover.jpg), and aims to resize it while maintaining aspect ratio.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/ad_template_0.py\":0-35",
            "content": "# let's try to make it right.\npic_file = \"sample_cover.jpg\"\nqrcode_file = \"MyQRCode1.png\"\n# we need some font for this.\n# font_location = \"/usr/share/fonts/truetype/wqy/wqy-microhei.ttc\" # ttc -> ttf\nfont_location = \"./wqy-microhei0.ttf\"\nimport pixie\nfont = pixie.read_font(font_location)\nfont.size = 20\ntext = \"\u4e2d\u6587\u80fd\u591f\u663e\u793a\u4e48 \u8d85\u51fa\u4e86\u5b57\u7b26\u8fb9\u7f18\u80fd\u4e0d\u80fd\u663e\u793a Typesetting is the arrangement and composition of text in graphic design and publishing in both digital and traditional medias.\"\n# \u53ef\u4ee5\u663e\u793a \u4f46\u662f\u8fb9\u7f18\u7684\u5b57\u7b26\u9700\u8981\u88ab\u6ce8\u610f\u5230 \u770b\u770b\u662f\u4e0d\u662f\u8d85\u51fa\u4e86\u8fb9\u754c\nimage = pixie.Image(200, 200)\nimage.fill(pixie.Color(1, 1, 1, 1))\nimage.fill_text(\n    font, text, bounds=pixie.Vector2(180, 180), transform=pixie.translate(10, 10)\n)\n# print('image type:', type(image))\n# 'pixie.pixie.Image'\n# hard to say.\npath = pixie.Path()\npath.rounded_rect(0, 0, 100, 100, 25, 25, 25, 25)\n# how to use mask?\ncover_width, cover_height = 100, 100\nmask = pixie.Mask(cover_width, cover_height)  # must match mask size?\nmask.fill_path(path)\npicture = pixie.read_image(pic_file)\n# we need to reshape this.\npicture = picture.resize("
        },
        {
            "comment": "The code creates an ad image with a QR code and avatar. It reads the QR code image, resizes it, and applies a mask. Then, it reads the avatar image, resizes it, and applies a mask as well. Finally, it combines these elements into the final ad image.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/ad_template_0.py\":36-72",
            "content": "    cover_width, cover_height\n)  # recommend to do this in pyjom.imagetoolbox since that will be safer.\npicture.mask_draw(mask)\ntransform = pixie.translate(50, 50)\nqrcode_width = qrcode_height = 50\nqrcode_image = pixie.read_image(qrcode_file)\nqrcode_image = qrcode_image.resize(qrcode_width, qrcode_height)\nqrcode_transform = pixie.translate(150, 150)\nimage.draw(picture, transform=transform)\n# image.draw(picture)\n# image.draw(picture,transform=transform)\nimage.draw(qrcode_image, transform=qrcode_transform)\n# now we try to reverse engineer that thing.\n# not only we need to create ads, we need to modify ads on the fly.\n# detect qr code and replace the code with ours.\n# first of all, the picture needs to be big.\navatar_path = \"up_image.jpg\"\nup_name = \"J4D\"\navatar_width, avatar_height = 50, 50\npath2 = pixie.Path()\npath2.circle(25, 25, 25)\nmask2 = pixie.Mask(avatar_width, avatar_height)\nmask2.fill_path(path2)\navatar = pixie.read_image(avatar_path)\navatar = avatar.resize(avatar_width, avatar_height)\navatar.mask_draw(mask2)"
        },
        {
            "comment": "This code section is responsible for generating a visual representation of a bilibili video recommendation. It uses the Pixie library to handle image manipulation and drawing, and involves steps such as drawing an avatar, painting text, creating a rounded rectangle, filling the shape, and adding logos. The final result is likely used in a user interface for displaying video recommendations.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/ad_template_0.py\":73-109",
            "content": "a_transform = pixie.translate(25, 25)\nimage.draw(avatar, a_transform)\nfont2 = pixie.read_font(font_location)\nfont2.size = 40\nfont2.paint.color = pixie.Color(0, 0.5, 0.953125, 1)\nval = image.fill_text(font2, up_name, transform=pixie.translate(25 + 50, 20))\n# print('VAL',val) # NONE\npath3 = pixie.Path()\npath3.rounded_rect(0,0,100,50,10,10,10,10)\npaint = pixie.Paint(pixie.SOLID_PAINT)\npaint.color = pixie.parse_color(\"#FC427B\")\ntransform3 = pixie.translate(25+50+50, 20)\nimage.fill_path(path3, paint, transform3)\nlabel_text = \"UP\u4e3b\"\nfont3 = pixie.read_font(font_location)\nfont3.size = 30\nfont3.paint.color = pixie.Color(1,1,1, 1)\nimage.fill_text(\n    font3, label_text, transform=pixie.translate(25 + 50 + 50, 20)\n)  # where should i put the thing?\nbilibili_logo_path = \"bilibili_transparent.png\"\nbilibili_logo = pixie.read_image(bilibili_logo_path)\nbilibili_logo = bilibili_logo.resize(50,100)\nimage.draw(bilibili_logo)\nplay_button_path = 'play_button.png'\nplay_button = pixie.read_image(play_button_path)\nplay_button = play_button.resize(50,50)"
        },
        {
            "comment": "This code is translating a coordinate (100, 100) using Pixie, then drawing the play_button image over it. Since no more masking is needed, the resulting image is saved as \"ad_0.png\" using png magic.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_video_recommendation_server/ad_template_0.py\":110-114",
            "content": "t4 = pixie.translate(100,100)\nimage.draw(play_button, t4)\n# so no more masking here. we need some png magic.\nimage.write_file(\"ad_0.png\")"
        }
    ]
}