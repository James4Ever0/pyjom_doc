{
    "summary": "This code imports necessary modules and sets up the environment for typography generation using voice underscore subtitle. It reads a demo text, creates a directory to save generated images, sets font and size, and draws each character on the screen with optional rotation and filling options.",
    "details": [
        {
            "comment": "This code is importing necessary modules and setting up the environment for generating typography with voice underscore subtitle. It reads a demo text, creates a directory to save the generated images, sets up font and size, and begins drawing each character from the text on the screen.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_practices/bilibili_tarot/scriptable_generate_typography_with_voice_underline_subtitle.py\":0-45",
            "content": "from p5 import *\nimport os\n# from test_common import demo_text\ndemo_text = open(\"demo_text.log\",\"r\",encoding=\"utf-8\").read()\nos.system(\"rm screenshot*\")\ntarget_dir = \"demo_typography\"\nos.system(\"rm -rf {}\".format(target_dir))\nos.system(\"mkdir {}\".format(target_dir))\ntsize = 100\ncounterx = 0\nscrwidth = 1920\nxcoord = int(scrwidth/2) # how to get this shit?\nscrheight = 1080\nycoord = scrheight - tsize - 75\nlineNum = 0\n# what fucking ever.\ns = demo_text\ns0 = [\"\"]\ndef setup():\n    size(scrwidth,scrheight)\n    # text_font(create_font('./fonts/Fonts/\u535a\u6d0b\u884c\u4e663500.ttf', size=tsize))\n    # text_font(create_font('./fonts/Fonts/\u4e66\u4f53\u574a\u5170\u4ead\u4f53I.ttf', size=tsize))\n    text_font(create_font('./SimHei.ttf', size=tsize))\nimport random\ndef draw():\n    global counterx,xcoord,ycoord,s,s0,scrheight,scrwidth,lineNum,target_dir\n    #force override.\n    background(0)\n    if counterx > len(s)-1:\n        exit()\n    s1 = s[:counterx]\n    counterx+=1\n    mtext_width = text_width(s1)\n    try:\n        text9 = s1\n        # else:\n        #     text9 = \" \"\n        # l = len(s0)-1"
        },
        {
            "comment": "This code sets the rotate value to 0 and RGB values to 255 for filling text. It then displays the text at specified coordinates with optional rotation. If an exception occurs, it prints the traceback and a message before saving a screenshot. The program exits and prints \"EXITED.\"",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_practices/bilibili_tarot/scriptable_generate_typography_with_voice_underline_subtitle.py\":46-64",
            "content": "        # rotate = random.randint(-15,15)\n        # rotate = random.choice([random.randint(-20,-10),random.randint(10,20)])\n        rotate = 0\n        # r1 = random.randint(220,255)\n        # r2 = random.randint(220,255)\n        # r3 = random.randint(220,255)\n        # r4 = random.randint(220,255)\n        r1 = r2 = r3 = r4 = 255\n        fill(red=r1, green=r2, blue=r3, alpha=r4)\n        text(text9, (xcoord-int(mtext_width/2), ycoord,),rotate = rotate)  # add str() to key\n    except:\n        import traceback\n        traceback.print_exc()\n        print(\"SHIT HAPPENED\")\n        pass\n    save_frame(\"{}/screenshot.png\".format(target_dir))\nrun()\nprint(\"EXITED.\")"
        }
    ]
}