{
    "summary": "This code generates a COCO PIP dataset, creates background images with stripes, calculates text colors, applies random text overlays using OpenCV's putText function, and performs various image processing tasks to create a COCO-style pip dataset.",
    "details": [
        {
            "comment": "The code is importing necessary libraries and setting up the required paths for image and label files. It will create a PIP dataset by combining images and labels, resizing them to 800 width, and possibly adding text with a random margin ratio. The final dataset will be saved in a specified directory. Memory leaks are mentioned as a concern, so separate scripts are recommended for execution.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py\":0-36",
            "content": "# use what? better use some standard library.\n# you must know where you have put all these images.\n# DONE: remember to upload dataset creation things to kaggle as separate python scripts and execute it in separate process to prevent memory leaks (hopefully)\nimport cv2\nimport numpy as np\nimport os\nfrom string import punctuation\nimport random\n# import itertools\nfrom PIL import Image, ImageDraw\nimageBasePath = \"/kaggle/input/mscoco/mscoco_resized/train2014\"\nimagePaths = [\n    fpath\n    for fpath in os.listdir(imageBasePath)\n    if fpath.split(\".\")[-1] in (\"jpg\", \"jpeg\", \"png\")\n]\ntrain_path = \"images/train\"\ntest_path = \"images/test\"\ntrain_label_path = \"labels/train\"\ntest_label_path = \"labels/test\"\nbasepath = \"pip_dataset\"\ntrain_path_relative = os.path.join(basepath, train_path)\ntrain_label_path_relative = os.path.join(basepath, train_label_path)\nwidth = 800\nhalf_width = int(width / 2)  # either use 1,2,4 images.\ntextTotalHeight = 300  # either add to top or bottom.\ngetMarginRatio = lambda: random.choice(\n    [0, random.random() * 0.15, random.random() * 0.1, random.random() * 0.05]"
        },
        {
            "comment": "This code initializes variables for creating a COCO PIP dataset. It sets text origin, font scale, and font type. It defines functions to get random character or characters, and handles image formats. The image index is incremented and the maximum allowed image count is set.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py\":37-72",
            "content": ")  # this margin is used randomly. we can make it 0 or as is.\ntextOrigin = (-30, 30)\nfontScale = 1\nfont = cv2.FONT_HERSHEY_SIMPLEX\nfontThickness = 2\ngetRadius = lambda: random.randint(1, 30)\nimageIndex = (\n    sorted(\n        [int(fpath.split(\".\")[0]) for fpath in os.listdir(train_path_relative)],\n        key=lambda index: -index,\n    )[0]\n    + 1\n)  # shall be increased on demand.\nprint(\"START MARKING PICTURES WITH INDEX:\", imageIndex)\nMAX_COCO_PIP_IMAGE_COUNT = 10000  # well, super huge. is it?\n# don't insert 20000 cause it will break shit.\nalphabets = \"abcdefghijklmnopqrstuvwxyz\"\nALPHABETS = alphabets.upper()\nnumbers = \"0123456789\"\ncharacterList = list(alphabets + ALPHABETS + numbers + punctuation + \" \")\ngetRandomCharacter = lambda: random.choice(characterList)\ngetRandomCharacters = lambda charCount: \"\".join(\n    [getRandomCharacter() for _ in range(charCount)]\n)\ngetRandomLinesOfCharacters = lambda lineCount, charCount: \"\\r\".join(\n    [getRandomCharacters(charCount) for _ in range(lineCount)]\n)\nimageFormats = [1, 2, 4]"
        },
        {
            "comment": "This code generates a COCO-style dataset for object detection using random color combinations. It includes lists of text formats, background formats, and colors, which are then converted to numpy arrays. The code also defines functions to generate 2D and 3D gradients for backgrounds. However, image format, text format, and background format selections are commented out while testing.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py\":73-103",
            "content": "textFormats = [\"up\", \"down\", \"none\"]\nbackgroundFormats = [\"solidColor\", \"horizontalStripes\", \"verticalStripes\", \"gradients\"]\ncolors = [\n    (0, 0, 0),\n    (255, 255, 255),\n    (0, 0, 192),\n    (255, 255, 64),\n    (0, 255, 0),\n    (0, 0, 255),\n    (255, 0, 0),\n]\ncolorsNumpyArray = [np.array(color) for color in colors]\ncolorsWithIndex = [(index, color) for index, color in enumerate(colors)]\n# we are not doing this while testing.\n# imageFormat = random.choice(imageFormats)\n# textFormat = random.choice(textFormats)\n# backgroundFormat = random.choice(backgroundFormats)\ndef get_gradient_2d(start, stop, width, height, is_horizontal):\n    if is_horizontal:\n        return np.tile(np.linspace(start, stop, width), (height, 1))\n    else:\n        return np.tile(np.linspace(start, stop, height), (width, 1)).T\ndef get_gradient_3d(width, height, start_list, stop_list, is_horizontal_list):\n    result = np.zeros((height, width, len(start_list)), dtype=np.float64)\n    for i, (start, stop, is_horizontal) in enumerate(\n        zip(start_list, stop_list, is_horizontal_list)"
        },
        {
            "comment": "Creating a COCO PIP dataset: randomly selects image, text, and background formats to generate test output pictures. Chooses multiple images for each format, averages their colors, compares them with color arrays, and adds distances to the dictionary.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py\":104-129",
            "content": "    ):\n        result[:, :, i] = get_gradient_2d(start, stop, width, height, is_horizontal)\n    return result.astype(np.uint8)\n# for imageFormat, textFormat, backgroundFormat in itertools.product(\n#     imageFormats, textFormats, backgroundFormats\n# ):  # you can use these things to get test output picture names.\nprint(\"creating coco pip dataset:\")\nimport progressbar\nfor _i in progressbar.progressbar(range(MAX_COCO_PIP_IMAGE_COUNT)):\n    imageFormat = random.choice(imageFormats)\n    textFormat = random.choice(textFormats)\n    backgroundFormat = random.choice(backgroundFormats)\n    colorDistances = {}\n    selectedImages = [\n        cv2.imread(os.path.join(imageBasePath, imagePath), cv2.IMREAD_COLOR)\n        for imagePath in random.sample(imagePaths, k=imageFormat)\n    ]\n    for image in selectedImages:\n        averageColor = np.average(image.reshape((-1, 3)), axis=0)\n        for index, colorNumpyArray in enumerate(colorsNumpyArray):\n            colorDistances[index] = colorDistances.get(index, []) + [\n                np.sum(np.abs(averageColor - colorNumpyArray))"
        },
        {
            "comment": "Code creates a background for an image based on the furthest color from the given colors. It sorts the colors by distance from their average and chooses the furthest one. If the background format is \"horizontalStripes\", \"verticalStripes\" or \"gradients\", it fills the background with this color and another color chosen from the sorted list, then generates a random stripe count for the background image.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py\":130-155",
            "content": "            ]\n    sortedColorsWithIndex = sorted(\n        colorsWithIndex, key=lambda element: -np.sum(colorDistances[element[0]])\n    )  # the further the better.\n    # sortedColors = [color for _, color in sortedColorsWithIndex]\n    ## create background first.\n    imageCanvasHeight = half_width if imageFormat == 2 else width\n    textCanvasHeight = 0 if textFormat == \"none\" else textTotalHeight\n    backgroundShape = (imageCanvasHeight + textCanvasHeight, width, 3)  # height, width\n    _, color_main = sortedColorsWithIndex[0]\n    if backgroundFormat in [\"horizontalStripes\", \"verticalStripes\", \"gradients\"]:\n        # fill background with color_main first.\n        _, color_sub = sortedColorsWithIndex[1]\n        if backgroundFormat in [\"horizontalStripes\", \"verticalStripes\"]:\n            backgroundImage = np.zeros(backgroundShape, dtype=np.uint8)\n            backgroundImage[:, :, 0] = color_main[0]\n            backgroundImage[:, :, 1] = color_main[1]\n            backgroundImage[:, :, 2] = color_main[2]\n            stripeCount = random.randint(2, 5)"
        },
        {
            "comment": "Code snippet generates a background image with vertical or horizontal stripes based on the `backgroundFormat`. For the \"verticalStripes\" format, it creates an array of strip widths and sets the corresponding pixel values for each strip. Otherwise, for the \"horizontal\" format, it creates an array of strip heights and sets the corresponding pixel values for each strip.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py\":156-175",
            "content": "            if backgroundFormat == \"verticalStripes\":  # slice width\n                arr = np.linspace(0, backgroundShape[1], stripeCount + 1)\n                for width_start, width_end in [\n                    (int(arr[i]), int(arr[i + 1]))\n                    for i in range(stripeCount)\n                    if i % 2 == 1\n                ]:\n                    backgroundImage[:, width_start:width_end, 0] = color_sub[0]\n                    backgroundImage[:, width_start:width_end, 1] = color_sub[1]\n                    backgroundImage[:, width_start:width_end, 2] = color_sub[2]\n            else:  # horizontal. slice height.\n                arr = np.linspace(0, backgroundShape[0], stripeCount + 1)\n                for height_start, height_end in [\n                    (int(arr[i]), int(arr[i + 1]))\n                    for i in range(stripeCount)\n                    if i % 2 == 1\n                ]:\n                    backgroundImage[height_start:height_end, :, 0] = color_sub[0]\n                    backgroundImage[height_start:height_end, :, 1] = color_sub[1]"
        },
        {
            "comment": "This code generates background images based on the given parameters: pure color, gradient, or a combination of both. It also calculates the text color by comparing the background image's average color with a list of colors to find the best match.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py\":176-200",
            "content": "                    backgroundImage[height_start:height_end, :, 2] = color_sub[2]\n        else:  # gradient!\n            is_horizontal = [False, False, False]\n            is_horizontal[random.randint(0, 2)] = True\n            backgroundImage = get_gradient_3d(\n                backgroundShape[1],\n                backgroundShape[0],\n                color_main,\n                color_sub,\n                is_horizontal,\n            )\n    else:  # pure color.\n        backgroundImage = np.zeros(backgroundShape, dtype=np.uint8)\n        backgroundImage[:, :, 0] = color_main[0]\n        backgroundImage[:, :, 1] = color_main[1]\n        backgroundImage[:, :, 2] = color_main[2]\n    ## next, paint text!\n    if textFormat != \"none\":\n        ## only calculate text color when needed.\n        backgroundAverageColor = np.average(backgroundImage.reshape((-1, 3)), axis=0)\n        textColorNumpyArray = sorted(\n            colorsNumpyArray,\n            key=lambda colorNumpyArray: -np.sum(\n                np.abs(backgroundAverageColor - np.array(colorNumpyArray))"
        },
        {
            "comment": "This code generates a random text overlay on an image using OpenCV's putText function. It randomly selects and modifies a character string, then applies it to the image at various locations. The background shape is used to determine the number of overlays generated.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py\":201-231",
            "content": "            ),\n        )[0]\n        textColor = textColorNumpyArray.tolist()\n        # let's paint it all over the place!\n        textShift = 40\n        # TODO: check if string is **just enough** to fill the background.\n        for textLineIndex in range(\n            int((backgroundShape[0] / (textTotalHeight + width)) * 27)\n        ):\n            baseNumber = 50\n            baseNumber2 = random.randint(1, baseNumber)\n            textContent = random.choice(\n                [\n                    \"\",\n                    (\" \" * baseNumber2)\n                    + getRandomCharacters(random.randint(0, baseNumber - baseNumber2)),\n                ]\n            )\n            backgroundImage = cv2.putText(\n                backgroundImage,\n                textContent,\n                (textOrigin[0], textOrigin[1] + textShift * textLineIndex),\n                font,\n                fontScale,\n                textColor,\n                fontThickness,\n                cv2.LINE_AA,\n            )\n    ## put pictures!\n    imageCanvasShape = (imageCanvasHeight, width, 3)"
        },
        {
            "comment": "Creates a mask image for given shape, draws on it based on the image format and random selection, then resizes the selected image according to the new shape. It also determines the coordinates for drawing rounded rectangles on the mask.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py\":233-262",
            "content": "    imageMask = Image.new(\n        \"RGB\", (imageCanvasShape[1], imageCanvasShape[0]), \"black\"\n    )  # width, height?\n    draw = ImageDraw.Draw(imageMask)\n    imageCanvas = np.zeros(imageCanvasShape, dtype=np.uint8)\n    imageCoordinates = []\n    if imageFormat == 1:\n        image = selectedImages[0]\n        imageShape = image.shape\n        margin = getMarginRatio()\n        base = width * (1 - margin * 2)\n        imageHeight, imageWidth = imageShape[:2]\n        if imageHeight > imageWidth:\n            imageShape = (int(base * (imageWidth / imageHeight)), int(base))\n        else:\n            imageShape = (int(base), int(base * (imageHeight / imageWidth)))\n        # print(image.shape)\n        image = cv2.resize(image, imageShape)\n        x0 = int((width - imageShape[0]) / 2)\n        x1 = x0 + imageShape[0]\n        y0 = int((width - imageShape[1]) / 2)\n        y1 = y0 + imageShape[1]\n        if random.random() > 0.5:\n            draw.rectangle((x0, y0, x1, y1), fill=\"white\")\n        else:\n            draw.rounded_rectangle("
        },
        {
            "comment": "This code is creating a mask for an image, adjusting the radius for the ellipse shape, and then composites it with other images if needed. It also calculates the base points for a rectangle, and gets the image shapes of each selected image in the list. The \"else\" part suggests that there is a condition being checked before this code block is executed. The function getMarginRatio() and getRadius() are used to calculate the margins and radius of the ellipse respectively.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py\":263-295",
            "content": "                (x0, y0, x1, y1),\n                fill=\"white\",\n                radius=min(int(x1 - x0) / 2, int(y1 - y0) / 2, getRadius()),\n            )\n        # print(\"___\")\n        # print(imageShape)\n        # print(imageCanvas.shape)\n        # print(image.shape)\n        # print(x0,x1,x1-x0)\n        # print(y0,y1,y1-y0)\n        # print(\"___\")\n        # cv2.imshow(\"mask\", np.array(imageMask))\n        # cv2.waitKey(0)\n        imageCanvas[y0 : image.shape[0] + y0, x0 : image.shape[1] + x0, :] = image\n        imageCoordinates.append(\n            (\n                x0 + image.shape[1] / 2,\n                y0 + image.shape[0] / 2,\n                image.shape[1],\n                image.shape[0],\n            )\n        )  # x_center, y_center, width, height\n    else:\n        basePoints = [\n            (x * half_width, y * half_width)\n            for x, y in [(0, 0), (1, 0), (1, 1), (0, 1)]\n        ]  # width, height\n        for index, image in enumerate(selectedImages):\n            imageShape = image.shape\n            margin = getMarginRatio()"
        },
        {
            "comment": "Resizing image to fit within specified bounds and applying rectangle or rounded rectangle based on random chance, then combining with canvas image.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py\":296-320",
            "content": "            base = half_width * (1 - margin * 2)\n            imageHeight, imageWidth = imageShape[:2]\n            if imageHeight > imageWidth:\n                imageShape = (int(base * (imageWidth / imageHeight)), int(base))\n            else:\n                imageShape = (int(base), int(base * (imageHeight / imageWidth)))\n            image = cv2.resize(image, imageShape)\n            x0 = int((half_width - imageShape[0]) / 2) + basePoints[index][0]\n            x1 = x0 + imageShape[0]\n            y0 = int((half_width - imageShape[1]) / 2) + basePoints[index][1]\n            y1 = y0 + imageShape[1]\n            if random.random() > 0.5:\n                draw.rectangle((x0, y0, x1, y1), fill=\"white\")\n            else:\n                draw.rounded_rectangle(\n                    (x0, y0, x1, y1),\n                    fill=\"white\",\n                    radius=min(int(x1 - x0) / 2, int(y1 - y0) / 2, getRadius()),\n                )\n            imageCanvas[y0 : image.shape[0] + y0, x0 : image.shape[1] + x0, :] = image\n            imageCoordinates.append("
        },
        {
            "comment": "Code snippet combines images with a mask, creates a new image by multiplying original image with mask and inverting the result. This modified image is then added to the background image, creating an overlay effect. The code also collects data points for labels that will be exported to txt files.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py\":321-348",
            "content": "                (\n                    x0 + image.shape[1] / 2,\n                    y0 + image.shape[0] / 2,\n                    image.shape[1],\n                    image.shape[0],\n                )\n            )  # x_center, y_center, width, height\n    ## mix images with mask\n    imageMaskNumpyArray = np.array(imageMask) / 255  # float64\n    imageMaskNumpyArrayInverted = 1 - imageMaskNumpyArray\n    x0 = 0\n    y0 = textTotalHeight if textFormat == \"up\" else 0\n    backgroundImage[y0 : y0 + imageCanvasShape[0], x0 : x0 + imageCanvasShape[1], :] = (\n        backgroundImage[y0 : y0 + imageCanvasShape[0], x0 : x0 + imageCanvasShape[1], :]\n        * imageMaskNumpyArrayInverted\n    ).astype(np.uint8) + (imageCanvas * imageMaskNumpyArray).astype(np.uint8)\n    # print()\n    ## get labels which will be exported to txt\n    contents = []\n    for coord in imageCoordinates:\n        x_center_relative, y_center_relative, imWidth, imHeight = coord\n        x_center, y_center = x_center_relative + x0, y_center_relative + y0\n        dataPoints = ["
        },
        {
            "comment": "Creates COCO-style pip dataset standalone by iterating over images and labels, writing them to train_path_relative and train_label_path_relative, with real indexing. It also prints a confirmation message upon completion.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py\":349-373",
            "content": "            x_center / backgroundShape[1],\n            y_center / backgroundShape[0],\n            imWidth / backgroundShape[1],\n            imHeight / backgroundShape[0],\n        ]\n        labelString = \" \".join(([\"0\"] + [f\"{number:.3f}\" for number in dataPoints]))\n        contents.append(labelString)\n        # print(\"LABELSTRING?\", labelString)\n    ## preview\n    # previewImageName = f\"{imageFormat}_{textFormat}_{backgroundFormat}.png\"\n    realIndex = imageIndex + _i\n    cv2.imwrite(\n        os.path.join(train_path_relative, f\"{str(realIndex).zfill(12)}.png\"),\n        backgroundImage,\n    )\n    with open(\n        os.path.join(train_label_path_relative, f\"{str(realIndex).zfill(12)}.txt\"), \"w+\"\n    ) as f:\n        f.write(\"\\n\".join(contents))\n    # cv2.imshow(previewImageName, backgroundImage)\n    # cv2.waitKey(0)\nprint(\"coco pip dataset created!\")"
        }
    ]
}