{
    "summary": "The code sets up an Appium test for unlocking an Android phone without requiring the device password. It initializes capabilities, connects to the appium server, checks if the screen is locked, and uses a bash script to unlock it.",
    "details": [
        {
            "comment": "The code sets up an Appium test for unlocking an Android phone without requiring the device password. It initializes capabilities, connects to the appium server, checks if the screen is locked, and uses a bash script to unlock it.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/qq_share_autojs/appium_unlock_phone.py\":0-41",
            "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom appium import webdriver\nfrom appium.webdriver.common.appiumby import AppiumBy\ncapabilities = dict(\n    platformName='Android',\n    automationName='uiautomator2',\n    deviceName='Android',\n    appPackage='com.android.settings',\n    appActivity='.Settings',\n    language='en',\n    locale='US',\n    noSign=True,\n    skipUnlock=True\n    # it tries to clear my password.\n)\nappium_server_url = 'http://localhost:4723'\ndriver = webdriver.Remote(appium_server_url, capabilities)\nprint('is screen ready?')\nwhile True:\n    try:\n        locked = driver.is_locked()\n        print('locked?', locked)\n        if not locked:\n            break\n        import os\n        if locked:\n            os.system(\"bash adb_unlock.sh\")\n            print(\"UNLOCKED\")\n    except:\n        pass\n# unlocking the phone will disconnect adb sessions\nif driver:\n    driver.quit()"
        }
    ]
}