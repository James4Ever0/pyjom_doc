{
    "summary": "The code reads video frames, selects the region of interest (ROI), and writes data to a CSV file for each frame in the list. It handles default values if ROI is not found and releases resources upon completion.",
    "details": [
        {
            "comment": "This code checks if the video file matches the desired format, creates a dataset, and uses shortcuts for progression. It also listens for keyboard input to determine when to stop running.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/anime_video_frame_cropper_labeller.py\":0-47",
            "content": "# check if is the video we want and extract data or discard.\n# maybe you want some challange, so you can make one, right?\n# videos = [\n#     \"286760784_part1-00001.mp4\",\n#     \"329297394_part1-00001.mp4\",\n#     \"541755429_part1-00001.mp4\",\n#     \"842224692_part1-00001.mp4\",\n# ]\nimport os\n# videos = [fpath for fpath in os.listdir(\".\") if fpath.endswith(\".mp4\")]\nvideos = [\"480138800_part1.mp4\"] # mine video, classic!\n# we create dataset here.\n# use some short cuts for progression.\nframe_step = 10\nimport cv2\nimport progressbar\nfrom pynput.keyboard import Listener\nlastKey = [\"not_c\"]\ndef on_press(key):\n    lastKey[0] = \"not_c\"\n    try:\n        # print(\"alphanumeric key {0} pressed\".format(key.char))\n        if key.char in [\"c\", \"C\"]:\n            lastKey[0] = \"c\"\n    except AttributeError:\n        # print(\"special key {0} pressed\".format(key))\n        ...\ndef on_release(key):\n    # print(\"{0} released\".format(key))\n    ...\nlistener = Listener(on_press=on_press, on_release=on_release)\nlistener.start()\n# with listener:\n#     listener.join()"
        },
        {
            "comment": "This code reads a video and allows the user to select a region of interest (ROI) from each frame. It then writes the frame index, x, y, width, and height of the ROI in a CSV file for each frame of the video. The process is repeated for each video in the list.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/anime_video_frame_cropper_labeller.py\":49-76",
            "content": "# how do you arrange such data?\nfields = [\"filename\", \"frame_index\", \"x\", \"y\", \"w\", \"h\"]\nimport csv\nfor index, video in enumerate(videos):\n    with open(f'{video.split(\".\")[0]}.csv', \"w+\") as csvfile:\n        csvwriter = csv.writer(csvfile)\n        csvwriter.writerow(fields)\n        print(\"reading video:\", index)\n        roi = None\n        cap = cv2.VideoCapture(video)\n        for vindex in progressbar.progressbar(\n            range(0, int(cap.get(cv2.CAP_PROP_FRAME_COUNT)), frame_step)\n        ):\n            cap.set(cv2.CAP_PROP_POS_FRAMES, vindex)\n            succ, image = cap.read()\n            if succ:\n                roi_new = cv2.selectROI(\"roi\", image)\n                # key=cv2.waitKey(0)\n                print(\"roi_new:\", roi_new)\n                print(\"last key:\", lastKey[0])\n                # print()\n                # print('keycode:',key)\n                if roi_new == (0, 0, 0, 0):\n                    if lastKey[0] == \"c\":\n                        # this is cancelled. roi will be nothing!\n                        roi = None"
        },
        {
            "comment": "This code reads video frames, determines the region of interest (ROI), and writes data to a CSV file. If the ROI is not found, it adds default values. The loop iterates through each frame step, updating the ROI index and writing the data. Finally, it releases the video capture resource.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/anime_video_frame_cropper_labeller.py\":77-88",
            "content": "                else:\n                    roi = roi_new\n                print(\"roi:\", roi)\n                for i in range(frame_step):\n                    roi_index = vindex + i\n                    data = [video, roi_index]\n                    if roi == None:\n                        data += [0, 0, 0, 0]\n                    else:\n                        data += list(roi)\n                    csvwriter.writerow(data)\n        cap.release()"
        }
    ]
}