{
    "summary": "This code searches, formats number lists, and tokenizes mixed English-Chinese text using regex. It iterates over results, updates language and UUID, sorts finalResult, creates dictionaries of index-text pairs for English and Chinese lists, then returns the result.",
    "details": [
        {
            "comment": "This code defines two functions for searching and formatting number lists. The first function, `recursiveCompiledSearch`, uses regex to search for patterns in a string, recursively appending matches to the result list. The second function, `set_to_range`, sorts a number list and then groups consecutive numbers together into ranges.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/english_chinese_mixing_spliter/english_grepper.py\":0-31",
            "content": "# target = \"sample_strings.txt\"\n# data = open(target,\"r\",encoding=\"utf-8\").read()\n# data = data.split(\"\\n\")\nfrom zhon.hanzi import characters, radicals, punctuation\nimport re\ndef recursiveCompiledSearch(compiledRegex, pattern,initPos=0,resultTotal = []):\n    result = compiledRegex.search(pattern)\n    if result !=None:\n        match = result[0]\n        span = result.span()\n        realSpan = (span[0]+initPos, span[1]+initPos)\n        # initialSpan = span[0]\n        endSpan = span[1]\n        initPos += endSpan\n        mresult = {\"match\":match, \"span\":realSpan}\n        resultTotal.append(mresult)\n        newPattern = pattern[endSpan:]\n        return recursiveCompiledSearch(compiledRegex,newPattern,initPos,resultTotal)\n    else: return resultTotal\nfrom itertools import groupby, count\ndef set_to_range(numberlist):\n    numberlist = list(sorted(numberlist)) # double safety?\n    gpb = groupby(numberlist, lambda n, c=count(): n-next(c))\n    # Then to finish it off, generate the string from the groups.\n    def as_range(iterable): # not sure how to do this part elegantly"
        },
        {
            "comment": "This function takes a line of mixed English and Chinese text, tokenizes it into ranges of each language, and returns these ranges in a list. It first converts the Chinese characters to their corresponding ranges and then finds English words using a compiled regular expression. The function ignores lines with less than 3 characters and calls another function recursively for further processing.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/english_chinese_mixing_spliter/english_grepper.py\":32-67",
            "content": "        l = list(iterable)\n        if len(l) > 1:\n            return (l[0], l[-1]+1)\n        else:\n            return (l[0], l[0]+1)\n    result = [as_range(g) for _, g in gpb]\n    # result = [as_range(g) for _, g in groupby(numberlist, key=lambda n, c=count(): n-next(c))]\n    return result\n    # '1-3,6-7,10'\nimport uuid\ndef get_myuuid(): return str(uuid.uuid4())\ndef get_chinese_result(line,chineseSet):\n    chineseRanges = set_to_range(chineseSet)\n    result = []\n    for r in chineseRanges:\n        text = line[r[0]:r[1]]\n        data = {\"match\":text,\"span\":r,\"lang\":\"zh\",\"uuid\":get_myuuid()}\n        result.append(data)\n    return result\nall_chinese = characters+radicals+punctuation\nenglish = re.compile(r\"([a-zA-Z]+([ \\-,\\.:;?!]+)?)+\")\n# for line in data:\ndef analyze_mixed_text(line):\n    line = line.replace(\"\\n\",\"\")\n    # if len(line) <=3: continue\n    # shall we analyze this shit line by line?\n    # just a fucking try...\n    print(\"LINE DATA: \" + line)\n    eng_result = recursiveCompiledSearch(english,line,initPos=0,resultTotal = []) # recursive curse."
        },
        {
            "comment": "The code iterates over the English results, appends the range of each word to engSet, updates the language and UUID of each result, and then builds a finalResult list. It sorts the finalResult by span[0] (start index) and creates a dictionary with English (en) and Chinese (zh) lists containing index-text pairs. Finally, it returns the result dictionary.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/english_chinese_mixing_spliter/english_grepper.py\":68-89",
            "content": "    engSet = []\n    engResult = []\n    for eng in eng_result:\n        print(\"FOUND ENGLISH: \", eng)\n        span = eng[\"span\"]\n        mword = line[span[0]:span[1]]\n        mrange = list(range(span[0],span[1]))\n        engSet += mrange\n        eng2 = eng\n        eng2.update({\"lang\":\"en\",\"uuid\":get_myuuid()})\n        engResult.append(eng2)\n        print(\"VERIFICATION:\",mword)\n    chineseSet = [x for x in range(len(line)) if x not in engSet]\n    chineseResult = get_chinese_result(line,chineseSet)\n    finalResult = chineseResult+engResult\n    finalResult = sorted(finalResult,key=lambda x:x[\"span\"][0])\n    result = {\"en\":[],\"zh\":[]}\n    for index, data in enumerate(finalResult):\n        lang = data[\"lang\"]\n        text = data[\"match\"]\n        result[lang].append({\"index\":index,\"text\":text})\n    return result"
        }
    ]
}