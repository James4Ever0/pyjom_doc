{
    "summary": "This code defines a decorator function using Babel's plugin for JavaScript syntax decorators. It wraps a function, logs the arguments passed to it, and then calls the original function. The decorated function, `myfunc`, is called with 'myval', and its return value is logged to the console.",
    "details": [
        {
            "comment": "This code defines a decorator function using Babel's plugin for JavaScript syntax decorators. It wraps a function, logs the arguments passed to it, and then calls the original function. The decorated function, `myfunc`, is called with 'myval', and its return value is logged to the console.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/neo4j_cypher_builder_template_why_you_suddenly_want_to_create_exceptions_and_find_solutions_to_hot_fix_reloading_and_edit_and_continue/babel_decorator.js\":1-18",
            "content": "// require(\"@babel/core\").transformSync(\"code\", {\n//     plugins: [\"@babel/plugin-syntax-decorators\"]\n//   });\nfunction dec(func){\n    function innerfunc(...args){\n        console.log('calling func with args:', args)\n        func(...args)\n    }\n    return innerfunc\n}\n@dec\nfunction myfunc(val){\n    return val\n}\nval = myfunc('myval')\nconsole.log('val:', val)"
        }
    ]
}