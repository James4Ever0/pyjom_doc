{
    "summary": "This code defines a class `WeiboPetsReviewer` that inherits from `ContentReviewer`. It has various parameters for configuration and updates the `methodsList` with different methods like \"topic\", \"fetcher\", \"reviewer\", and \"feedback\". The reviewer is meant to automate content labeling tasks.",
    "details": [
        {
            "comment": "This code defines a class `WeiboPetsReviewer` that inherits from `ContentReviewer`. It has various parameters for configuration and updates the `methodsList` with different methods like \"topic\", \"fetcher\", \"reviewer\", and \"feedback\". The reviewer is meant to automate content labeling tasks.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/pyjom/primitives/weiboPrimitives.py\":0-22",
            "content": "from pyjom.main import *\nfrom pyjom.commons import *\n# this is a reviewer, not a poster.\n# you may create interface to label the content and automate the stuff altogether.\nclass WeiboPetsReviewer(ContentReviewer):\n    def __init__(self, enable_log=True, auto=False,semiauto=True, dummy_auto=True,\n        template_names=[],args={},basedir=\"/dev/shm/sina\",autopurge=True):\n        super().__init__()\n        if enable_log:\n            self.log_location = \"logs/sina/pets/\"\n        if autopurge:\n            shutil.rmtree(basedir)\n        self.identifier.typeFix(type(self).__name__)\n        self.methodsList.update(\n            {\n                \"topic\": petsTopicGenerator,\n                \"fetcher\": weiboFetcher,\n                \"reviewer\": keywordDecorator(weiboSearchReviewer, basedir=basedir,auto=auto,semiauto=semiauto,dummy_auto=dummy_auto,template_names=template_names,args=args),\n                \"feedback\": weiboFeedback,\n            }\n        )"
        }
    ]
}