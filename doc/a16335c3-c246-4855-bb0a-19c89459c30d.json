{
    "summary": "The code defines functions to recover URLs, indexify them, and prompt for YouTube selection with utility functions for repairing content and retrieving selection IDs. It extracts, repairs, and selects YouTube URLs from a list by handling direct/indirect links and improving readability.",
    "details": [
        {
            "comment": "This code defines functions to recover URLs from context, indexify them in a string list, and prompt the user to select YouTube URLs. It also includes utility functions for repairing content with URLs and getting YouTube selection IDs.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/chatgpt_multiagent_agent_product_line_multimodal_langchain_experiments/test_url_repair_extract_trace_media_source.py\":1-41",
            "content": "from typing import Optional\ndef recover_prompt_constructor(info): return f\"\"\"\nPlease recover any URL from the given context. Every URL shall be visitable, starting with \"http://\" or \"https://\".\nContext:\n{info}\nURLs:\n\"\"\"\ndef indexify_string_list(string_list): return [\n    f'[{index}] {url}' for index, url in enumerate(string_list)]\ndef youtube_select_prompt_constructor(url_list): \n    urls_content = '\\n'.join(indexify_string_list(url_list))\n    return f\"\"\"\nPlease select URLs if they are directed to YouTube. I will give you URLs with index in front of them. Give your selection by selected indices in squared brackets separated by space like: [1] [3].\nURLs:\n{urls_content}\nSelected URLs:\n\"\"\"\nfrom test_chatgpt_cn_api import get_reply_from_chatgpt\ndef repair_content_with_url(info):\n    prompt = recover_prompt_constructor(info)\n    content = get_reply_from_chatgpt(prompt)\n    return content\nimport re\ndef get_youtube_selection_ids(urls):\n    prompt = youtube_select_prompt_constructor(urls)\n    response= get_reply_from_chatgpt(prompt)"
        },
        {
            "comment": "This code defines two functions, `extract_indices` and `select_youtube_urls`. The first function extracts indices from the response string using regular expressions. The second function takes a list of URLs and a list of indices, selects the corresponding URLs based on the provided indices, handles index errors, and returns the selected URLs. It also includes TODO comments for potential error handling and improvement suggestions.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/chatgpt_multiagent_agent_product_line_multimodal_langchain_experiments/test_url_repair_extract_trace_media_source.py\":42-68",
            "content": "    numbers = re.findall(r'\\[\\d+\\]', response)\n    indices = []\n    for num in numbers:\n        num = num.strip(\"[\").strip(']').strip()\n        num = int(num)\n        indices.append(num)\n    return indices\ndef select_youtube_urls(url_list, indices):\n    fatal_error:Optional[str]= None\n    selected_urls = []\n    index_errors = 0\n    url_counts = len(url_list)\n    max_index = url_counts-1\n    for index in indices:\n        try:\n            url = url_list[index]\n            print(\"selected:\", url)\n            selected_urls.append(url)\n        except IndexError:\n            index_errors += 1\n            # TODO: handle error by recursively letting the LLM knows the error and querying answer.\n            # TODO: determine if error is fatal (not recoverable in 5 iterations)\n            # TODO: eliminate possibility of external cause of fatal error by inferance\n            print('index not found: %d (max index is %d)' % (index, max_index))\n    print(\"summary\".center(80, \"=\"))\n    print(\"given url counts: %d\" % url_counts)"
        },
        {
            "comment": "This code is extracting and repairing URLs from provided information. It first extracts URLs without repairing them, then repairs the content with any broken URLs and extracts the repaired URLs. The code handles both direct and indirect Youtube links, processes each info in the list, repairs URLs, selects YouTube URLs based on specified selection IDs, and finally returns the selected URLs.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/chatgpt_multiagent_agent_product_line_multimodal_langchain_experiments/test_url_repair_extract_trace_media_source.py\":69-113",
            "content": "    print(\"selected url counts: %d\", len(selected_urls))\n    print(\"index errors: %d\" % index_errors)\n    return selected_urls\nfrom urlextract import URLExtract\nextractor = URLExtract()\ndef extract_url(content):\n    \"\"\"\n    Just extract the url. Do not repair.\n    \"\"\"\n    urls = extractor.find_urls(content)\n    return urls\ndef repair_and_get_repaired_url_list(info):\n    content = repair_content_with_url(info)\n    url_list = extract_url(content)\n    return url_list\nif __name__ == '__main__':\n    info_direct = \"\"\"\nYoutube\n\u539f\u6807\u9898A Thousand Miles-Neco are(FULL VERSION)\nhttps://youtu.be/Ddpx0JLOH6o?si=zZMjAEFj_TOXkQct\n\u97f3\u9891\u4e0b\u8f7d\uff1a\nhttps://wwxa.lanzouj.com/idPN81a5u4ab\n\u5bc6\u7801:5292\n\"\"\"\n    info_indirect = \"\"\"\n\u8f6c\u81eaYoutube\n/watch?v=mSqRH4WwnnY // By :Encrypted Lobster\n\"\"\"\n    info_list = [info_direct, info_indirect]\n    for i, info in enumerate(info_list):\n        print(f\"processing info #{i}\")\n        print(info)\n        repaired_urls = repair_and_get_repaired_url_list(info)\n        indices = get_youtube_selection_ids(repaired_urls)\n        selected_urls = select_youtube_urls(repaired_urls, indices)"
        },
        {
            "comment": "This code segment prints the selected URLs from a list. The 'for' loop iterates through each URL in the list and displays it with a tab character for readability, followed by a newline to separate each URL for better visualization.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/chatgpt_multiagent_agent_product_line_multimodal_langchain_experiments/test_url_repair_extract_trace_media_source.py\":114-117",
            "content": "        print(\"selected urls:\")\n        for url in selected_urls:\n            print(f'\\t{url}')\n        print()"
        }
    ]
}