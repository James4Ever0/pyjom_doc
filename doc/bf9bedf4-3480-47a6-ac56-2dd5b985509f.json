{
    "summary": "This code imports yaml and defines two functions for converting YAML strings between Python-friendly and Go-compatible formats. It then loads a file (Clash.yaml) using a custom loader, converts the string, and prints the loaded data.",
    "details": [
        {
            "comment": "This code imports yaml and defines two functions for converting YAML strings between Python-friendly and Go-compatible formats. It then loads a file (Clash.yaml) using a custom loader, converts the string, and prints the loaded data.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/karaoke_effects/loadSomeCustomClashYaml.py\":0-40",
            "content": "import yaml\n# yaml.add_constructor(mCustomLoaderTag, create_ref, Loader)\ndef goYamlToPyYaml(docString):\n    docString = docString.replace(\"!<str>\", \"!!str\")\n    return docString\ndef pyYamlToGoYaml(docString):\n    docString = docString.replace(\"!!str\", \"!<str>\")\n    return docString\nif __name__ == \"__main__\":\n    fileName = \"Clash.yaml\"\n    docString = open(fileName, \"r\").read()\n    mCustomLoaderTag = \"!<str>\"\n    class Ref(object):\n        def __init__(self, data):\n            self.data = data\n        def __repr__(self):\n            return '\"%s\"' % self.data\n    def create_ref(loader, node):\n        # print(dir(loader))\n        # breakpoint()\n        value = loader.costruct_string(node)\n        return Ref(value)\n    class Loader(yaml.SafeLoader):\n        pass\n    docString = goYamlToPyYaml(docString)\n    a = yaml.load(docString)\n    print(a)"
        }
    ]
}