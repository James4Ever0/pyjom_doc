{
    "summary": "Code uses yt-dlp to download Bilibili videos and handles errors. Snippet lists current directory files, checks filenames against \"expectedNamePrefix\", and prints \"TARGET FOUND!\" if a match is found.",
    "details": [
        {
            "comment": "This code downloads videos from Bilibili using yt-dlp and converts the video ID to a valid format. It handles potential errors by raising exceptions if the conversion fails or if an alternative conversion is required. The code also mentions some issues related to the yt-dlp version, outdated dependencies, and updating Python.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/anime_video_downloader.py\":0-25",
            "content": "# we name downloaded video using some agreements.\nimport os\n# yt-dlp --skip-download -j https://www.bilibili.com/video/BV1e54y1y7qy\n# i guess it is because we are using proxies.\n# no? what the heck?\n# remapped /opt/homebrew/bin/yt-dlp from homebrew's (dependency of mpv) to /Users/jamesbrown/Library/Python/3.8/bin/yt-dlp. really annoying when trying to update (will install python 3.11 (heck!))\n# version outdated. fuck man.\n# yt-dlp --download-sections \"*0:00:03-0:01:00\" --playlist-items \"1\" https://www.bilibili.com/video/BV1Fs411k7e9\nvideoIDs = [\n    \"BV1e54y1y7qy\",  # 842224692_part1-00001\n    \"BV1Qf4y197bt\",  # great challange, 286760784\n    \"BV1bi4y1g7Gd\",  # watermark, full screen, 541755429\n    \"BV1PA411n7N6\",  # shit jumping around, 329297394\n]\nvideoID = videoIDs[3]\nfrom bv2av import bv_av_conversion\nvideoIDAlternative = bv_av_conversion(videoID)\nimport re\nif videoIDAlternative is None: # not av or bv. shit happened!\n    raise Exception(\"Possible shit happening when parsing bilibili video id:\", videoID)"
        },
        {
            "comment": "Code snippet downloads videos from Bilibili using yt-dlp and saves them as parts with specified video IDs. It converts video IDs to the expected filename prefix and executes the command to download the videos.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/anime_video_downloader.py\":26-58",
            "content": "else:\n    if videoIDAlternative.startswith(\"av\"):\n        videoAVID, videoBVID = videoIDAlternative, videoID\n    else:\n        videoBVID, videoAVID = videoIDAlternative, videoID\nprint(videoAVID, type(videoAVID))\nvideoAID = re.findall(r\"\\d+\", videoAVID)[0]\nurl = f\"https://www.bilibili.com/video/{videoBVID}\"  # only one single page.\n# 290 seconds.\n# section example:\n# 0:05:00-0:06:30\n# import time\n# secondsToHHMMSS = lambda seconds:time.strftime('%H:%M:%S', time.gmtime(seconds))\n# some formats are not working. fuck.\nplaylistIndex = \"1\"\n# start = secondsToHHMMSS(100)\n# end = secondsToHHMMSS(150)\n# print('TIMESPAN:',start, end)\nnameFormat = \"%(id)s-%(autonumber)s.%(ext)s\"\ncmd = f'yt-dlp --playlist-items \"{playlistIndex}\" -o \"{nameFormat}\" \"{url}\"'\n# cmd=f'yt-dlp --download-sections \"*{start}-{end}\" --playlist-items \"{playlistIndex}\" -o \"{nameFormat}\"  \"{url}\"'\nos.system(cmd)\nautonumber = \"1\".zfill(5)\nexpectedNamePrefix = f\"{videoAID}_part{playlistIndex}-{autonumber}\"\nprint(\"expected filename prefix:\", expectedNamePrefix)"
        },
        {
            "comment": "This code snippet lists all files in the current directory and checks if any filename starts with the given \"expectedNamePrefix\". If a match is found, it prints \"TARGET FOUND!\" along with the filename.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/anime_highlight_cuts/theme_collector/anime_video_downloader.py\":59-64",
            "content": "files = os.listdir(\".\")\nfor fname in files:\n    if fname.startswith(expectedNamePrefix):\n        print(\"TARGET FOUND!\")\n        print(\"FILENAME:\", fname)"
        }
    ]
}