{
    "summary": "This code initializes a ClueAI client for paraphrasing, handles errors, and utilizes LRU cache. It generates paraphrased sentences using OpenAI's GPT2 model and allows configuration options. The \"clueai-base\" model is used to predict prompts and check if they are paraphrases of titles. Debug mode prints predicted text and success status, with an option to return scores.",
    "details": [
        {
            "comment": "The code initializes a ClueAI client using an API key and provides a function for generating paraphrased sentences. It also includes error handling for cases when no API key is provided or when the trial quota has been exceeded. The code uses LRU cache to store the ClueAI client instance, ensuring that subsequent calls will use the cached instance rather than creating a new one each time. The `clueAIParaphraser` function generates a paraphrased sentence using OpenAI's GPT2 model and provides options for configuring the generation process.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/title_rewrite_paraphrase/test.py\":0-45",
            "content": "# use our free api first. yes?\nimport yaml\nwith open(\"clueai_api.yaml\", \"r\") as f:\n    apiKey = yaml.load(f, Loader=yaml.FullLoader)[\"api_key\"]\n    print(\"Key?\", apiKey)\nimport clueai\n# initialize the Clueai Client with an API Key\n# \u5fae\u8c03\u7528\u6237finetune_user=True\n# cl = clueai.Client(apiKey)\n# print(cl.check_usage(finetune_user=False))\n# shit. we are on trial.\n# {'\u4f7f\u7528\u91cf': 0, '\u5269\u4f59\u91cf': 5000, '\u7528\u6237\u7c7b\u578b': '\u514d\u8d39\u7528\u6237'}\nfrom functools import lru_cache\n@lru_cache(maxsize=1)\ndef getClueAIClient(apiKey: str):\n    if apiKey == \"\":\n        return clueai.Client(\"\", check_api_key=False)\n    else:\n        return clueai.Client(apiKey)\ndef clueAIParaphraser(\n    title: str,\n    apiKey: str = \"\",\n    generate_config: dict = {\n        \"do_sample\": True,\n        \"top_p\": 0.8,\n        \"max_length\": 128,  # notice! not too long.\n        \"min_length\": 5,\n        \"length_penalty\": 1.0,\n        \"num_beams\": 1,\n    },\n    prompt_template: str = \"\"\"\n\u751f\u6210\u4e0e\u4e0b\u5217\u6587\u5b57\u76f8\u540c\u610f\u601d\u7684\u53e5\u5b50\uff1a\n{}\n\u7b54\u6848\uff1a\n\"\"\",\n    debug: bool = False,\n):\n    cl = getClueAIClient(apiKey)  # good without API key\n    prompt = prompt_template.format(title)  # shit."
        },
        {
            "comment": "This code generates a prediction for a given prompt using the \"clueai-base\" model and checks if it is a paraphrase of the provided title. It also has an optional parameter \"generate_config\" to adjust sampling and allows returning scores with \"return_likelihoods\". The code uses debug mode to print predicted text and success status.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/title_rewrite_paraphrase/test.py\":46-66",
            "content": "    # generate a prediction for a prompt\n    # \u5982\u679c\u9700\u8981\u81ea\u7531\u8c03\u6574\u53c2\u6570\u81ea\u7531\u91c7\u6837\u751f\u6210\uff0c\u6dfb\u52a0\u989d\u5916\u53c2\u6570\u4fe1\u606f\u8bbe\u7f6e\u65b9\u5f0f\uff1agenerate_config=generate_config\n    prediction = cl.generate(\n        model_name=\"clueai-base\", prompt=prompt, generate_config=generate_config\n    )\n    # \u9700\u8981\u8fd4\u56de\u5f97\u5206\u7684\u8bdd\uff0c\u6307\u5b9areturn_likelihoods=\"GENERATION\"\n    output = prediction.generations[0].text\n    success = title.strip() != output.strip()\n    if debug:\n        # print the predicted text\n        print(\"prediction: {}\".format(output))\n        print(\"paraphrase success?\", success)\n    return output, success\n# title = \"\u4e16\u4e0a\u6240\u6709\u5c0f\u732b\u90fd\u662f\u5929\u4f7f\u53d8\u7684\uff01\"\n# title = \"\u652f\u6301\u51e0\u5341\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u4efb\u52a1\uff0c\u5177\u6709\u8f83\u597d\u7684\u96f6\u6837\u672c\u5b66\u4e60\u80fd\u529b\u548c\u5c11\u6837\u672c\u5b66\u4e60\u80fd\u529b\u3002\"\ntitle = \"\u5341\u53ea\u732b\u4e5d\u53ea\u90fd\u62c6\u5bb6 \uff01\"\n# title = \"\u732b\uff1a\u8111\u5b50\u662f\u4e2a\u597d\u4e1c\u897f\u4f46\u662f\u6211\u6ca1\u6709O.o\"\noutput, success = clueAIParaphraser(title, debug=True)"
        }
    ]
}