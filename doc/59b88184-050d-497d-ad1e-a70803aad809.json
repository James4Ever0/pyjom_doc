{
    "summary": "This code imports necessary libraries and defines a function for normalizing adjacency matrices. It then creates a graph using the karate club data, converts it to a dense matrix, normalizes this matrix, and prints its shape before initializing a GCN model.",
    "details": [
        {
            "comment": "This code imports necessary libraries and defines a function for normalizing adjacency matrices. It then creates a graph using the karate club data, converts it to a dense matrix, normalizes this matrix, and prints its shape before initializing a GCN model.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/recommendation_system/karate_test.py\":0-26",
            "content": "import networkx as nx\nimport torch\ndef normalize(A , symmetric=True):\n\t# A = A+I\n\tA = A + torch.eye(A.size(0))\n\t# \u6240\u6709\u8282\u70b9\u7684\u5ea6\n\td = A.sum(1)\n\tif symmetric:\n\t\t#D = D^-1/2\n\t\tD = torch.diag(torch.pow(d , -0.5))\n\t\treturn D.mm(A).mm(D)\n\telse:\n\t\t# D=D^-1\n\t\tD = torch.diag(torch.pow(d,-1))\n\t\treturn D.mm(A)\nG = nx.karate_club_graph()\nA = nx.adjacency_matrix(G).todense() # dense matrix? not so freaking good.\n#A\u9700\u8981\u6b63\u89c4\u5316\nA_normed = normalize(torch.FloatTensor(A),True)\nprint(A_normed.shape)\nfrom torch_geometric.nn import GCN\n# how to generate graph?\n# breakpoint() # 34,34"
        }
    ]
}