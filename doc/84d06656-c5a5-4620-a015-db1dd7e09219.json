{
    "summary": "This code uses the SceneDetect library to detect scenes in a video file and split it into separate clips based on scene changes. It opens the video, creates a SceneManager object, adds a ContentDetector with a threshold value, detects scenes using the detector, retrieves the list of detected scenes, and then splits the video using ffmpeg according to the scene list.",
    "details": [
        {
            "comment": "This code uses the SceneDetect library to detect scenes in a video file and split it into separate clips based on scene changes. It opens the video, creates a SceneManager object, adds a ContentDetector with a threshold value, detects scenes using the detector, retrieves the list of detected scenes, and then splits the video using ffmpeg according to the scene list.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/get_scene_cuts.sh\":0-15",
            "content": "scenedetect -i sample.mp4 -s video.stats.csv detect-content list-scenes -f sample_scenes.csv\n# for dynamic analysis:\n# https://github.com/Breakthrough/PySceneDetect/README.md\n# from scenedetect import open_video, SceneManager, split_video_ffmpeg\n# from scenedetect.detectors import ContentDetector\n# from scenedetect.video_splitter import split_video_ffmpeg\n# def split_video_into_scenes(video_path, threshold=27.0):\n#     # Open our video, create a scene manager, and add a detector.\n#     video = open_video(video_path)\n#     scene_manager = SceneManager()\n#     scene_manager.add_detector(\n#         ContentDetector(threshold=threshold))\n#     scene_manager.detect_scenes(video, show_progress=True)\n#     scene_list = scene_manager.get_scene_list()\n#     split_video_ffmpeg(video_path, scene_list, show_progress=True)"
        }
    ]
}