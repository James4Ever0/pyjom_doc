{
    "summary": "The code loads and preprocesses training data using load_train_data_core function, iterating through indexes of text chunks, transforming words, and creating Word class instances. It applies shuffle and progress bar for efficient data access.",
    "details": [
        {
            "comment": "The code imports the progressbar and random libraries, defines a function load_train_data_core which takes optional parameters shuffle, batchsize, len_threshold, and no_unk. The filepath variable stores the path to a pickle file containing data for training. The function opens the file using pickle's open function in read binary mode and does not perform any additional operations on its contents before returning.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/title_cover_generator/commons.py\":0-16",
            "content": "sample_data = [\"\u3010\u7fce\u4f36\u3011world.execute;(me);\", \"\u3010\u5c01\u6821\u65e5\u5e38\u3011\u6c99\u62c9\u5236\u4f5c\", \"\u3010Blender\u573a\u666f\u52a8\u753b\u3011\u65b0\u4ee3 : \u57ce\u5e02\u3010VictoryLuode\u3011\", \"\u5386\u65f6733\u5929! \u5706\u4e86\u6316\u673a\u68a6\uff0c\u6211\u72ec\u7acb\u9020\u4e86\u4e00\u53f0\u53ef\u9065\u63a7\u5c0f\u578b\u6316\u673a\", \"\u3010\u96be\u61c2\u7684\u6570\u5b66\u3011\u5085\u91cc\u53f6\u3001\u62c9\u666e\u62c9\u65af\u3001\u5377\u79ef\u3001\u6b27\u62c9\u65b9\u7a0b\u3001\u68af\u5ea6\u6563\u5ea6\u3001\u62c9\u683c\u6717\u65e5\u65b9\u7a0b\u3001\u5948\u594e\u65af\u7279\u91c7\u6837\u3001\u865a\u6570\u7b49\u62bd\u8c61\u96be\u61c2\u6570\u5b66\u4e00\u7f51\u6253\u5c3d\", \"\u8fd9\u4e9bup\u4e3b\u662f\u4e2d\u5b66\u751f\u548c\u5927\u5b66\u751f\u7684\u6551\u661f\u554a\u554a\u554a\u554a\u554a\uff01\uff01\uff01\u5b66\u4e60\u65b9\u6cd5\uff5c\u514d\u8d39\u8bfe\u7a0b\uff5c\u5174\u8da3\u6280\u80fd\uff5c\u751f\u6daf\u89c4\u5212\", \"\u3010\u4e0d\u6b62\u6e38\u620f\u3011\u6e38\u620f\u548c\u7535\u5f71\u4e2d\u7684M4\uff0c\u7a76\u7adf\u6709\u591a\u7ecf\u5178\uff1f\", \"Steam++ \u65b0\u7248v2.7\u53d1\u5e03 \u65b0\u529f\u80fd\u4ecb\u7ecd\", \"\u624b\u7ed8503\u5f20\uff01\u8fd8\u539f\u6570\u7801\u5b9d\u8d1dOP\", \"\u597d\u53ef\u7231\u9e2d~ summertime\", \"\u7537\u5ba4\u53cb\u5077\u5077\u901b\u7ad9\u9177\u7f51\uff0c\u6bd5\u8bbe\u60ca\u8273\u5168\u6821\uff01\", \"\u5bf9\u4e0d\u8d77\uff0c\u6211\u7b11\u5f97\u771f\u7684\u5f88\u5927\u58f0\uff01\u3010\u7b2c\u4e00\u5c4a\u7acb\u76f4\u9ebb\u5c06\u8054\u8d5b\u3011\", \"\u5728\u5357\u4eac\u6bcf\u5929\u753b\u753b\u4e00\u5c0f\u65f6\uff0c\u5728\u5bb6\u63a5\u5355\u517b\u6d3b\u81ea\u5df1\uff01\", \"\u6ca1\u6709\u4ec0\u4e48\u4e8b\u60c5\u662f\u4e00\u4e2a\u7eb8\u56e2\u89e3\u51b3\u4e0d\u4e86\u7684\uff0c\u5982\u679c\u6709\u90a3\u5c31\u7528\u5f88\u591a\u4e2a\", \"\u5230\u5e95\u662f\u4ec0\u4e48\u8ba9\u6211\u80fd\u5728\u516c\u56ed\u5927\u7237\u9762\u524d\u5982\u6b64\u7684\u81ea\u4fe1\uff1f\", \"\u6b32\u62d4\u5c71\u57ce\u5be8\uff0c\u5148\u8fc7\u4e94\u864e\u5c06\", \"\u6768\u4f83\u6700\u4e0b\u996d\uff5c27 \u6768\u6bc5\uff1a\u7ecf\u7eaa\u4eba\u4e0d\u80fd\u592a\u8d2a\u5fc3\", \"\u3010\u6df1\u6e0a\u7684\u547c\u5524V\u3011\u5168\u7403\u603b\u51b3\u8d5b-\u51b3\u8d5b Wolves vs SST\", \"\u3010\u5b89\u7279\u536b\u666eMAJOR\u3011\u4e9a\u6d32\u533a\u9884\u9009\u8d5b TYLOO vs Renegades\", \"\u72fc\u961f\u7b2c\u4e94\u4eba\u683c\u5206\u90e8\u6210\u7acb\u4e24\u5468\u5e74\u5566\uff01\", \"\u3010\u5b88\u671b\u5148\u950b\u8054\u8d5b\u3011\u82f1\u96c4\u5d1b\u8d77!\u51c6\u5907\u597d\u8fce\u63a52022\u8d5b\u5b63!\"]\nimport progressbar\nimport random\ndef load_train_data_core(shuffle=True,batchsize=1,len_threshold = 2,no_unk=True):\n    filepath = \"/media/root/help/pyjom/tests/title_cover_generator/DianJing/data/basic_data_80k_v2.pkl\"\n    # warning...\n    import pickle\n    fobj = open(filepath, 'rb')\n    # print([fobj])\n    # breakpoint()\n    class Word:\n        def __init__(self,val,tf,df):\n            self.val = val"
        },
        {
            "comment": "The code is loading a pickle file, extracting relevant data including titles and abstracts. It then modifies some elements in the idx2word dictionary by replacing specific characters with formatted strings. The code provides random indexes for accessing the data and applies a shuffle if required. Lastly, it uses a progress bar for iterating over the shuffled indexes to access the data.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/title_cover_generator/commons.py\":17-43",
            "content": "            self.tf = tf\n            self.df = df\n        def __repr__(self):\n            pass\n    _, word2idx, idx2word, targets, srcs= pickle.load(fobj) # freaking swap.\n    # titles, abstracts\n    # print(titles) # these are not freaking words. numbers.\n    # print(abstracts)\n    for key in idx2word:\n        elem = idx2word[key]\n        if elem.startswith('<') and elem.endswith('>'):\n            elem = elem[1:-1].upper()\n            elem = \"[{}]\".format(elem)\n            idx2word[key] =elem\n    # you can freaking get the data.\n    # title = titles[0]\n    len_indexs = len(targets)\n    # indexs = [x for x in range(indexs)]\n        # random.shuffle(indexs)\n    randomIdx = [x for x in range(len_indexs)]\n    if shuffle:\n        random.shuffle(randomIdx)\n    randomIdx2 = [randomIdx[x*batchsize:(x+1)*batchsize] for x in range(len(randomIdx)//batchsize+1)]\n    len_srcs = len(srcs)\n    len_targets = len(targets)\n    # mfilter = lambda x: x.replace(\" \",\"\").replace(\"\\n\",\"\")\n    for indexs in progressbar.progressbar(randomIdx2):"
        },
        {
            "comment": "This code is iterating through indexes in two lists of text chunks, transforming them to word form, joining the words into strings, and removing [UNK] tokens if specified. If any resulting string exceeds a certain length threshold, it appends them to two result lists. The code yields these two result lists if there are at least one entry.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/title_cover_generator/commons.py\":44-66",
            "content": "        src_result=[]\n        target_result=[]\n        for index in indexs:\n            if index < len_srcs and index < len_targets:\n                src, target = srcs[index], targets[index]\n                src, target = [idx2word[x] for x in src], [idx2word[x] for x in target]\n                src, target = \"\".join(src),\"\".join(target)\n                if no_unk:\n                    src, target = src.replace(\"[UNK]\",\"\"), target.replace(\"[UNK]\",\"\")\n                # src, target = mfilter(src), mfilter(target)\n                if max(len(src),len(target)) > len_threshold:\n                    src_result.append(src)\n                    target_result.append(target)\n        if len(src_result) >0:\n            yield src_result,target_result\n    # for index in indexs:\n    #     title = titles[index]\n    #     mytitle = [idx2word[x] for x in title]\n    #     abstract = abstracts[index]\n    #     myabstract = [idx2word[x] for x in abstract]\n    #     if join:\n    #         yield \"\".join(mytitle), \"\".join(myabstract)\n    #     else: yield mytitle, myabstract"
        },
        {
            "comment": "The code defines a function `import_word` that returns a class named Word. The class has attributes `val`, `tf`, and `df`. The code then checks if it is being run as the main program and creates instances of the Word class from loaded data, printing title and abstract. It encounters a breakpoint to debug or inspect the handling of tokens in the code.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/title_cover_generator/commons.py\":67-86",
            "content": "    # print(mytitle)\n    # breakpoint()\ndef import_word():\n    # if __name__ == \"__main__\":\n    class Word:\n        def __init__(self,val,tf,df):\n            self.val = val\n            self.tf = tf\n            self.df = df\n        def __repr__(self):\n            pass\n    return Word\nif __name__ == '__main__':\n    Word = import_word()\n    for title, abstract in load_train_data_core():\n        print(title)\n        print(abstract) # we have <unk> tokens. how do we freaking deal with it?\n        breakpoint()"
        }
    ]
}