{
    "summary": "The code manages text display, handles line wrapping and background color updates, reads a file for processing, generates typography text with voice, applies random rotation and colors, saves screenshot or displays error message, then exits.",
    "details": [
        {
            "comment": "The code reads a text file, clears the target directory, sets up the screen size and font, and starts drawing characters onto the screen. It checks for line breaks and keeps track of the current position and text content. If there is no more text to process, it exits.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_practices/bilibili_tarot/scriptable_generate_typography_with_voice.py\":0-46",
            "content": "from p5 import *\nimport os\n# from test_common import demo_text\ndemo_text = open(\"demo_text.log\",\"r\",encoding=\"utf-8\").read()\nos.system(\"rm screenshot*\")\ntarget_dir = \"demo_typography\"\nos.system(\"rm -rf {}\".format(target_dir))\nos.system(\"mkdir {}\".format(target_dir))\ntsize = 70\ncounterx = 0\nxcoord = 20\nycoord = 75\nscrwidth = 1920\nscrheight = 1080\nlineNum = 0\n# what fucking ever.\ns = demo_text\ns0 = [\"\"]\ndef setup():\n    size(scrwidth,scrheight)\n    # text_font(create_font('./fonts/Fonts/\u535a\u6d0b\u884c\u4e663500.ttf', size=tsize))\n    text_font(create_font('./fonts/Fonts/\u4e66\u4f53\u574a\u5170\u4ead\u4f53I.ttf', size=tsize))\n    # text_font(create_font('./SimHei.ttf', size=tsize))\nimport random\ndef draw():\n    global counterx,xcoord,ycoord,s,s0,scrheight,scrwidth,lineNum,target_dir\n    if len(s0) ==1:\n        if len(s0[0]) == 0:\n            background(0)\n    if counterx > len(s)-1:\n        exit()\n    s1 = s[counterx]\n    returnFlag = False\n    if s1 == \"\\n\":\n        # this is return!\n        returnFlag = True\n        lineNum +=1\n        stemp0 = \"\" # this is nothing.\n        tw = text_width(stemp0)"
        },
        {
            "comment": "This code is handling text wrapping and line breaking for a text display system. It checks the text width and height, splitting lines when necessary and adjusting the number of lines based on available space. The code also clears the screen and updates the background color when needed to ensure proper visuals.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_practices/bilibili_tarot/scriptable_generate_typography_with_voice.py\":47-84",
            "content": "        th = tsize*(lineNum+1) + tsize*0.2*(lineNum)\n        if (ycoord+th> scrheight):\n            # stemp0 = s1\n            s0 = [stemp0]\n            clear()\n            background(0)\n            lineNum = 0\n        else:\n            s0.append(stemp0)\n    else:\n        stemp0 = s0[-1]+s1\n        tw = text_width(stemp0)\n        th = tsize*(lineNum+1) + tsize*0.2*lineNum\n        if (tw + xcoord+ tsize*0.5> scrwidth):\n            stemp0 = s1\n            s0.append(stemp0)\n            lineNum +=1\n            th = tsize*(lineNum+1) + tsize*0.2*lineNum\n            if (ycoord+th> scrheight):\n                # stemp0 = s1\n                s0 = [stemp0]\n                background(0)\n                lineNum = 0\n        else:\n            s0[-1]= stemp0\n        # no_loop()\n        # clear\n    # s0 = stemp0\n        # end all evil.\n    counterx+=1\n    # load_font(\"SimHei.ttf\")\n    # print(\"text w/h:\",tw,th)\n    # for l, text9 in enumerate(s0):\n    if len(s0) == 1 and len(s0[0])<=1: # whatever.\n        # breakpoint()\n        clear()\n        background(0)"
        },
        {
            "comment": "This code generates a typography text with voice and applies random rotation, colors, and adjusts position based on the length of the text. It saves a screenshot if no exception occurs, otherwise prints \"SHIT HAPPENED\" and continues. Finally, it exits and prints \"EXITED.\"",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/bilibili_practices/bilibili_tarot/scriptable_generate_typography_with_voice.py\":85-108",
            "content": "    # if not returnFlag:\n    # print(s0)\n    try:\n        text9 = s0[-1][-1]\n        # else:\n        #     text9 = \" \"\n        l = len(s0)-1\n        # rotate = random.randint(-15,15)\n        rotate = random.choice([random.randint(-20,-10),random.randint(10,20)])\n        r1 = random.randint(200,255)\n        r2 = random.randint(200,255)\n        r3 = random.randint(200,255)\n        r4 = random.randint(200,255)\n        fill(red=r1, green=r2, blue=r3, alpha=r4)\n        text(text9, (xcoord+text_width(s0[-1][:-1]), ycoord+ l*(tsize*1.2),),rotate = rotate)  # add str() to key\n    except:\n        import traceback\n        traceback.print_exc()\n        print(\"SHIT HAPPENED\")\n        pass\n    save_frame(\"{}/screenshot.png\".format(target_dir))\nrun()\nprint(\"EXITED.\")"
        }
    ]
}