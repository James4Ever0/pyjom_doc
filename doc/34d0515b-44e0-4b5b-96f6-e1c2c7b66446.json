{
    "summary": "This code utilizes yt-dlp to download Bilibili video sections with authentication, handles subtitles and danmaku, supports multiple portions, updates cookies, allows title-only downloads, and retrieves metadata.",
    "details": [
        {
            "comment": "This code snippet is for downloading specific sections of Bilibili videos using yt-dlp. It provides URLs for both single video parts and video collections, explains how to handle subtitles and danmaku (comments), and suggests using the --cookies-from-browser option for premium access.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/test_bilibili.sh\":0-25",
            "content": "# \u5173\u4e8e\u89c6\u9891\u5408\u96c6 \u5206p\u89c6\u9891\u7684\u5206\u6790\u903b\u8f91\uff1a\n# https://github.com/Satoing/python_bilibili_downloader/blob/master/bilibili_video.py\n# \u89e3\u6790\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u5f97\u5230\u5206p\u6216\u8005\u5408\u96c6\u7684\u4fe1\u606f \u4ee5\u53ca\u5b57\u5e55\u4fe1\u606f AI\u751f\u6210\u7684\u5b57\u5e55\n# https://api.bilibili.com/x/web-interface/view?bvid=BV1Fs411k7e9\n# https://api.bilibili.com/x/web-interface/view?bvid=BV1Cg411E7NF\nURL=\"https://www.bilibili.com/video/BV1Fs411k7e9\" #\u8001\u6234 \u9a6c\u514b\u601d\u4f69\u6069 \u5206p\u89c6\u9891\n# \u4e5f\u53ef\u4ee5\u76f4\u63a5\u7f51\u9875parse\n# executing this you will get \"subtitle\" in \"danmaku\" as language, in xml format.\n# \u5bf9\u4e8e\u6d77\u91cf\u5f39\u5e55\u7684\u67d0\u4e9b\u89c6\u9891 \uff08\u8d85\u7535\u78c1\u70ae 12w asoul\u7684\u67d0\u4e9b\u4e8c\u521b 3w\uff09\u4e0d\u5efa\u8bae\u8fdb\u884c\u5f39\u5e55\u5206\u6790 \u53ef\u4ee5\u901a\u8fc7API\u83b7\u53d6\u5f39\u5e55\u603b\u6570 \u4e0d\u4e0b\u8f7d\u5f39\u5e55 \n# yt-dlp --skip-download --list-subs -I 1 \"https://www.bilibili.com/video/BV1Fs411k7e9\"\n# URL=\"https://www.bilibili.com/video/BV1Cg411E7NF\" #\u82cf\u6253baka \u9b54\u6539\u673a\u7bb1 \u5408\u96c6\n# \u5408\u96c6\u89c6\u9891 \u7528bilibili_api \u6216\u8005\u76f4\u63a5\u7f51\u9875parse\u5373\u53ef\n# it has multiple videos. what to do?\n# --force-keyframes-at-cuts\n# man i just need the first chapter.\n# yt-dlp --download-sections \"*0:05:00-0:06:30\" --playlist-items \"1\" \"$URL\" # only first video.\n# premium?\n# this feature is awesome! how to extract cookies programmatically from browser?\n# Use --cookies-from-browser o"
        },
        {
            "comment": "The code is trying to download a specific portion of a Bilibili video, ensuring authentication by passing cookies from the browser (Firefox in this case) to yt-dlp. It forces keyframes at cuts for better results but notes that it's slower. The code provides different options to account for potential issues and suggests adding margin at tail or head if not using --force-keyframes-at-cuts, with a recommended 10 seconds or even 5 seconds depending on the need for caution.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/test_bilibili.sh\":25-41",
            "content": "r --cookies for the authentication. See  https://github.com/yt-dlp/yt-dlp/wiki/FAQ#how-do-i-pass-cookies-to-yt-dlp \n# not working for chromium on kali? (no bilibili cookie found) maybe it is relocated.\n# cookies = yt_dlp.cookies.extract_cookies_from_browser(BROWSER_NAME) -> YourubeDLCookieJar\n# save as Netscape HTTP Cookie File.\n# cookies.save(OUTPUT_FILE_PATH) \n# since we have issue playing content at tail of video, we do this.\n# yt-dlp --download-sections \"*0:05:00-0:06:30\" --playlist-items \"1\" --cookies-from-browser firefox --force-keyframes-at-cuts \"$URL\" # pass cookies.\n# forcing keyframe is much slower. but it produces better results.\n# yt-dlp --download-sections \"*0:05:00-0:06:30\" --playlist-items \"1\" --cookies-from-browser firefox --force-keyframes-at-cuts \"$URL\" # pass cookies.\n# you may want to add some margin at tail (or head) if not using \"--force-keyframes-at-cuts\", be it 10 seconds. usually jigs happens at 5 secs. but we are careful.\n# yt-dlp --download-sections \"*0:04:50-0:06:40\" --playlist-items \"1\" --cookies-from-browser firefox \"$URL\" # pass cookies."
        },
        {
            "comment": "The code tests downloading multiple video portions from Bilibili using yt-dlp with cookies stored, instead of retrieving them every time. It mentions that keeping all margins is better and suggests using a different format for the output file name.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/test_bilibili.sh\":43-58",
            "content": "# what if we download multiple sections?\n# no combination? shit.\n# if not at the very tail, other tails can be better than the last tail. but it is just my guess. better to keep all these margins!\n# yt-dlp --download-sections \"*0:04:50-0:05:40\" --download-sections \"*0:05:50-0:06:40\" --playlist-items \"1\" --cookies-from-browser firefox -o \"%(uploader_id)s-%(id)s-%(title)s-%(autonumber)s.%(ext)s\" \"$URL\" # pass cookies.\n# since we have cron job now, no need to do the old-school thing.\nyt-dlp --download-sections \"*0:04:50-0:05:40\" --download-sections \"*0:05:50-0:06:40\" --playlist-items \"1\" --cookies /root/.browser_cookies_exported/firefox.cookies -o \"%(uploader_id)s-%(id)s-%(title)s-%(autonumber)s.%(ext)s\" \"$URL\" # pass cookies in different way\n# like this: '2142762-BV1Fs411k7e9_p1-\u8001\u6234\u300a\u9a6c\u514b\u601d\u4f69\u6069 3\u300b\u5168\u6536\u96c6\u6d41\u7a0b\u653b\u7565\u3010\u517114\u671f\u5b8c\u7ed3\u3011 p01 EP-01-00002.mp4'\n# https://github.com/yt-dlp/yt-dlp#readme -> \"OUTPUT TEMPLATE\"\n# https://github.com/yt-dlp/yt-dlp/issues/4579\n# you better use stored cookies instead of retrieving cookies every time."
        },
        {
            "comment": "This code snippet provides various options for downloading or obtaining metadata from a Bilibili playlist using yt-dlp. The user can choose to update cookies regularly, download only the video title, or retrieve metadata for the entire playlist and each individual video in separate JSON files. The user can also use specific URLs to obtain comments without actually downloading the videos. The code suggests multiple usage scenarios for the 'download-sections' functionality.",
            "location": "\"/media/root/Toshiba XG3/works/pyjom_doc/src/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/test_bilibili.sh\":59-74",
            "content": "# or you can update cookies regularly with cronjob.\n# just want metadata?\n# if you want title for each video in playlist, you just get it from elsewhere or parse the damn output filename (slow, man!)\n# this seems to only have video description. nothing else! not even video length.\n# yt-dlp --write-description --write-playlist-metafiles --skip-download \"$URL\"\n# hey i don't want many download links. i just want title.\n# yt-dlp --write-info-json  --write-playlist-metafiles --skip-download \"$URL\" # this will get metadata main playlist and every video in the playlist in separate json files.\n# this is one of the video in that playlist. \"https://www.bilibili.com/video/BV1Fs411k7e9?p=1\n# you can get comments with this tool.\n## no comments?\n# yt-dlp --write-info-json --skip-download \"$URL\"\n# download-sections can be used multiple times?"
        }
    ]
}