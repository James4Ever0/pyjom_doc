{
    "2500": {
        "file_id": 267,
        "content": "import json\ndef jsonWalk(jsonObj,location=[]):\n    # this is not tuple. better convert it first?\n    # mlocation = copy.deepcopy(location)\n    if type(jsonObj) == dict:\n        for key in jsonObj:\n            content = jsonObj[key]\n            if type(content) not in [dict,list,tuple]: \n                yield location+[key], content\n            else:\n                # you really ok with this?\n                for mkey, mcontent in jsonWalk(content,location+[key]):\n                    yield mkey, mcontent\n    elif type(jsonObj) in [list,tuple]:\n        for key,content in enumerate(jsonObj):\n        # content = jsonObj[key]\n            if type(content) not in [dict,list,tuple]:\n                yield location+[key], content\n            else:\n                for mkey, mcontent in jsonWalk(content,location+[key]):\n                    yield mkey, mcontent\n    else:\n        raise Exception(\"Not a JSON compatible object: {}\".format(type(jsonObj)))\ndef jsonLocate(jsonObj,location=[]):\n    # print(\"object:\",jsonObj)\n    # print(\"location:\",location)",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/commons.py:1-29"
    },
    "2501": {
        "file_id": 267,
        "content": "This code defines two functions, `jsonWalk` and `jsonLocate`, which recursively traverse a JSON object and yield the location and value of each item. It handles dictionaries, lists, and tuples while raising an exception for non-JSON compatible types.",
        "type": "comment"
    },
    "2502": {
        "file_id": 267,
        "content": "    if location!=[]:\n        return jsonLocate(jsonObj[location[0]],location[1:])\n    return jsonObj\njson.__dict__.update({\"walk\":jsonWalk,\"locate\":jsonLocate})\ndef list_startswith(a,b):\n    value = 0\n    if len(a) < len(b): return False\n    for i,v in enumerate(b):\n        v0 = a[i]\n        if v == v0:\n            value +=1\n    return value == len(b)\ndef list_endswith(a,b):\n    value = 0\n    if len(a) < len(b): return False\n    c = a[-len(b):]\n    for i,v in enumerate(b):\n        v0 = c[i]\n        if v == v0:\n            value +=1\n    return value == len(b)\n# list.__dict__.update({\"startswith\": list_startswith,\"endswith\": list_endswith})",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/commons.py:30-57"
    },
    "2503": {
        "file_id": 267,
        "content": "The code contains functions for checking if a list starts or ends with another list, but they are not added to the list class. It also updates json's dictionary with \"walk\" and \"locate\" functions.",
        "type": "comment"
    },
    "2504": {
        "file_id": 268,
        "content": "/tests/bilibili_practices/bilibili_dollar/fetch_related_content.py",
        "type": "filepath"
    },
    "2505": {
        "file_id": 268,
        "content": "The code imports the \"VideosSearch\" class from the \"youtube-search-python\" package and uses it to search for videos related to drawing realistic US Dollars. It fetches the first 10 results, then prints each video's title, ID, author name, channel ID, and view count.",
        "type": "summary"
    },
    "2506": {
        "file_id": 268,
        "content": "#!pip3 install youtube-search-python\nfrom youtubesearchpython import VideosSearch\n# videosSearch = VideosSearch('画人民币', limit = 10)\nvideosSearch = VideosSearch('Draw realistic US Dollar', limit = 10)\n# videosSearch = VideosSearch('NoCopyrightSounds', limit = 2)\n# print(videosSearch.result())\ndata = videosSearch.result()\nfor elem in data[\"result\"]:\n    title = elem[\"title\"]\n    videoId = elem[\"id\"]\n    contentType = elem[\"type\"]\n    authorName = elem[\"channel\"][\"name\"]\n    channelId = elem[\"channel\"][\"id\"]\n    viewCount = elem[\"viewCount\"][\"text\"]\n    print(\"title\",title)\n    print(\"videoId\",videoId)\n    print(\"author\",authorName)\n    print(\"channel ID\",channelId)\n    print(\"viewCount\",viewCount)\n    print(\"_______________________________________\")",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_dollar/fetch_related_content.py:1-23"
    },
    "2507": {
        "file_id": 268,
        "content": "The code imports the \"VideosSearch\" class from the \"youtube-search-python\" package and uses it to search for videos related to drawing realistic US Dollars. It fetches the first 10 results, then prints each video's title, ID, author name, channel ID, and view count.",
        "type": "comment"
    },
    "2508": {
        "file_id": 269,
        "content": "/tests/bilibili_practices/bilibili_tarot/voice_with_pictures.py",
        "type": "filepath"
    },
    "2509": {
        "file_id": 269,
        "content": "This code converts text to speech audio using PaddleSpeech, merges and normalizes audio segments, generates voice and video files, and exports final videos with background music.",
        "type": "summary"
    },
    "2510": {
        "file_id": 269,
        "content": "import os\nfrom test_common import *\ndef split_sentences(sent):\n    spliters = \"\\n，。、\"\n    cursent = \"\"\n    results = []\n    for elem in sent:\n        cursent += elem\n        if elem in spliters:\n            results.append(cursent)\n            cursent = \"\"\n    if len(cursent) > 0:\n        results.append(cursent)\n    return results\ndef get_speech(sent,output):\n    assert output.endswith(\".wav\")\n    with open(\"temp.txt\", \"w+\",encoding=\"utf-8\") as f:\n        f.write(sent)\n    os.system(\"cat temp.txt | paddlespeech tts --output {}\".format(output))\nfrom pydub import AudioSegment\nfrom functional_gen_typo_video_seq import gen_video\ndef merge_audio(asegs):\n    audio_3 = AudioSegment.empty() #shit\n    for seg in asegs:\n        try:\n            audio_3 = audio_3.append(seg,crossfade=100) # also shit.\n        except:\n            audio_3 = audio_3.append(seg,crossfade=0) # also shit.\n    return audio_3\n    # audio_3.export(\"audio_3.wav\", format=\"wav\")\nif __name__ == \"__main__\":\n    sents = split_sentences(demo_text)\n    # breakpoint()",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/voice_with_pictures.py:1-38"
    },
    "2511": {
        "file_id": 269,
        "content": "This code performs text-to-speech (TTS) conversion and merges audio segments. It first splits a given sentence into individual sentences, then uses PaddleSpeech to convert the text to speech audio, which is saved with .wav extension. The resulting audio segments are merged using PyDub's AudioSegment module, allowing for seamless crossfades between audio chunks.",
        "type": "comment"
    },
    "2512": {
        "file_id": 269,
        "content": "    voice_dir = \"voice\"\n    video_dir = \"video\"\n    os.system(\"rm -rf {}\".format(voice_dir))\n    os.system(\"rm -rf {}\".format(video_dir))\n    os.mkdir(\"{}\".format(voice_dir))\n    os.mkdir(\"{}\".format(video_dir))\n    index = 0\n    voice_clips = []\n    video_names = []\n    for i,sent in enumerate(sents):\n        print(\"READING:\",sent)\n        aname = \"{}/{}.wav\".format(voice_dir,i)\n        get_speech(sent,aname)\n        seg = AudioSegment.from_wav(aname)\n        duration = seg.duration_seconds\n        voice_clips.append(seg)\n        # get the duration you fuck.\n        # breakpoint()\n        lsent = len(sent)\n        current_indexs = list(range(index,index+lsent))\n        index += lsent\n        # you can generate video for it.\n        vname = \"{}/{}.mp4\".format(video_dir,i)\n        gen_video(vname,current_indexs,duration)\n        video_names.append(vname)\n    # and finally?\n    final_video = \"{}/final_video.mp4\".format(video_dir)\n    final_audio = \"{}/final_audio.wav\".format(voice_dir)\n    audio_merged = merge_audio(voice_clips)",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/voice_with_pictures.py:39-68"
    },
    "2513": {
        "file_id": 269,
        "content": "This code clears the \"voice\" and \"video\" directories, creates new ones, reads each sentence from the input, converts it to audio, generates a video for each sentence, appends the corresponding audio clip and video name to their respective lists, and then merges all audio clips. The final video and audio files are named accordingly.",
        "type": "comment"
    },
    "2514": {
        "file_id": 269,
        "content": "    bgm_path = \"/root/Desktop/works/bilibili_tarot/some_bgm.mp3\"\n    bgm = AudioSegment.from_mp3(bgm_path)\n    # duration2 = audio_merged.duration_seconds\n    # bgm = bgm[:duration2*1000] # really?\n    # breakpoint()\n    # audio_merged = audio_merged.overlay(audio_merged,bgm,loop=True)  #wtf?\n    audio_merged = audio_merged.overlay(bgm,loop=True)\n    # audio_merged = audio_merged.normalize()\n    # is it needed?\n    # shit.\n    audio_merged.export(final_audio, format=\"wav\")\n    final_video2 = \"{}/final_video2.mp4\".format(video_dir)\n    with open(\"mylist.txt\",\"w+\") as f:\n        for n in video_names:\n            f.write(\"file \"+n+\"\\n\")\n    os.system(\"ffmpeg -f concat -safe 0 -i mylist.txt -c copy {}\".format(final_video))\n    os.system(\"ffmpeg -i {} -i {} -c:v copy -c:a aac -map 0:v:0 -map 1:a:0 {}\".format(final_video,final_audio,final_video2))",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/voice_with_pictures.py:69-87"
    },
    "2515": {
        "file_id": 269,
        "content": "The code imports audio files, merges them, normalizes the volume, and exports the final audio as a wav file. It then creates a mylist.txt file containing the video names, and uses ffmpeg to concatenate videos with the background music and export the final video2 in mp4 format.",
        "type": "comment"
    },
    "2516": {
        "file_id": 270,
        "content": "/tests/bilibili_practices/bilibili_tarot/test_common.py",
        "type": "filepath"
    },
    "2517": {
        "file_id": 270,
        "content": "The code sets the http and https proxies to empty strings, preventing any proxy usage, and assigns a demo text for use in testing.",
        "type": "summary"
    },
    "2518": {
        "file_id": 270,
        "content": "import os\nos.environ[\"http_proxy\"] = \"\"\nos.environ[\"https_proxy\"] = \"\"\ndemo_text = \"事情的开始，行动的改变，熟练的技术及技巧，贯彻我的意志，运用自然的力量来达到野心。\"",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/test_common.py:1-6"
    },
    "2519": {
        "file_id": 270,
        "content": "The code sets the http and https proxies to empty strings, preventing any proxy usage, and assigns a demo text for use in testing.",
        "type": "comment"
    },
    "2520": {
        "file_id": 271,
        "content": "/tests/bilibili_practices/bilibili_tarot/test_command.sh",
        "type": "filepath"
    },
    "2521": {
        "file_id": 271,
        "content": "This code is using the melt command to combine multiple screenshots into a single video file with transitions. It uses the \"composite\" and \"mix\" transitions, applies distortion effects, and outputs the final result at 60 FPS. The output is saved as a consumer XML file.",
        "type": "summary"
    },
    "2522": {
        "file_id": 271,
        "content": "melt -track \"color:#000000\" out=0 -track /root/Desktop/works/bilibili_tarot/demo_typography/screenshot0000.png in=\":0.000000\" out=\":0.570312\" output_fps=\"60\" -track -blank :0.570312 /root/Desktop/works/bilibili_tarot/demo_typography/screenshot0001.png in=\":0.000000\" out=\":0.570312\" output_fps=\"60\" -track -blank :1.140625 /root/Desktop/works/bilibili_tarot/demo_typography/screenshot0002.png in=\":0.000000\" out=\":0.570312\" output_fps=\"60\" -track -blank :1.710938 /root/Desktop/works/bilibili_tarot/demo_typography/screenshot0003.png in=\":0.000000\" out=\":0.570312\" output_fps=\"60\" -transition composite distort=0 a_track=0 b_track=1 -transition mix a_track=0 b_track=1 -transition composite distort=0 a_track=0 b_track=2 -transition mix a_track=0 b_track=2 -transition composite distort=0 a_track=0 b_track=3 -transition mix a_track=0 b_track=3 -transition composite distort=0 a_track=0 b_track=4 -transition mix a_track=0 b_track=4 -consumer xml",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/test_command.sh:1-1"
    },
    "2523": {
        "file_id": 271,
        "content": "This code is using the melt command to combine multiple screenshots into a single video file with transitions. It uses the \"composite\" and \"mix\" transitions, applies distortion effects, and outputs the final result at 60 FPS. The output is saved as a consumer XML file.",
        "type": "comment"
    },
    "2524": {
        "file_id": 272,
        "content": "/tests/bilibili_practices/bilibili_tarot/temp.txt",
        "type": "filepath"
    },
    "2525": {
        "file_id": 272,
        "content": "This code appears to be a message encouraging users to follow and continue, possibly in the context of social media or a platform like Bilibili. It could be used as a prompt for engagement or interaction.",
        "type": "summary"
    },
    "2526": {
        "file_id": 272,
        "content": "点个关注再走吧～",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/temp.txt:1-1"
    },
    "2527": {
        "file_id": 272,
        "content": "This code appears to be a message encouraging users to follow and continue, possibly in the context of social media or a platform like Bilibili. It could be used as a prompt for engagement or interaction.",
        "type": "comment"
    },
    "2528": {
        "file_id": 273,
        "content": "/tests/bilibili_practices/bilibili_tarot/tarot_descriptions.py",
        "type": "filepath"
    },
    "2529": {
        "file_id": 273,
        "content": "This code provides Tarot card interpretations for Rider-Waite deck, focusing on career, relationships, and personal growth. The Tower (XVI) represents change and urging embracing it for a better future.",
        "type": "summary"
    },
    "2530": {
        "file_id": 273,
        "content": "mdict = {0: \"\"\"【0】愚者（The Fool，0)\n正位释义：\n事情的开始，行动的改变，熟练的技术及技巧，贯彻我的意志，运用自然的力量来达到野心。\n逆位释义：\n意志力薄弱，起头难，走入错误的方向，知识不足，被骗和失败。\"\"\", 1: \"\"\"【1】魔术师（The Magician，I)\n牌面为罗马神话的诸神传信使墨丘利，有着自信的笑容和炯炯有神的眼睛。 牌的桌面摆了宇宙四要素∶权杖（火）、剑（风）、星币（土）、圣杯（水）魔术师头顶上有个无限的符号，腰带为一头尾相接的蛇，是精神永恒的象征。\n魔术师右手拿着权杖指向天空，左手指着地面，代表权力的交流和精神的赠与。魔术师脚底下为玫瑰和百合，表示人类的动机，反映神的意志，指挥天地。 玫瑰代表生，百合代表死亡。 魔术师为第一张牌，也暗示着你本身也是个魔术师，自己能操纵宇宙的力量。白色长袍代表纯洁的内心，深红色斗篷代表魔术师的活动意义深远。\"\"\", 2: \"\"\"【2】女祭司（The High Priestess，II)\n开发出内在的神秘潜力，前途将有所变化的预言，深刻地思考，敏锐的洞察力，准确的直觉。\n过于洁癖，无知，贪心，目光短浅，自尊心过高，偏差的判断，有勇无谋，自命不凡。\"\"\", 3: \"\"\"【3】女皇（The Empress，III)\n幸福，成功，收获，无忧无虑，圆满的家庭生活，良好的环境，美貌，艺术，与大自然接触，愉快的旅行，休闲。\n倒转解释：\n不活泼，缺乏上进心，散漫的生活习惯，无法解决的事情，不能看到成果，担于享乐，环境险恶，与家人发生纠纷。\"\"\", 4: \"\"\"【4】皇帝（The Emperor，IV)\n光荣，权力，胜利，握有领导权，坚强的意志，达成目标，父亲的责任，精神上的孤单。\n幼稚，无力，独裁，撒娇任性，平凡，没有自信，行动力不足，意志薄弱，被支配。\"\"\", 5: \"\"\"【5】教皇（The Hierophant，or the Pope，V)\n援助，同情，宽宏大量，可信任的人给予的劝告，良好的商量对象，得到精神上的满足，遵守规则，志愿者。信心十足，能正确理解事物本质，工作上外来压力过多，使你有被束缚的感觉。寻找新的工作方法，尽管会面对很大的阻力，但结果会证明这样做是值得的。爱情上屈从于他人的压力，只会按照对方的要求来盲目改变自己，自以为这是必要的付出，其实不过是被迫的选择。伴侣也不会对你保持忠诚，并很难满足双方真实的需要。\n错",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/tarot_descriptions.py:1-31"
    },
    "2531": {
        "file_id": 273,
        "content": "```python\n# tarot descriptions, each key-value pair represents a tarot card with its meaning and interpretations\nmdict = {\n    0: \"Tarot 0: The Fool - start of something, change, mastery, will, natural power\",\n    1: \"Tarot 1: The Magician - magic, confidence, universal connection, command\",\n    2: \"Tarot 2: The High Priestess - intuition, inner potential, insight, misguided pride\",\n    3: \"Tarot 3: The Empress - harmony, success, fulfillment, family, environment, beauty\",\n    4: \"Tarot 4: The Emperor - authority, strength, victory, fatherhood, isolation\",\n    5: \"Tarot 5: The Hierophant - guidance, compassion, spiritual growth, rule-following, sacrifice\"\n}\n```",
        "type": "comment"
    },
    "2532": {
        "file_id": 273,
        "content": "误的讯息，恶意的规劝，上当，援助被中断，愿望无法达成，被人利用，被放弃。事业上多了些灵活的态度，不再刻板遵循旧有的方式，勇于创新形成自己独特的理念，为自己的真实想法而活、而工作。感情上开始正视自己对感情的真实感受与做法，尽管依旧会听取对方的意见，但以不会全盘接受。当你感到无法接受对方的意见时，会及时与其沟通，找出改善关系的做法。\"\"\", 6: \"\"\"【6】恋人（The Lovers，VI)\n撮合，爱情，流行，兴趣，充满希望的未来，魅力，增加朋友。感情和肉体对爱的渴望，它暗示恋情将向彼此关系更亲密的方向发展。事业上将面临重大的抉择，它将关系到你的未来前途。\n禁不起诱惑，纵欲过度，反覆无常，友情变淡，厌倦，争吵，华丽的打扮，优柔寡断。感情上表现幼稚，对成长虽有期待与希望，却希望永远躲避危险，逃避责任。事业上总保持着很高的戒心，让人感到很不舒服，不愿同你合作。\"\"\", 7: \"\"\"【7】战车（The Chariot，VII)\n努力而获得成功，胜利，克服障碍，行动力，自立，尝试，自我主张，年轻男子，交通工具，旅行运大吉。事业上显示出才能，办事卓有成效。自信而富理智的你将让客户更有信心，愿意与你共同合作。在感情上正在努力控制自己的情绪，而且控制得很好，这让你的感情发展得更顺利。\n争论失败，发生纠纷，阻滞，违返规则，诉诸暴力，顽固的男子，突然的失败，不良少年，挫折和自私自利。放弃以往在事业上所坚持的，结局将会更加完美。感情上失去方向，你已经没有以往的冷静，这让对方在心中产生了不信任感，也许你要反省一下自己的所作所为了。\"\"\", 8: \"\"\"【8】力量（Strength，VIII）\n大胆的行动，有勇气的决断，新发展，大转机，异动，以意志力战胜困难，健壮的女人。在事业上你不断突破自我，上司和客户都对你有充分的信心，成就接踵而来。在爱情上，你将发展一段真正亲密的感情，你们全心投入，相互倾诉，丝毫没有距离感。\n胆小，输给强者，经不起诱惑，屈服在权威与常识之下，没有实践便告放弃，虚荣，懦弱，没有耐性。内心的恐惧使你畏首畏尾，进而遭遇事业的瓶颈，感到失去了自信。在爱情上患得患失，失去清醒的判断。\"\"\", 9: \"\"\"【9】隐者（The Hermit，IX)\n隐藏的事实，个别的行动，倾听他人的意见，享受孤独，自己的丢化，有益的警戒，年长者，避开危险，祖父，乡间生活。你在事业黄金时期引退，旁人都不了解这不过是你在为下一次黄金时期的到来进行休息。感情方面你将深刻思考自己在这段感情中的角色和地位，并探索彼此之间的关系。",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/tarot_descriptions.py:31-45"
    },
    "2533": {
        "file_id": 273,
        "content": "Code represents tarot card descriptions for the Rider-Waite tarot deck, with each numbered section corresponding to a specific tarot card. The descriptions provide insights into areas of life such as career, relationships, and personal growth based on the card's symbolism and interpretation.",
        "type": "comment"
    },
    "2534": {
        "file_id": 273,
        "content": "无视警，憎恨孤独，自卑，担心，幼稚思想，过于慎重导致失败，偏差，不宜旅行。在事业中过多的投入已经让你不愿面对其它事情，因而事业有了突破性的进展。在感情方面，用工作繁忙来逃避这段感情的发展，对伴侣态度冷淡，因为害怕感情的发展而在关键时刻退缩，使对方心寒。\"\"\", 10: \"\"\"【10】命运之轮（The Wheel of Fortune，X)\n关键性的事件，有新的机会，因的潮流，环境的变化，幸运的开端，状况好转，问题解决，幸运之神降临。命运之轮正转到了你人生最低迷的时刻，也许你有些无法接受，但是若能以平常心来看待，这无疑是你成长的最好时机，需要认真面对。感情方面所受到的挫折近乎让你崩溃，然而你还在不断努力。\n虽然你面前是无数的荆棘，但坚持过去将是平坦的大道。你会发现以前所付出的无谓努力，而今反而成了你前进的动力，先前的付出终于有了回报。命运之轮是由命运女神转动的，所以你俩之前的风风雨雨都将过去，关系将进入稳定的发展阶段。\n边疆的不行，挫折，计划泡汤，障碍，无法修正方向，往坏处发展，恶性循环，中断。\"\"\", 11: \"\"\"【11】正义（Justice，XI）\n公正、中立、诚实、心胸坦荡、表里如一、身兼二职、追求合理化、协调者、与法律有关、光明正大的交往、感情和睦。事业上你不会有其它太多的感觉，只是按照以前的计划认真地执行。你对感情生活相当满意，对于你的选择对方都是接受的态度。\n失衡、偏见、纷扰、诉讼、独断专行、问心有愧、无法两全、表里不一、男女性格不合、情感波折、无视社会道德的恋情。长时间的压抑使你在事业最关键的时刻倒下了，需要认真修整一番才能再次前进。感情上你一直忍让着，然而这次你却爆发了，开始指责对方的不是，你们的感情将会有很大的波折。\"\"\", 12: \"\"\"【12】倒吊人（The Hanged Man，XII)\n接受考验、行动受限、牺牲、不畏艰辛、不受利诱、有失必有得、吸取经验教训、浴火重生、广泛学习、奉献的爱。当牌面正立时，你的事业会有短暂的停顿，但你很清楚其中的原因，再次确认自己的目标，做好出发的准备。感情上同样需要反省的时间，你对爱情的牺牲对会给对方很大的触动，也会成为你们关系发展的催化剂。\n无谓的牺牲、骨折、厄运、不够努力、处于劣势、任性、利己主义者、缺乏耐心、受惩罚、逃避爱情、没有结果的恋情。当牌面倒立时，事业上缺乏远见，迷失了努力的目标。感情上你没有了为对方付出的念头，而对方对你的态度依旧，这使你更想逃避。你已经忽略了内心深处正确的判断力，这让你开始遇到很多失败。\"\"\", 13: \"\"\"【13】 死神（Death，XIII)",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/tarot_descriptions.py:47-61"
    },
    "2535": {
        "file_id": 273,
        "content": "Code snippet for Tarot card descriptions.",
        "type": "comment"
    },
    "2536": {
        "file_id": 273,
        "content": "失败、接近毁灭、生病、失业、维持停滞状态、持续的损害、交易停止、枯燥的生活、别离、重新开始、双方有很深的鸿沟、恋情终止。事业上你将放弃一些得到的利益，并获得全新的发展机会。在感情上，你将会发生深刻的变化，将开始新的阶段，接受事实你们会有更加美好的旅程。\n抱有一线希望、起死回生、回心转意、摆脱低迷状态、挽回名誉、身体康复、突然改变计划、逃避现实、斩断情丝、与旧情人相逢。事业上你在试图“两全其美”，希望能够发生奇迹。在感情上，对方已经接受了改变，而你却在逃避现实，你俩的距离正在越来越大。\"\"\", 14: \"\"\"【14】节制（Temperance，XIV)\n单纯、调整、平顺、互惠互利、好感转为爱意、纯爱、深爱。你在事业上小心翼翼，因为处事理智让你的同事感到十分放心。当下你们的感情简简单单，一切都是这么的单纯、平静，正是因为彼此的沟通才让这段感情之路如此通畅。\n消耗、下降、疲劳、损失、不安、不融洽、爱情的配合度不佳。在事业上，你陷入了朝令夕改的怪圈，不妨效仿一下愚人勇往直前，或许能够取得更大的成功。感情上彼此虽然还在不断尝试着沟通，但每次之后总是感觉没有收获，正因为如此你们之间的距离才会越拉越大。\"\"\", 15: \"\"\"【15】恶魔（The Devil ，XV)\n被束缚、堕落、生病、恶意、屈服、欲望的俘虏、不可抗拒的诱惑、颓废的生活、举债度日、不可告人的秘密、私密恋情。你将在事业中得到相当大的名声与财富，你心中的事业就是一切，财富就是你的目标。感情上你们开始被彼此束缚，却不希望改善这种关系，情愿忍受彼此的牵连和不满。\n逃离拘束、解除困扰、治愈病痛、告别过去、暂停、别离、拒绝诱惑、舍弃私欲、别离时刻、爱恨交加的恋情。事业上理性开始支配欲望，找到真正值得努力的目标。感情上开始尝试与对方进行沟通，这让你俩的感情更加牢固。\"\"\", 16: \"\"\"【16】塔（The Tower，XVI)\n破产、逆境、被开除、急病、致命的打击、巨大的变动、受牵连、信念崩溃、玩火自焚、纷扰不断、突然分离，破灭的爱。事业上的困难显而易见，回避不是办法，要勇于挑战，尽管它貌似强大。在感情方面，突然的改变让你陷入深深的痛苦中，接受改变可以让你或你们双方在未来的人生旅途中走得更好。\n困境、内讧、紧迫的状态、状况不佳、趋于稳定、骄傲自大将付出代价、背水一战、分离的预感、爱情危机。事业上开始有稳定的迹象，你不要盲目抵抗改变的发生",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/tarot_descriptions.py:63-77"
    },
    "2537": {
        "file_id": 273,
        "content": "这段代码是从pyjom/tests/bilibili_practices/bilibili_tarot/tarot_descriptions.py文件中截取的，用于描述塔（The Tower，XVI）这张毒诺牌的含义。在事业和感情方面都提到了突然的改变、困难、痛苦等内容，强调接受改变才能在未来的人生旅途中走得更好。",
        "type": "comment"
    },
    "2538": {
        "file_id": 273,
        "content": "，这只会导致更大的改变，无论你如何抵抗，改变终究会发生。在感情上双方的情绪终于平静下来，虽然沟通上还有些困难，但不会有太大的变化了，也许你做些让步，会让你们的感情更融洽。\"\"\", 17: \"\"\"【17】星星（The Star，XVII)\n前途光明、充满希望、想象力、创造力、幻想、满足愿望、水准提高、理想的对象、美好的恋情。代表当你在事业上得到希望的能量时，前途会无比光明。在感情方面，你对自己很有信心，对两人的关系也抱有乐观的态度，相信自己能把握主动权，并努力追求对方，你们很可能就是命中注定的那一对。\n挫折、失望、好高骛远、异想天开、仓皇失措、事与愿违、工作不顺心、情况悲观、秘密恋情、缺少爱的生活。在事业上，你不要全部依靠别人的给予，因为你还有希望在心中燃烧，只有靠自己才有真正的发展动力。感情方面你俩无法彼此信任，感觉无法把自己托付给对方，也许你们退一步，都冷静一下就能找出解决问题的途径，因为答案就在你们的心中。\"\"\", 18: \"\"\"【18】月亮（The Moon，XVIII)\n不安、迷惑、动摇、谎言、欺骗、鬼迷心窍、动荡的爱、三角关系。在事业上，你可能有些不满足，希望能够把自己内在的力量全使出来，于是你开始想要晚上的时间。感情方面，你很敏感害怕被伤害，尽管有伴侣的承诺，你仍然犹豫不决，甚至有逃避的想法。\n逃脱骗局、解除误会、状况好转、预知危险、等待、正视爱情的裂缝。在事业上，你因为外界的压力开始退缩了，并对自己的既定目标产生了怀疑。在感情上，你们之间的问题开始浮现，虽然有些痛，但是只要共同面对存在的困难，问题就解决一半了。\"\"\", 19: \"\"\"【19】太阳（The Sun，XIX)\n活跃、丰富的生命力、充满生机、精力充沛、工作顺利、贵人相助、幸福的婚姻、健康的交际。事业上会有贵人相助，将会有更好的发展机遇。在感情方面，你们已经走出坎坷的感情之路，前面将是洒满歌声和欢乐的坦途，你们将开始规划未来的生活。\n消沉、体力不佳、缺乏连续性、意气消沉、生活不安、人际关系不好、感情波动、离婚。事业上竞争心太急切了，把对手都吓跑了，然而也让合作伙伴感到害怕，或许你该放松些。感情上两人间出现一些小变化，开始在乎对方的态度和自己的付出，这些怀疑也许都是没必要的。\"\"\", 20: \"\"\"【20】审判（Judgement，XX)\n复活的喜悦、康复、坦白、好消息、好运气、初露锋芒、复苏的爱、重逢、爱的奇迹。当牌面正立时，事业上你超越了自我，在过去努力的基础上取得了成功。感情上双方都在认真学习和成长，虽然表面上的变化并不大，但内在的改变已经很大了。",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/tarot_descriptions.py:77-91"
    },
    "2539": {
        "file_id": 273,
        "content": "This Python code contains descriptions for the 17, 18, 19, and 20 tarot cards. It provides brief interpretations of each card's meaning in terms of future prospects, career, relationships, and personal growth.",
        "type": "comment"
    },
    "2540": {
        "file_id": 273,
        "content": "一蹶不振、幻灭、隐瞒、坏消息、无法决定、缺少目标、没有进展、消除、恋恋不舍。在事业上缺乏清晰的判断，试图用物质填充精神的空虚。在感情上，不断地回忆着过去的美好时光，不愿意去正视眼前的问题，你们的关系已经是貌合神离了。\"\"\", 21: \"\"\"【21】世界（The World，XXI)\n完成、成功、完美无缺、连续不断、精神亢奋、拥有毕生奋斗的目标、完成使命、幸运降临、快乐的结束、模范情侣。在事业上因为努力工作，所以回报丰厚。感情上，你们在彼此的承诺中持续着美好的关系。\n未完成、失败、准备不足、盲目接受、一时不顺利、半途而废、精神颓废、饱和状态、合谋、态度不够融洽、感情受挫。在事业的路上有巨大的障碍，你精神不振，丧失了挑战的动力。感情上，你们不再重视承诺，只是盲目接受对方。彼此最好能沟通一下，不要让痛苦继续纠缠着你们。\"\"\"}\nsmdict = {0: \"【权杖】（The Leangle)代表元素火，象征激情、能量和创造。\", 1: \"【星币】（The Garren)代表元素土，象征金钱、物质和享受。\",\n          2: \"【圣杯】（The Chalice)代表元素水，象征情感、关系、爱和灵感。\", 3: \"【宝剑】（The Blade)代表元素风，象征思想、智慧、交流和冲突。\"}\nsmdict2 = {1:\"COINS\",2:\"CUP\",3:\"SWORDS\",0:\"WANDS\"}\n#mdict 21, smdict 3\n# class py_solution:\ndef int_to_Roman(num):\n    lookup = [\n        (1000, 'M'),\n        (900, 'CM'),\n        (500, 'D'),\n        (400, 'CD'),\n        (100, 'C'),\n        (90, 'XC'),\n        (50, 'L'),\n        (40, 'XL'),\n        (10, 'X'),\n        (9, 'IX'),\n        (5, 'V'),\n        (4, 'IV'),\n        (1, 'I'),\n    ]\n    res = ''\n    for (n, roman) in lookup:\n        (d, num) = divmod(num, n)\n        res += roman * d",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/tarot_descriptions.py:93-125"
    },
    "2541": {
        "file_id": 273,
        "content": "This code is mapping the Tarot card descriptions and their corresponding numbers to different elements and card suits. It also includes a function int_to_Roman that converts an integer to its Roman numeral representation using lookup values for each Roman numeral value.",
        "type": "comment"
    },
    "2542": {
        "file_id": 273,
        "content": "    return res",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/tarot_descriptions.py:126-126"
    },
    "2543": {
        "file_id": 273,
        "content": "This code is returning the result (res) after some operation or function execution. It indicates that the previous code block was performing a calculation, query, or transformation, and now it's ready to deliver the outcome.",
        "type": "comment"
    },
    "2544": {
        "file_id": 274,
        "content": "/tests/bilibili_practices/bilibili_tarot/tarot_correspondences.py",
        "type": "filepath"
    },
    "2545": {
        "file_id": 274,
        "content": "This code loads tarot card images, maps them to numbers, checks for matches in directories, and prints the major/minor tarot cards along with their corresponding values.",
        "type": "summary"
    },
    "2546": {
        "file_id": 274,
        "content": "dirs =[\"tarot_pictures\",\"tarot_pictures2\"] \nimport os\nfrom tarot_descriptions import *\nmtarget_0 = {k:None for k in mdict.keys()}\nmtarget_1 = {k:None for k in smdict.keys()}\nfn = []\nfor d in dirs:\n    fnames = os.listdir(d)\n    fnames = [os.path.join(d,f) for f in fnames]\n    fn+= fnames\npopdict = []\nfor k in mtarget_0.keys():\n    if k == 0:\n        kv = \"0\"\n    else:\n        kv = int_to_Roman(k)\n    for f in fn:\n        fb = os.path.basename(f)\n        f0 = fb.split(\".\")[0].split(\"_\")[0]\n        if f0.upper() == kv:\n            mtarget_0[k] = f\n            break\n    if mtarget_0[k] is None:\n        popdict.append(k)\nfor k in popdict:\n    mtarget_0.pop(k)\npopdict = []\nfor k in mtarget_1.keys():\n    kv =  smdict2[k]\n    for f in fn:\n        fb = os.path.basename(f)\n        f0 = fb.split(\".\")[0].split(\"_\")[-1]\n        if kv.upper() in f0.upper():\n            mtarget_1[k] = f\n            break\n    if mtarget_1[k] is None:\n        popdict.append(k)\nfor k in popdict:\n    mtarget_1.pop(k)\n# print()\n# ########printing.\n# pretty good.",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/tarot_correspondences.py:1-48"
    },
    "2547": {
        "file_id": 274,
        "content": "This code is loading tarot card images and mapping them to their respective numbers. It first defines the directories containing the image files, then iterates over each directory, lists the files, and checks if the file name matches the corresponding tarot card number in Roman or Arabic numeral form. If a match is found, it assigns that image file to the respective dictionary (mtarget_0 for Arabic numbers, mtarget_1 for tarot card names). Finally, it removes any missing mappings from the dictionaries.",
        "type": "comment"
    },
    "2548": {
        "file_id": 274,
        "content": "# if __name__ == \"__main__\":\n#     for k in mtarget_0.keys():\n#         print(\"MAJOR\",k,mtarget_0[k])\n#     for k in mtarget_1.keys():\n#         print(\"MINOR\",k,mtarget_1[k])",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/tarot_correspondences.py:49-53"
    },
    "2549": {
        "file_id": 274,
        "content": "Code checks keys in mtarget_0 and mtarget_1 dictionaries, printing \"MAJOR\" followed by key and its value for mtarget_0, and \"MINOR\" followed by key and its value for mtarget_1.",
        "type": "comment"
    },
    "2550": {
        "file_id": 275,
        "content": "/tests/bilibili_practices/bilibili_tarot/scriptable_generate_typography_with_voice_underline_subtitle.py",
        "type": "filepath"
    },
    "2551": {
        "file_id": 275,
        "content": "This code imports necessary modules and sets up the environment for typography generation using voice underscore subtitle. It reads a demo text, creates a directory to save generated images, sets font and size, and draws each character on the screen with optional rotation and filling options.",
        "type": "summary"
    },
    "2552": {
        "file_id": 275,
        "content": "from p5 import *\nimport os\n# from test_common import demo_text\ndemo_text = open(\"demo_text.log\",\"r\",encoding=\"utf-8\").read()\nos.system(\"rm screenshot*\")\ntarget_dir = \"demo_typography\"\nos.system(\"rm -rf {}\".format(target_dir))\nos.system(\"mkdir {}\".format(target_dir))\ntsize = 100\ncounterx = 0\nscrwidth = 1920\nxcoord = int(scrwidth/2) # how to get this shit?\nscrheight = 1080\nycoord = scrheight - tsize - 75\nlineNum = 0\n# what fucking ever.\ns = demo_text\ns0 = [\"\"]\ndef setup():\n    size(scrwidth,scrheight)\n    # text_font(create_font('./fonts/Fonts/博洋行书3500.ttf', size=tsize))\n    # text_font(create_font('./fonts/Fonts/书体坊兰亭体I.ttf', size=tsize))\n    text_font(create_font('./SimHei.ttf', size=tsize))\nimport random\ndef draw():\n    global counterx,xcoord,ycoord,s,s0,scrheight,scrwidth,lineNum,target_dir\n    #force override.\n    background(0)\n    if counterx > len(s)-1:\n        exit()\n    s1 = s[:counterx]\n    counterx+=1\n    mtext_width = text_width(s1)\n    try:\n        text9 = s1\n        # else:\n        #     text9 = \" \"\n        # l = len(s0)-1",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/scriptable_generate_typography_with_voice_underline_subtitle.py:1-46"
    },
    "2553": {
        "file_id": 275,
        "content": "This code is importing necessary modules and setting up the environment for generating typography with voice underscore subtitle. It reads a demo text, creates a directory to save the generated images, sets up font and size, and begins drawing each character from the text on the screen.",
        "type": "comment"
    },
    "2554": {
        "file_id": 275,
        "content": "        # rotate = random.randint(-15,15)\n        # rotate = random.choice([random.randint(-20,-10),random.randint(10,20)])\n        rotate = 0\n        # r1 = random.randint(220,255)\n        # r2 = random.randint(220,255)\n        # r3 = random.randint(220,255)\n        # r4 = random.randint(220,255)\n        r1 = r2 = r3 = r4 = 255\n        fill(red=r1, green=r2, blue=r3, alpha=r4)\n        text(text9, (xcoord-int(mtext_width/2), ycoord,),rotate = rotate)  # add str() to key\n    except:\n        import traceback\n        traceback.print_exc()\n        print(\"SHIT HAPPENED\")\n        pass\n    save_frame(\"{}/screenshot.png\".format(target_dir))\nrun()\nprint(\"EXITED.\")",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/scriptable_generate_typography_with_voice_underline_subtitle.py:47-65"
    },
    "2555": {
        "file_id": 275,
        "content": "This code sets the rotate value to 0 and RGB values to 255 for filling text. It then displays the text at specified coordinates with optional rotation. If an exception occurs, it prints the traceback and a message before saving a screenshot. The program exits and prints \"EXITED.\"",
        "type": "comment"
    },
    "2556": {
        "file_id": 276,
        "content": "/tests/bilibili_practices/bilibili_tarot/scriptable_generate_typography_with_voice.py",
        "type": "filepath"
    },
    "2557": {
        "file_id": 276,
        "content": "The code manages text display, handles line wrapping and background color updates, reads a file for processing, generates typography text with voice, applies random rotation and colors, saves screenshot or displays error message, then exits.",
        "type": "summary"
    },
    "2558": {
        "file_id": 276,
        "content": "from p5 import *\nimport os\n# from test_common import demo_text\ndemo_text = open(\"demo_text.log\",\"r\",encoding=\"utf-8\").read()\nos.system(\"rm screenshot*\")\ntarget_dir = \"demo_typography\"\nos.system(\"rm -rf {}\".format(target_dir))\nos.system(\"mkdir {}\".format(target_dir))\ntsize = 70\ncounterx = 0\nxcoord = 20\nycoord = 75\nscrwidth = 1920\nscrheight = 1080\nlineNum = 0\n# what fucking ever.\ns = demo_text\ns0 = [\"\"]\ndef setup():\n    size(scrwidth,scrheight)\n    # text_font(create_font('./fonts/Fonts/博洋行书3500.ttf', size=tsize))\n    text_font(create_font('./fonts/Fonts/书体坊兰亭体I.ttf', size=tsize))\n    # text_font(create_font('./SimHei.ttf', size=tsize))\nimport random\ndef draw():\n    global counterx,xcoord,ycoord,s,s0,scrheight,scrwidth,lineNum,target_dir\n    if len(s0) ==1:\n        if len(s0[0]) == 0:\n            background(0)\n    if counterx > len(s)-1:\n        exit()\n    s1 = s[counterx]\n    returnFlag = False\n    if s1 == \"\\n\":\n        # this is return!\n        returnFlag = True\n        lineNum +=1\n        stemp0 = \"\" # this is nothing.\n        tw = text_width(stemp0)",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/scriptable_generate_typography_with_voice.py:1-47"
    },
    "2559": {
        "file_id": 276,
        "content": "The code reads a text file, clears the target directory, sets up the screen size and font, and starts drawing characters onto the screen. It checks for line breaks and keeps track of the current position and text content. If there is no more text to process, it exits.",
        "type": "comment"
    },
    "2560": {
        "file_id": 276,
        "content": "        th = tsize*(lineNum+1) + tsize*0.2*(lineNum)\n        if (ycoord+th> scrheight):\n            # stemp0 = s1\n            s0 = [stemp0]\n            clear()\n            background(0)\n            lineNum = 0\n        else:\n            s0.append(stemp0)\n    else:\n        stemp0 = s0[-1]+s1\n        tw = text_width(stemp0)\n        th = tsize*(lineNum+1) + tsize*0.2*lineNum\n        if (tw + xcoord+ tsize*0.5> scrwidth):\n            stemp0 = s1\n            s0.append(stemp0)\n            lineNum +=1\n            th = tsize*(lineNum+1) + tsize*0.2*lineNum\n            if (ycoord+th> scrheight):\n                # stemp0 = s1\n                s0 = [stemp0]\n                background(0)\n                lineNum = 0\n        else:\n            s0[-1]= stemp0\n        # no_loop()\n        # clear\n    # s0 = stemp0\n        # end all evil.\n    counterx+=1\n    # load_font(\"SimHei.ttf\")\n    # print(\"text w/h:\",tw,th)\n    # for l, text9 in enumerate(s0):\n    if len(s0) == 1 and len(s0[0])<=1: # whatever.\n        # breakpoint()\n        clear()\n        background(0)",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/scriptable_generate_typography_with_voice.py:48-85"
    },
    "2561": {
        "file_id": 276,
        "content": "This code is handling text wrapping and line breaking for a text display system. It checks the text width and height, splitting lines when necessary and adjusting the number of lines based on available space. The code also clears the screen and updates the background color when needed to ensure proper visuals.",
        "type": "comment"
    },
    "2562": {
        "file_id": 276,
        "content": "    # if not returnFlag:\n    # print(s0)\n    try:\n        text9 = s0[-1][-1]\n        # else:\n        #     text9 = \" \"\n        l = len(s0)-1\n        # rotate = random.randint(-15,15)\n        rotate = random.choice([random.randint(-20,-10),random.randint(10,20)])\n        r1 = random.randint(200,255)\n        r2 = random.randint(200,255)\n        r3 = random.randint(200,255)\n        r4 = random.randint(200,255)\n        fill(red=r1, green=r2, blue=r3, alpha=r4)\n        text(text9, (xcoord+text_width(s0[-1][:-1]), ycoord+ l*(tsize*1.2),),rotate = rotate)  # add str() to key\n    except:\n        import traceback\n        traceback.print_exc()\n        print(\"SHIT HAPPENED\")\n        pass\n    save_frame(\"{}/screenshot.png\".format(target_dir))\nrun()\nprint(\"EXITED.\")",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/scriptable_generate_typography_with_voice.py:86-109"
    },
    "2563": {
        "file_id": 276,
        "content": "This code generates a typography text with voice and applies random rotation, colors, and adjusts position based on the length of the text. It saves a screenshot if no exception occurs, otherwise prints \"SHIT HAPPENED\" and continues. Finally, it exits and prints \"EXITED.\"",
        "type": "comment"
    },
    "2564": {
        "file_id": 277,
        "content": "/tests/bilibili_practices/bilibili_tarot/pooling.py",
        "type": "filepath"
    },
    "2565": {
        "file_id": 277,
        "content": "This code creates a \"final_output\" directory and moves files from specified directories (\"major\", \"minor\", \"typo_0\", and \"typo_1\") to it, appending their filenames with the directory name. It also moves two specific video files to the same directory.",
        "type": "summary"
    },
    "2566": {
        "file_id": 277,
        "content": "dirs = [\"major\",\"minor\",\"typo_0\",\"typo_1\"]\nimport os\nimport shutil\nos.system(\"mkdir final_output\")\nfor d in dirs:\n    files = os.listdir(d)\n    for f in files:\n        fname = \"{}_{}\".format(d,f)\n        shutil.move(os.path.join(d,f),os.path.join(\"final_output\",fname))\nfor x in [\"intro_video.mp4\",\"outro_video.mp4\"]:\n    shutil.move(x,os.path.join(\"final_output\",x))",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/pooling.py:1-15"
    },
    "2567": {
        "file_id": 277,
        "content": "This code creates a \"final_output\" directory and moves files from specified directories (\"major\", \"minor\", \"typo_0\", and \"typo_1\") to it, appending their filenames with the directory name. It also moves two specific video files to the same directory.",
        "type": "comment"
    },
    "2568": {
        "file_id": 278,
        "content": "/tests/bilibili_practices/bilibili_tarot/mylist.txt",
        "type": "filepath"
    },
    "2569": {
        "file_id": 278,
        "content": "This code appears to be a text file listing videos in a specific order, potentially for a media player or organization system. The video files are named \"video/0.mp4\" and \"video/1.mp4\".",
        "type": "summary"
    },
    "2570": {
        "file_id": 278,
        "content": "file video/0.mp4\nfile video/1.mp4",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/mylist.txt:1-2"
    },
    "2571": {
        "file_id": 278,
        "content": "This code appears to be a text file listing videos in a specific order, potentially for a media player or organization system. The video files are named \"video/0.mp4\" and \"video/1.mp4\".",
        "type": "comment"
    },
    "2572": {
        "file_id": 279,
        "content": "/tests/bilibili_practices/bilibili_tarot/kill_xb.sh",
        "type": "filepath"
    },
    "2573": {
        "file_id": 279,
        "content": "This script kills processes named \"xvfb\" and \"scriptable_generate_typography\" by first listing all processes, filtering out grep processes, searching for the desired process names, printing their PIDs, and then sending a TERM signal to kill them.",
        "type": "summary"
    },
    "2574": {
        "file_id": 279,
        "content": "ps aux | grep -v grep | grep xvfb | awk '{print $2}' | xargs -iabc kill -s TERM abc\nps aux | grep -v grep | grep scriptable_generate_typography | awk '{print $2}' | xargs -iabc kill -s TERM abc",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/kill_xb.sh:1-2"
    },
    "2575": {
        "file_id": 279,
        "content": "This script kills processes named \"xvfb\" and \"scriptable_generate_typography\" by first listing all processes, filtering out grep processes, searching for the desired process names, printing their PIDs, and then sending a TERM signal to kill them.",
        "type": "comment"
    },
    "2576": {
        "file_id": 280,
        "content": "/tests/bilibili_practices/bilibili_tarot/kill_pdspc.sh",
        "type": "filepath"
    },
    "2577": {
        "file_id": 280,
        "content": "This command finds processes named \"paddlespeech\", gets their process IDs, and then kills them using the KILL signal.",
        "type": "summary"
    },
    "2578": {
        "file_id": 280,
        "content": "ps aux | grep -v grep | grep paddlespeech | awk '{print $2}' | xargs -iabc kill -s KILL abc",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/kill_pdspc.sh:1-1"
    },
    "2579": {
        "file_id": 280,
        "content": "This command finds processes named \"paddlespeech\", gets their process IDs, and then kills them using the KILL signal.",
        "type": "comment"
    },
    "2580": {
        "file_id": 281,
        "content": "/tests/bilibili_practices/bilibili_tarot/get_tarots.py",
        "type": "filepath"
    },
    "2581": {
        "file_id": 281,
        "content": "The code retrieves Tarot card images from \"i0.hdslb.com\" domain, uses PaddleOCR for recognition, saves high certainty recognized files with new names.",
        "type": "summary"
    },
    "2582": {
        "file_id": 281,
        "content": "links = [\"https://i0.hdslb.com/bfs/article/231a2286704d13675c25df228abed3d2ddbf2d00.jpg\",\"https://i0.hdslb.com/bfs/article/c841534b39133e4e96f8bbb19a4471843243c5d4.jpg\",\"https://i0.hdslb.com/bfs/article/7913498bb634b8a13c1b60dbdcaed4463fa17f50.jpg\",\"https://i0.hdslb.com/bfs/article/ec07923700f633578a681c56a008505893cf47a6.jpg\",\"https://i0.hdslb.com/bfs/article/c2691feff128c0b982d9d28ce798b3a3327fd161.jpg\",\"https://i0.hdslb.com/bfs/article/78d92d8abac6fbb8a1a3c9bcf44b76b9e2b709c9.jpg\",\"https://i0.hdslb.com/bfs/article/1d8bc016bd9593a1ffc7c6ace7a0b6e2795ba24a.jpg\",\"https://i0.hdslb.com/bfs/article/e9a3e50378caf80fa7f1584813e7d88ea5f4e4f3.jpg\",\"https://i0.hdslb.com/bfs/article/b73f8a8bc1f215af7e181e1e5f4a682d353dd7f5.jpg\",\"https://i0.hdslb.com/bfs/article/9ebb2bf93fcd4bf0c0dd413c378ebe6b6c4b436a.jpg\",\"https://i0.hdslb.com/bfs/article/063b2dee6bb57a5de4fd518d671e2fc384089705.jpg\",\"https://i0.hdslb.com/bfs/article/9061adbc1f3fe0a6a591e64972feeef126d405bd.jpg\",\"https://i0.hdslb.com/bfs/artic",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/get_tarots.py:1-1"
    },
    "2583": {
        "file_id": 281,
        "content": "The code contains a list of URLs to images.",
        "type": "comment"
    },
    "2584": {
        "file_id": 281,
        "content": "le/16a5af1e204e9d99e29ce567da625fe4cbf97654.jpg\",\"https://i0.hdslb.com/bfs/article/064628af3ba2caad6da4f256c1203a2e5abc84d5.jpg\",\"https://i0.hdslb.com/bfs/article/e91f4d2080851dcd3b7d95b5899c3819379e7419.jpg\",\"https://i0.hdslb.com/bfs/article/ed7503d3465cc98c4f33c7269d4003dff5c0e30e.jpg\",\"https://i0.hdslb.com/bfs/article/30ead312e5de86bab22b1408cfd7e343f7a444ba.jpg\",\"https://i0.hdslb.com/bfs/article/8f099a8a276dcc0304d5ab8032bcca6df92fad45.jpg\",\"https://i0.hdslb.com/bfs/article/d64bde431d4696dc049ccc156689d00f8b56d3e4.jpg\",\"https://i0.hdslb.com/bfs/article/e7b7805ffb07eee969a18b543a342290e847a488.jpg\",\"https://i0.hdslb.com/bfs/article/f6aad92efa9a9db5ab650cc9d958899d3eb0ccc5.jpg\",\"https://i0.hdslb.com/bfs/article/e0ef8a4a11c3451a81e8f8a4aea0460f308aed6d.jpg\",\"https://i0.hdslb.com/bfs/article/7000095230b4d1e4e9c82f596228342a38fceb3b.jpg\"]\n# links = [\"https://i0.hdslb.com/bfs/article/328165fb5c73e4b9a11eb335a6ccbad144606495.jpg\",\"https://i0.hdslb.com/bfs/article/02db465212d3c374a43c60fa26",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/get_tarots.py:1-4"
    },
    "2585": {
        "file_id": 281,
        "content": "Code is listing a series of URLs for images, possibly used for retrieving image resources from the internet.",
        "type": "comment"
    },
    "2586": {
        "file_id": 281,
        "content": "25cc1caeaab796.png\",\"https://i0.hdslb.com/bfs/article/ef99b038b6c254b5ee3c77641a2d24523b2f2549.jpg\",\"https://i0.hdslb.com/bfs/article/6831c04615d8c2656bf9edb260b2692600506b12.jpg\",\"https://i0.hdslb.com/bfs/article/b6e798cc616440a2d8f0e3da08f2e47deb3dea5e.jpg\",\"https://i0.hdslb.com/bfs/article/d6a352ed8ef2662b249b31617d16cb7b49012980.jpg\",\"https://i0.hdslb.com/bfs/article/3ece6a53ffc6d1b934830771861087477def3754.jpg\",\"https://i0.hdslb.com/bfs/article/f0207ebb2a7d120ebd22cec39cf242888747f1aa.jpg\",\"https://i0.hdslb.com/bfs/article/fe80a0fcaecbca438a28dcf6d64b2fdfcf0395dd.jpg\",\"https://i0.hdslb.com/bfs/article/6b60f9321e1c902983020925b9cd77eeb90b0d37.jpg\",\"https://i0.hdslb.com/bfs/article/0e4460990f511fdbdd035872d9e4019d1a91a1c2.jpg\",\"https://i0.hdslb.com/bfs/article/92746eb9f9b399b7f959040e4e108099282c7e78.jpg\",\"https://i0.hdslb.com/bfs/article/41cbd61a4ff091d8a812f2c156b41a42e7cfbcee.jpg\",\"https://i0.hdslb.com/bfs/article/419c0b63e00243fd36a664625528817c5e9b56f9.jpg\",\"https://i0.hdslb.co",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/get_tarots.py:4-4"
    },
    "2587": {
        "file_id": 281,
        "content": "This code contains a list of URLs for images, possibly used to display Tarot card art in an application.",
        "type": "comment"
    },
    "2588": {
        "file_id": 281,
        "content": "m/bfs/article/920f5219d12369d35025f415456a1c8f17af80f0.jpg\",\"https://i0.hdslb.com/bfs/article/f06e85b771817651287a5550a52ab2d407b9bdfd.jpg\",\"https://i0.hdslb.com/bfs/article/4c24e5879af822216e609aa6d7e0aab35fdea868.jpg\",\"https://i0.hdslb.com/bfs/article/3a016ea4f11e086547d5b3cafae7ab4014934415.jpg\",\"https://i0.hdslb.com/bfs/article/57185c84c272c0f9ee70a18a5a969236c43da5d9.jpg\",\"https://i0.hdslb.com/bfs/article/8d2de4ec7b46001041b1b9434f80a4db48cb0182.jpg\",\"https://i0.hdslb.com/bfs/article/780aef80d7246206a5bb4927e2834dc55286fb19.jpg\",\"https://i0.hdslb.com/bfs/article/246967f4d22e55c70666b4ac41205dd2c6cd3cde.jpg\",\"https://i0.hdslb.com/bfs/article/84f521382f7c02e6e4ea0daabb6e93192134372a.jpg\",\"https://i0.hdslb.com/bfs/article/7fd2ad226c81b31d397323891c8194d67f2fdf2b.jpg\",\"https://i0.hdslb.com/bfs/article/eee197d9172b1c38218ab642596b2990afcc383c.jpg\",\"https://i0.hdslb.com/bfs/article/736b5609c526379a8089a7741e19586eebeeb3e2.jpg\",\"https://i0.hdslb.com/bfs/article/93b97faaaa5a14242d21a2e592",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/get_tarots.py:4-4"
    },
    "2589": {
        "file_id": 281,
        "content": "This code is a list of URLs for different images, likely used in a web context. Each URL corresponds to an image file hosted on the \"i0.hdslb.com\" domain. The exact purpose or application context is not clear from this snippet alone.",
        "type": "comment"
    },
    "2590": {
        "file_id": 281,
        "content": "b03b87fa0c5ff3.jpg\",\"https://i0.hdslb.com/bfs/article/ea528dc4bc964eaf9960fdc9d399b03f87db9ddb.jpg\"]\nimport requests\nimport cv2 # will it work?\nimport uuid\nimport shutil\nfrom test_common import *\n# import paddleocr\nfrom paddleocr import PaddleOCR,draw_ocr\nbasepath = \"tarot_pictures\"\n# basepath = \"tarot_pictures2\"\n# Paddleocr supports Chinese, English, French, German, Korean and Japanese.\n# You can set the parameter `lang` as `ch`, `en`, `french`, `german`, `korean`, `japan`\n# to switch the language model in order.\nocr = PaddleOCR(use_angle_cls=True, lang='en') # need to run only once to download and load model into memory\n# img_path = 'PaddleOCR/doc/imgs_en/img_12.jpg'\n# result = ocr.ocr(img_path, cls=True)\n# for line in result:\n#     print(line)\nos.system(\"rm -rf {}\".format(basepath))\nos.system(\"mkdir {}\".format(basepath))\nfor imglink in links:\n    print(\"DOWNLOADING:\",imglink)\n    while True:\n        try:\n            r = requests.get(imglink)\n            break\n        except:\n            continue\n    data = r.content # save as picture.",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/get_tarots.py:4-36"
    },
    "2591": {
        "file_id": 281,
        "content": "The code imports necessary libraries and initializes a PaddleOCR object. It then clears the specified directory and downloads images from provided links, one by one, until successful download is achieved.",
        "type": "comment"
    },
    "2592": {
        "file_id": 281,
        "content": "    tmpname = \"{}.jpg\".format(str(uuid.uuid4()))\n    tmpname = os.path.join(basepath,tmpname)\n    with open(tmpname,\"wb\") as f:\n        f.write(data)\n    new_name = []\n    picture = cv2.imread(tmpname)\n    result = ocr.ocr(picture, cls=True)\n    for line in result:\n        ((x1,y1),(x2,y2),(x3,y3),(x4,y4)), (string,certainty) = line\n        if certainty > 0.7:\n            new_name.append(string)\n    new_name = \"_\".join(new_name)\n    switch = len(new_name)>3\n    if switch:\n        new_name = \"{}.jpg\".format(new_name)\n        new_name = os.path.join(basepath,new_name)\n        print(\"NEWNAME:\",new_name)\n        shutil.move(tmpname,new_name)",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/get_tarots.py:37-54"
    },
    "2593": {
        "file_id": 281,
        "content": "This code generates a temporary file name, reads image data from 'data' variable into the file, and uses OpenCV to read the image. It then performs OCR (optical character recognition) on the image using the 'ocr' function. The recognized text lines are checked for certainty, and if it exceeds 0.7, the string is added to a new_name list. If the length of the new name is greater than 3 characters, it generates a final file name and moves the temporary file to its permanent location using 'shutil.move()'. It also prints \"NEWNAME:\" followed by the new file name to the console.",
        "type": "comment"
    },
    "2594": {
        "file_id": 282,
        "content": "/tests/bilibili_practices/bilibili_tarot/get_foreground.py",
        "type": "filepath"
    },
    "2595": {
        "file_id": 282,
        "content": "This code reads two image files, converts them to grayscale, and creates a mask where pixels with absolute difference less than 40 are set to 0 (black) and others are set to 255 (white). The resulting mask is displayed using OpenCV.",
        "type": "summary"
    },
    "2596": {
        "file_id": 282,
        "content": "background = 'tarot_pictures2/BLANK.jpg'\nforeground = 'tarot_pictures2/ACE_OF_SWORDS.jpg'\nimport cv2\nimport numpy as np\npic1 = cv2.imread(background)\npic2 = cv2.imread(foreground)\nh2,w2,c2 = pic2.shape\npic1.resize(h2,w2,c2)\n# print(pic1.shape)\n# print(pic2.shape)\npic1_b = cv2.cvtColor(pic1, cv2.COLOR_BGR2GRAY)\npic2_b = cv2.cvtColor(pic2, cv2.COLOR_BGR2GRAY)\npic3 = np.where(abs(pic1_b-pic2_b)<40, 0,255).astype(np.uint8)\ncv2.imshow(\"mask\",pic3)\ncv2.waitKey(0)\n# print(pic3)\n# print(pic1.dtype)",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_tarot/get_foreground.py:1-24"
    },
    "2597": {
        "file_id": 282,
        "content": "This code reads two image files, converts them to grayscale, and creates a mask where pixels with absolute difference less than 40 are set to 0 (black) and others are set to 255 (white). The resulting mask is displayed using OpenCV.",
        "type": "comment"
    },
    "2598": {
        "file_id": 283,
        "content": "/tests/bilibili_practices/bilibili_tarot/get_figures.js",
        "type": "filepath"
    },
    "2599": {
        "file_id": 283,
        "content": "This code retrieves all \"figure\" tags from the HTML document, extracts the URLs of the first image in each figure using their \"data-src\" attribute, removes the \"@\" symbol, and replaces \"//\" with \"https://\". Finally, it logs the extracted URLs as a JSON string to the console.",
        "type": "summary"
    }
}