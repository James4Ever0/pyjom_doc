{
    "5300": {
        "file_id": 688,
        "content": "ffmpeg -y -ss 0.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_0.jpg\nffmpeg -y -ss 0.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_1.jpg\nffmpeg -y -ss 0.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_2.jpg\nffmpeg -y -ss 1.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_3.jpg\nffmpeg -y -ss 1.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_4.jpg\nffmpeg -y -ss 1.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_5.jpg\nffmpeg -y -ss 1.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_6.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:1-7"
    },
    "5301": {
        "file_id": 688,
        "content": "This code uses FFmpeg to capture screenshots at specific time intervals from a video file. It crops the screenshots with specific dimensions and saves them in the \"pip_examine\" folder.",
        "type": "comment"
    },
    "5302": {
        "file_id": 688,
        "content": "ffmpeg -y -ss 1.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_7.jpg\nffmpeg -y -ss 2.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_8.jpg\nffmpeg -y -ss 2.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:200 -vframes 1 pip_examine/screenshot_9.jpg\nffmpeg -y -ss 2.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:200 -vframes 1 pip_examine/screenshot_10.jpg\nffmpeg -y -ss 2.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:200 -vframes 1 pip_examine/screenshot_11.jpg\nffmpeg -y -ss 2.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:624:68:200 -vframes 1 pip_examine/screenshot_12.jpg\nffmpeg -y -ss 3.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:608:68:212 -vframes 1 pip_examine/screenshot_13.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:8-14"
    },
    "5303": {
        "file_id": 688,
        "content": "These ffmpeg commands capture screenshots at specific timestamps from a video file and save them with corresponding filenames in the pip_examine directory. The `-ss`, `-i`, `-vf`, and `-vframes` options specify the start time, input file, video filter, and number of frames to capture for each screenshot respectively.",
        "type": "comment"
    },
    "5304": {
        "file_id": 688,
        "content": "ffmpeg -y -ss 3.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:608:68:212 -vframes 1 pip_examine/screenshot_14.jpg\nffmpeg -y -ss 3.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:608:68:212 -vframes 1 pip_examine/screenshot_15.jpg\nffmpeg -y -ss 3.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:608:68:216 -vframes 1 pip_examine/screenshot_16.jpg\nffmpeg -y -ss 3.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:608:68:216 -vframes 1 pip_examine/screenshot_17.jpg\nffmpeg -y -ss 4.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:608:68:218 -vframes 1 pip_examine/screenshot_18.jpg\nffmpeg -y -ss 4.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:608:68:218 -vframes 1 pip_examine/screenshot_19.jpg\nffmpeg -y -ss 4.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:608:68:218 -vframes 1 pip_examine/screenshot_20.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:15-21"
    },
    "5305": {
        "file_id": 688,
        "content": "This code uses FFmpeg to capture screenshots at specific timestamps from a video file. It crops the images to a particular size and saves them with sequential filenames in the \"pip_examine\" directory.",
        "type": "comment"
    },
    "5306": {
        "file_id": 688,
        "content": "ffmpeg -y -ss 4.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:624:68:218 -vframes 1 pip_examine/screenshot_21.jpg\nffmpeg -y -ss 4.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:624:68:212 -vframes 1 pip_examine/screenshot_22.jpg\nffmpeg -y -ss 5.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:200 -vframes 1 pip_examine/screenshot_23.jpg\nffmpeg -y -ss 5.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:200 -vframes 1 pip_examine/screenshot_24.jpg\nffmpeg -y -ss 5.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:200 -vframes 1 pip_examine/screenshot_25.jpg\nffmpeg -y -ss 5.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:656:68:186 -vframes 1 pip_examine/screenshot_26.jpg\nffmpeg -y -ss 5.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:656:68:186 -vframes 1 pip_examine/screenshot_27.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:22-28"
    },
    "5307": {
        "file_id": 688,
        "content": "This code uses FFmpeg to capture a series of screenshots from a video at specific timestamps, cropping the images with specific dimensions and saving them in the \"pip_examine\" folder.",
        "type": "comment"
    },
    "5308": {
        "file_id": 688,
        "content": "ffmpeg -y -ss 6.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:656:68:186 -vframes 1 pip_examine/screenshot_28.jpg\nffmpeg -y -ss 6.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:656:68:186 -vframes 1 pip_examine/screenshot_29.jpg\nffmpeg -y -ss 6.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_30.jpg\nffmpeg -y -ss 6.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_31.jpg\nffmpeg -y -ss 6.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_32.jpg\nffmpeg -y -ss 7.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_33.jpg\nffmpeg -y -ss 7.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_34.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:29-35"
    },
    "5309": {
        "file_id": 688,
        "content": "This code is using FFmpeg to capture screenshots from a video at specific time intervals. It crops the images and saves them with corresponding filenames in the \"pip_examine\" directory.",
        "type": "comment"
    },
    "5310": {
        "file_id": 688,
        "content": "ffmpeg -y -ss 7.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_35.jpg\nffmpeg -y -ss 7.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_36.jpg\nffmpeg -y -ss 7.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_37.jpg\nffmpeg -y -ss 8.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_38.jpg\nffmpeg -y -ss 8.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_39.jpg\nffmpeg -y -ss 8.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_40.jpg\nffmpeg -y -ss 8.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_41.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:36-42"
    },
    "5311": {
        "file_id": 688,
        "content": "The code is using FFmpeg to capture screenshots at specific timestamps of a video file, crop the images, and save them with corresponding filenames. It runs for 10 different timestamps.",
        "type": "comment"
    },
    "5312": {
        "file_id": 688,
        "content": "ffmpeg -y -ss 8.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_42.jpg\nffmpeg -y -ss 9.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_43.jpg\nffmpeg -y -ss 9.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_44.jpg\nffmpeg -y -ss 9.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_45.jpg\nffmpeg -y -ss 9.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_46.jpg\nffmpeg -y -ss 9.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_47.jpg\nffmpeg -y -ss 10.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_48.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:43-49"
    },
    "5313": {
        "file_id": 688,
        "content": "This code is using ffmpeg to capture screenshots at specific time intervals from a video file, saving each as an individual .jpg image in the pip_examine directory. The crop filters are applied to ensure the correct portion of the frame is captured for each shot.",
        "type": "comment"
    },
    "5314": {
        "file_id": 688,
        "content": "ffmpeg -y -ss 10.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:656:68:200 -vframes 1 pip_examine/screenshot_49.jpg\nffmpeg -y -ss 10.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:656:68:202 -vframes 1 pip_examine/screenshot_50.jpg\nffmpeg -y -ss 10.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:480:68:378 -vframes 1 pip_examine/screenshot_51.jpg\nffmpeg -y -ss 10.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:480:68:378 -vframes 1 pip_examine/screenshot_52.jpg\nffmpeg -y -ss 11.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:480:68:378 -vframes 1 pip_examine/screenshot_53.jpg\nffmpeg -y -ss 11.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:480:68:378 -vframes 1 pip_examine/screenshot_54.jpg\nffmpeg -y -ss 11.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:448:68:378 -vframes 1 pip_examine/screenshot_55.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:50-56"
    },
    "5315": {
        "file_id": 688,
        "content": "These lines are using FFmpeg to capture screenshots at specific timestamps from a video file, with varying crop dimensions and saving them as JPEGs in the pip_examine directory.",
        "type": "comment"
    },
    "5316": {
        "file_id": 688,
        "content": "ffmpeg -y -ss 11.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_56.jpg\nffmpeg -y -ss 11.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_57.jpg\nffmpeg -y -ss 12.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_58.jpg\nffmpeg -y -ss 12.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_59.jpg\nffmpeg -y -ss 12.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_60.jpg\nffmpeg -y -ss 12.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_61.jpg\nffmpeg -y -ss 12.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_62.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:57-63"
    },
    "5317": {
        "file_id": 688,
        "content": "This code is using FFmpeg to capture screenshots at specific timestamps from a video file. The `-ss` flag specifies the start time, `-vf crop` defines the cropping area, and `-vframes 1` captures one frame. Each resulting image is saved in the 'pip_examine' directory with the corresponding filename.",
        "type": "comment"
    },
    "5318": {
        "file_id": 688,
        "content": "ffmpeg -y -ss 13.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_63.jpg\nffmpeg -y -ss 13.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_64.jpg\nffmpeg -y -ss 13.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:448:68:378 -vframes 1 pip_examine/screenshot_65.jpg\nffmpeg -y -ss 13.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:448:68:378 -vframes 1 pip_examine/screenshot_66.jpg\nffmpeg -y -ss 13.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_67.jpg\nffmpeg -y -ss 14.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_68.jpg\nffmpeg -y -ss 14.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_69.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:64-70"
    },
    "5319": {
        "file_id": 688,
        "content": "This code is using FFmpeg to generate a series of screenshots at specific time intervals from a video file. The `-ss` flag sets the start time for each screenshot, and the `-vf crop` option specifies the cropping parameters for each image. Each screenshot is saved in the \"pip_examine\" directory with a corresponding filename.",
        "type": "comment"
    },
    "5320": {
        "file_id": 688,
        "content": "ffmpeg -y -ss 14.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_70.jpg\nffmpeg -y -ss 14.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_71.jpg\nffmpeg -y -ss 14.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_72.jpg\nffmpeg -y -ss 15.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_73.jpg\nffmpeg -y -ss 15.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_74.jpg\nffmpeg -y -ss 15.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_75.jpg\nffmpeg -y -ss 15.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_76.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:71-77"
    },
    "5321": {
        "file_id": 688,
        "content": "This code uses FFmpeg to capture screenshots from a video file at specific time intervals. It crops the images to a specific size and saves them as separate files in the \"pip_examine\" directory. Each line represents one screenshot command executed consecutively, starting at 14.4 seconds and incrementing by 0.2 seconds until reaching 15.6 seconds.",
        "type": "comment"
    },
    "5322": {
        "file_id": 688,
        "content": "ffmpeg -y -ss 15.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_77.jpg\nffmpeg -y -ss 16.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_78.jpg\nffmpeg -y -ss 16.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_79.jpg\nffmpeg -y -ss 16.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_80.jpg\nffmpeg -y -ss 16.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_81.jpg\nffmpeg -y -ss 16.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_82.jpg\nffmpeg -y -ss 17.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_83.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:78-84"
    },
    "5323": {
        "file_id": 688,
        "content": "This code is creating screenshots at specific timestamps of a video file. It uses FFmpeg to extract frames from the video and save them as JPEG images in a directory named \"pip_examine\". The crop filter is applied to each frame, cropping it to a size of 464x320 with an offset of 68 pixels from the left and 382 pixels from the top.",
        "type": "comment"
    },
    "5324": {
        "file_id": 688,
        "content": "ffmpeg -y -ss 17.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_84.jpg\nffmpeg -y -ss 17.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_85.jpg\nffmpeg -y -ss 17.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_86.jpg\nffmpeg -y -ss 17.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_87.jpg\nffmpeg -y -ss 18.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_88.jpg\nffmpeg -y -ss 18.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_89.jpg\nffmpeg -y -ss 18.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_90.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:85-91"
    },
    "5325": {
        "file_id": 688,
        "content": "This code uses FFmpeg to capture screenshots at specific timestamps of a video file. It applies a crop filter to the images and saves them in the \"pip_examine\" directory. The process is repeated for different timestamps, resulting in multiple screenshots.",
        "type": "comment"
    },
    "5326": {
        "file_id": 688,
        "content": "ffmpeg -y -ss 18.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_91.jpg\nffmpeg -y -ss 18.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_92.jpg\nffmpeg -y -ss 19.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:384 -vframes 1 pip_examine/screenshot_93.jpg\nffmpeg -y -ss 19.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:384 -vframes 1 pip_examine/screenshot_94.jpg\nffmpeg -y -ss 19.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:384 -vframes 1 pip_examine/screenshot_95.jpg\nffmpeg -y -ss 19.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:384 -vframes 1 pip_examine/screenshot_96.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:92-97"
    },
    "5327": {
        "file_id": 688,
        "content": "This code uses ffmpeg to capture screenshots from a video at specific timestamps. It crops the images and saves them with corresponding filenames in the pip_examine directory.",
        "type": "comment"
    },
    "5328": {
        "file_id": 689,
        "content": "/tests/vapoursynth_linux_test/motion_estimation.sh",
        "type": "filepath"
    },
    "5329": {
        "file_id": 689,
        "content": "This code snippet demonstrates the use of FFmpeg to process video files using motion estimation, crop detection, and other filters. It shows how to output motion vectors, find picture-in-picture (PIP) scenarios, and obtain help on filter usage. The code snippets are for testing purposes and can be used to analyze video processing tasks in the pyjom project.",
        "type": "summary"
    },
    "5330": {
        "file_id": 689,
        "content": "# output motion vectors.\n# ffmpeg -i \"/root/Desktop/works/pyjom/tests/random_giphy_gifs/samoyed.gif\" -vf \"mestimate=epzs:mb_size=16:search_param=7, codecview=mv=pf+bf+bb\"  mestimate_output.mp4 -y\n# not just toy, but can find PIP\n# picture in picture, crop detect?\nffmpeg -i \"/root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4\" -flags2 +export_mvs -vf \"fps=5,mestimate=epzs:mb_size=16:search_param=7,cropdetect=mode=mvedges,metadata=mode=print\" -f null - # no printing?\n# ffmpeg -i \"/root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4\" -vf \"mestimate,cropdetect=mode=mvedges,metadata=mode=print\" -f null -\n# get help on filter:\n# ffmpeg -h filter=showspectrumpic",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/motion_estimation.sh:2-13"
    },
    "5331": {
        "file_id": 689,
        "content": "This code snippet demonstrates the use of FFmpeg to process video files using motion estimation, crop detection, and other filters. It shows how to output motion vectors, find picture-in-picture (PIP) scenarios, and obtain help on filter usage. The code snippets are for testing purposes and can be used to analyze video processing tasks in the pyjom project.",
        "type": "comment"
    },
    "5332": {
        "file_id": 690,
        "content": "/tests/vapoursynth_linux_test/make_vapoursynth_autoload.sh",
        "type": "filepath"
    },
    "5333": {
        "file_id": 690,
        "content": "This script creates necessary directories for VapourSynth and configures the vapoursynth.conf file with paths to user and system plugin folders. It ensures that the correct directories are in place for VapourSynth to function properly.",
        "type": "summary"
    },
    "5334": {
        "file_id": 690,
        "content": "# refer to http://www.vapoursynth.com/doc/installation.html\nmkdir -p \"$HOME/Library/Application Support/VapourSynth/\"\ntouch \"$HOME/Library/Application Support/VapourSynth/vapoursynth.conf\"\nsudo mkdir -p /Library/vapoursynth/plugins\nmkdir -p /Users/jamesbrown/vapoursynth/plugins\necho \"UserPluginDir=/Users/jamesbrown/vapoursynth/plugins\" > \"$HOME/Library/Application Support/VapourSynth/vapoursynth.conf\"\necho \"SystemPluginDir=/Library/vapoursynth/plugins\" >> \"$HOME/Library/Application Support/VapourSynth/vapoursynth.conf\"\necho \"CONTENT BELOW:\"\ncat \"$HOME/Library/Application Support/VapourSynth/vapoursynth.conf\"",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/make_vapoursynth_autoload.sh:1-9"
    },
    "5335": {
        "file_id": 690,
        "content": "This script creates necessary directories for VapourSynth and configures the vapoursynth.conf file with paths to user and system plugin folders. It ensures that the correct directories are in place for VapourSynth to function properly.",
        "type": "comment"
    },
    "5336": {
        "file_id": 691,
        "content": "/tests/vapoursynth_linux_test/improve_video_quality.sh",
        "type": "filepath"
    },
    "5337": {
        "file_id": 691,
        "content": "This code uses vspipe and ffmpeg to denoise, upscale, and improve the video quality of \"denoise_and_upscale_samoyed.py\". It scales the video width by 2 times and height by 2 times using Lanczos algorithm, and saves it as \"improved.mp4\" (or \"output.bmp\"). This is referenced from a guide on upscaling and downscaling videos with ffmpeg.",
        "type": "summary"
    },
    "5338": {
        "file_id": 691,
        "content": "vspipe -c y4m denoise_and_upscale_samoyed.py - | ffmpeg -y -i pipe: -vf scale=w=in_w*2:h=in_h*2:flags=lanczos improved.mp4\n# vspipe -c y4m denoise_and_upscale_samoyed.py - | ffmpeg -y -i pipe: output.bmp\n# https://write.corbpie.com/upscaling-and-downscaling-video-with-ffmpeg/",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/improve_video_quality.sh:1-3"
    },
    "5339": {
        "file_id": 691,
        "content": "This code uses vspipe and ffmpeg to denoise, upscale, and improve the video quality of \"denoise_and_upscale_samoyed.py\". It scales the video width by 2 times and height by 2 times using Lanczos algorithm, and saves it as \"improved.mp4\" (or \"output.bmp\"). This is referenced from a guide on upscaling and downscaling videos with ffmpeg.",
        "type": "comment"
    },
    "5340": {
        "file_id": 692,
        "content": "/tests/vapoursynth_linux_test/ffmpeg_pip_examine.sh",
        "type": "filepath"
    },
    "5341": {
        "file_id": 692,
        "content": "This script creates a directory, extracts timestamps from a log file using awk, and generates ffmpeg commands to capture screenshots at specified timestamps. The output is saved as individual JPEG files in the 'pip_examine' folder.",
        "type": "summary"
    },
    "5342": {
        "file_id": 692,
        "content": "mkdir pip_examine\ncat pip_motion_cropdetect.log | awk -F 't:' '{print $2}' | awk '{print \"ffmpeg -y -ss \" $1 \" -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf \" $2 \" -vframes 1 pip_examine/screenshot_\" i++ \".jpg\" }' > pip_examine.sh\nbash pip_examine.sh",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/ffmpeg_pip_examine.sh:1-3"
    },
    "5343": {
        "file_id": 692,
        "content": "This script creates a directory, extracts timestamps from a log file using awk, and generates ffmpeg commands to capture screenshots at specified timestamps. The output is saved as individual JPEG files in the 'pip_examine' folder.",
        "type": "comment"
    },
    "5344": {
        "file_id": 693,
        "content": "/tests/vapoursynth_linux_test/denoise_and_upscale_samoyed.py",
        "type": "filepath"
    },
    "5345": {
        "file_id": 693,
        "content": "The code improves GIF quality using a denoising filter, OpenCV library version check, VapourSynth with BM3D algorithm, frame interpolation, and super-resolution via RIFE. It adjusts image processing parameters to avoid slow operations while experimenting with RealCUGAN, BasicVSRPP, Lanczos resizing, and Bicubic resizing for dog videos.",
        "type": "summary"
    },
    "5346": {
        "file_id": 693,
        "content": "# try to improve gif quality in some way.\n# is this necessary?\n# apply some filter on video size and duration first, please?\nimport pathlib\nimport sys\nsite_path = pathlib.Path(\"/usr/local/lib/python3.9/site-packages\")\ncv2_libs_dir = (\n    site_path / \"cv2\" / f\"python-{sys.version_info.major}.{sys.version_info.minor}\"\n)\nprint(cv2_libs_dir)\ncv2_libs = sorted(cv2_libs_dir.glob(\"*.so\"))\nif len(cv2_libs) == 1:\n    print(\"INSERTING:\", cv2_libs[0].parent)\n    sys.path.insert(1, str(cv2_libs[0].parent))\nvideoPath = \"/root/Desktop/works/pyjom/tests/random_giphy_gifs/samoyed.gif\"\n# videoPath = \"/root/Desktop/works/pyjom/tests/random_giphy_gifs/pikachu.gif\"\nimport vapoursynth\n# install this:\n# https://github.com/HomeOfVapourSynthEvolution/mvsfunc\nimport vapoursynth as vs\nfrom vapoursynth import core\nvideo = core.ffms2.Source(source=videoPath)\n# visit here for more usage details:\n# https://github.com/HomeOfVapourSynthEvolution/VapourSynth-BM3D\nimport mvsfunc as mvf # denoising\nvideo = mvf.BM3D(video, sigma=3.0, radius1=1, profile1=\"fast\")",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/denoise_and_upscale_samoyed.py:1-36"
    },
    "5347": {
        "file_id": 693,
        "content": "This code aims to improve GIF quality by applying a denoising filter. It checks the OpenCV library version and inserts it into the system path if necessary. The code uses VapourSynth for video processing, specifically the BM3D algorithm from the mvsfunc module, with custom parameters.",
        "type": "comment"
    },
    "5348": {
        "file_id": 693,
        "content": "from vsrife import RIFE # frame interpolate\nvideo = core.resize.Bicubic(video, format=vs.RGBS)\nvideo = RIFE(video)\n# super resolution\n# copy compiled .so file to here:\n# /root/vapoursynth/plugins/lib/\n# ln -s /root/Desktop/works/pyjom/tests/vapoursynth_linux_test/models /root/vapoursynth/plugins/lib/models\ngpu_id = 0\n# noise = 2\nscale = 2\n# slow.\n# video = core.srmdnv.SRMD(video,scale=scale, noise=noise, \n#                   gpu_id=gpu_id)\n# video = core.resize.Bicubic(video, format=vs.YUV420P8, matrix_s=\"709\")\n# video = core.resize.Lanczos(clip=video, format=vs.RGBS, \n#                         matrix_in_s=\"2020ncl\",\n#                         transfer_in_s=\"std-b67\", transfer_s=\"linear\",\n#                         nominal_luminance=1000)\n# video = core.tonemap.Mobius(clip=video, exposure=4)\n# video = core.resize.Lanczos(clip=video, format=vs.YUV420P10, matrix_s=\"709\",\n#                         primaries_in_s=\"2020\",  primaries_s=\"709\",\n#                         transfer_in_s=\"linear\", transfer_s=\"709\")\n# slow as hell man.",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/denoise_and_upscale_samoyed.py:38-68"
    },
    "5349": {
        "file_id": 693,
        "content": "Code imports RIFE for frame interpolation and performs super-resolution on the video. It also links a compiled .so file to its location and adjusts various parameters such as gpu_id, scale, noise, matrix_s, transfer_in_s, primaries_in_s, and more for image processing. The code mentions that certain operations are slow.",
        "type": "comment"
    },
    "5350": {
        "file_id": 693,
        "content": "# a very bad filter for dogs\n# video = core.rcnv.RealCUGAN(video , scale=scale, \n                #   gpu_id=gpu_id, model=1)\nfrom vsbasicvsrpp import BasicVSRPP\nvideo = BasicVSRPP(video)\n# solution from tonemap?\n# https://github.com/ifb/vapoursynth-tonemap/issues/2\n# video = core.resize.Lanczos(clip=video, format=vs.YUV420P10, matrix_s=\"709\",\n#                         primaries_in_s=\"2020\",  primaries_s=\"709\",\n#                         transfer_in_s=\"linear\", transfer_s=\"709\")\nvideo = core.resize.Bicubic(clip =video, format = vs.YUV420P10, matrix_s='709')\n# much better, no over exposure.\nvideo.set_output()\n# maybe this shit is very freaking slow.\n# why not use gaussian blur?",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/denoise_and_upscale_samoyed.py:69-87"
    },
    "5351": {
        "file_id": 693,
        "content": "The code attempts to apply a filter for denoising and upscaling videos of dogs, possibly experimenting with different methods such as RealCUGAN, BasicVSRPP, Lanczos resizing, and Bicubic resizing. The goal is to improve video quality without overexposure or slow performance.",
        "type": "comment"
    },
    "5352": {
        "file_id": 694,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/get_url.py",
        "type": "filepath"
    },
    "5353": {
        "file_id": 694,
        "content": "This code uses the requests library to send a GET request to a specific URL, passing parameters in the query string. The response cookies are printed, and then another GET request is sent with those cookies included. Finally, the response data is printed.",
        "type": "summary"
    },
    "5354": {
        "file_id": 694,
        "content": "import requests\ns = requests.Session()\nparameter=\"359455393248\"\nurl = 'https://h5api.m.taobao.com/h5/mtop.taobao.content.detail.mix.recommend.h5/1.0/?jsv=2.6.1&appKey=12574478&t=1652513788601&api=mtop.taobao.content.detail.mix.recommend.h5&v=1.0&H5Request=true&preventFallback=true&type=jsonp&dataType=jsonp&callback=mtopjsonp3&data=%7B%22contentId%22%3A%22{}%22%2C%22source%22%3A%22guangguang_cainixihuan%22%2C%22pageSize%22%3A5%2C%22pageIndex%22%3A0%2C%22bizParameters%22%3A%22%7B%5C%22itemIds%5C%22%3A%5B%5D%2C%5C%22contentId%5C%22%3A%5C%22{}%5C%22%2C%5C%22videoId%5C%22%3A%5C%22{}%5C%22%7D%22%2C%22extendParameters%22%3A%22%7B%5C%22expoContents%5C%22%3A%5C%22{}%5C%22%2C%5C%22slideAction%5C%22%3A%5C%22up%5C%22%2C%5C%22utparam%5C%22%3Anull%2C%5C%22page%5C%22%3A%5C%22guess-guangguang%5C%22%7D%22%7D'.format(parameter,parameter,parameter,parameter)\ns.get(url)\nprint(s.cookies) # must be valid url then you will be set cookie.\nr = s.get(url)\ndata = r.text\nprint(data)",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/get_url.py:1-15"
    },
    "5355": {
        "file_id": 694,
        "content": "This code uses the requests library to send a GET request to a specific URL, passing parameters in the query string. The response cookies are printed, and then another GET request is sent with those cookies included. Finally, the response data is printed.",
        "type": "comment"
    },
    "5356": {
        "file_id": 695,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/get_frida_codeshare_source.sh",
        "type": "filepath"
    },
    "5357": {
        "file_id": 695,
        "content": "This script retrieves the project source from Frida CodeShare using the provided parameter and outputs it in a format that can be easily consumed by various programming languages, such as JSON5 or JavaScript. However, there is a potential code injection warning due to the use of shell commands like `grep`, `sed`, and `python3` for data processing.",
        "type": "summary"
    },
    "5358": {
        "file_id": 695,
        "content": "# warning! potential code injection.\n# better use some json5 formatter instead.\n# this is strict! fuck.\nPARAM=$1\necho \"// script name: $PARAM\"\necho\n# exit\ncurl \"https://codeshare.frida.re/@$PARAM/\" 2>/dev/null | grep \"projectSource: \" | sed 's/projectSource:/\"projectSource\":/;s/^/{/;s/,$//;s/$/}/' | python3 -c \"d=input();import json;p=json.loads(d);print(p['projectSource'])\"\n# curl \"https://codeshare.frida.re/@Gand3lf/xamarin-antiroot/\" 2>/dev/null | grep \"projectSource: \" | sed 's/^/var a={/;s/$/}\\; console.log(a.projectSource);/' | node",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/get_frida_codeshare_source.sh:1-9"
    },
    "5359": {
        "file_id": 695,
        "content": "This script retrieves the project source from Frida CodeShare using the provided parameter and outputs it in a format that can be easily consumed by various programming languages, such as JSON5 or JavaScript. However, there is a potential code injection warning due to the use of shell commands like `grep`, `sed`, and `python3` for data processing.",
        "type": "comment"
    },
    "5360": {
        "file_id": 696,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/frida_globalswitch_apk.js",
        "type": "filepath"
    },
    "5361": {
        "file_id": 696,
        "content": "The code disables SSL-SPDY and SPDY for packet capture debugging, and attempts to print class names using Frida in an APK, but fails to hook 'Response' methods. It uses Java classes in 'mtopsdk.network' to track requests, log details, and initializes ANetworkCallImpl, while modifying 'mtopsdk.mtop.global.SwitchConfig' using Frida for URL logging.",
        "type": "summary"
    },
    "5362": {
        "file_id": 696,
        "content": "////////////////////////////////////////////////////////////////////////\n// try to disable security? disable ssl-spdy and spdy\n////////////////////////////////////////////////////////////////////////\n// try this first anyway.\nsetTimeout(function () {\n    console.log('start——*-*-*-*-*-');\n   Java.perform(function () {\n       var SwitchConfig = Java.use('mtopsdk.mtop.global.SwitchConfig');\n       SwitchConfig.isGlobalSpdySwitchOpen.overload().implementation = function () {\n           var ret = this.isGlobalSpdySwitchOpen.apply(this, arguments);\n           console.log(\"开启抓包\" + ret);\n           return false;\n       }\n       SwitchConfig.isGlobalSpdySslSwitchOpen.overload().implementation = function () {\n        var ret = this.isGlobalSpdySslSwitchOpen.apply(this, arguments);\n        console.log(\"开启抓包\" + ret);\n        return false;\n       }\n   });\n});\n// ————————————————\n// 版权声明：本文为CSDN博主「哈里哈气」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n// 原文链接：https://blog.csdn.net/qq_34067821/article/details/103203549\n////////////////////////////////////////////////////////////////////////",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/frida_globalswitch_apk.js:2-27"
    },
    "5363": {
        "file_id": 696,
        "content": "This code attempts to disable SSL-SPDY and SPdy by overriding the isGlobalSpdySwitchOpen and isGlobalSpdySslSwitchOpen methods of the SwitchConfig class. It sets both switches to off, effectively disabling them, in order to enable packet capture for debugging purposes. The code is attributed to a CSDN blog post by the author \"哈里哈气\".",
        "type": "comment"
    },
    "5364": {
        "file_id": 696,
        "content": "// print class names\n////////////////////////////////////////////////////////////////////////\n// var callback = {\n// \t'onMatch': function(cname){\n// \t\t//lets just print out the class name.\n// \t\tconsole.log(cname);\n// \t},\n// \t'onComplete': function() {\n// \t\tconsole.log(\"done\");\n// \t},\n// \t'onError': function(){\n// \t\tconsole.log(\"There is error\");\n// \t}\n// };\n// Java.perform(function(){\n// \tJava.enumerateLoadedClasses(callback);\t//onMatch: function (className)\n// });\n////////////////////////////////////////////////////////////////////////// failed to hook request/response methods as expected\n////////////////////////////////////////////////////////////////////////\n// // Java.perform(function () {\n// //     // Function to hook is defined here\n// //     //所有响应\n// in this apk we do not find 'Response' shit.\n// //     var Response = Java.use('mtopsdk.network.domain.Response');\n// //     Response.$init.overload('mtopsdk.network.domain.Response$Builder').implementation = function() {\n// //         //PrintStack()\n// //         console.log(\"Response \" + arguments[0].body)",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/frida_globalswitch_apk.js:28-59"
    },
    "5365": {
        "file_id": 696,
        "content": "The code aims to print class names using Frida in an APK. It defines a callback with 'onMatch' and 'onComplete' functions, then uses Java.enumerateLoadedClasses() to obtain the class names. The code also attempts to hook 'Response' methods but failed as they were not found in the APK.",
        "type": "comment"
    },
    "5366": {
        "file_id": 696,
        "content": "// //         var ret = this.$init.apply(this, arguments);\n// //         //all request\n// //         console.log(\"Response \" + this.toString())\n// //         return ret;\n// //     };\n// //     //所有请求\n// //     var RequestBuilder = Java.use('mtopsdk.network.domain.Request$Builder');\n// //     RequestBuilder.build.overload().implementation = function() {\n// //         //PrintStack()\n// //         var ret = this.build.apply(this, arguments);\n// //         //all request\n// //         console.log(\"RequestBuilder \" + ret.toString())\n// //         return ret;\n// //     };\n// //     //所有请求\n// //     var ANetworkCallImpl = Java.use('mtopsdk.network.impl.ANetworkCallImpl');\n// //     ANetworkCallImpl.$init.overload('mtopsdk.network.domain.Request', 'android.content.Context').implementation = function() {\n// //         //PrintStack()\n// //         console.log('ANetworkCallImpl ' + arguments[0])\n// //         var ret = this.$init.apply(this, arguments);\n// //         return ret;\n// //     };\n// //     //所有请求url\n// //     var AbstractNetworkConverter = Java.use(",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/frida_globalswitch_apk.js:60-87"
    },
    "5367": {
        "file_id": 696,
        "content": "This code is manipulating several Java classes in the 'mtopsdk.network' package for tracking all requests, logging the request details and builder objects, and initializing an ANetworkCallImpl with a Request object and Context.",
        "type": "comment"
    },
    "5368": {
        "file_id": 696,
        "content": "// //         'mtopsdk.mtop.protocol.converter.impl.AbstractNetworkConverter'\n// //     );\n// //     AbstractNetworkConverter.buildBaseUrl.overload(\n// //         'mtopsdk.framework.domain.MtopContext',\n// //         'java.lang.String',\n// //         'java.lang.String'\n// //     ).implementation = function() {\n// //         console.log(\"buildBaseUrl \"+arguments[1]+' '+arguments[2])\n// //         var ret = this.buildBaseUrl.apply(this, arguments);\n// //         //url\n// //         console.log(\"buildBaseUrl \"+ret)\n// //         return ret;\n// //     };\n// //     // 禁用spdy协议\n// //     var SwitchConfig = Java.use('mtopsdk.mtop.global.SwitchConfig');\n// //     SwitchConfig.setGlobalSpdySslSwitchOpen.overload().implementation = function() {\n// //         var ret = this.isGlobalSpdySwitchOpen.apply(this, arguments);\n// //         console.log('isGlobalSpdySwitchOpenl ' + ret)\n// //         return false;\n// //     };\n// // });",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/frida_globalswitch_apk.js:88-112"
    },
    "5369": {
        "file_id": 696,
        "content": "This code is using Frida to instrument the 'mtopsdk.mtop.global.SwitchConfig' class in an APK. It overrides the 'setGlobalSpdySslSwitchOpen' method to always return false, disabling SPDY protocol. Additionally, it modifies the 'AbstractNetworkConverter.buildBaseUrl' method to log the arguments and base URL.",
        "type": "comment"
    },
    "5370": {
        "file_id": 697,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/disable_ssl.js",
        "type": "filepath"
    },
    "5371": {
        "file_id": 697,
        "content": "Bypasses Universal Android SSL Pinning using frida, replacing checkTrustedRecursive implementation to enable SSL communication.",
        "type": "summary"
    },
    "5372": {
        "file_id": 697,
        "content": "// script name: sowdust/universal-android-ssl-pinning-bypass-2\n/* \n   Universal Android SSL Pinning Bypass\n   by Mattia Vinci and Maurizio Agazzini \n   $ frida -U -f org.package.name -l universal-ssl-check-bypass.js --no-pause\n    https://techblog.mediaservice.net/2018/11/universal-android-ssl-check-bypass-2/\n*/\nJava.perform(function() {\n    var array_list = Java.use(\"java.util.ArrayList\");\n    var ApiClient = Java.use('com.android.org.conscrypt.TrustManagerImpl');\n    ApiClient.checkTrustedRecursive.implementation = function(a1, a2, a3, a4, a5, a6) {\n        // console.log('Bypassing SSL Pinning');\n        var k = array_list.$new();\n        return k;\n    }\n}, 0);",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/disable_ssl.js:1-22"
    },
    "5373": {
        "file_id": 697,
        "content": "Bypasses Universal Android SSL Pinning using frida, replacing checkTrustedRecursive implementation to enable SSL communication.",
        "type": "comment"
    },
    "5374": {
        "file_id": 698,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/decodeTaobaoQuery.py",
        "type": "filepath"
    },
    "5375": {
        "file_id": 698,
        "content": "The code decodes a Taobao query string, parses the URL-encoded data into JSON format with various parameters, and prints it using pprint for readability.",
        "type": "summary"
    },
    "5376": {
        "file_id": 698,
        "content": "import urllib.parse\nimport json\na = \"\"\"%7B%22LBS%22%3A%22%7B%5C%22TB%5C%22%3A%5C%22%7B%5C%5C%5C%22stores%5C%5C%5C%22%3A%5B%7B%5C%5C%5C%22code%5C%5C%5C%22%3A%5C%5C%5C%22236736190%5C%5C%5C%22%2C%5C%5C%5C%22bizType%5C%5C%5C%22%3A%5C%5C%5C%222%5C%5C%5C%22%2C%5C%5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%2224%5C%5C%5C%22%7D%5D%7D%5C%22%2C%5C%22TMALL_MARKET_B2C%5C%22%3A%5C%22%7B%5C%5C%5C%22stores%5C%5C%5C%22%3A%5B%7B%5C%5C%5C%22code%5C%5C%5C%22%3A%5C%5C%5C%22107%5C%5C%5C%22%2C%5C%5C%5C%22bizType%5C%5C%5C%22%3A%5C%5C%5C%22REGION_TYPE_REGION%5C%5C%5C%22%2C%5C%5C%5C%22addrId%5C%5C%5C%22%3A%5C%5C%5C%229056332332%5C%5C%5C%22%2C%5C%5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%22CHOOSE_ADDR%5C%5C%5C%22%7D%5D%7D%5C%22%2C%5C%22TMALL_MARKET_O2O%5C%22%3A%5C%22%7B%5C%5C%5C%22stores%5C%5C%5C%22%3A%5B%7B%5C%5C%5C%22code%5C%5C%5C%22%3A%5C%5C%5C%22235565019%5C%5C%5C%22%2C%5C%5C%5C%22bizType%5C%5C%5C%22%3A%5C%5C%5C%22DELIVERY_TIME_HALF_DAY%5C%5C%5C%22%2C%5C%5C%5C%22addrId%5C%5C%5C%22%3A%5C%5C%5C%229056332332%5C%5C%5C%22%2C%",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/decodeTaobaoQuery.py:1-3"
    },
    "5377": {
        "file_id": 698,
        "content": "This code is decoding a Taobao query string containing information about various stores and their types, likely used for filtering or search purposes.",
        "type": "comment"
    },
    "5378": {
        "file_id": 698,
        "content": "5C%5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%22CHOOSE_ADDR%5C%5C%5C%22%7D%5D%7D%5C%22%7D%22%2C%22URL_REFERER_ORIGIN%22%3A%22%2F%2Fs.m.taobao.com%2Fh5entry%3Fg_channelSrp%3Dvideointeract%26g_tab%3Dtbexperience%26g_pfilter%3Ddaren%26g_closeModues%3Dtab%26closeExpSubTab%3Dtrue%26g_csearchdoor_spm%3Da310p.14955560%26spm%3Da310p.13800399%26launchMode%3Dandroid_new_task%26g_closeExpSubTab%3Dtrue%22%2C%22ad_type%22%3A%221.0%22%2C%22apptimestamp%22%3A%221665607023%22%2C%22areaCode%22%3A%22CN%22%2C%22brand%22%3A%22Xiaomi%22%2C%22canP4pVideoPlay%22%3A%22true%22%2C%22channelSrp%22%3A%22videointeract%22%2C%22cityCode%22%3A%22320100%22%2C%22closeExpSubTab%22%3A%22true%22%2C%22closeModues%22%3A%22tab%22%2C%22countryNum%22%3A%22156%22%2C%22csearchdoor_spm%22%3A%22a310p.14955560%22%2C%22device%22%3A%22Mi+MIX+2%22%2C%22editionCode%22%3A%22CN%22%2C%22from%22%3A%22input%22%2C%22globalLbs%22%3A%22%7B%5C%22biz_common%5C%22%3A%7B%5C%22recommendedAddress%5C%22%3A%7B%5C%22addressId%5C%22%3A%5C%229056332332%5C%22%2",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/decodeTaobaoQuery.py:3-3"
    },
    "5379": {
        "file_id": 698,
        "content": "This code contains a complex JSON object with various parameters like type, URL_REFERER_ORIGIN, ad_type, areaCode, brand, canP4pVideoPlay, channelSrp, cityCode, closeExpSubTab, closeModues, countryNum, csearchdoor\\_spm, device, editionCode, from, and globalLbs. These parameters are used to describe the source of the request, user's location, device information, and other relevant data for an API call.",
        "type": "comment"
    },
    "5380": {
        "file_id": 698,
        "content": "C%5C%22area%5C%22%3A%5C%22%E6%A0%96%E9%9C%9E%E5%8C%BA%5C%22%2C%5C%22areaDivisionCode%5C%22%3A%5C%22320113%5C%22%2C%5C%22city%5C%22%3A%5C%22%E5%8D%97%E4%BA%AC%E5%B8%82%5C%22%2C%5C%22cityDivisionCode%5C%22%3A%5C%22320100%5C%22%2C%5C%22detailText%5C%22%3A%5C%22%E6%96%87%E8%8B%91%E8%B7%AF9%E5%8F%B7%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E5%9C%86%E9%80%9A%E5%BF%AB%E9%80%92%5C%22%2C%5C%22lat%5C%22%3A%5C%2232.11078%5C%22%2C%5C%22lng%5C%22%3A%5C%22118.932821%5C%22%2C%5C%22province%5C%22%3A%5C%22%E6%B1%9F%E8%8B%8F%E7%9C%81%5C%22%2C%5C%22provinceDivisionCode%5C%22%3A%5C%22320000%5C%22%2C%5C%22town%5C%22%3A%5C%22%E4%BB%99%E6%9E%97%E8%A1%97%E9%81%93%5C%22%2C%5C%22townDivisionCode%5C%22%3A%5C%22320113007%5C%22%2C%5C%22type%5C%22%3A%5C%22deliver%5C%22%7D%7D%2C%5C%22eleme%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22999%5C%22%7D%5D%7D%2C%5C%22meeting_place%5C%22%3A%7B%7D%2C%5C%22on_time_promise%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/decodeTaobaoQuery.py:3-3"
    },
    "5381": {
        "file_id": 698,
        "content": "This code block represents a JSON object containing information about the location, delivery details, and stores related to an order. The location data includes area, city, province, town, and latitude/longitude coordinates. There are also delivery-related details such as type (deliver), and store information with store IDs.",
        "type": "comment"
    },
    "5382": {
        "file_id": 698,
        "content": "%22353585008%5C%22%7D%2C%7B%5C%22storeId%5C%22%3A%5C%22353612036%5C%22%7D%2C%7B%5C%22storeId%5C%22%3A%5C%22525826023%5C%22%7D%5D%7D%2C%5C%22same_city_buy%5C%22%3A%7B%7D%2C%5C%22tmall_market_o2o%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22235565019%5C%22%7D%5D%7D%2C%5C%22txd%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22707447478%5C%22%7D%5D%7D%7D%22%2C%22gpsEnabled%22%3A%22false%22%2C%\"\"\"\nb =urllib.parse.unquote(a)\n# c=json.loads(b)\nimport pprint\n# pprint.pprint(c)\npprint.pprint(b)",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/decodeTaobaoQuery.py:3-8"
    },
    "5383": {
        "file_id": 698,
        "content": "This code is parsing a URL-encoded string and loading its content into a JSON format. It then prints the parsed JSON data using the pprint module for better readability.",
        "type": "comment"
    },
    "5384": {
        "file_id": 699,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/wtf_is_this_shit.sh",
        "type": "filepath"
    },
    "5385": {
        "file_id": 699,
        "content": "Downloading and unzipping main.json from a URL, saving it as wtf_is_this2.",
        "type": "summary"
    },
    "5386": {
        "file_id": 699,
        "content": "# curl -o - https://g.alicdn.com/tnode/fullpageshortvideo/2.1.0/main.json.json | gunzip -c > wtf_is_this2\n# file wtf_is_this # data\n# gzipped.",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/wtf_is_this_shit.sh:1-3"
    },
    "5387": {
        "file_id": 699,
        "content": "Downloading and unzipping main.json from a URL, saving it as wtf_is_this2.",
        "type": "comment"
    },
    "5388": {
        "file_id": 700,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/view_weishi_capture_data.sh",
        "type": "filepath"
    },
    "5389": {
        "file_id": 700,
        "content": "This code runs MITM proxy with logs from \"logs.log\" and hits the URL for getting Weishi play page in a H5 environment.",
        "type": "summary"
    },
    "5390": {
        "file_id": 700,
        "content": "mitmproxy -r logs.log\n# http://h5.weishi.qq.com/webapp/json/weishi/WSH5GetPlayPage",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/view_weishi_capture_data.sh:1-2"
    },
    "5391": {
        "file_id": 700,
        "content": "This code runs MITM proxy with logs from \"logs.log\" and hits the URL for getting Weishi play page in a H5 environment.",
        "type": "comment"
    },
    "5392": {
        "file_id": 701,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/taobao_query.sh",
        "type": "filepath"
    },
    "5393": {
        "file_id": 701,
        "content": "The JSON data includes store and category information, login requirements, addresses, types for TMALL_MARKET_O2O, and user location settings/preferences with device info, geolocation details, and nested service options for online platforms.",
        "type": "summary"
    },
    "5394": {
        "file_id": 701,
        "content": "## require login?\n# {\n#   \"ret\": [\n#     \"FAIL_SYS_USER_VALIDATE::登陆成功后请点击重试获得查询结果!\"\n#   ],\n#   \"data\": {}\n# }⏎       \n# use h5api?\n# http://59.82.113.156/gw/\n# seems all the same.\ncurl -H \"x-sign: azYBCM002xAAKW%2BhAZ1epg3vUDRc2W%2BpbLkKnJg3oIA%2FZg%2Bl%2Be3cZFL5P4FTFDk8Lia77SVlqaBU41ulP5grHc7tzTlviW%2Bpb4lvqW\" -H \"x-sgext: JAF6pNmPrGQougwhMeo8qQ%3D%3D\" \"http://h5api.m.taobao.com/h5/mtop.taobao.wsearch.appsearch/1.0/?data=%7B%22LBS%22%3A%22%7B%5C%22TB%5C%22%3A%5C%22%7B%5C%5C%5C%22stores%5C%5C%5C%22%3A%5B%7B%5C%5C%5C%22code%5C%5C%5C%22%3A%5C%5C%5C%22236736190%5C%5C%5C%22%2C%5C%5C%5C%22bizType%5C%5C%5C%22%3A%5C%5C%5C%222%5C%5C%5C%22%2C%5C%5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%2224%5C%5C%5C%22%7D%5D%7D%5C%22%2C%5C%22TMALL_MARKET_B2C%5C%22%3A%5C%22%7B%5C%5C%5C%22stores%5C%5C%5C%22%3A%5B%7B%5C%5C%5C%22code%5C%5C%5C%22%3A%5C%5C%5C%22107%5C%5C%5C%22%2C%5C%5C%5C%22bizType%5C%5C%5C%22%3A%5C%5C%5C%22REGION_TYPE_REGION%5C%5C%5C%22%2C%5C%5C%5C%22addrId%5C%5C%5C%22%3A%5C%5C%5C%229056332332%5C%5C%5C%22%2C%5C%",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/taobao_query.sh:1-11"
    },
    "5395": {
        "file_id": 701,
        "content": "Checking if login is required and using the h5api with the provided URL.",
        "type": "comment"
    },
    "5396": {
        "file_id": 701,
        "content": "5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%22CHOOSE_ADDR%5C%5C%5C%22%7D%5D%7D%5C%22%2C%5C%22TMALL_MARKET_O2O%5C%22%3A%5C%22%7B%5C%5C%5C%22stores%5C%5C%5C%22%3A%5B%7B%5C%5C%5C%22code%5C%5C%5C%22%3A%5C%5C%5C%22235565019%5C%5C%5C%22%2C%5C%5C%5C%22bizType%5C%5C%5C%22%3A%5C%5C%5C%22DELIVERY_TIME_HALF_DAY%5C%5C%5C%22%2C%5C%5C%5C%22addrId%5C%5C%5C%22%3A%5C%5C%5C%229056332332%5C%5C%5C%22%2C%5C%5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%22CHOOSE_ADDR%5C%5C%5C%22%7D%5D%7D%5C%22%7D%22%2C%22URL_REFERER_ORIGIN%22%3A%22%2F%2Fs.m.taobao.com%2Fh5entry%3Fg_channelSrp%3Dvideointeract%26g_tab%3Dtbexperience%26g_pfilter%3Ddaren%26g_closeModues%3Dtab%26closeExpSubTab%3Dtrue%26g_csearchdoor_spm%3Da310p.14955560%26spm%3Da310p.13800399%26launchMode%3Dandroid_new_task%26g_closeExpSubTab%3Dtrue%22%2C%22ad_type%22%3A%221.0%22%2C%22apptimestamp%22%3A%221665607023%22%2C%22areaCode%22%3A%22CN%22%2C%22brand%22%3A%22Xiaomi%22%2C%22canP4pVideoPlay%22%3A%22true%22%2C%22channelSrp%22%3A%22videointeract%22%2C%22cityCode%22%3A%223201",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/taobao_query.sh:11-11"
    },
    "5397": {
        "file_id": 701,
        "content": "Code snippet representing JSON data with information on stores and categories. It includes store codes, bizTypes, addresses, and types for TMALL_MARKET_O2O. The URL_REFERER_ORIGIN specifies the referer origin as \"s.m.taobao.com\".",
        "type": "comment"
    },
    "5398": {
        "file_id": 701,
        "content": "00%22%2C%22closeExpSubTab%22%3A%22true%22%2C%22closeModues%22%3A%22tab%22%2C%22countryNum%22%3A%22156%22%2C%22csearchdoor_spm%22%3A%22a310p.14955560%22%2C%22device%22%3A%22Mi+MIX+2%22%2C%22editionCode%22%3A%22CN%22%2C%22from%22%3A%22input%22%2C%22globalLbs%22%3A%22%7B%5C%22biz_common%5C%22%3A%7B%5C%22recommendedAddress%5C%22%3A%7B%5C%22addressId%5C%22%3A%5C%229056332332%5C%22%2C%5C%22area%5C%22%3A%5C%22%E6%A0%96%E9%9C%9E%E5%8C%BA%5C%22%2C%5C%22areaDivisionCode%5C%22%3A%5C%22320113%5C%22%2C%5C%22city%5C%22%3A%5C%22%E5%8D%97%E4%BA%AC%E5%B8%82%5C%22%2C%5C%22cityDivisionCode%5C%22%3A%5C%22320100%5C%22%2C%5C%22detailText%5C%22%3A%5C%22%E6%96%87%E8%8B%91%E8%B7%AF9%E5%8F%B7%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E5%9C%86%E9%80%9A%E5%BF%AB%E9%80%92%5C%22%2C%5C%22lat%5C%22%3A%5C%2232.11078%5C%22%2C%5C%22lng%5C%22%3A%5C%22118.932821%5C%22%2C%5C%22province%5C%22%3A%5C%22%E6%B1%9F%E8%8B%8F%E7%9C%81%5C%22%2C%5C%22provinceDivisionCode%5C%22%3A%5C%22320000%5C%22%2C%5C%22town%5C%22%3A%5",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/taobao_query.sh:11-11"
    },
    "5399": {
        "file_id": 701,
        "content": "This code segment represents a JSON object with various parameters, including the device model, country, search input source, and recommended address information for geolocation. It seems to be part of a larger API request or webpage interaction, likely related to user location settings or preferences.",
        "type": "comment"
    }
}