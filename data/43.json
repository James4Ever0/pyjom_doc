{
    "4300": {
        "file_id": 542,
        "content": "wget https://media.xiph.org/video/derf/y4m/flower_cif.y4m\n# no good for using docker gpu containers.\n# alias ffmpeg-tensorflow='docker run --rm --gpus all -u $(id -u):$(id -g) -v \"$PWD\":/data -w /data -i miratmu/ffmpeg-tensorflow'\n# ffmpeg-tensorflow -i flower_cif.y4m -filter_complex '[0:v] format=pix_fmts=yuv420p, extractplanes=y+u+v [y][u][v]; [y] sr=dnn_backend=tensorflow:scale_factor=2:model=/models/espcn.pb [y_scaled]; [u] scale=iw*2:ih*2 [u_scaled]; [v] scale=iw*2:ih*2 [v_scaled]; [y_scaled][u_scaled][v_scaled] mergeplanes=0x001020:yuv420p [merged]' -map [merged] -sws_flags lanczos -c:v libx264 -crf 17 -c:a copy -y flower_cif_2x.mp4",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/test_ffmpeg_docker.sh:1-6"
    },
    "4301": {
        "file_id": 542,
        "content": "Code snippet attempts to download a video file 'flower_cif.y4m' using wget, and then applies various filters with ffmpeg-tensorflow Docker container to upscale the video resolution by 2x and save it as 'flower_cif_2x.mp4'. The code also provides an alias for easier execution of ffmpeg-tensorflow command and specifies video filter complexities within the ffmpeg command.",
        "type": "comment"
    },
    "4302": {
        "file_id": 543,
        "content": "/tests/vapoursynth_linux_test/test.sh",
        "type": "filepath"
    },
    "4303": {
        "file_id": 543,
        "content": "This code is running vspipe, a command-line tool for processing video files with VapourSynth script. It takes a .vpy script file as input and uses the -c flag for y4m format output.",
        "type": "summary"
    },
    "4304": {
        "file_id": 543,
        "content": "vspipe -c y4m script.vpy -",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/test.sh:1-1"
    },
    "4305": {
        "file_id": 543,
        "content": "This code is running vspipe, a command-line tool for processing video files with VapourSynth script. It takes a .vpy script file as input and uses the -c flag for y4m format output.",
        "type": "comment"
    },
    "4306": {
        "file_id": 544,
        "content": "/tests/vapoursynth_linux_test/scene_change_detection.sh",
        "type": "filepath"
    },
    "4307": {
        "file_id": 544,
        "content": "This code is using FFmpeg to process a video file, extracting scenes by selecting frames where the scene change is greater than 0.1 and displaying information about each scene change. The output is redirected to null.",
        "type": "summary"
    },
    "4308": {
        "file_id": 544,
        "content": "ffmpeg -hide_banner -i \"/root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4\" -an \\\n-filter:v \"select='gt(scene,0.1)',showinfo\" \\\n-f null \\\n- 2>&1",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/scene_change_detection.sh:3-6"
    },
    "4309": {
        "file_id": 544,
        "content": "This code is using FFmpeg to process a video file, extracting scenes by selecting frames where the scene change is greater than 0.1 and displaying information about each scene change. The output is redirected to null.",
        "type": "comment"
    },
    "4310": {
        "file_id": 545,
        "content": "/tests/vapoursynth_linux_test/pure_ffmpeg_interpolate_resolution_denoise.sh",
        "type": "filepath"
    },
    "4311": {
        "file_id": 545,
        "content": "This script uses FFmpeg and TensorFlow to process video files, applying Super Resolution and Edge Preserving Blur filters for improved quality. It utilizes Anaconda libraries for CUDA toolkit and CuDNN in a non-real-time processing manner.",
        "type": "summary"
    },
    "4312": {
        "file_id": 545,
        "content": "# ffmpeg -y -i \"/root/Desktop/works/pyjom/tests/random_giphy_gifs/samoyed.gif\" -vf \"minterpolate,scale=w=iw*2:h=ih*2:flags=lanczos,hqdn3d\" -r 60 ffmpeg_samoyed.mp4\n# SRCNN=espcn.pb\n# 5fps or something\n# env LD_LIBRARY_PATH=/root/anaconda3/pkgs/cudatoolkit-10.0.130-0/lib/:/root/anaconda3/pkgs/cudnn-7.6.5-cuda10.0_0/lib/:$LD_LIBRARY_PATH ffmpeg -i \"/root/Desktop/works/pyjom/tests/random_giphy_gifs/samoyed.gif\" -y -vf \"sr=dnn_backend=tensorflow:model=./sr_models/dnn_models/espcn.pb\"  ffmpeg_samoyed_espcn.mp4\n# 9fps or something\n# ffmpeg -i \"/root/Desktop/works/pyjom/tests/random_giphy_gifs/samoyed.gif\" -y -vf \"yaepblur\"  ffmpeg_samoyed_srcnn.mp4\n# strange shit.\n# env LD_LIBRARY_PATH=/root/anaconda3/pkgs/cudatoolkit-10.0.130-0/lib/:/root/anaconda3/pkgs/cudnn-7.6.5-cuda10.0_0/lib/:$LD_LIBRARY_PATH ffmpeg -i \"/root/Desktop/works/pyjom/tests/random_giphy_gifs/samoyed.gif\" -y -vf \"sr=dnn_backend=tensorflow:model=./sr/espcn.pb,yaepblur,hqdn3d\"  ffmpeg_samoyed_srcnn.mp4\n# env LD_LIBRARY_PATH=/root/anaco",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pure_ffmpeg_interpolate_resolution_denoise.sh:1-13"
    },
    "4313": {
        "file_id": 545,
        "content": "The script contains FFmpeg commands to resize, denoise and apply different filters on a GIF file. It uses the TensorFlow model \"espcn.pb\" for super-resolution and the \"yaepblur\" filter. The environment variable LD_LIBRARY_PATH is used to specify paths for CUDA toolkit and CUDNN libraries. The final output is saved as \".mp4\" files with different names.",
        "type": "comment"
    },
    "4314": {
        "file_id": 545,
        "content": "nda3/pkgs/cudatoolkit-10.0.130-0/lib/:/root/anaconda3/pkgs/cudnn-7.6.5-cuda10.0_0/lib/:$LD_LIBRARY_PATH ffmpeg -i \"/root/Desktop/works/pyjom/tests/random_giphy_gifs/samoyed.gif\" -y -vf \"sr=dnn_backend=tensorflow:model=./sr/espcn.pb,yaepblur\"  ffmpeg_samoyed_dctdnoiz.mp4\nenv LD_LIBRARY_PATH=/root/anaconda3/pkgs/cudatoolkit-10.0.130-0/lib/:/root/anaconda3/pkgs/cudnn-7.6.5-cuda10.0_0/lib/:$LD_LIBRARY_PATH ffmpeg -i \"/root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4\" -y -vf \"sr=dnn_backend=tensorflow:model=./sr/espcn.pb,yaepblur\"  supertest.mp4\n# dctdnoiz is not for real time processing. it is slow.\n# but somehow it makes the picture great. is it?\n#  TSC hqdn3d            V->V       Apply a High Quality 3D Denoiser.\n# check out all filters by `ffmpeg -filters`\n# yaepblur\n# yet another edge preserving blur filter\n# ffmpeg -y -i \"/root/Desktop/works/pyjom/tests/random_giphy_gifs/samoyed.gif\" -filter \"minterpolate=mi_mode=2\" -r 60 ffmpeg_samoyed.mp4\n# use deep learning models:\n# https://video.stackexchange.com/questions/29337/how-do-the-super-resolution-filters-in-ffmpeg-work",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pure_ffmpeg_interpolate_resolution_denoise.sh:13-27"
    },
    "4315": {
        "file_id": 545,
        "content": "This code uses FFmpeg to process video files, applying filters like Super Resolution (SR) using deep learning models and Edge Preserving Blur. It utilizes TensorFlow as the dnn_backend for SR filter and Anaconda libraries for CUDA toolkit and CuDNN. The processing is not real-time but improves picture quality.",
        "type": "comment"
    },
    "4316": {
        "file_id": 546,
        "content": "/tests/vapoursynth_linux_test/previewTestVideo.sh",
        "type": "filepath"
    },
    "4317": {
        "file_id": 546,
        "content": "Executing VapourSynth script on Linux, piping the output to FFplay for visualization. No frame-by-frame shift slider available.",
        "type": "summary"
    },
    "4318": {
        "file_id": 546,
        "content": "vspipe -c y4m basic_test.py - | ffplay -i pipe: \n# working! but no frame by frame shift slider avaliable",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/previewTestVideo.sh:1-2"
    },
    "4319": {
        "file_id": 546,
        "content": "Executing VapourSynth script on Linux, piping the output to FFplay for visualization. No frame-by-frame shift slider available.",
        "type": "comment"
    },
    "4320": {
        "file_id": 547,
        "content": "/tests/vapoursynth_linux_test/pip_examine.sh",
        "type": "filepath"
    },
    "4321": {
        "file_id": 547,
        "content": "The code captures, crops, and saves FFmpeg-generated screenshots from a video at specific timestamps in the \"pip_examine\" directory.",
        "type": "summary"
    },
    "4322": {
        "file_id": 547,
        "content": "ffmpeg -y -ss 0.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_0.jpg\nffmpeg -y -ss 0.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_1.jpg\nffmpeg -y -ss 0.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_2.jpg\nffmpeg -y -ss 1.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_3.jpg\nffmpeg -y -ss 1.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_4.jpg\nffmpeg -y -ss 1.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_5.jpg\nffmpeg -y -ss 1.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_6.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:1-7"
    },
    "4323": {
        "file_id": 547,
        "content": "This code uses FFmpeg to capture screenshots at specific time intervals from a video file. It crops the screenshots with specific dimensions and saves them in the \"pip_examine\" folder.",
        "type": "comment"
    },
    "4324": {
        "file_id": 547,
        "content": "ffmpeg -y -ss 1.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_7.jpg\nffmpeg -y -ss 2.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:186 -vframes 1 pip_examine/screenshot_8.jpg\nffmpeg -y -ss 2.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:200 -vframes 1 pip_examine/screenshot_9.jpg\nffmpeg -y -ss 2.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:200 -vframes 1 pip_examine/screenshot_10.jpg\nffmpeg -y -ss 2.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:200 -vframes 1 pip_examine/screenshot_11.jpg\nffmpeg -y -ss 2.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:624:68:200 -vframes 1 pip_examine/screenshot_12.jpg\nffmpeg -y -ss 3.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:608:68:212 -vframes 1 pip_examine/screenshot_13.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:8-14"
    },
    "4325": {
        "file_id": 547,
        "content": "These ffmpeg commands capture screenshots at specific timestamps from a video file and save them with corresponding filenames in the pip_examine directory. The `-ss`, `-i`, `-vf`, and `-vframes` options specify the start time, input file, video filter, and number of frames to capture for each screenshot respectively.",
        "type": "comment"
    },
    "4326": {
        "file_id": 547,
        "content": "ffmpeg -y -ss 3.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:608:68:212 -vframes 1 pip_examine/screenshot_14.jpg\nffmpeg -y -ss 3.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:608:68:212 -vframes 1 pip_examine/screenshot_15.jpg\nffmpeg -y -ss 3.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:608:68:216 -vframes 1 pip_examine/screenshot_16.jpg\nffmpeg -y -ss 3.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:608:68:216 -vframes 1 pip_examine/screenshot_17.jpg\nffmpeg -y -ss 4.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:608:68:218 -vframes 1 pip_examine/screenshot_18.jpg\nffmpeg -y -ss 4.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:608:68:218 -vframes 1 pip_examine/screenshot_19.jpg\nffmpeg -y -ss 4.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:608:68:218 -vframes 1 pip_examine/screenshot_20.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:15-21"
    },
    "4327": {
        "file_id": 547,
        "content": "This code uses FFmpeg to capture screenshots at specific timestamps from a video file. It crops the images to a particular size and saves them with sequential filenames in the \"pip_examine\" directory.",
        "type": "comment"
    },
    "4328": {
        "file_id": 547,
        "content": "ffmpeg -y -ss 4.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:624:68:218 -vframes 1 pip_examine/screenshot_21.jpg\nffmpeg -y -ss 4.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:624:68:212 -vframes 1 pip_examine/screenshot_22.jpg\nffmpeg -y -ss 5.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:200 -vframes 1 pip_examine/screenshot_23.jpg\nffmpeg -y -ss 5.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:200 -vframes 1 pip_examine/screenshot_24.jpg\nffmpeg -y -ss 5.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:640:68:200 -vframes 1 pip_examine/screenshot_25.jpg\nffmpeg -y -ss 5.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:656:68:186 -vframes 1 pip_examine/screenshot_26.jpg\nffmpeg -y -ss 5.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:656:68:186 -vframes 1 pip_examine/screenshot_27.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:22-28"
    },
    "4329": {
        "file_id": 547,
        "content": "This code uses FFmpeg to capture a series of screenshots from a video at specific timestamps, cropping the images with specific dimensions and saving them in the \"pip_examine\" folder.",
        "type": "comment"
    },
    "4330": {
        "file_id": 547,
        "content": "ffmpeg -y -ss 6.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:656:68:186 -vframes 1 pip_examine/screenshot_28.jpg\nffmpeg -y -ss 6.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:656:68:186 -vframes 1 pip_examine/screenshot_29.jpg\nffmpeg -y -ss 6.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_30.jpg\nffmpeg -y -ss 6.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_31.jpg\nffmpeg -y -ss 6.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_32.jpg\nffmpeg -y -ss 7.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_33.jpg\nffmpeg -y -ss 7.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_34.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:29-35"
    },
    "4331": {
        "file_id": 547,
        "content": "This code is using FFmpeg to capture screenshots from a video at specific time intervals. It crops the images and saves them with corresponding filenames in the \"pip_examine\" directory.",
        "type": "comment"
    },
    "4332": {
        "file_id": 547,
        "content": "ffmpeg -y -ss 7.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_35.jpg\nffmpeg -y -ss 7.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_36.jpg\nffmpeg -y -ss 7.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_37.jpg\nffmpeg -y -ss 8.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_38.jpg\nffmpeg -y -ss 8.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_39.jpg\nffmpeg -y -ss 8.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_40.jpg\nffmpeg -y -ss 8.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_41.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:36-42"
    },
    "4333": {
        "file_id": 547,
        "content": "The code is using FFmpeg to capture screenshots at specific timestamps of a video file, crop the images, and save them with corresponding filenames. It runs for 10 different timestamps.",
        "type": "comment"
    },
    "4334": {
        "file_id": 547,
        "content": "ffmpeg -y -ss 8.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_42.jpg\nffmpeg -y -ss 9.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_43.jpg\nffmpeg -y -ss 9.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_44.jpg\nffmpeg -y -ss 9.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_45.jpg\nffmpeg -y -ss 9.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_46.jpg\nffmpeg -y -ss 9.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_47.jpg\nffmpeg -y -ss 10.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:672:68:186 -vframes 1 pip_examine/screenshot_48.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:43-49"
    },
    "4335": {
        "file_id": 547,
        "content": "This code is using ffmpeg to capture screenshots at specific time intervals from a video file, saving each as an individual .jpg image in the pip_examine directory. The crop filters are applied to ensure the correct portion of the frame is captured for each shot.",
        "type": "comment"
    },
    "4336": {
        "file_id": 547,
        "content": "ffmpeg -y -ss 10.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:656:68:200 -vframes 1 pip_examine/screenshot_49.jpg\nffmpeg -y -ss 10.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:656:68:202 -vframes 1 pip_examine/screenshot_50.jpg\nffmpeg -y -ss 10.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:480:68:378 -vframes 1 pip_examine/screenshot_51.jpg\nffmpeg -y -ss 10.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:480:68:378 -vframes 1 pip_examine/screenshot_52.jpg\nffmpeg -y -ss 11.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:480:68:378 -vframes 1 pip_examine/screenshot_53.jpg\nffmpeg -y -ss 11.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:480:68:378 -vframes 1 pip_examine/screenshot_54.jpg\nffmpeg -y -ss 11.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:448:68:378 -vframes 1 pip_examine/screenshot_55.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:50-56"
    },
    "4337": {
        "file_id": 547,
        "content": "These lines are using FFmpeg to capture screenshots at specific timestamps from a video file, with varying crop dimensions and saving them as JPEGs in the pip_examine directory.",
        "type": "comment"
    },
    "4338": {
        "file_id": 547,
        "content": "ffmpeg -y -ss 11.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_56.jpg\nffmpeg -y -ss 11.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_57.jpg\nffmpeg -y -ss 12.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_58.jpg\nffmpeg -y -ss 12.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_59.jpg\nffmpeg -y -ss 12.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_60.jpg\nffmpeg -y -ss 12.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_61.jpg\nffmpeg -y -ss 12.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_62.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:57-63"
    },
    "4339": {
        "file_id": 547,
        "content": "This code is using FFmpeg to capture screenshots at specific timestamps from a video file. The `-ss` flag specifies the start time, `-vf crop` defines the cropping area, and `-vframes 1` captures one frame. Each resulting image is saved in the 'pip_examine' directory with the corresponding filename.",
        "type": "comment"
    },
    "4340": {
        "file_id": 547,
        "content": "ffmpeg -y -ss 13.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_63.jpg\nffmpeg -y -ss 13.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_64.jpg\nffmpeg -y -ss 13.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:448:68:378 -vframes 1 pip_examine/screenshot_65.jpg\nffmpeg -y -ss 13.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:448:68:378 -vframes 1 pip_examine/screenshot_66.jpg\nffmpeg -y -ss 13.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_67.jpg\nffmpeg -y -ss 14.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_68.jpg\nffmpeg -y -ss 14.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_69.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:64-70"
    },
    "4341": {
        "file_id": 547,
        "content": "This code is using FFmpeg to generate a series of screenshots at specific time intervals from a video file. The `-ss` flag sets the start time for each screenshot, and the `-vf crop` option specifies the cropping parameters for each image. Each screenshot is saved in the \"pip_examine\" directory with a corresponding filename.",
        "type": "comment"
    },
    "4342": {
        "file_id": 547,
        "content": "ffmpeg -y -ss 14.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_70.jpg\nffmpeg -y -ss 14.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_71.jpg\nffmpeg -y -ss 14.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_72.jpg\nffmpeg -y -ss 15.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_73.jpg\nffmpeg -y -ss 15.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_74.jpg\nffmpeg -y -ss 15.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_75.jpg\nffmpeg -y -ss 15.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_76.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:71-77"
    },
    "4343": {
        "file_id": 547,
        "content": "This code uses FFmpeg to capture screenshots from a video file at specific time intervals. It crops the images to a specific size and saves them as separate files in the \"pip_examine\" directory. Each line represents one screenshot command executed consecutively, starting at 14.4 seconds and incrementing by 0.2 seconds until reaching 15.6 seconds.",
        "type": "comment"
    },
    "4344": {
        "file_id": 547,
        "content": "ffmpeg -y -ss 15.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_77.jpg\nffmpeg -y -ss 16.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_78.jpg\nffmpeg -y -ss 16.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_79.jpg\nffmpeg -y -ss 16.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_80.jpg\nffmpeg -y -ss 16.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_81.jpg\nffmpeg -y -ss 16.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_82.jpg\nffmpeg -y -ss 17.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_83.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:78-84"
    },
    "4345": {
        "file_id": 547,
        "content": "This code is creating screenshots at specific timestamps of a video file. It uses FFmpeg to extract frames from the video and save them as JPEG images in a directory named \"pip_examine\". The crop filter is applied to each frame, cropping it to a size of 464x320 with an offset of 68 pixels from the left and 382 pixels from the top.",
        "type": "comment"
    },
    "4346": {
        "file_id": 547,
        "content": "ffmpeg -y -ss 17.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_84.jpg\nffmpeg -y -ss 17.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_85.jpg\nffmpeg -y -ss 17.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_86.jpg\nffmpeg -y -ss 17.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_87.jpg\nffmpeg -y -ss 18.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_88.jpg\nffmpeg -y -ss 18.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_89.jpg\nffmpeg -y -ss 18.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_90.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:85-91"
    },
    "4347": {
        "file_id": 547,
        "content": "This code uses FFmpeg to capture screenshots at specific timestamps of a video file. It applies a crop filter to the images and saves them in the \"pip_examine\" directory. The process is repeated for different timestamps, resulting in multiple screenshots.",
        "type": "comment"
    },
    "4348": {
        "file_id": 547,
        "content": "ffmpeg -y -ss 18.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_91.jpg\nffmpeg -y -ss 18.800000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:382 -vframes 1 pip_examine/screenshot_92.jpg\nffmpeg -y -ss 19.000000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:384 -vframes 1 pip_examine/screenshot_93.jpg\nffmpeg -y -ss 19.200000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:384 -vframes 1 pip_examine/screenshot_94.jpg\nffmpeg -y -ss 19.400000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:384 -vframes 1 pip_examine/screenshot_95.jpg\nffmpeg -y -ss 19.600000 -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf crop=464:320:68:384 -vframes 1 pip_examine/screenshot_96.jpg",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/pip_examine.sh:92-97"
    },
    "4349": {
        "file_id": 547,
        "content": "This code uses ffmpeg to capture screenshots from a video at specific timestamps. It crops the images and saves them with corresponding filenames in the pip_examine directory.",
        "type": "comment"
    },
    "4350": {
        "file_id": 548,
        "content": "/tests/vapoursynth_linux_test/motion_estimation.sh",
        "type": "filepath"
    },
    "4351": {
        "file_id": 548,
        "content": "This code snippet demonstrates the use of FFmpeg to process video files using motion estimation, crop detection, and other filters. It shows how to output motion vectors, find picture-in-picture (PIP) scenarios, and obtain help on filter usage. The code snippets are for testing purposes and can be used to analyze video processing tasks in the pyjom project.",
        "type": "summary"
    },
    "4352": {
        "file_id": 548,
        "content": "# output motion vectors.\n# ffmpeg -i \"/root/Desktop/works/pyjom/tests/random_giphy_gifs/samoyed.gif\" -vf \"mestimate=epzs:mb_size=16:search_param=7, codecview=mv=pf+bf+bb\"  mestimate_output.mp4 -y\n# not just toy, but can find PIP\n# picture in picture, crop detect?\nffmpeg -i \"/root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4\" -flags2 +export_mvs -vf \"fps=5,mestimate=epzs:mb_size=16:search_param=7,cropdetect=mode=mvedges,metadata=mode=print\" -f null - # no printing?\n# ffmpeg -i \"/root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4\" -vf \"mestimate,cropdetect=mode=mvedges,metadata=mode=print\" -f null -\n# get help on filter:\n# ffmpeg -h filter=showspectrumpic",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/motion_estimation.sh:2-13"
    },
    "4353": {
        "file_id": 548,
        "content": "This code snippet demonstrates the use of FFmpeg to process video files using motion estimation, crop detection, and other filters. It shows how to output motion vectors, find picture-in-picture (PIP) scenarios, and obtain help on filter usage. The code snippets are for testing purposes and can be used to analyze video processing tasks in the pyjom project.",
        "type": "comment"
    },
    "4354": {
        "file_id": 549,
        "content": "/tests/vapoursynth_linux_test/make_vapoursynth_autoload.sh",
        "type": "filepath"
    },
    "4355": {
        "file_id": 549,
        "content": "This script creates necessary directories for VapourSynth and configures the vapoursynth.conf file with paths to user and system plugin folders. It ensures that the correct directories are in place for VapourSynth to function properly.",
        "type": "summary"
    },
    "4356": {
        "file_id": 549,
        "content": "# refer to http://www.vapoursynth.com/doc/installation.html\nmkdir -p \"$HOME/Library/Application Support/VapourSynth/\"\ntouch \"$HOME/Library/Application Support/VapourSynth/vapoursynth.conf\"\nsudo mkdir -p /Library/vapoursynth/plugins\nmkdir -p /Users/jamesbrown/vapoursynth/plugins\necho \"UserPluginDir=/Users/jamesbrown/vapoursynth/plugins\" > \"$HOME/Library/Application Support/VapourSynth/vapoursynth.conf\"\necho \"SystemPluginDir=/Library/vapoursynth/plugins\" >> \"$HOME/Library/Application Support/VapourSynth/vapoursynth.conf\"\necho \"CONTENT BELOW:\"\ncat \"$HOME/Library/Application Support/VapourSynth/vapoursynth.conf\"",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/make_vapoursynth_autoload.sh:1-9"
    },
    "4357": {
        "file_id": 549,
        "content": "This script creates necessary directories for VapourSynth and configures the vapoursynth.conf file with paths to user and system plugin folders. It ensures that the correct directories are in place for VapourSynth to function properly.",
        "type": "comment"
    },
    "4358": {
        "file_id": 550,
        "content": "/tests/vapoursynth_linux_test/improve_video_quality.sh",
        "type": "filepath"
    },
    "4359": {
        "file_id": 550,
        "content": "This code uses vspipe and ffmpeg to denoise, upscale, and improve the video quality of \"denoise_and_upscale_samoyed.py\". It scales the video width by 2 times and height by 2 times using Lanczos algorithm, and saves it as \"improved.mp4\" (or \"output.bmp\"). This is referenced from a guide on upscaling and downscaling videos with ffmpeg.",
        "type": "summary"
    },
    "4360": {
        "file_id": 550,
        "content": "vspipe -c y4m denoise_and_upscale_samoyed.py - | ffmpeg -y -i pipe: -vf scale=w=in_w*2:h=in_h*2:flags=lanczos improved.mp4\n# vspipe -c y4m denoise_and_upscale_samoyed.py - | ffmpeg -y -i pipe: output.bmp\n# https://write.corbpie.com/upscaling-and-downscaling-video-with-ffmpeg/",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/improve_video_quality.sh:1-3"
    },
    "4361": {
        "file_id": 550,
        "content": "This code uses vspipe and ffmpeg to denoise, upscale, and improve the video quality of \"denoise_and_upscale_samoyed.py\". It scales the video width by 2 times and height by 2 times using Lanczos algorithm, and saves it as \"improved.mp4\" (or \"output.bmp\"). This is referenced from a guide on upscaling and downscaling videos with ffmpeg.",
        "type": "comment"
    },
    "4362": {
        "file_id": 551,
        "content": "/tests/vapoursynth_linux_test/ffmpeg_pip_examine.sh",
        "type": "filepath"
    },
    "4363": {
        "file_id": 551,
        "content": "This script creates a directory, extracts timestamps from a log file using awk, and generates ffmpeg commands to capture screenshots at specified timestamps. The output is saved as individual JPEG files in the 'pip_examine' folder.",
        "type": "summary"
    },
    "4364": {
        "file_id": 551,
        "content": "mkdir pip_examine\ncat pip_motion_cropdetect.log | awk -F 't:' '{print $2}' | awk '{print \"ffmpeg -y -ss \" $1 \" -i /root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4 -vf \" $2 \" -vframes 1 pip_examine/screenshot_\" i++ \".jpg\" }' > pip_examine.sh\nbash pip_examine.sh",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/ffmpeg_pip_examine.sh:1-3"
    },
    "4365": {
        "file_id": 551,
        "content": "This script creates a directory, extracts timestamps from a log file using awk, and generates ffmpeg commands to capture screenshots at specified timestamps. The output is saved as individual JPEG files in the 'pip_examine' folder.",
        "type": "comment"
    },
    "4366": {
        "file_id": 552,
        "content": "/tests/vapoursynth_linux_test/denoise_and_upscale_samoyed.py",
        "type": "filepath"
    },
    "4367": {
        "file_id": 552,
        "content": "The code improves GIF quality using a denoising filter, OpenCV library version check, VapourSynth with BM3D algorithm, frame interpolation, and super-resolution via RIFE. It adjusts image processing parameters to avoid slow operations while experimenting with RealCUGAN, BasicVSRPP, Lanczos resizing, and Bicubic resizing for dog videos.",
        "type": "summary"
    },
    "4368": {
        "file_id": 552,
        "content": "# try to improve gif quality in some way.\n# is this necessary?\n# apply some filter on video size and duration first, please?\nimport pathlib\nimport sys\nsite_path = pathlib.Path(\"/usr/local/lib/python3.9/site-packages\")\ncv2_libs_dir = (\n    site_path / \"cv2\" / f\"python-{sys.version_info.major}.{sys.version_info.minor}\"\n)\nprint(cv2_libs_dir)\ncv2_libs = sorted(cv2_libs_dir.glob(\"*.so\"))\nif len(cv2_libs) == 1:\n    print(\"INSERTING:\", cv2_libs[0].parent)\n    sys.path.insert(1, str(cv2_libs[0].parent))\nvideoPath = \"/root/Desktop/works/pyjom/tests/random_giphy_gifs/samoyed.gif\"\n# videoPath = \"/root/Desktop/works/pyjom/tests/random_giphy_gifs/pikachu.gif\"\nimport vapoursynth\n# install this:\n# https://github.com/HomeOfVapourSynthEvolution/mvsfunc\nimport vapoursynth as vs\nfrom vapoursynth import core\nvideo = core.ffms2.Source(source=videoPath)\n# visit here for more usage details:\n# https://github.com/HomeOfVapourSynthEvolution/VapourSynth-BM3D\nimport mvsfunc as mvf # denoising\nvideo = mvf.BM3D(video, sigma=3.0, radius1=1, profile1=\"fast\")",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/denoise_and_upscale_samoyed.py:1-36"
    },
    "4369": {
        "file_id": 552,
        "content": "This code aims to improve GIF quality by applying a denoising filter. It checks the OpenCV library version and inserts it into the system path if necessary. The code uses VapourSynth for video processing, specifically the BM3D algorithm from the mvsfunc module, with custom parameters.",
        "type": "comment"
    },
    "4370": {
        "file_id": 552,
        "content": "from vsrife import RIFE # frame interpolate\nvideo = core.resize.Bicubic(video, format=vs.RGBS)\nvideo = RIFE(video)\n# super resolution\n# copy compiled .so file to here:\n# /root/vapoursynth/plugins/lib/\n# ln -s /root/Desktop/works/pyjom/tests/vapoursynth_linux_test/models /root/vapoursynth/plugins/lib/models\ngpu_id = 0\n# noise = 2\nscale = 2\n# slow.\n# video = core.srmdnv.SRMD(video,scale=scale, noise=noise, \n#                   gpu_id=gpu_id)\n# video = core.resize.Bicubic(video, format=vs.YUV420P8, matrix_s=\"709\")\n# video = core.resize.Lanczos(clip=video, format=vs.RGBS, \n#                         matrix_in_s=\"2020ncl\",\n#                         transfer_in_s=\"std-b67\", transfer_s=\"linear\",\n#                         nominal_luminance=1000)\n# video = core.tonemap.Mobius(clip=video, exposure=4)\n# video = core.resize.Lanczos(clip=video, format=vs.YUV420P10, matrix_s=\"709\",\n#                         primaries_in_s=\"2020\",  primaries_s=\"709\",\n#                         transfer_in_s=\"linear\", transfer_s=\"709\")\n# slow as hell man.",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/denoise_and_upscale_samoyed.py:38-68"
    },
    "4371": {
        "file_id": 552,
        "content": "Code imports RIFE for frame interpolation and performs super-resolution on the video. It also links a compiled .so file to its location and adjusts various parameters such as gpu_id, scale, noise, matrix_s, transfer_in_s, primaries_in_s, and more for image processing. The code mentions that certain operations are slow.",
        "type": "comment"
    },
    "4372": {
        "file_id": 552,
        "content": "# a very bad filter for dogs\n# video = core.rcnv.RealCUGAN(video , scale=scale, \n                #   gpu_id=gpu_id, model=1)\nfrom vsbasicvsrpp import BasicVSRPP\nvideo = BasicVSRPP(video)\n# solution from tonemap?\n# https://github.com/ifb/vapoursynth-tonemap/issues/2\n# video = core.resize.Lanczos(clip=video, format=vs.YUV420P10, matrix_s=\"709\",\n#                         primaries_in_s=\"2020\",  primaries_s=\"709\",\n#                         transfer_in_s=\"linear\", transfer_s=\"709\")\nvideo = core.resize.Bicubic(clip =video, format = vs.YUV420P10, matrix_s='709')\n# much better, no over exposure.\nvideo.set_output()\n# maybe this shit is very freaking slow.\n# why not use gaussian blur?",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/denoise_and_upscale_samoyed.py:69-87"
    },
    "4373": {
        "file_id": 552,
        "content": "The code attempts to apply a filter for denoising and upscaling videos of dogs, possibly experimenting with different methods such as RealCUGAN, BasicVSRPP, Lanczos resizing, and Bicubic resizing. The goal is to improve video quality without overexposure or slow performance.",
        "type": "comment"
    },
    "4374": {
        "file_id": 553,
        "content": "/tests/vapoursynth_linux_test/cloneBasicRepo.sh",
        "type": "filepath"
    },
    "4375": {
        "file_id": 553,
        "content": "This code is cloning four repositories: ffms2, vsrepo (not useful for non-Windows OSes), Bl4Cc4t's homebrew-vsplugins, and UniversalAl's view. The purpose is to fetch necessary software components for Linux and macOS platforms.",
        "type": "summary"
    },
    "4376": {
        "file_id": 553,
        "content": "git clone https://github.com/FFMS/ffms2\n# git clone https://github.com/vapoursynth/vsrepo not useful for OSes other than Windows\ngit clone https://github.com/Bl4Cc4t/homebrew-vsplugins # checking how to build these things properly on linux/macos\ngit clone https://github.com/UniversalAl/view",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/cloneBasicRepo.sh:1-4"
    },
    "4377": {
        "file_id": 553,
        "content": "This code is cloning four repositories: ffms2, vsrepo (not useful for non-Windows OSes), Bl4Cc4t's homebrew-vsplugins, and UniversalAl's view. The purpose is to fetch necessary software components for Linux and macOS platforms.",
        "type": "comment"
    },
    "4378": {
        "file_id": 554,
        "content": "/tests/vapoursynth_linux_test/basic_test.py",
        "type": "filepath"
    },
    "4379": {
        "file_id": 554,
        "content": "Code imports vapoursynth module and sets video path. It loads the video using ffms2 source, transposes it, then outputs the result without encoding. Opencv may be needed for previewing.",
        "type": "summary"
    },
    "4380": {
        "file_id": 554,
        "content": "videoPath = \"/root/Desktop/works/pyjom/samples/video/dog_with_text.mp4\"\n# videoPath = \"/Users/jamesbrown/desktop/works/pyjom_remote/samples/video/dog_with_text.mp4\"\nfrom vapoursynth import core\nvideo = core.ffms2.Source(source=videoPath)\nvideo = core.std.Transpose(video)\nvideo.set_output()\n# vspipe is a wrapper around existing apis. vapoursynth can only generate raw frame data so we cannot encode video here alone. maybe we need opencv for this?\n# opencv preview https://github.com/UniversalAl/view",
        "type": "code",
        "location": "/tests/vapoursynth_linux_test/basic_test.py:1-10"
    },
    "4381": {
        "file_id": 554,
        "content": "Code imports vapoursynth module and sets video path. It loads the video using ffms2 source, transposes it, then outputs the result without encoding. Opencv may be needed for previewing.",
        "type": "comment"
    },
    "4382": {
        "file_id": 555,
        "content": "/tests/youtube_shorts_heuristic_search/README.md",
        "type": "filepath"
    },
    "4383": {
        "file_id": 555,
        "content": "Code contains information about search and downloadability of YouTube Shorts, as well as mentioning the limitations of current video feed acquisition from various platforms. It also provides a link to a Python library for YouTube search and details on a simple bilibili search API.",
        "type": "summary"
    },
    "4384": {
        "file_id": 555,
        "content": "turned out youtube shorts are searchable, downloadable.\nbut the video feed is not yet acquired, just like all other video feeds from youtube, twitch, reddit, qq小世界, bilibili, 抖音, tiktok and the trending ones.\nthe youtube advanced filter is embedded in the search results. you can only jump to one embedded link at a time\nto get the next page on youtube:\nthe key seems to be the unified unlimited api key for youtube.\nPOST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8&prettyPrint=false with a lot of headaching parameters.\nyou can bypass them. here are some basic parameters without lots of combinations. if you want to combine them, better figure it out yourself.\nsome of them might already fail to work.\nhttps://github.com/alexmercerind/youtube-search-python/blob/fc12c05747f1f7bd89d71699403762b86b523da5/youtubesearchpython/core/constants.py#L45\nbilibili search api is currently simple:\nhttps://search.bilibili.com/video?keyword=%E6%B1%AA%E6%B1%AA&from_source=webtop_search&spm_id_from=333.1007&search_source=3&tids=219&order=dm&duration=2",
        "type": "code",
        "location": "/tests/youtube_shorts_heuristic_search/README.md:1-21"
    },
    "4385": {
        "file_id": 555,
        "content": "Code contains information about search and downloadability of YouTube Shorts, as well as mentioning the limitations of current video feed acquisition from various platforms. It also provides a link to a Python library for YouTube search and details on a simple bilibili search API.",
        "type": "comment"
    },
    "4386": {
        "file_id": 556,
        "content": "/tests/youtube_shorts_heuristic_search/heuristic_model.py",
        "type": "filepath"
    },
    "4387": {
        "file_id": 556,
        "content": "The code defines a function called \"getSearchQueryFromHeuristicSpace\" which takes a seed as input and returns a search query. This model aims to reduce repetition and increase the likelihood of finding relevant videos by utilizing heuristics. The application is intended to be server-based.",
        "type": "summary"
    },
    "4388": {
        "file_id": 556,
        "content": "seed = 'dog cute'\ndef getSearchQueryFromHeuristicSpace(seed):\n    # less likely to repeat, and more possibility to get needed videos.\n    return searchQuery\n# this heuristic search model shall be a server based application.",
        "type": "code",
        "location": "/tests/youtube_shorts_heuristic_search/heuristic_model.py:2-8"
    },
    "4389": {
        "file_id": 556,
        "content": "The code defines a function called \"getSearchQueryFromHeuristicSpace\" which takes a seed as input and returns a search query. This model aims to reduce repetition and increase the likelihood of finding relevant videos by utilizing heuristics. The application is intended to be server-based.",
        "type": "comment"
    },
    "4390": {
        "file_id": 557,
        "content": "/tests/aiohttp_python_clash_delay_proxy_set_proxy/test.py",
        "type": "filepath"
    },
    "4391": {
        "file_id": 557,
        "content": "This code fetches and tests proxies, sets up a connection gateway, makes a GET request to \"https://deepl.com\" using the valid proxy, prints first 100 bytes and status code, and displays \"deepl response\".",
        "type": "summary"
    },
    "4392": {
        "file_id": 557,
        "content": "# from download_from_multiple_websites_at_once import concurrentGet\nfrom lazero.network.proxy.clash import (\n    getProxyList,\n    testProxyList,\n    getConnectionGateway,\n    setProxyConfig,\n    setProxyWithSelector,\n)\nimport requests\nif __name__ == \"__main__\":\n    # validProxyDelayList = []\n    proxyList = getProxyList(debug=True)\n    # pprint.pprint(result)\n    validProxyDelayList = testProxyList(proxyList, timeout=5000)\n    #     pprint(gateway)\n    #     {'allow-lan': True,\n    #  'authentication': [],\n    #  'bind-address': '*',\n    #  'ipv6': False,\n    #  'log-level': 'info',\n    #  'mixed-port': 0,\n    #  'mode': 'rule',\n    #  'port': 8381,\n    #  'redir-port': 0,\n    #  'socks-port': 0,\n    #  'tproxy-port': 0}\n    gateway = getConnectionGateway()\n    print(\"valid proxies:\", len(validProxyDelayList))\n    validProxyName = validProxyDelayList[0][\"name\"]\n    # if no valid proxy, better do another run.\n    setProxyConfig(mode=\"Global\")\n    # you can switch to 'Rule' if you want the baidu translation\n    setProxyWithSelector(validProxyName, debug=True)",
        "type": "code",
        "location": "/tests/aiohttp_python_clash_delay_proxy_set_proxy/test.py:1-34"
    },
    "4393": {
        "file_id": 557,
        "content": "This code fetches the proxy list from Clash, tests the proxies for validity, sets up a connection gateway, and configures the global proxy using Clash's functions. It prints the number of valid proxies found and sets a specific valid proxy for further use.",
        "type": "comment"
    },
    "4394": {
        "file_id": 557,
        "content": "    # now use the proxy!\n    r = requests.get(\"https://deepl.com\", proxies={\"http\": gateway, \"https\": gateway})\n    print()\n    print(r.content[:100])\n    print(r.status_code)\n    print(\"deepl response\")",
        "type": "code",
        "location": "/tests/aiohttp_python_clash_delay_proxy_set_proxy/test.py:35-40"
    },
    "4395": {
        "file_id": 557,
        "content": "Using the proxy, make a GET request to \"https://deepl.com\", print the first 100 bytes of response content and status code, then display \"deepl response\".",
        "type": "comment"
    },
    "4396": {
        "file_id": 558,
        "content": "/tests/aiohttp_python_clash_delay_proxy_set_proxy/download_from_multiple_websites_at_once.py",
        "type": "filepath"
    },
    "4397": {
        "file_id": 558,
        "content": "This code imports the \"concurrentGet\" function from the \"lzero.network.asyncio\" module, which allows for making concurrent HTTP GET requests asynchronously.",
        "type": "summary"
    },
    "4398": {
        "file_id": 558,
        "content": "from lazero.network.asyncio import concurrentGet",
        "type": "code",
        "location": "/tests/aiohttp_python_clash_delay_proxy_set_proxy/download_from_multiple_websites_at_once.py:1-1"
    },
    "4399": {
        "file_id": 558,
        "content": "This code imports the \"concurrentGet\" function from the \"lzero.network.asyncio\" module, which allows for making concurrent HTTP GET requests asynchronously.",
        "type": "comment"
    }
}