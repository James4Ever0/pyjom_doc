{
    "3300": {
        "file_id": 386,
        "content": "/tests/bilibili_video_recommendation_server/stroke_path.py",
        "type": "filepath"
    },
    "3301": {
        "file_id": 386,
        "content": "Creates a 200x200 image with a rounded rectangle path, applies solid green paint to stroke it with a 3px width, and saves the result as 'stroke_round_rect.png' but with transparent background.",
        "type": "summary"
    },
    "3302": {
        "file_id": 386,
        "content": "import pixie\nimage = pixie.Image(200,200)\npath = pixie.Path()\npath.rounded_rect(20,20,100,100,25,25,25,25)\npaint = pixie.Paint(pixie.SOLID_PAINT)\npaint.color = pixie.Color(0,1,0,1)\nimage.stroke_path(path, paint=paint, stroke_width=3)\nimage.write_file('stroke_round_rect.png')\n# stroke on a transparent background. well shit.",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/stroke_path.py:1-14"
    },
    "3303": {
        "file_id": 386,
        "content": "Creates a 200x200 image with a rounded rectangle path, applies solid green paint to stroke it with a 3px width, and saves the result as 'stroke_round_rect.png' but with transparent background.",
        "type": "comment"
    },
    "3304": {
        "file_id": 387,
        "content": "/tests/bilibili_video_recommendation_server/send_video.py",
        "type": "filepath"
    },
    "3305": {
        "file_id": 387,
        "content": "This code sends a video file to a specific group chat using the CQHTTP API. The video is obtained from a local path, and the code constructs the necessary request data and URL before sending a POST request to the CQHTTP server. It then prints the JSON response received from the server.",
        "type": "summary"
    },
    "3306": {
        "file_id": 387,
        "content": "# botoy can only repost video.\n# repostVideo2Group\t转发视频到群聊\n# repostVideo2Friend\t转发视频给好友\n# getVideoURL\t获取短视频链接\n# cqhttp can post video.\n# https://docs.go-cqhttp.org/cqcode/#%E7%9F%AD%E8%A7%86%E9%A2%91\nbaseUrl = \"http://0.0.0.0:5700\"\ngroup = 543780931\nimport requests\nurl = baseUrl + \"/send_group_msg\"\nimport os\n# video_path = \"big_breast_video.mp4\"\n# video_path = \"sample_video/sample_video.mp4\" # this video have some problem. needs intro and outro. need to show some metadata on the way.\nvideo_path = \"sample_video/output.mp4\" # the 'moderated' video\nvideo_abspath = os.path.abspath(video_path)\ncontent = \"file://\"+video_abspath\nmessage = \"[CQ:video,file={}]\".format(content)\ndata = {\"group_id\": group, \"message\": message, \"auto_escape\": False}\nr = requests.post(url, data=data)\nprint(r.json())\n# cannot send json. wtf?\n# 请参考 go-cqhttp 端输出",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/send_video.py:1-28"
    },
    "3307": {
        "file_id": 387,
        "content": "This code sends a video file to a specific group chat using the CQHTTP API. The video is obtained from a local path, and the code constructs the necessary request data and URL before sending a POST request to the CQHTTP server. It then prints the JSON response received from the server.",
        "type": "comment"
    },
    "3308": {
        "file_id": 388,
        "content": "/tests/bilibili_video_recommendation_server/send_payment_urls.py",
        "type": "filepath"
    },
    "3309": {
        "file_id": 388,
        "content": "This code sends group message with payment URLs using the bilibili video recommendation server. It uses requests module to send POST request to specified URL with a JSON payload containing group ID and message (payment URLs) as data. The response is printed in JSON format. There seems to be an issue with sending JSON, needing further investigation.",
        "type": "summary"
    },
    "3310": {
        "file_id": 388,
        "content": "baseUrl = \"http://0.0.0.0:5700\"\ngroup = 543780931\nimport requests\nurl = baseUrl + \"/send_group_msg\"\npayment_urls = [\n    \"https://qr.alipay.com/tsx10243tdewwaxrvullge8\",\n    \"wxp://f2f0V92qUQI0aBO5PXtWezujxMm-C1KFub6qCi1Obt3cn1KjZqDPqoWKn8ICCcwdt8zU\",\n]\nmessage = \"\\n\".join(payment_urls)\ndata = {\"group_id\": group, \"message\": message, \"auto_escape\": False}\nr = requests.post(url, data=data)\nprint(r.json())\n# cannot send json. wtf?\n# 请参考 go-cqhttp 端输出",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/send_payment_urls.py:1-17"
    },
    "3311": {
        "file_id": 388,
        "content": "This code sends group message with payment URLs using the bilibili video recommendation server. It uses requests module to send POST request to specified URL with a JSON payload containing group ID and message (payment URLs) as data. The response is printed in JSON format. There seems to be an issue with sending JSON, needing further investigation.",
        "type": "comment"
    },
    "3312": {
        "file_id": 389,
        "content": "/tests/bilibili_video_recommendation_server/send_image_gif.py",
        "type": "filepath"
    },
    "3313": {
        "file_id": 389,
        "content": "The code is testing to broadcast a picture or gif using the botoy library. The action may fail, so it might be necessary to upload the gif instead of scanning the code within it. It reads the file, encodes it in base64, and sends it as a group message with the provided content.",
        "type": "summary"
    },
    "3314": {
        "file_id": 389,
        "content": "# test to broadcast all these things.\n# this method might fail to behave correctly.\n# maybe we need to upload the\nfrom botoy import Action\nqq = 917521610\nport = 8784\naction = Action(qq=qq, port=port, host=\"127.0.0.1\")\n# user = 1281727431\ngroup = 543780931\nlink = \"https://b23.tv/DPn1G4p\"\ntitle_text = \"真·朋克！揭秘《赛博朋克2077》屏幕之外的魔幻换弹操作\"\ncontent = \"观看视频:\\n{}\\n{}\".format(link, title_text)\nimport base64\n# picture_path = \"qrcode.gif\"\npicture_path = \"anime_masked_overlay.gif\" # how to crop this thing?\n# where is the gif? my god?\n# there is no way to scan the code in the gif. better send the link instead.\nwith open(picture_path, \"rb\") as img_file:\n    b64_string = base64.b64encode(img_file.read())\n# print(b64_string)\nresult = action.sendGroupPic(group=group, picBase64Buf=b64_string.decode(\"utf-8\"), content=content)\nprint(result)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/send_image_gif.py:1-29"
    },
    "3315": {
        "file_id": 389,
        "content": "The code is testing to broadcast a picture or gif using the botoy library. The action may fail, so it might be necessary to upload the gif instead of scanning the code within it. It reads the file, encodes it in base64, and sends it as a group message with the provided content.",
        "type": "comment"
    },
    "3316": {
        "file_id": 390,
        "content": "/tests/bilibili_video_recommendation_server/send_image_botoy.py",
        "type": "filepath"
    },
    "3317": {
        "file_id": 390,
        "content": "This code uses Botoy library to send images/videos on QQ, defines specific objectives, and sends messages with action.sendFriendPic method while also allowing accompanying text with action.sendFriendText method.",
        "type": "summary"
    },
    "3318": {
        "file_id": 390,
        "content": "# test to broadcast all these things.\n# this method might fail to behave correctly.\n# maybe we need to upload the image and get url? no thanks?\n# we use jpg instead? must use cv2.\n# 暂时用不到转发消息的功能\nfrom botoy import Action\nqq = 917521610\nport = 8784\naction = Action(qq=qq, port=port, host=\"127.0.0.1\")\nuser = 1281727431\nimport base64\nobjective = \"send_image\"\nif objective == 'send_video_ad':\n    link = \"https://b23.tv/DPn1G4p\"\n    title_text = \"真·朋克！揭秘《赛博朋克2077》屏幕之外的魔幻换弹操作\"\n    content = \"观看视频:\\n{}\\n{}\".format(link, title_text)\n    picture_path = \"ad_2_standalone_cover.png\"\n    with open(picture_path, \"rb\") as img_file:\n        b64_string = base64.b64encode(img_file.read())\n    # print(b64_string)\n    result = action.sendFriendPic(user=user, picBase64Buf=b64_string.decode(\"utf-8\"))\n    print(result)\n    action.sendFriendText(user=user, content=content)\n    # send separately.\n    # result = action.sendFriendPic(user=user, picBase64Buf=b64_string.decode('utf-8'),content = content)\nelif objective == 'send_image':\n    # picture_path = \"ad_2.png\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/send_image_botoy.py:1-35"
    },
    "3319": {
        "file_id": 390,
        "content": "The code uses the Botoy library to send images or videos as messages on QQ. It requires the user to define specific objectives like 'send_video_ad' and 'send_image'. The code reads the image file, encodes it into base64, and sends it as a message using the action.sendFriendPic method. Additionally, it can also send accompanying text messages with the action.sendFriendText method.",
        "type": "comment"
    },
    "3320": {
        "file_id": 390,
        "content": "    # picture_path = \"ebegging_setu_transparent.png\"\n    picture_path = \"image_with_text_8.png\"\n    with open(picture_path, \"rb\") as img_file:\n        b64_string = base64.b64encode(img_file.read())\n    # print(b64_string)\n    result = action.sendFriendPic(\n        user=user, picBase64Buf=b64_string.decode(\"utf-8\")\n    )  # better without content.",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/send_image_botoy.py:36-43"
    },
    "3321": {
        "file_id": 390,
        "content": "This code opens a local image file, reads its contents in binary format, encodes the binary data to base64 string representation, and then sends it as a friend picture using the \"sendFriendPic\" function of the \"action\" module.",
        "type": "comment"
    },
    "3322": {
        "file_id": 391,
        "content": "/tests/bilibili_video_recommendation_server/remove_background.sh",
        "type": "filepath"
    },
    "3323": {
        "file_id": 391,
        "content": "This command uses ffmpeg to remove the black background from \"bilibili.png\" and save the result as \"bilibili_transparent.png\". The colorkey filter is applied with settings for black color, thresholding, and tolerance.",
        "type": "summary"
    },
    "3324": {
        "file_id": 391,
        "content": "ffmpeg -i bilibili.png -vf \"colorkey=black:0.3:0.2\" bilibili_transparent.png",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/remove_background.sh:1-1"
    },
    "3325": {
        "file_id": 391,
        "content": "This command uses ffmpeg to remove the black background from \"bilibili.png\" and save the result as \"bilibili_transparent.png\". The colorkey filter is applied with settings for black color, thresholding, and tolerance.",
        "type": "comment"
    },
    "3326": {
        "file_id": 392,
        "content": "/tests/bilibili_video_recommendation_server/overlay_gif.sh",
        "type": "filepath"
    },
    "3327": {
        "file_id": 392,
        "content": "This code uses FFmpeg to overlay a PNG image onto an anime GIF. It scales the GIF to 936x598 resolution, places the overlay at (0,0), and outputs a new GIF called \"anime_overlay.gif\".",
        "type": "summary"
    },
    "3328": {
        "file_id": 392,
        "content": "ffmpeg -i anime.gif -i overlay.png \\\n\t-filter_complex \"[0:v]scale=936:598[v1];[v1][1:v]overlay=0:0\" \\\n\t-c:a copy \\\n\tanime_overlay.gif",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/overlay_gif.sh:1-4"
    },
    "3329": {
        "file_id": 392,
        "content": "This code uses FFmpeg to overlay a PNG image onto an anime GIF. It scales the GIF to 936x598 resolution, places the overlay at (0,0), and outputs a new GIF called \"anime_overlay.gif\".",
        "type": "comment"
    },
    "3330": {
        "file_id": 393,
        "content": "/tests/bilibili_video_recommendation_server/get_text_boundaries.py",
        "type": "filepath"
    },
    "3331": {
        "file_id": 393,
        "content": "The code imports Pixie and Lazorzero libraries to draw text on an image, save it, convert the image to grayscale, and then extract the bounding rectangle using OpenCV's boundingRect function. The output is a tuple containing (top left x, top left y, width, height) values representing the bounding box of the text in the image.",
        "type": "summary"
    },
    "3332": {
        "file_id": 393,
        "content": "import pixie\ntext = 'test me please'\nexport_path = 'detect_text_bounds.png'\nimage = pixie.Image(200,200)\nfont_location = \"./wqy-microhei0.ttf\"\nfont = pixie.read_font(font_location)\nfont.size = 20\nfont.paint.color = pixie.Color(1,1,1,1)\nimage.fill_text(\n    font, text, bounds=pixie.Vector2(180, 180), transform=pixie.translate(10, 10)\n)\nimage.write_file(export_path)\nfrom lazero.utils.importers import cv2_custom_build_init\ncv2_custom_build_init()\nimport cv2\nimg = cv2.imread(export_path)\n# print(img.shape) #(200,200,3)\n# exit()\nimg_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n# print(img_gray)\nrect = cv2.boundingRect(img_gray)\n# fuck?\nprint(rect)\n# (10, 13, 130, 21)\n# x,y,w,h?",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/get_text_boundaries.py:1-32"
    },
    "3333": {
        "file_id": 393,
        "content": "The code imports Pixie and Lazorzero libraries to draw text on an image, save it, convert the image to grayscale, and then extract the bounding rectangle using OpenCV's boundingRect function. The output is a tuple containing (top left x, top left y, width, height) values representing the bounding box of the text in the image.",
        "type": "comment"
    },
    "3334": {
        "file_id": 394,
        "content": "/tests/bilibili_video_recommendation_server/get_masked_gif.sh",
        "type": "filepath"
    },
    "3335": {
        "file_id": 394,
        "content": "This code uses ffmpeg to resize, extract alpha channels, merge, and overlay images for a GIF. It applies an ad mask, creates an overlaid version of the GIF with a black background, and saves both as \"anime_masked.gif\" and \"anime_masked_overlay.gif\".",
        "type": "summary"
    },
    "3336": {
        "file_id": 394,
        "content": "WIDTH=936\nHEIGHT=598\n# ffmpeg -y -i anime.gif  -loop 1 -t 1 -i ad_2_mask.png -filter_complex \"[0]scale=$WIDTH:$HEIGHT[v0];[1]alphaextract[v1];[v0][v1]alphamerge[vf];color=black:d=1[c];[c][vf]scale2ref[cs][vf0];[cs][vf0]overlay\" anime_masked.gif\nffmpeg -y -i anime.gif  -loop 1 -t 1 -i ad_2_mask.png -i overlay.png -filter_complex \"[0]scale=$WIDTH:$HEIGHT[v0];[1]alphaextract[v1];[v0][v1]alphamerge[vf];color=black:d=1[c];[c][vf]scale2ref[cs][vf0];[cs][vf0]overlay[vf1];[vf1][2]overlay\" anime_masked_overlay.gif",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/get_masked_gif.sh:1-5"
    },
    "3337": {
        "file_id": 394,
        "content": "This code uses ffmpeg to resize, extract alpha channels, merge, and overlay images for a GIF. It applies an ad mask, creates an overlaid version of the GIF with a black background, and saves both as \"anime_masked.gif\" and \"anime_masked_overlay.gif\".",
        "type": "comment"
    },
    "3338": {
        "file_id": 395,
        "content": "/tests/bilibili_video_recommendation_server/get_bilibili_shortlink.py",
        "type": "filepath"
    },
    "3339": {
        "file_id": 395,
        "content": "This code makes an HTTP request to a Tencent API for Bilibili short links, using URL and href parameters, extracts the 'short_url' if successful (status 200), and prints it.",
        "type": "summary"
    },
    "3340": {
        "file_id": 395,
        "content": "apiUrl = \"https://service-ijd4slqi-1253419200.gz.apigw.tencentcs.com/release/short_url\"\nlongUrl = \"https://www.bilibili.com/video/BV1Wv41157Wz\"\nimport urllib.parse as urlparse\n# params = {\"url\": longUrl}\nparams = {\"url\": urlparse.quote(longUrl).replace(\"/\",\"%2F\"), 'href':\"https://xiaojuzi.fun/bili-short-url/\"}\n# print(params)\n# exit()\nheaders = {\n    \"accept\": \"*/*\",\n    \"accept-language\": \"en-US,en;q=0.9\",\n    \"if-none-match\": 'W/\"35-oPDNsqBGaZKqGe83GW6wem+lkww\"',\n    \"sec-ch-ua\": '\"Google Chrome\";v=\"105\", \"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"105\"',\n    \"sec-ch-ua-mobile\": \"?0\",\n    \"sec-ch-ua-platform\": '\"macOS\"',\n    \"sec-fetch-dest\": \"empty\",\n    \"sec-fetch-mode\": \"cors\",\n    \"sec-fetch-site\": \"cross-site\",\n    \"Referer\": \"https://xiaojuzi.fun/\",\n    \"Referrer-Policy\": \"strict-origin-when-cross-origin\",\n    'user-agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36' # this is important.\n}\nimport requests\nrequest_url = apiUrl+\"?url={url}&href={href}\".format(**params)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/get_bilibili_shortlink.py:2-26"
    },
    "3341": {
        "file_id": 395,
        "content": "This code is making an HTTP request to the specified API endpoint for getting a Bilibili short link. It includes parameters like long URL and href, sets necessary headers, and constructs the request URL using the given parameters.",
        "type": "comment"
    },
    "3342": {
        "file_id": 395,
        "content": "# request_url = 'https://service-ijd4slqi-1253419200.gz.apigw.tencentcs.com/release/short_url?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Wv41157Wz&href=https://xiaojuzi.fun/bili-short-url/'\n# print(request_url)\nr = requests.get(request_url, headers=headers)\nif r.status_code == 200:\n    # print(r.json())\n    r_json = r.json()\n    success = r_json.get('success', False)\n    if success:\n        short_url = r_json.get('short_url', None)\n        print(short_url)\n# starts with 'https://b23.tv'",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/get_bilibili_shortlink.py:27-37"
    },
    "3343": {
        "file_id": 395,
        "content": "This code retrieves the Bilibili video shortlink by making a GET request to the Tencent API with the URL and href parameters. If the response status code is 200, it extracts the 'short_url' from the JSON response and prints it if the 'success' flag is True. The resulting short link starts with 'https://b23.tv'.",
        "type": "comment"
    },
    "3344": {
        "file_id": 396,
        "content": "/tests/bilibili_video_recommendation_server/generate_qr_code.py",
        "type": "filepath"
    },
    "3345": {
        "file_id": 396,
        "content": "This code imports the qrcode library, defines a function makeAndSaveQrcode that generates and saves QR codes using the make() function from qrcode library, and includes an example usage in the if __name__ == \"__main__\": block.",
        "type": "summary"
    },
    "3346": {
        "file_id": 396,
        "content": "# Importing library\nimport qrcode\n# Encoding data using make() function\ndef makeAndSaveQrcode(data, save_path, debug=False):\n    img = qrcode.make(data)\n    if debug:\n        print(\"image type:\", type(img))\n    img.save(save_path)\n# <class 'qrcode.image.pil.PilImage'>\n# Saving as an image file\nif __name__ == \"__main__\":\n    data=\"https://b23.tv/DPn1G4p\"\n    save_path = 'MyQRCode1.png'\n    makeAndSaveQrcode(data, save_path)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/generate_qr_code.py:1-16"
    },
    "3347": {
        "file_id": 396,
        "content": "This code imports the qrcode library, defines a function makeAndSaveQrcode that generates and saves QR codes using the make() function from qrcode library, and includes an example usage in the if __name__ == \"__main__\": block.",
        "type": "comment"
    },
    "3348": {
        "file_id": 397,
        "content": "/tests/bilibili_video_recommendation_server/generate_cover.py",
        "type": "filepath"
    },
    "3349": {
        "file_id": 397,
        "content": "The code uses Pixie library to generate a Chinese text image with rounded rectangle mask for bilibili video recommendation server, applies QR code, and saves as \"text.png\". The process is then reverse engineered.",
        "type": "summary"
    },
    "3350": {
        "file_id": 397,
        "content": "# let's try to make it right.\npic_file = \"sample_cover.jpg\"\nqrcode_file = \"MyQRCode1.png\"\n# we need some font for this.\n# font_location = \"/usr/share/fonts/truetype/wqy/wqy-microhei.ttc\" # ttc -> ttf\nfont_location = \"./wqy-microhei0.ttf\"\nimport pixie\nfont = pixie.read_font(font_location)\nfont.size=20\ntext = \"中文能够显示么 超出了字符边缘能不能显示 Typesetting is the arrangement and composition of text in graphic design and publishing in both digital and traditional medias.\"\n# 可以显示 但是边缘的字符需要被注意到 看看是不是超出了边界\nimage = pixie.Image(200, 200)\nimage.fill(pixie.Color(1, 1, 1, 1))\nimage.fill_text(\n    font,\n    text,\n    bounds = pixie.Vector2(180, 180),\n    transform = pixie.translate(10, 10)\n)\n# print('image type:', type(image))\n# 'pixie.pixie.Image'\n# hard to say.\npath = pixie.Path()\npath.rounded_rect(0,0, 100, 100, 25, 25, 25, 25)\n# how to use mask?\ncover_width, cover_height = 100,100\nmask = pixie.Mask(cover_width, cover_height) # must match mask size?\nmask.fill_path(path)\npicture = pixie.read_image(pic_file)\n# we need to reshape this.\npict",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/generate_cover.py:1-38"
    },
    "3351": {
        "file_id": 397,
        "content": "This code is using the Pixie library to create an image with text in Chinese, apply a rounded rectangle mask to it, and then read another image file. The purpose seems to be generating a cover for something related to bilibili video recommendation server.",
        "type": "comment"
    },
    "3352": {
        "file_id": 397,
        "content": "ure = picture.resize(cover_width, cover_height) # recommend to do this in pyjom.imagetoolbox since that will be safer.\npicture.mask_draw(mask)\ntransform=pixie.translate(50,50)\nqrcode_width=qrcode_height = 50\nqrcode_image = pixie.read_image(qrcode_file)\nqrcode_image = qrcode_image.resize(qrcode_width, qrcode_height)\nqrcode_transform = pixie.translate(150,150)\nimage.draw(picture,transform=transform)\n# image.draw(picture)\n# image.draw(picture,transform=transform)\nimage.draw(qrcode_image,transform=qrcode_transform)\nimage.write_file(\"text.png\")\n# now we try to reverse engineer that thing.\n# first of all, the picture needs to be big.",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/generate_cover.py:38-58"
    },
    "3353": {
        "file_id": 397,
        "content": "The code resizes the picture to a recommended size, applies a mask, and translates it. A QR code image is also loaded, resized, and translated before being drawn on top of the main image. Finally, the resulting image is saved as \"text.png\". The code then tries to reverse engineer this process by first ensuring the picture is large enough.",
        "type": "comment"
    },
    "3354": {
        "file_id": 398,
        "content": "/tests/bilibili_video_recommendation_server/ebegging_template.py",
        "type": "filepath"
    },
    "3355": {
        "file_id": 398,
        "content": "This code creates an eBegging template using defined colors and styles for Alipay and WeChat. It generates QR codes with text overlays, applies masks, determines font color, places text, and saves the final image to output file.",
        "type": "summary"
    },
    "3356": {
        "file_id": 398,
        "content": "# this is to make it look better than before\n# maybe.\n# according to the blend mode, that guy seems to be using some special blend mode to hide his qrcode from being detected. so you may want to do the same when you add this to your own picture.\nalipay_link = \"https://qr.alipay.com/tsx10243tdewwaxrvullge8\"\nwechat_link = (\n    \"wxp://f2f0V92qUQI0aBO5PXtWezujxMm-C1KFub6qCi1Obt3cn1KjZqDPqoWKn8ICCcwdt8zU\"\n)\nfrom generate_qr_code import makeAndSaveQrcode\nqrcode_path = \"test_ebegging.png\"\n# now we plan to draw this thing.\n# how big is the canvas? no fill?\nimport pixie\nfont_path = \"./wqy-microhei0.ttf\"\nad_height = 800\nad_width = 700\nnight_mode = True\nstyle_mode = True\noutput_path = \"ebegging_template.png\"\n# white = pixie.Color(1, 1, 1, 1)\n# black = pixie.Color(0, 0, 0, 1)\nbackground_opacity = 1\ndef makeColorAndPaintFromColorCode(color_code: str):\n    assert len(color_code) == 6 + 1 and color_code.startswith(\"#\")\n    color = pixie.parse_color(color_code)\n    paint = pixie.Paint(pixie.SOLID_PAINT)\n    paint.color = color",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/ebegging_template.py:1-35"
    },
    "3357": {
        "file_id": 398,
        "content": "This code imports necessary libraries, defines variables for image size and colors, and includes a function to convert color codes into paints. It will be used to create an eBegging template by drawing text, QR codes, and potentially adding effects such as blend modes.",
        "type": "comment"
    },
    "3358": {
        "file_id": 398,
        "content": "    return color, paint\nocean_blue, ocean_blue_paint = makeColorAndPaintFromColorCode(\"#0A3CCF\")\ngrass_green, grass_green_paint = makeColorAndPaintFromColorCode(\"#00A619\")\nwhite, white_paint = makeColorAndPaintFromColorCode(\"#FFFFFF\")\nblack, black_paint = makeColorAndPaintFromColorCode(\"#000000\")\nstyleSuites = {\n    \"alipay\":{\n        'paint':ocean_blue_paint,\n        'qrcode':alipay_link,\n        'text':\"支付宝投喂\"\n    },\n    'wechat':{\n        'paint':grass_green_paint,\n        'qrcode':wechat_link,\n        'text':\"微信投喂\"\n    }\n}\n# selected_style_suite = styleSuites['wechat']\nselected_style_suite = styleSuites['alipay']\nqrcode_link = selected_style_suite['qrcode']\nmakeAndSaveQrcode(qrcode_link, qrcode_path)\nqrcode_stroke_paint = selected_style_suite['paint']  # for alipay\nqrcode_scan_text = selected_style_suite['text']\nimage = pixie.Image(ad_width, ad_height)\nqrcode = pixie.read_image(qrcode_path)\nqrcode_width = qrcode_height = int(0.9 * ad_width)\nqrcode = qrcode.resize(qrcode_width, qrcode_height)\nqrcode_rounded_corner = int((0.05 / 0.3) * qrcode_width)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/ebegging_template.py:36-76"
    },
    "3359": {
        "file_id": 398,
        "content": "The code defines colors and their corresponding paints, then creates a dictionary of style suites for Alipay and WeChat. It selects the Alipay style suite, extracts QR code link and paint, saves the QR code image, resizes it, and sets up an Image object for further processing.",
        "type": "comment"
    },
    "3360": {
        "file_id": 398,
        "content": "qrcode_stroke_path = pixie.Path()\nqrcode_stroke_path.rounded_rect(\n    0, 0, qrcode_width, qrcode_height, *([qrcode_rounded_corner] * 4)\n)\nqrcode_width_margin = int((ad_width - qrcode_width) / 2)\nqrcode_height_margin = int(ad_height - qrcode_height - qrcode_width_margin)\nebegging_mask_path = pixie.Path()\nebegging_mask_path.rounded_rect(\n    0, 0, ad_width, ad_height, *([int(qrcode_rounded_corner*1.2)] * 4)\n)\nif not style_mode:\n    if not night_mode:\n        fill_paint = white_paint\n    else:\n        fill_paint = black_paint\nelse:\n    fill_paint = qrcode_stroke_paint\nimport copy\nfill_paint = copy.deepcopy(fill_paint)\nfill_paint.color = copy.deepcopy(fill_paint.color)\nfill_paint.opacity = background_opacity\nimage.fill_path(\n    ebegging_mask_path, fill_paint\n)\n# fill the ebegging ad with appropriate color first\nfont = pixie.read_font(font_path)\nfont.size = int(\n    qrcode_width * (0.04 / 0.3)\n)  # questionable. we shall check the font size.\nif not style_mode:\n    if night_mode:\n        font.paint.color = white\n        # font.paint.color = qrcode_stroke_paint.color",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/ebegging_template.py:77-118"
    },
    "3361": {
        "file_id": 398,
        "content": "This code creates a QR code and applies it to an ad image with rounded corners. It calculates dimensions for the QR code and ad image, sets fill paint colors based on style and night mode, and fills the image with appropriate color before applying the font for the text. Font size adjustment is done based on QR code width, but may require further validation.",
        "type": "comment"
    },
    "3362": {
        "file_id": 398,
        "content": "    else:\n        # font.paint.color = qrcode_stroke_paint.color\n        font.paint.color = black\nelse:\n    font.paint.color = white\ntext_bound_x = ad_width\ntext_bound_y = qrcode_height_margin\nimage.fill_text(\n    font,\n    qrcode_scan_text,\n    bounds=pixie.Vector2(text_bound_x, text_bound_y),\n    h_align=pixie.CENTER_ALIGN,\n    v_align=pixie.MIDDLE_ALIGN,\n)\nqrcode_transform = pixie.translate(\n    qrcode_width_margin,\n    qrcode_height_margin,\n)\nstroke_param = 100 / 3\nstroke_width = int(qrcode_width / stroke_param)\nimage.stroke_path(\n    qrcode_stroke_path,\n    qrcode_stroke_paint,\n    qrcode_transform,\n    stroke_width=stroke_width,\n)\nqrcode_mask = pixie.Mask(qrcode_width, qrcode_width)\nqrcode_mask.fill_path(qrcode_stroke_path)\nqrcode.mask_draw(qrcode_mask)\nimage.draw(qrcode, qrcode_transform)\nimage.write_file(output_path)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/ebegging_template.py:119-157"
    },
    "3363": {
        "file_id": 398,
        "content": "This code generates a QR code image with text overlay and applies a mask to it. It first determines the font color based on the ad type, then places the text at the specified coordinates. A translation is applied to the QR code path, the stroke width is calculated, and a mask is created using the stroked path. Finally, the QR code image is drawn onto the main image with the transformation applied, and saved to the output file.",
        "type": "comment"
    },
    "3364": {
        "file_id": 399,
        "content": "/tests/bilibili_video_recommendation_server/e_begging_base_bilibili_donation_to_short_link.py",
        "type": "filepath"
    },
    "3365": {
        "file_id": 399,
        "content": "The code provides two donation links for different bilibili users, one for the user with ID 85300402 and another for the user with ID 441381282. The my_payment_shortlink is a one-time payment short link, while other_donation_link is for donating to other famous uploaders on bilibili. However, the code requires bilibili cookies to function properly.",
        "type": "summary"
    },
    "3366": {
        "file_id": 399,
        "content": "# about e-begging, way more easier than e-commerce.\n# well we could do something evil here\n# my shit.\n# it will generate a one-time payment code.\n# https://api.bilibili.com/x/ugcpay/trade/elec/pay/order/status?qr_token=1875b75b1299497888ce9c33089dc676\n# calling for the qrcode token status.\n# but we must have the cookie first.\nmy_donation_link = \"https://www.bilibili.com/v/pay/charge?upmid=85300402&upurl=%2F%2Fspace.bilibili.com%2F85300402&upname=J4D&upavatar=https%3A%2F%2Fi1.hdslb.com%2Fbfs%2Fface%2F73f1323696c857eb5f47f4a8bd03c1115a056af1.jpg&oid=85300402&otype=up&from=zone\"\nmy_payment_shortlink = \"https://b23.tv/zTT7V9O\"\n# for other famous uploader:\n# if you want to do this, you must have bilibili cookies.\nother_donation_link = \"https://www.bilibili.com/v/pay/charge?upmid=441381282&upurl=%2F%2Fspace.bilibili.com%2F441381282&upname=%E8%8A%B1%E4%B8%B8%E6%99%B4%E7%90%89Official&upavatar=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Fface%2F7328c4d2bd7f59a10be61589d3595880a8ebcff5.jpg&oid=441381282&otype=up&from=zone\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/e_begging_base_bilibili_donation_to_short_link.py:1-19"
    },
    "3367": {
        "file_id": 399,
        "content": "The code provides two donation links for different bilibili users, one for the user with ID 85300402 and another for the user with ID 441381282. The my_payment_shortlink is a one-time payment short link, while other_donation_link is for donating to other famous uploaders on bilibili. However, the code requires bilibili cookies to function properly.",
        "type": "comment"
    },
    "3368": {
        "file_id": 400,
        "content": "/tests/bilibili_video_recommendation_server/detect_qr_code_payments.py",
        "type": "filepath"
    },
    "3369": {
        "file_id": 400,
        "content": "The code imports necessary libraries, defines a function 'detect_qr' that detects/decodes QR codes using pyzbar. It prints the total number of detected QR codes and their data if any is found. The current implementation struggles with handling multiple QR codes in an image.",
        "type": "summary"
    },
    "3370": {
        "file_id": 400,
        "content": "# image = \"test_image_with_qr_code.png\"\n# fail to obtain the qrcode.\n# but we might want use our original qrcode.\n# image = \"output_qrcode2.png\"\nimages=['alipay_payment_code.png','wechat_payment_code.jpg']\n# qrcodes:\n# https://qr.alipay.com/tsx10243tdewwaxrvullge8\n# wxp://f2f0V92qUQI0aBO5PXtWezujxMm-C1KFub6qCi1Obt3cn1KjZqDPqoWKn8ICCcwdt8zU\n# they are both long urls. which one is effective in qq?\nfrom lazero.utils.importers import cv2_custom_build_init\nfrom PIL import Image\nfrom pyzbar.pyzbar import decode, ZBarSymbol\n# @function 'detect_qr' detect and decode qrcode from frame using pyzbar lib\n# @param 'inputFrame' type <class 'numpy.ndarray'>\n# @return if detected type 'bool'\ndef detect_qr(inputFrame):\n    img = Image.fromarray(inputFrame)\n    decodedImg = decode(img, symbols=[ZBarSymbol.QRCODE])\n    # it reads the content. but where is the code?\n    print('total %d qrcode detected' % len(decodedImg))\n    # breakpoint()\n    # length: 2\n    if len(decodedImg) > 0:\n        for code in decodedImg:\n            decodedBytes = code.data",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/detect_qr_code_payments.py:1-32"
    },
    "3371": {
        "file_id": 400,
        "content": "The code imports necessary libraries, defines a function 'detect_qr' that takes an input frame and detects/decodes QR codes using pyzbar. The function returns true if a QR code is detected. It then prints the total number of detected QR codes and iterates through each one, storing its data in decodedBytes.",
        "type": "comment"
    },
    "3372": {
        "file_id": 400,
        "content": "            stringData = decodedBytes.decode(\"utf-8\")\n            print(\"QRCode content:\")\n            print(stringData)\n            polygon = code.polygon\n            print('POLYGON CONTENT:')\n            print(polygon)\n        return True\n    else:\n        return False\ncv2_custom_build_init()\nimport cv2\nfor image in images:\n# shit! for picture with 2 qrcodes it fails to detect.\n# bbox return None\n    img = cv2.imread(image)\n    result=detect_qr(img)\n    print(\"RESULT:\", result)\n    print(\"_\"*20)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/detect_qr_code_payments.py:33-52"
    },
    "3373": {
        "file_id": 400,
        "content": "This code reads images containing QR codes and attempts to detect them. If a QR code is detected, it prints the content of the QR code and its polygon shape. If no QR code is detected, it returns False. The current implementation has issues handling images with multiple QR codes.",
        "type": "comment"
    },
    "3374": {
        "file_id": 401,
        "content": "/tests/bilibili_video_recommendation_server/detect_qr_code.py",
        "type": "filepath"
    },
    "3375": {
        "file_id": 401,
        "content": "This code detects and prints data from QR codes in an image using OpenCV and lazero.utils.importers. It displays the image with QR code bounding boxes, waits for user input, then destroys windows.",
        "type": "summary"
    },
    "3376": {
        "file_id": 401,
        "content": "# image = \"test_image_with_qr_code.png\"\n# fail to obtain the qrcode.\n# but we might want use our original qrcode.\n# image = \"output_qrcode2.png\"\nimage = \"MyQRCode1.png\"\n# shit! for picture with 2 qrcodes it fails to detect.\n# bbox return None\nfrom lazero.utils.importers import cv2_custom_build_init\ncv2_custom_build_init()\nimport cv2\nimg = cv2.imread(image)\ndetector = cv2.QRCodeDetector()\ndata, bbox, _ = detector.detectAndDecode(img)\nqrcode_count = len(bbox)\nprint(\"total %d qrcode(s)\" % qrcode_count)\nif bbox is not None:\n    # display the image with lines\n    # print(bbox)\n    # breakpoint()\n    for i in range(len(bbox)):\n        # draw all lines\n        for index in range(4):\n            pt0 = tuple(bbox[i][index % 4].astype(int))\n            pt1 = tuple(bbox[i][(index + 1) % 4].astype(int))\n            cv2.line(\n                img,\n                pt0,\n                pt1,\n                color=(255, 0, 0),\n                thickness=2,\n            )\nif data:\n    print(\"[+] QR Code detected, data:\", data)\n    # what is the link inside the qr code?",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/detect_qr_code.py:1-39"
    },
    "3377": {
        "file_id": 401,
        "content": "The code aims to detect QR codes in an image and print the data contained within them, if any. It loads an image using OpenCV and utilizes the QRCodeDetector class from lazero.utils.importers to identify and decode the QR codes present in the image. If there are multiple QR codes, it displays the image with lines drawn connecting the corners of each QR code's bounding box. The code also checks for any detected data and prints it if available.",
        "type": "comment"
    },
    "3378": {
        "file_id": 401,
        "content": "# display the result\ncv2.imshow(\"img\", img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/detect_qr_code.py:40-43"
    },
    "3379": {
        "file_id": 401,
        "content": "This code displays an image with detected QR codes in a window and waits for the user to close it before destroying all windows.",
        "type": "comment"
    },
    "3380": {
        "file_id": 402,
        "content": "/tests/bilibili_video_recommendation_server/create_invisible_blend_transparent_ebegging.py",
        "type": "filepath"
    },
    "3381": {
        "file_id": 402,
        "content": "This code resizes and composes two images, applying opacity to create an invisible blending effect. The first image is scaled proportionally to the second image using a ratio factor. Both images are then overlaid onto each other with transparency applied, resulting in a final image where the first image serves as a background for the second image.",
        "type": "summary"
    },
    "3382": {
        "file_id": 402,
        "content": "background = \"setu2.jpg\"\nebegging = \"ebegging_template.png\"\nimport pixie\nbgImage = pixie.read_image(background)\nebImage = pixie.read_image(ebegging)\nfactor = 7\nratio_0 = (1200 * factor / 5) / min(bgImage.width, bgImage.height)\nb_w, b_h = int(ratio_0 * bgImage.width), int(ratio_0 * bgImage.height)\nbgImage = bgImage.resize(b_w, b_h)\nratio = min(bgImage.width, bgImage.height) / (\n    max(ebImage.width, ebImage.height) * factor\n)\ne_w, e_h = int(ratio * ebImage.width), int(ratio * ebImage.height)\n# print(e_w, e_h)\n# print(ratio)\n# print(bgImage.width, bgImage.height)\nebImage = ebImage.resize(e_w, e_h)\nebImage.apply_opacity(0.5)\nt_w, t_h = bgImage.width - e_w, bgImage.height - e_h\nbgImage.draw(ebImage, transform=pixie.translate(t_w, t_h))\nbgImage.write_file(\"ebegging_setu_transparent.png\")",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/create_invisible_blend_transparent_ebegging.py:1-31"
    },
    "3383": {
        "file_id": 402,
        "content": "This code resizes and composes two images, applying opacity to create an invisible blending effect. The first image is scaled proportionally to the second image using a ratio factor. Both images are then overlaid onto each other with transparency applied, resulting in a final image where the first image serves as a background for the second image.",
        "type": "comment"
    },
    "3384": {
        "file_id": 403,
        "content": "/tests/bilibili_video_recommendation_server/convert_font.sh",
        "type": "filepath"
    },
    "3385": {
        "file_id": 403,
        "content": "The code is running a Python script, ttc2ttf.py, to convert the 'wqy-microhei.ttc' font file into a .ttf format. This conversion allows for wider compatibility and use across different software platforms. The 'python3' command ensures that the latest version of Python is used to execute the script.",
        "type": "summary"
    },
    "3386": {
        "file_id": 403,
        "content": "python3 ttc2ttf/ttc2ttf.py wqy-microhei.ttc",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/convert_font.sh:1-1"
    },
    "3387": {
        "file_id": 403,
        "content": "The code is running a Python script, ttc2ttf.py, to convert the 'wqy-microhei.ttc' font file into a .ttf format. This conversion allows for wider compatibility and use across different software platforms. The 'python3' command ensures that the latest version of Python is used to execute the script.",
        "type": "comment"
    },
    "3388": {
        "file_id": 404,
        "content": "/tests/bilibili_video_recommendation_server/concat_qrcode.sh",
        "type": "filepath"
    },
    "3389": {
        "file_id": 404,
        "content": "This code uses FFmpeg to concatenate two identical QR Code images, MyQRCode1.png, into one output image named output_qrcode2.png. It overlay the top input image at the upper half and the bottom input image at the lower half of the output image.",
        "type": "summary"
    },
    "3390": {
        "file_id": 404,
        "content": "ffmpeg -i MyQRCode1.png  -vf \"pad=iw:2*ih [top]; movie=MyQRCode1.png[bottom]; [top][bottom] overlay=0:main_h/2\" output_qrcode2.png",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/concat_qrcode.sh:1-1"
    },
    "3391": {
        "file_id": 404,
        "content": "This code uses FFmpeg to concatenate two identical QR Code images, MyQRCode1.png, into one output image named output_qrcode2.png. It overlay the top input image at the upper half and the bottom input image at the lower half of the output image.",
        "type": "comment"
    },
    "3392": {
        "file_id": 405,
        "content": "/tests/bilibili_video_recommendation_server/bilibili_shortlink_get_2.py",
        "type": "filepath"
    },
    "3393": {
        "file_id": 405,
        "content": "This code sets the URL for Bilibili's API click tracking, defines data payload and headers, sends a POST request to track clicks, and parses JSON response for success and link extraction.",
        "type": "summary"
    },
    "3394": {
        "file_id": 405,
        "content": "url = \"https://api.bilibili.com/x/share/click\"\n# url = \"https://111.19.247.143/x/share/click\"\n# is it api.bilibili.com?\n# yes, it is.\n# use post.\n# the damn picture?\n# the damn picture is generated. it needs to be uploaded to tencent.\n# url = \"https://api.bilibili.com/x/share/click\"\n# burl=\"https://www.bilibili.com/video/BV1Wv41157Wz\"\n# burl = \"https://www.bilibili.com/v/pay/charge?upmid=85300402&upurl=%2F%2Fspace.bilibili.com%2F85300402&upname=J4D&upavatar=https%3A%2F%2Fi1.hdslb.com%2Fbfs%2Fface%2F73f1323696c857eb5f47f4a8bd03c1115a056af1.jpg&oid=85300402&otype=up&from=zone\"\n# only from \n# burl = \"https://space.bilibili.com/85300402\" # my space.\nburl = \"https://www.bilibili.com/read/cv19232041\" # my article with e-begging\ndata = {\n    \"build\": 6700300,\n        \"buvid\": 0,\n        \"oid\": burl,\n        \"platform\": \"android\",\n        \"share_channel\": \"COPY\",\n        \"share_id\": \"public.webview.0.0.pv\",\n        \"share_mode\": 3,\n    }\nimport requests\nheaders={'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'}",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/bilibili_shortlink_get_2.py:1-24"
    },
    "3395": {
        "file_id": 405,
        "content": "This code sets the URL to interact with Bilibili's API for click tracking and defines the necessary data payload. The URL is set to \"https://api.bilibili.com/x/share/click\" after checking if it should use \"api.bilibili.com\". It then sets various parameters in the 'data' dictionary, such as 'oid', 'platform', and 'share_channel'. Finally, it defines headers for an HTTP request using requests library.",
        "type": "comment"
    },
    "3396": {
        "file_id": 405,
        "content": "r=requests.post(url, data=data,headers=headers) # maybe you two share the same user agent!\n# we have the link!\nif r.status_code == 200:\n    # print(r.content)\n    r_json=r.json()\n    code=r_json[\"code\"]\n    if code==0:\n        link=r_json[\"data\"]['content']\n        print(link)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/bilibili_shortlink_get_2.py:25-33"
    },
    "3397": {
        "file_id": 405,
        "content": "Sending a POST request to the URL with data and headers. If the response status code is 200, parse JSON content, check for success (code=0), and extract the link if successful.",
        "type": "comment"
    },
    "3398": {
        "file_id": 406,
        "content": "/tests/bilibili_video_recommendation_server/ad_template_2.py",
        "type": "filepath"
    },
    "3399": {
        "file_id": 406,
        "content": "The code initializes and adjusts various objects, calculates aspect ratio, applies image transformations and text painting, creates a play button and QR code using Pixie library, handles ad images with masks, and considers night mode.",
        "type": "summary"
    }
}