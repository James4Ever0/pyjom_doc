{
    "3300": {
        "file_id": 383,
        "content": "/tests/optical_flow/nvidia_common.py",
        "type": "filepath"
    },
    "3301": {
        "file_id": 383,
        "content": "This code is for setting the path to the OpenCV library for Turing architecture. It first determines the site-packages directory and then checks if there's a specific folder for the current Python version containing .so files, which are loaded into sys.path. If only one such folder exists, it gets added to sys.path before importing cv2. The code prints dir(cv2) for information or potentially debugging purposes.",
        "type": "summary"
    },
    "3302": {
        "file_id": 383,
        "content": "import pathlib\nimport site\nimport sys\n# optical flow sdk is exclusively for Turing architecture.\n# this is root. this is not site-packages.\n# site_path = pathlib.Path([x for x in site.getsitepackages() if \"site-packages\" in x][0])\nsite_path = pathlib.Path(\"/usr/local/lib/python3.9/site-packages\")\ncv2_libs_dir = site_path / 'cv2' / f'python-{sys.version_info.major}.{sys.version_info.minor}'\nprint(cv2_libs_dir)\ncv2_libs = sorted(cv2_libs_dir.glob(\"*.so\"))\nif len(cv2_libs) == 1:\n    print(\"INSERTING:\",cv2_libs[0].parent)\n    sys.path.insert(1, str(cv2_libs[0].parent))\nimport cv2\nprint(dir(cv2)) # shit?",
        "type": "code",
        "location": "/tests/optical_flow/nvidia_common.py:1-19"
    },
    "3303": {
        "file_id": 383,
        "content": "This code is for setting the path to the OpenCV library for Turing architecture. It first determines the site-packages directory and then checks if there's a specific folder for the current Python version containing .so files, which are loaded into sys.path. If only one such folder exists, it gets added to sys.path before importing cv2. The code prints dir(cv2) for information or potentially debugging purposes.",
        "type": "comment"
    },
    "3304": {
        "file_id": 384,
        "content": "/tests/optical_flow/mmof_test/get_frame_flow.py",
        "type": "filepath"
    },
    "3305": {
        "file_id": 384,
        "content": "This code reads frames from a video file, converts them to grayscale (optional), and saves the 40th frame as \"frame0.png\" and the next frame as \"frame1.png\". The loop continues until it encounters an empty frame (none) indicating the end of the video.",
        "type": "summary"
    },
    "3306": {
        "file_id": 384,
        "content": "import cv2\nvideo_file = \"/media/root/help/pyjom/samples/video/dog_with_text.mp4\"\nvideo = cv2.VideoCapture(video_file)\nret, img = video.read()\nprevImg = img.copy()\ncounter = 0\nwhile True:\n    ret, img = video.read()\n    if img is None: break\n    else:\n        frame1 = prevImg\n        # frame1 = cv2.cvtColor(frame1,cv2.COLOR_BGR2GRAY)\n        frame2 = img # why freaking grayscale?\n        # frame2 =  cv2.cvtColor(frame2,cv2.COLOR_BGR2GRAY)\n        if counter == 40:\n            cv2.imwrite(\"frame0.png\",frame1)\n            cv2.imwrite(\"frame1.png\",frame2)\n        prevImg = img.copy()\n        counter +=1",
        "type": "code",
        "location": "/tests/optical_flow/mmof_test/get_frame_flow.py:1-23"
    },
    "3307": {
        "file_id": 384,
        "content": "This code reads frames from a video file, converts them to grayscale (optional), and saves the 40th frame as \"frame0.png\" and the next frame as \"frame1.png\". The loop continues until it encounters an empty frame (none) indicating the end of the video.",
        "type": "comment"
    },
    "3308": {
        "file_id": 385,
        "content": "/tests/optical_flow/mmof_test/execute_me.py",
        "type": "filepath"
    },
    "3309": {
        "file_id": 385,
        "content": "This code initializes an MMFlow model and performs optical flow calculation on video frames, visualizing results and breaking the loop when \"q\" is pressed. It uses BGR to grayscale conversion and can perform Canny edge detection.",
        "type": "summary"
    },
    "3310": {
        "file_id": 385,
        "content": "from mmflow.apis import init_model, inference_model\nfrom mmflow.datasets import visualize_flow, write_flow\nimport mmcv\n# Specify the path to model config and checkpoint file\nconfig_id = 0\nif config_id == 0:\n    config_file = 'flownet2cs_8x1_slong_flyingchairs_384x448.py'\n    checkpoint_file = 'flownet2cs_8x1_slong_flyingchairs_384x448.pth'\nelif config_id == 1:\n    config_file = 'gma_8x2_120k_mixed_368x768.py' # damn slow.\n    checkpoint_file = 'gma_8x2_120k_mixed_368x768.pth'\n# build the model from a config file and a checkpoint file\nmodel = init_model(config_file, checkpoint_file, device='cuda:0')\n# test image pair, and save the results\nimport cv2\nvideo_file = \"/media/root/help/pyjom/samples/video/dog_with_text.mp4\"\nvideo = cv2.VideoCapture(video_file)\nret, img = video.read()\nprevImg = img.copy()\ncounter = 0\nwhile True:\n    ret, img = video.read()\n    if img is None: break\n    else:\n        frame1 = prevImg\n        # frame1 = cv2.cvtColor(frame1,cv2.COLOR_BGR2GRAY)\n        frame2 = img # why freaking grayscale?",
        "type": "code",
        "location": "/tests/optical_flow/mmof_test/execute_me.py:1-35"
    },
    "3311": {
        "file_id": 385,
        "content": "This code initializes a model using MMFlow library and performs optical flow calculation on video frames. It reads a video file, captures frames, applies optical flow algorithm using the initialized model, and saves the results. The model configuration is determined by config_id, with two options specified in the code. Frame1 and frame2 are used to calculate optical flow between these consecutive frames. The code includes color conversion (BGR to grayscale), but this is not clearly explained or justified in the code.",
        "type": "comment"
    },
    "3312": {
        "file_id": 385,
        "content": "        result = inference_model(model, frame1,frame2)\n        prevImg = img.copy()\n        flow_map = visualize_flow(result,None)\n        cv2.imshow(\"flowmap\",flow_map)\n    if cv2.waitKey(20) == ord(\"q\"):\n        break\n        # can also do canny edge detection.",
        "type": "code",
        "location": "/tests/optical_flow/mmof_test/execute_me.py:36-42"
    },
    "3313": {
        "file_id": 385,
        "content": "The code executes inference using the provided model on two frames, visualizes the optical flow map, and displays it in a window. It breaks the loop when \"q\" key is pressed, and can perform Canny edge detection.",
        "type": "comment"
    },
    "3314": {
        "file_id": 386,
        "content": "/tests/jina_deploy_free_gpu_cpu/README.md",
        "type": "filepath"
    },
    "3315": {
        "file_id": 386,
        "content": "This code is a README for a test case, which aims to verify if Jina's computational resources can be used for free. It suggests creating a simple test case and potentially using this service indefinitely.",
        "type": "summary"
    },
    "3316": {
        "file_id": 386,
        "content": "different from another 'jina' named test case, we are here to run things **for free**\nit is said that jina currently offer computational resources for free so why not just create a simple test case to verify that? maybe i can own this free service forever?",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/README.md:1-3"
    },
    "3317": {
        "file_id": 386,
        "content": "This code is a README for a test case, which aims to verify if Jina's computational resources can be used for free. It suggests creating a simple test case and potentially using this service indefinitely.",
        "type": "comment"
    },
    "3318": {
        "file_id": 387,
        "content": "/tests/jina_deploy_free_gpu_cpu/hello-jina/flow.yml",
        "type": "filepath"
    },
    "3319": {
        "file_id": 387,
        "content": "This code defines a Jina Flow with a specific port and includes an executor named \"toyExecutor\" using the configuration from \"executor1/config.yml\".",
        "type": "summary"
    },
    "3320": {
        "file_id": 387,
        "content": "jtype: Flow\nversion: '1'\nwith:\n  port: 54321\nexecutors:\n  - uses: executor1/config.yml\n    name: toyExecutor",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/hello-jina/flow.yml:1-7"
    },
    "3321": {
        "file_id": 387,
        "content": "This code defines a Jina Flow with a specific port and includes an executor named \"toyExecutor\" using the configuration from \"executor1/config.yml\".",
        "type": "comment"
    },
    "3322": {
        "file_id": 388,
        "content": "/tests/jina_deploy_free_gpu_cpu/hello-jina/client.py",
        "type": "filepath"
    },
    "3323": {
        "file_id": 388,
        "content": "This code sets up a Jina client and continuously takes user input, sending it to a remote container for processing. It runs indefinitely until the user enters 'exit'. The host is dynamically generated based on the container ID and the client uses GRPCS protocol.",
        "type": "summary"
    },
    "3324": {
        "file_id": 388,
        "content": "from jina import Client, DocumentArray\n# host = 'grpc://0.0.0.0:54321'\n# host = 'grpcs://3fcd103a37.wolf.jina.ai'\ncontainer_id = '7f015443e8'\nhost = 'grpcs://{}.wolf.jina.ai'.format(container_id)\nif __name__ == '__main__':\n    c = Client(host=host)\n    while True:\n        docArray = DocumentArray.empty(1)\n        docArray[0].text = command = input(\"jina> \")\n        if command == 'exit':\n            print('exiting jina')\n            break\n        da = c.post('/', docArray)\n        response = da[0].text\n        # print(da.texts)\n        print(response)",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/hello-jina/client.py:1-17"
    },
    "3325": {
        "file_id": 388,
        "content": "This code sets up a Jina client and continuously takes user input, sending it to a remote container for processing. It runs indefinitely until the user enters 'exit'. The host is dynamically generated based on the container ID and the client uses GRPCS protocol.",
        "type": "comment"
    },
    "3326": {
        "file_id": 389,
        "content": "/tests/jina_deploy_free_gpu_cpu/hello-jina/executor1/executor.py",
        "type": "filepath"
    },
    "3327": {
        "file_id": 389,
        "content": "The code imports libraries, defines a custom Executor class named \"MyExecutor\" with a method that handles requests and executes commands using subprocess. It catches errors and logs them if they occur.",
        "type": "summary"
    },
    "3328": {
        "file_id": 389,
        "content": "from jina import Executor, requests, DocumentArray\n# remember our good old program? our shell?\n# proper name is: reverse shell\n# hackish? no?\n# jina hub supports docker. no need for this shitty hackish shell...\n# but we do not have a proper docker image! can we write docker file and push the image remotely, without local storage?\n# All Executors’ uses must follow the format jinahub+docker://MyExecutor (from Jina Hub) to avoid any local file dependencies.\n# what the heck?\n# Each Executor is allowed a maximum of 4 GPUs, 16G RAM, 16 CPU cores & 10GB of block storage.\nimport subprocess\nimport os\nclass MyExecutor(Executor):\n    @requests\n    def foo(self, docs: DocumentArray, **kwargs):\n        try:\n            command = docs[0].text\n            commandList = command.split(\" \")\n            if commandList[0] == 'cd':\n                if len(commandList) == 2:\n                    os.chdir(commandList[1])\n                    response = os.getcwd()\n                else:\n                    response = 'usage: cd <target directory>'",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/hello-jina/executor1/executor.py:1-29"
    },
    "3329": {
        "file_id": 389,
        "content": "Code imports necessary libraries and defines a class \"MyExecutor\" that extends the Executor class from Jina, allowing for custom execution logic. The code includes a \"foo\" method decorated with the \"@requests\" decorator, which seems to handle incoming requests and execute commands based on the provided documents.",
        "type": "comment"
    },
    "3330": {
        "file_id": 389,
        "content": "            else:\n                response = subprocess.check_output(commandList)\n            docs[0].text = response\n        # docs[1].text = 'goodbye, world!'\n        except:\n            import traceback\n            error = traceback.format_exc()\n            docs[0].text = \"\\n\".join([\"error!\", error])",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/hello-jina/executor1/executor.py:30-37"
    },
    "3331": {
        "file_id": 389,
        "content": "This code runs a command using subprocess and assigns the output to `docs[0].text`. If an error occurs, it catches the exception and logs the error.",
        "type": "comment"
    },
    "3332": {
        "file_id": 390,
        "content": "/tests/jina_deploy_free_gpu_cpu/hello-jina/executor1/config.yml",
        "type": "filepath"
    },
    "3333": {
        "file_id": 390,
        "content": "This code defines an executor named \"MyExecutor\" using the \"executor.py\" Python module. The \"jtype\" field specifies the type of executor, and the \"py_modules\" field lists the required Python modules for this executor.",
        "type": "summary"
    },
    "3334": {
        "file_id": 390,
        "content": "jtype: MyExecutor\npy_modules:\n  - executor.py",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/hello-jina/executor1/config.yml:1-3"
    },
    "3335": {
        "file_id": 390,
        "content": "This code defines an executor named \"MyExecutor\" using the \"executor.py\" Python module. The \"jtype\" field specifies the type of executor, and the \"py_modules\" field lists the required Python modules for this executor.",
        "type": "comment"
    },
    "3336": {
        "file_id": 391,
        "content": "/tests/jina_deploy_free_gpu_cpu/random_shell/README.md",
        "type": "filepath"
    },
    "3337": {
        "file_id": 391,
        "content": "This code appears to be a shell script for transitioning from a random shell environment to the Jina framework.",
        "type": "summary"
    },
    "3338": {
        "file_id": 391,
        "content": "# random_shell\nshell to jina",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/README.md:1-3"
    },
    "3339": {
        "file_id": 391,
        "content": "This code appears to be a shell script for transitioning from a random shell environment to the Jina framework.",
        "type": "comment"
    },
    "3340": {
        "file_id": 392,
        "content": "/tests/jina_deploy_free_gpu_cpu/random_shell/flow.yml",
        "type": "filepath"
    },
    "3341": {
        "file_id": 392,
        "content": "This code sets up a Jina Flow execution, using the 'random_shell' container from Jinahub's Dockerhub, with 1 GPU and 8G of memory allocation. The retention period for data is set to -1, indicating no deletion.",
        "type": "summary"
    },
    "3342": {
        "file_id": 392,
        "content": "jtype: Flow\njcloud:\n  retention_days: -1\nexecutors:\n  - uses: jinahub+docker://random_shell/latest\n    name: jina_shell_random\n    jcloud:\n      resources:\n        gpu: 1\n        memory: 8G",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/random_shell/flow.yml:1-10"
    },
    "3343": {
        "file_id": 392,
        "content": "This code sets up a Jina Flow execution, using the 'random_shell' container from Jinahub's Dockerhub, with 1 GPU and 8G of memory allocation. The retention period for data is set to -1, indicating no deletion.",
        "type": "comment"
    },
    "3344": {
        "file_id": 393,
        "content": "/tests/jina_deploy_free_gpu_cpu/random_shell/executor.py",
        "type": "filepath"
    },
    "3345": {
        "file_id": 393,
        "content": "The code deploys an executor on Jina's platform, allowing users to execute and publish code. The random_shell class extends the Executor class to handle document arrays, changing directories, and running commands using subprocess. It also supports Flow feature removal.",
        "type": "summary"
    },
    "3346": {
        "file_id": 393,
        "content": "from jina import Executor, DocumentArray, requests\nimport subprocess\nimport os\n# ╭────────────── 🎉 Flow is available! ──────────────╮\n# │                                                   │\n# │   ID            7f015443e8                        │\n# │   Endpoint(s)   grpcs://7f015443e8.wolf.jina.ai   │\n# │                                                   │\n# ╰───────────────────────────────────────────────────╯\n# strange feel like shit.\n# how to deploy this shit?\n# ╭────────────────────────── Published ──────────────────────────╮\n# │                                                               │\n# │   📛 Name         random_shell                                │\n# │   🔗 Hub URL      https://hub.jina.ai/executor/uktqa6k4/      │\n# │   🔒 Secret       ebbaf019f0eaa1f317468fb2a322f729            │\n# │                   ☝️ Please keep this token in a safe place!   │\n# │   👀 Visibility   public                                      │\n# │                                                               │\n# ╰───────────────────────────────────────────────────────────────╯",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/random_shell/executor.py:1-23"
    },
    "3347": {
        "file_id": 393,
        "content": "This code is deploying an executor on the Jina platform, which allows users to execute code and perform computations. The executor has a unique ID and endpoint, allowing it to be accessed by others. The code also publishes the executor with a name, a secret token, visibility settings, and a hub URL.",
        "type": "comment"
    },
    "3348": {
        "file_id": 393,
        "content": "# ╭───────────────────────────── Usage ─────────────────────────────╮\n# │                                                                 │\n# │               YAML                     Python                   │\n# │  ─────────────────────────────────────────────────────────────  │\n# │   Container   uses: jinahub+docker:…   .add(uses='jinahub+do…   │\n# │   Sandbox     uses: jinahub+sandbox…   .add(uses='jinahub+sa…   │\n# │   Source      uses: jinahub://rando…   .add(uses='jinahub://…   │\n# │                                                                 │\n# ╰─────────────────────────────────────────────────────────────────╯\n# this one will be removed in one day.\n# ╭────────────── 🎉 Flow is available! ──────────────╮\n# │                                                   │\n# │   ID            3fcd103a37                        │\n# │   Endpoint(s)   grpcs://3fcd103a37.wolf.jina.ai   │\n# │                                                   │\n# ╰───────────────────────────────────────────────────╯\n# so jina hu",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/random_shell/executor.py:24-42"
    },
    "3349": {
        "file_id": 393,
        "content": "Code snippet demonstrates the usage of different executor types (Container, Sandbox, Source) in Jina and their corresponding YAML and Python configurations. It also highlights the removal of a specific ID (3fcd103a37) and the availability of the Flow feature with an endpoint grpcs://3fcd103a37.wolf.jina.ai.",
        "type": "comment"
    },
    "3350": {
        "file_id": 393,
        "content": "b will automatically build docker images in the cloud for you, act as 'docker hub' and serve apps for free? wtf?\nclass random_shell(Executor):\n    @requests\n    def foo(self, docs: DocumentArray, **kwargs):\n        try:\n            command = docs[0].text\n            commandList = command.split(\" \")\n            if commandList[0] == 'cd':\n                if len(commandList) == 2:\n                    os.chdir(commandList[1])\n                    response = os.getcwd()\n                else:\n                    response = 'usage: cd <target directory>'\n            else:\n                response = subprocess.check_output(commandList)\n            docs[0].text = response\n        # docs[1].text = 'goodbye, world!'\n        except:\n            import traceback\n            error = traceback.format_exc()\n            docs[0].text = \"\\n\".join([\"error!\", error])",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/random_shell/executor.py:42-63"
    },
    "3351": {
        "file_id": 393,
        "content": "This code defines a class `random_shell` that extends the `Executor` class. It takes a document array as input, splits the text into commands, and executes them. If the first command is 'cd', it changes the directory accordingly. Otherwise, it runs the command using subprocess and sets the response in the first document's text field. If an error occurs, it traces the exception and adds it to the first document's text field.",
        "type": "comment"
    },
    "3352": {
        "file_id": 394,
        "content": "/tests/jina_deploy_free_gpu_cpu/random_shell/config.yml",
        "type": "filepath"
    },
    "3353": {
        "file_id": 394,
        "content": "The code defines a random_shell Jina executor with Python modules, specifying its type, name, description, and associated keywords. It is configured to execute executor.py module for execution.",
        "type": "summary"
    },
    "3354": {
        "file_id": 394,
        "content": "jtype: random_shell\npy_modules:\n  - executor.py\nmetas:\n  name: random_shell\n  description: shell to jina\n  url: \n  keywords: ['reverse shell']",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/random_shell/config.yml:1-8"
    },
    "3355": {
        "file_id": 394,
        "content": "The code defines a random_shell Jina executor with Python modules, specifying its type, name, description, and associated keywords. It is configured to execute executor.py module for execution.",
        "type": "comment"
    },
    "3356": {
        "file_id": 395,
        "content": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/client.py",
        "type": "filepath"
    },
    "3357": {
        "file_id": 395,
        "content": "This code sets up a Jina client to interact with a semantic search encoder multilingual index. It takes user input, sends it as a request to the index, and prints the response or an error message if there's any failure in the request processing. The host parameter determines the server endpoint to connect to and can be set to localhost, a specific container ID on Jina's cloud service, or left empty for default behavior.",
        "type": "summary"
    },
    "3358": {
        "file_id": 395,
        "content": "from jina import Client, DocumentArray\n# host = 'grpc://0.0.0.0:54321'\n# host = 'grpcs://3fcd103a37.wolf.jina.ai'\n# container_id = '7f015443e8'\n# host = 'grpcs://{}.wolf.jina.ai'.format(container_id)\nhost = \"\"\nif __name__ == '__main__':\n    c = Client(host=host)\n    while True:\n        docArray = DocumentArray.empty(1)\n        docArray[0].text = command = input(\"jina> \")\n        if command == 'exit':\n            print('exiting jina')\n            break\n        da = c.post('/', docArray)\n        if da[0].msg == 'success':\n            response = da[0].data\n            # print(da.texts)\n            print(response)\n        else:\n            print(da[0].msg)\n            print(\"ERROR!\")",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/client.py:1-22"
    },
    "3359": {
        "file_id": 395,
        "content": "This code sets up a Jina client to interact with a semantic search encoder multilingual index. It takes user input, sends it as a request to the index, and prints the response or an error message if there's any failure in the request processing. The host parameter determines the server endpoint to connect to and can be set to localhost, a specific container ID on Jina's cloud service, or left empty for default behavior.",
        "type": "comment"
    },
    "3360": {
        "file_id": 396,
        "content": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/deploy_to_jina_cloud.sh",
        "type": "filepath"
    },
    "3361": {
        "file_id": 396,
        "content": "Creates Jina Cloud deployment using `flow.yml` configuration file and optional environment file.",
        "type": "summary"
    },
    "3362": {
        "file_id": 396,
        "content": "jc deploy flow.yml\n# jc deploy flow.yml --env-file flow.env",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/deploy_to_jina_cloud.sh:1-2"
    },
    "3363": {
        "file_id": 396,
        "content": "Creates Jina Cloud deployment using `flow.yml` configuration file and optional environment file.",
        "type": "comment"
    },
    "3364": {
        "file_id": 397,
        "content": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/config.yml",
        "type": "filepath"
    },
    "3365": {
        "file_id": 397,
        "content": "This configuration file specifies a semantic search encoder (multilingual) using the provided \"executor.py\" module. It has a name, description, and URL, along with relevant keywords such as 'semantic search encoder' and 'multilingual'.",
        "type": "summary"
    },
    "3366": {
        "file_id": 397,
        "content": "jtype: semantic_search_encoder_multilingual\npy_modules:\n  - executor.py\nmetas:\n  name: semantic_search_encoder_multilingual\n  description: borrowed from sentence encoder\n  url: \n  keywords: ['semantic search encoder, multilingual']",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/config.yml:1-8"
    },
    "3367": {
        "file_id": 397,
        "content": "This configuration file specifies a semantic search encoder (multilingual) using the provided \"executor.py\" module. It has a name, description, and URL, along with relevant keywords such as 'semantic search encoder' and 'multilingual'.",
        "type": "comment"
    },
    "3368": {
        "file_id": 398,
        "content": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/README.md",
        "type": "filepath"
    },
    "3369": {
        "file_id": 398,
        "content": "This code appears to be a shell script for transitioning from a random shell environment to the Jina framework.",
        "type": "summary"
    },
    "3370": {
        "file_id": 398,
        "content": "# random_shell\nshell to jina",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/README.md:1-3"
    },
    "3371": {
        "file_id": 398,
        "content": "This code appears to be a shell script for transitioning from a random shell environment to the Jina framework.",
        "type": "comment"
    },
    "3372": {
        "file_id": 399,
        "content": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/push_to_jina_hub.sh",
        "type": "filepath"
    },
    "3373": {
        "file_id": 399,
        "content": "This command pushes the current directory (denoted by `.`) to Jina Hub, making it publicly accessible for others to use or collaborate on.",
        "type": "summary"
    },
    "3374": {
        "file_id": 399,
        "content": "jina hub push --public .",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/push_to_jina_hub.sh:1-1"
    },
    "3375": {
        "file_id": 399,
        "content": "This command pushes the current directory (denoted by `.`) to Jina Hub, making it publicly accessible for others to use or collaborate on.",
        "type": "comment"
    },
    "3376": {
        "file_id": 400,
        "content": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/flow.yml",
        "type": "filepath"
    },
    "3377": {
        "file_id": 400,
        "content": "This code defines a Jina flow with 1 executor, using the latest version of \"semantic_search_encoder_multilingual\" container from JinaHub. It has 1 GPU and 8G memory allocated, but these resources will be shut down shortly.",
        "type": "summary"
    },
    "3378": {
        "file_id": 400,
        "content": "jtype: Flow\nwith:\n  prefetch: 1\n  env:\n    JINA_MP_START_METHOD: spawn\njcloud:\n  retention_days: -1 # ignored! it will be fucked anyway.\nexecutors:\n  - uses: jinahub+docker://semantic_search_encoder_multilingual/latest\n    name: semantic_search_encoder_multilingual\n    jcloud:\n      resources:\n        gpu: 1 # which means it will be shutdown shortly\n        memory: 8G",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/flow.yml:1-14"
    },
    "3379": {
        "file_id": 400,
        "content": "This code defines a Jina flow with 1 executor, using the latest version of \"semantic_search_encoder_multilingual\" container from JinaHub. It has 1 GPU and 8G memory allocated, but these resources will be shut down shortly.",
        "type": "comment"
    },
    "3380": {
        "file_id": 401,
        "content": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/executor.py",
        "type": "filepath"
    },
    "3381": {
        "file_id": 401,
        "content": "The code creates an Executor class for a semantic search encoder with multilingual support using sentence-transformers, and includes a `foo` method that handles document embedding, exceptions, and error handling.",
        "type": "summary"
    },
    "3382": {
        "file_id": 401,
        "content": "from jina import Executor, DocumentArray, requests\nimport numpy as np\nfrom txtai.embeddings import Embeddings\n#     raise RuntimeError(\n# RuntimeError: Cannot re-initialize CUDA in forked subprocess. To use CUDA with multiprocessing, you must use the 'spawn' start method\nclass semantic_search_encoder_multilingual(Executor):\n    embeddings = Embeddings({\n            \"path\": \"sentence-transformers/distiluse-base-multilingual-cased-v1\"\n        } )\n    @requests\n    def foo(self, docs: DocumentArray, **kwargs):\n        try:\n            command = docs[0].text\n            command = command.strip()\n            if len(command) == 0 or command == '_success':\n                raise Exception('No command')\n            response = self.embeddings.transform((None, command, None))\n            response = np.array([response])\n            docs[0].embedding = response\n            docs[0].text = '_success'\n        # docs[1].text = 'goodbye, world!'\n        except:\n            import traceback\n            error = traceback.format_exc()",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/executor.py:1-28"
    },
    "3383": {
        "file_id": 401,
        "content": "The code defines an Executor class for a semantic search encoder that utilizes the sentence-transformers library for multilingual support. It also includes a `foo` method which takes a DocumentArray, extracts the command from the first document's text, applies the embeddings transformation, updates the embedding and status of the document, and handles any exceptions during processing.",
        "type": "comment"
    },
    "3384": {
        "file_id": 401,
        "content": "            print(error)\n            docs[0].embedding = None\n            docs[0].text = \"\\n\".join([\"error!\", error])",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/executor.py:29-31"
    },
    "3385": {
        "file_id": 401,
        "content": "Error handling: Prints the error message, sets document embedding to None, and adds an error message line to the document text.",
        "type": "comment"
    },
    "3386": {
        "file_id": 402,
        "content": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/requirements.txt",
        "type": "filepath"
    },
    "3387": {
        "file_id": 402,
        "content": "These lines specify the required Python packages for the project. \"txtai\" is a package for text analysis, \"transformers\" is used for natural language processing, and \"faiss\" is an efficient library for nearest neighbors search.",
        "type": "summary"
    },
    "3388": {
        "file_id": 402,
        "content": "txtai\ntransformers\nfaiss",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/requirements.txt:1-3"
    },
    "3389": {
        "file_id": 402,
        "content": "These lines specify the required Python packages for the project. \"txtai\" is a package for text analysis, \"transformers\" is used for natural language processing, and \"faiss\" is an efficient library for nearest neighbors search.",
        "type": "comment"
    },
    "3390": {
        "file_id": 403,
        "content": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/test_client.py",
        "type": "filepath"
    },
    "3391": {
        "file_id": 403,
        "content": "The code initializes a Jina Client, sends a document array with 'hello world' text to the client's endpoint, and retrieves the response. It then checks if the response status is 'success', prints the embedding data if it is, or otherwise prints the response message along with an error marker.",
        "type": "summary"
    },
    "3392": {
        "file_id": 403,
        "content": "from jina import Client, DocumentArray, Document\nc = Client(port=12345)\ndocArray = DocumentArray.empty(1)\ndocArray[0].text = 'hello world'\nr = c.post('/', docArray)\nr_0 = r[0]\n# print(dir(r_0))\n# print(r_0.tags)\n# breakpoint()\ntext = r[0].text\nif text == 'success':\n    data = r[0].embedding\n    print(data)\n    print(data.dtype, shape(data))\nelse:\n    print(text)\n    print(\"____________ERROR____________\")",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/test_client.py:1-18"
    },
    "3393": {
        "file_id": 403,
        "content": "The code initializes a Jina Client, sends a document array with 'hello world' text to the client's endpoint, and retrieves the response. It then checks if the response status is 'success', prints the embedding data if it is, or otherwise prints the response message along with an error marker.",
        "type": "comment"
    },
    "3394": {
        "file_id": 404,
        "content": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/test.sh",
        "type": "filepath"
    },
    "3395": {
        "file_id": 404,
        "content": "This code sets the JINA_MP_START_METHOD environment variable to \"spawn\" before running a Python script. It mentions an ongoing issue with loading a model using txtai, but doesn't elaborate further on the problem or its potential solutions.",
        "type": "summary"
    },
    "3396": {
        "file_id": 404,
        "content": "env JINA_MP_START_METHOD=spawn python3 test.py\n# still we are having issue with the txtai, which cannot load our model for whatever reason.",
        "type": "code",
        "location": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/test.sh:1-2"
    },
    "3397": {
        "file_id": 404,
        "content": "This code sets the JINA_MP_START_METHOD environment variable to \"spawn\" before running a Python script. It mentions an ongoing issue with loading a model using txtai, but doesn't elaborate further on the problem or its potential solutions.",
        "type": "comment"
    },
    "3398": {
        "file_id": 405,
        "content": "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/test.py",
        "type": "filepath"
    },
    "3399": {
        "file_id": 405,
        "content": "Importing semantic search encoder multilingual executor, disabling proxies, creating a Flow with 1 prefetch and 12345 port, adding the semantic search encoder to it with 1 replica, then running the Flow in blocking mode.",
        "type": "summary"
    }
}