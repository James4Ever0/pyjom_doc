{
    "3600": {
        "file_id": 445,
        "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom appium import webdriver\nfrom appium.webdriver.common.appiumby import AppiumBy\ncapabilities = dict(\n    platformName='Android',\n    automationName='uiautomator2',\n    deviceName='Android',\n    appPackage='com.android.settings',\n    appActivity='.Settings',\n    language='en',\n    locale='US',\n    noSign=True\n)\nappium_server_url = 'http://localhost:4723'\ndriver = webdriver.Remote(appium_server_url, capabilities)\nel = driver.find_element(by=AppiumBy.XPATH, value='//*[@text=\"Battery\"]')\nel.click()\nif driver:\n    driver.quit()",
        "type": "code",
        "location": "/tests/qq_share_autojs/appium_test.py:1-27"
    },
    "3601": {
        "file_id": 445,
        "content": "Code sets up Appium test for Android device using the uiautomator2 automation, launches com.android.settings app, searches for \"Battery\" and clicks it, then quits the driver if open.",
        "type": "comment"
    },
    "3602": {
        "file_id": 446,
        "content": "/tests/qq_share_autojs/adb_unlock.sh",
        "type": "filepath"
    },
    "3603": {
        "file_id": 446,
        "content": "This code uses ADB to simulate touch events on an Android device. It performs a power button press, a swipe gesture, enters text, and presses the back key.",
        "type": "summary"
    },
    "3604": {
        "file_id": 446,
        "content": "adb -s 192.168.10.3:5555 shell input keyevent 26\nadb -s 192.168.10.3:5555 shell input swipe 500 500 500 0\nadb -s 192.168.10.3:5555 shell input text \"Bumper\\&Mountains\"\nadb -s 192.168.10.3:5555 shell input keyevent 66",
        "type": "code",
        "location": "/tests/qq_share_autojs/adb_unlock.sh:1-4"
    },
    "3605": {
        "file_id": 446,
        "content": "This code uses ADB to simulate touch events on an Android device. It performs a power button press, a swipe gesture, enters text, and presses the back key.",
        "type": "comment"
    },
    "3606": {
        "file_id": 447,
        "content": "/tests/qq_share_autojs/adb_check_lock.sh",
        "type": "filepath"
    },
    "3607": {
        "file_id": 447,
        "content": "This script checks if the phone is locked or unlocked by running \"adb -s 192.168.10.3:5555 shell dumpsys window | grep mDreamingLockscreen=false\" and then executes \"bash adb_unlock.sh\" if locked, otherwise exits. The check is performed in an infinite loop using a \"while true\" statement.",
        "type": "summary"
    },
    "3608": {
        "file_id": 447,
        "content": "function checkScreen {\n  adb -s 192.168.10.3:5555 shell dumpsys window | grep mDreamingLockscreen=false\n  if [[ $? -eq 1 ]]; then\n    echo \"phone locked\"\n    bash adb_unlock.sh\n    sleep 2\n  else\n    echo \"phone unlocked\"\n    exit\n  fi\n}\nwhile true\ndo\n  checkScreen\ndone",
        "type": "code",
        "location": "/tests/qq_share_autojs/adb_check_lock.sh:1-16"
    },
    "3609": {
        "file_id": 447,
        "content": "This script checks if the phone is locked or unlocked by running \"adb -s 192.168.10.3:5555 shell dumpsys window | grep mDreamingLockscreen=false\" and then executes \"bash adb_unlock.sh\" if locked, otherwise exits. The check is performed in an infinite loop using a \"while true\" statement.",
        "type": "comment"
    },
    "3610": {
        "file_id": 448,
        "content": "/tests/qq_share_autojs/adb_autox_launch.sh",
        "type": "filepath"
    },
    "3611": {
        "file_id": 448,
        "content": "This code is using the 'adb' command to launch the 'ShortcutActivity' in AutoJS v6 on a specific device (192.168.10.3:5555). It starts an activity and passes an intent action with the path to the 'qq_share_auto.js' script as an extra parameter.",
        "type": "summary"
    },
    "3612": {
        "file_id": 448,
        "content": "adb -s 192.168.10.3:5555 shell am start -n org.autojs.autoxjs.v6/org.autojs.autojs.external.shortcut.ShortcutActivity -a android.intent.action.MAIN -e path \"/storage/emulated/0/脚本/qq_share_auto.js\"",
        "type": "code",
        "location": "/tests/qq_share_autojs/adb_autox_launch.sh:1-1"
    },
    "3613": {
        "file_id": 448,
        "content": "This code is using the 'adb' command to launch the 'ShortcutActivity' in AutoJS v6 on a specific device (192.168.10.3:5555). It starts an activity and passes an intent action with the path to the 'qq_share_auto.js' script as an extra parameter.",
        "type": "comment"
    },
    "3614": {
        "file_id": 449,
        "content": "/tests/qq_share_autojs/account_management.sh",
        "type": "filepath"
    },
    "3615": {
        "file_id": 449,
        "content": "The code is starting the \"com.tencent.mobileqq.activity.AccountManageActivity\" activity, which likely pertains to account management in a mobile application named MobileQQ.",
        "type": "summary"
    },
    "3616": {
        "file_id": 449,
        "content": "am start  com.tencent.mobileqq.activity.AccountManageActivity",
        "type": "code",
        "location": "/tests/qq_share_autojs/account_management.sh:1-1"
    },
    "3617": {
        "file_id": 449,
        "content": "The code is starting the \"com.tencent.mobileqq.activity.AccountManageActivity\" activity, which likely pertains to account management in a mobile application named MobileQQ.",
        "type": "comment"
    },
    "3618": {
        "file_id": 450,
        "content": "/tests/qq_share_autojs/autojs_scripts/wesee_search.js",
        "type": "filepath"
    },
    "3619": {
        "file_id": 450,
        "content": "This code initiates the WeSee app, starts the GlobalSearchActivity, and inputs the search term \"猫猫\" before triggering a search with KEYCODE_ENTER.",
        "type": "summary"
    },
    "3620": {
        "file_id": 450,
        "content": "pkg=\"com.tencent.weishi\"\nact=\"com.tencent.oscar.module.discovery.ui.GlobalSearchActivity\"\napp.startActivity({root:true,\npackageName:pkg,className:act,\naction:\"View\"})\nwaitForActivity(act)\nsetText(\"猫猫\")\nKeyCode(\"KEYCODE_ENTER\")",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/wesee_search.js:1-12"
    },
    "3621": {
        "file_id": 450,
        "content": "This code initiates the WeSee app, starts the GlobalSearchActivity, and inputs the search term \"猫猫\" before triggering a search with KEYCODE_ENTER.",
        "type": "comment"
    },
    "3622": {
        "file_id": 451,
        "content": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js",
        "type": "filepath"
    },
    "3623": {
        "file_id": 451,
        "content": "This code reduces music volume, opens Taobao app with custom URL, handles session ID and video player settings using item ID, GG search request, and referer origin, while waiting for prompts and handling expired ones by polling, clicking \"I know\" button, setting specific text, searching for \"猫猫\", and managing volume settings.",
        "type": "summary"
    },
    "3624": {
        "file_id": 451,
        "content": "package=\"com.taobao.taobao\";\nactivity=\"com.taobao.search.searchdoor.SearchDoorActivity\";\n//activity=\"com.taobao.search.searchdoor.MultipleSearchDoorActivity\";\nvar vol=device.getMusicVolume()\ndevice.setMusicVolume(0)\n// mute the thing please?\napp.startActivity({action:\"View\",\npackageName:package,className:activity,\nroot:true,\n//category:[\"com.taobao.intent.category.search.MULTI_SEARCHDOOR\"],\ndata:\"http://s.m.taobao.com/...\",})\n // not launching 淘宝逛逛\n /*\n 2221:2022-11-02 13:02:20.328 | startActivity { calling=com.taobao.taobao:-1--1, rc=10159-1987, iTS=false, requestCode=-1, startFlags=0, target=com.taobao.taobao/com.taobao.search.searchdoor.SearchDoorActivity<true>, intent=Intent { act=android.intent.action.VIEW dat=http://s.m.taobao.com/... pkg=com.taobao.taobao cmp=com.taobao.taobao/com.taobao.search.searchdoor.SearchDoorActivity (has extras) }, extras={ NAV_START_ACTIVITY_TIME:(java.lang.Long)1667365340316, ad_type:(java.lang.String)1.0, NAV_TO_URL_START_TIME:(java.lang.Long)1667365340268, referr",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js:1-19"
    },
    "3625": {
        "file_id": 451,
        "content": "The code sets the music volume to 0 and then launches the Taobao app's search function by starting the specified activity with a specific URL. The intent action is VIEW, and it targets com.taobao.taobao/com.taobao.search.searchdoor.SearchDoorActivity.",
        "type": "comment"
    },
    "3626": {
        "file_id": 451,
        "content": "er:(java.lang.String)http://market.m.taobao.com/app/tb-source-app/video-fullpage/pages/index2?wh_weex=false&wx_navbar_transparent=true&wx_navbar_hidden=true&id=380201806724&bizParameters=%7B%22itemIds%22%3A%22681366994883%22%2C%22contentId%22%3A%22380201806724%22%2C%22videoId%22%3A%22380201806724%22%7D&videoUrl=http%3A%2F%2Fcloud.video.taobao.com%2Fplay%2Fu%2F2208882892036%2Fp%2F1%2Fe%2F6%2Ft%2F1%2F380201806724.mp4&type=cainixihuansy&source=cainixihuansy&business_spm=a211r6.cjvideo&hideAccountInfo=false&extParams=%7B%2288_bucket%22%3A%220%22%7D&scm=1007.10088.311498.0&spm=a2141.1.guessitemtab_1.5&pvid=b9ca1499-6a25-4913-9b4a-a2c703576f45&utparam=%7B%22x_sid%22%3A%2252aa36213ede47006361f9b21dbc602d%22%2C%22card_subtype%22%3A%22xgc%22%2C%22up_pvid%22%3A%22f88bbfa6-c859-44a5-94bb-e0599c889e5a%22%2C%22x_sid_cpm%22%3A%22be353521ca7fc7006361f9b20c542845%22%2C%22x_object_type%22%3A%22VIDEO_916%22%2C%22x_ad_bucketid_cpm%22%3A%2212676854%2C17296858%22%2C%22hybrid_score%22%3A0.303358%2C%22x_biz%",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js:19-19"
    },
    "3627": {
        "file_id": 451,
        "content": "This code appears to be a URL for a Taobao video page, containing various parameters and identifiers for tracking and customization purposes.",
        "type": "comment"
    },
    "3628": {
        "file_id": 451,
        "content": "22%3A%22VIDEO_916%22%2C%22sessionid%22%3A%22b9ca1499-6a25-4913-9b4a-a2c703576f45%22%2C%22tpp_buckets%22%3A%22%7E9%7EU2wG6g9N1IaCq1M7J1Ia11K6A2Tg4x4I02E6nIfMi-u9KM9NveH1FhPjhxK7AniKCnO3mIO8Kj2dCQ6NhoMCwioGO1X6ddGN2W5qOUcWe41W2PePv31PMlSe11O2XcVr31EA5_s41zO2NubdRr-Z851Q1I7Li2dFU4S93dGSkxl5dU2TcFf7dBN8Cf8d_2ImFqbdY2A1JvbdM1U1P3cdX1y4IlcdZ1L6w9ddyCN9ddBN9AeedJL7Htgd_2Qpx2jdCW2QgjdzC4w2kdDJ8B6ldF%7EwpwFaf9z%7EZb7wWs29B%7EJhwQ4f9-B22y65-1Gp2BfmB2%7EGdwGfh9O1K52Nj5GSg2RplCB4V3mIN61FhfdIGcW041AEuHshdEDn1Lj7dFY5y98dB1O4H29dz-hw3cdPL1MqbdDVj1V4mdZ2C1WfkdFEp-4mdOF1IemdU%7EXk1wC0d9G%7EPi3wJh59wNeUo1Xp%7Ezv1wYcn5wEt7Uv2dD2C7Li3dGqKuQp7dU4zk1AcedZ4W7W0idRp%7EWecwFq49HPt8Dv9dNZ82U8gdKNqS6kdQWIbkdYU4VskdQ%7EFt4wG8g9A%22%2C%22miniapphc_score%22%3A0.0%2C%22x_summary_trackInfo%22%3A%22380569870474---380569870474-new_vp_4_3-new_vp_4_3%22%2C%22pvid%22%3A%22b9ca1499-6a25-4913-9b4a-a2c703576f45%22%2C%22evo_buckets%22%3A%22evo263227_118977%23275047_321220%23286254_324141%23337973_477247evo%22%2C%22auction_sco",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js:19-19"
    },
    "3629": {
        "file_id": 451,
        "content": "The code seems to be related to tracking information, session ID, and possibly video player settings for a specific platform or application.",
        "type": "comment"
    },
    "3630": {
        "file_id": 451,
        "content": "re%22%3A0.0%2C%22scm%22%3A%221007.10088.311498.428654_37338_4631_438253_439584_428623_446528_434662_23752_438956_34262_433641_443307_25137_36851_22642_38173_25152_431777_445505_440772_438225_439515_37791_36729_1862_34124_26810_438089_445972_429366_447685_15345_10206_438387_19172_18035_439601%22%2C%22glc%22%3A%221%22%2C%22guessModelVersion%22%3A%2220211016%22%2C%22mtx_c%22%3A380201806724%2C%22matrix_score%22%3A0.0%2C%22miniapp_score%22%3A0.0%2C%22card_type%22%3A%22xgc%22%2C%22x_item_ids%22%3A%22681366994883%22%2C%22author_id%22%3A%222208882892036%22%2C%22guess_buckets%22%3A%226595_11513_11609_12894_13440_17348_19178_21337_21230_20634_22262%22%2C%22x_sytab%22%3A%221001%22%2C%22x_object_id%22%3A380201806724%7D&itemid=681366994883&item_id=681366994883&noDynamicRec=1&newItemList=1&utabtest=aliabtest184572_25123, URL_REFERER_ORIGIN:(java.lang.String)//s.m.taobao.com/h5entry?g_channelSrp=videointeract&g_tab=tbexperience&g_pfilter=daren&g_closeModues=tab&closeExpSubTab=true&g_csearchdoor_spm=a",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js:19-19"
    },
    "3631": {
        "file_id": 451,
        "content": "Code contains various parameters for a Taobao GG search request, including scm, glc, guessModelVersion, mtx_c, matrix_score, miniapp_score, card_type, x_item_ids, author_id, guess_buckets, x_sytab, and x_object_id. The item ID is 681366994883. It also includes parameters for noDynamicRec, newItemList, and utabtest, and the URL referer origin is s.m.taobao.com/h5entry.",
        "type": "comment"
    },
    "3632": {
        "file_id": 451,
        "content": "310p.14955560&spm=a310p.13800399&launchMode=android_new_task&g_closeExpSubTab=true, WEEX_NAV_PROCESSOR_TIME:(java.lang.Long)1667365340292 } }.../xintent/logs #\n */\n waitForPackage(package);\n //跳转之后可能出现过期的提示\n //可能需要轮询\n for (var i=0;i<5;i++){//triple check?\n while (true){\n     sleep(200);\n  var succ=click(\"我知道了\");\n  if (succ){break;}\n if (currentActivity() ==activity)break;\n }\n }\n mytext=\"【淘宝】https://m.tb.cn/h.UfbOyIi?sm=26a80a?tk=XjXUd0OFtMN CZ0001 「这就是：我预判了你的预判吗」点击链接直接打开\"\n setText(mytext)\n //淘宝直接输入到搜索框里面 然后用这个进入视频搜索界面\n while(!click(\"搜索\"));\nwaitForActivity(\"com.taobao.android.interactive.timeline.VideoListActivity2\")\nid(\"imgSearch\").findOne().click()\nwaitForActivity(\"com.taobao.search.searchdoor.MultipleSearchDoorActivity\")\nsetText(\"猫猫\")\n//Text(\"猫猫\")\nwhile(!click(\"搜索\"));\n//可能出现搜索失败的情况 请注意\ndevice.setMusicVolume(vol)",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js:19-54"
    },
    "3633": {
        "file_id": 451,
        "content": "Code snippet is performing actions in a Taobao app. It waits for the package, handles expired prompts by polling, clicks \"I know\" button, sets a specific text and searches for \"猫猫\". It ensures volume settings by setting music volume and possibly handles search failure scenarios.",
        "type": "comment"
    },
    "3634": {
        "file_id": 452,
        "content": "/tests/qq_share_autojs/autojs_scripts/show_toast.js",
        "type": "filepath"
    },
    "3635": {
        "file_id": 452,
        "content": "This code displays a toast notification with the message \"hello\" in the autojs_scripts directory.",
        "type": "summary"
    },
    "3636": {
        "file_id": 452,
        "content": "toast(\"hello\");",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/show_toast.js:1-1"
    },
    "3637": {
        "file_id": 452,
        "content": "This code displays a toast notification with the message \"hello\" in the autojs_scripts directory.",
        "type": "comment"
    },
    "3638": {
        "file_id": 453,
        "content": "/tests/qq_share_autojs/autojs_scripts/qq_share_auto.js",
        "type": "filepath"
    },
    "3639": {
        "file_id": 453,
        "content": "This script performs activities for QQ Share, searches \"卷王培训基地\", clicks the contact number, attempts to find and click \"发送\" while waiting for \"返回哔哩哔哩\", then removes 'flag' file using AutoJS.",
        "type": "summary"
    },
    "3640": {
        "file_id": 453,
        "content": "auto();\nvar cmd = \"am start -S -n com.tencent.mobileqq/com.tencent.mobileqq.activity.JumpActivity -a android.intent.action.VIEW -d 'mqqapi://share/to_fri?src_type=app&version=1&file_type=news&file_data=L3N0b3JhZ2UvZW11bGF0ZWQvMC9QaWN0dXJlcy9zaGFyZS9jYXQuZ2lm&file_uri=ZmlsZTovLy9zdG9yYWdlL2VtdWxhdGVkLzAvUGljdHVyZXMvc2hhcmUvY2F0LmdpZg%3D%3D&title=5ZOU5ZOp5ZOU5ZOp&description=5Za15Za15Za1&share_id=100951776&url=aHR0cHM6Ly9iMjMudHYvdUhNTDVtaQ%3D%3D&app_name=5ZOU5ZOp5ZOU5ZOp&req_type=Nw%3D%3D&mini_program_appid=MTEwOTkzNzU1Nw%3D%3D&mini_program_path=cGFnZXMvdmlkZW8vdmlkZW8%2FYnZpZD1CVjF6ZDR5MTE3V0Y%3D&mini_program_type=Mw%3D%3D&cflag=MA%3D%3D&third_sd=dHJ1ZQ%3D%3D' -e pkg_name tv.danmaku.bili\";\nshell(cmd,true);\nwaitForActivity(\"com.tencent.mobileqq.activity.ForwardRecentActivity\");\nwhile(!click(\"搜索\"));\nsetText(\"卷王培训基地\");\nwhile(!click(\"543780931\"));\nwhile(true){\nvar send =text(\"发送\").findOne(1000);\nif (send !=null){send.click();}\n// will be null.\nvar ret=text(\"返回哔哩哔哩\").findOne(1000);\nif (ret != null){ret.click();break;}",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/qq_share_auto.js:1-21"
    },
    "3641": {
        "file_id": 453,
        "content": "The script starts an activity for QQ Share, sets text, and waits for a specific activity to launch. It then clicks on \"搜索\", enters the search term \"卷王培训基地\", clicks on the contact number \"543780931\", and repeatedly tries to find the \"发送\" button while waiting for the \"返回哔哩哔哩\" button to appear before finally clicking it and breaking the loop.",
        "type": "comment"
    },
    "3642": {
        "file_id": 453,
        "content": "}\nshell(\"rm /storage/emulated/0/flag\")",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/qq_share_auto.js:22-24"
    },
    "3643": {
        "file_id": 453,
        "content": "Removes the 'flag' file from storage using AutoJS script.",
        "type": "comment"
    },
    "3644": {
        "file_id": 454,
        "content": "/tests/qq_share_autojs/autojs_scripts/qq_account_switch.js",
        "type": "filepath"
    },
    "3645": {
        "file_id": 454,
        "content": "This code starts the \"com.tencent.mobileqq\" application, specifically the AccountManageActivity, which allows switching between different QQ accounts.",
        "type": "summary"
    },
    "3646": {
        "file_id": 454,
        "content": "app.startActivity({\n    root:true,\n        action: \"View\",\n        packageName:\"com.tencent.mobileqq\",\n        className: \"com.tencent.mobileqq.activity.AccountManageActivity\"\n    });",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/qq_account_switch.js:1-6"
    },
    "3647": {
        "file_id": 454,
        "content": "This code starts the \"com.tencent.mobileqq\" application, specifically the AccountManageActivity, which allows switching between different QQ accounts.",
        "type": "comment"
    },
    "3648": {
        "file_id": 455,
        "content": "/tests/readbility_webpage_to_markdown_simplification/test_readability.py",
        "type": "filepath"
    },
    "3649": {
        "file_id": 455,
        "content": "Code imports necessary libraries, sets URL for webpage, retrieves response from the page using GET request, initializes a Readability Document object with the page's text, prints document summary and title.",
        "type": "summary"
    },
    "3650": {
        "file_id": 455,
        "content": "import requests\nfrom readability import Document\nurl='https://zhuanlan.zhihu.com/p/384614837'\nresponse = requests.get(url)\ndoc = Document(response.text)\nprint(doc.summary())\nprint()\nprint(doc.title())\n# print()\n# print(dir(doc))",
        "type": "code",
        "location": "/tests/readbility_webpage_to_markdown_simplification/test_readability.py:1-10"
    },
    "3651": {
        "file_id": 455,
        "content": "Code imports necessary libraries, sets URL for webpage, retrieves response from the page using GET request, initializes a Readability Document object with the page's text, prints document summary and title.",
        "type": "comment"
    },
    "3652": {
        "file_id": 456,
        "content": "/tests/readbility_webpage_to_markdown_simplification/test_node_readbility.js",
        "type": "filepath"
    },
    "3653": {
        "file_id": 456,
        "content": "The code requires the 'node-readability' module and uses it to fetch an article from a specified URL. It then logs the article content, title, HTML source code, DOM, response object from the request library, and closes the article to prevent leaks.",
        "type": "summary"
    },
    "3654": {
        "file_id": 456,
        "content": "var read = require('node-readability');\nurl = \"https://zhuanlan.zhihu.com/p/384614837\"\n    // 'http://howtonode.org/really-simple-file-uploads'\nread(url, function(err, article, meta) {\n    // Main Article\n    console.log(article.content); // still html\n    // Title\n    console.log(article.title);\n    // HTML Source Code\n    // console.log(article.html);\n    // // DOM\n    // console.log(article.document);\n    // Response Object from Request Lib\n    // console.log(meta);\n    // Close article to clean up jsdom and prevent leaks\n    article.close();\n});",
        "type": "code",
        "location": "/tests/readbility_webpage_to_markdown_simplification/test_node_readbility.js:1-19"
    },
    "3655": {
        "file_id": 456,
        "content": "The code requires the 'node-readability' module and uses it to fetch an article from a specified URL. It then logs the article content, title, HTML source code, DOM, response object from the request library, and closes the article to prevent leaks.",
        "type": "comment"
    },
    "3656": {
        "file_id": 457,
        "content": "/tests/readbility_webpage_to_markdown_simplification/test_mozilla.js",
        "type": "filepath"
    },
    "3657": {
        "file_id": 457,
        "content": "Code loads a web page containing an image of a cat, uses jsdom to parse the HTML, and then uses the Readability library from @mozilla/readability to extract the article content. The extracted article is logged to the console.",
        "type": "summary"
    },
    "3658": {
        "file_id": 457,
        "content": "const jsdom = require(\"jsdom\");\nconst { JSDOM } = jsdom;\ndoc = new jsdom.JSDOM(\"<body>Look at this cat: <img src='./cat.jpg'></body>\"); // load this shit from the web or something...\n// make it into a server.\nconst { Readability } = require('@mozilla/readability');\nlet reader = new Readability(doc.window.document);\narticle = reader.parse();\nconsole.log(article);",
        "type": "code",
        "location": "/tests/readbility_webpage_to_markdown_simplification/test_mozilla.js:1-8"
    },
    "3659": {
        "file_id": 457,
        "content": "Code loads a web page containing an image of a cat, uses jsdom to parse the HTML, and then uses the Readability library from @mozilla/readability to extract the article content. The extracted article is logged to the console.",
        "type": "comment"
    },
    "3660": {
        "file_id": 458,
        "content": "/tests/readbility_webpage_to_markdown_simplification/README.md",
        "type": "filepath"
    },
    "3661": {
        "file_id": 458,
        "content": "These are test links for the readability_webpage_to_markdown_simplification functionality.",
        "type": "summary"
    },
    "3662": {
        "file_id": 458,
        "content": "test links:\nhttps://www.macbookproslow.com/is-macbook-air-good-for-programming/\nhttps://zhuanlan.zhihu.com/p/384614837\nhttps://mp.weixin.qq.com/s?src=11&timestamp=1663090785&ver=4042&signature=8bWivjRcA5sicP22nFtzBBEP8LeQJa9rHgTA7wd7QTteh8Rcj0uc2QS1VeZjaI*PPjt90MNn9vigukae1keLI7GYXzbLXl93djqb5K7iPuOdbz2NBgvbxq6wImUD05XX&new=1",
        "type": "code",
        "location": "/tests/readbility_webpage_to_markdown_simplification/README.md:1-4"
    },
    "3663": {
        "file_id": 458,
        "content": "These are test links for the readability_webpage_to_markdown_simplification functionality.",
        "type": "comment"
    },
    "3664": {
        "file_id": 459,
        "content": "/tests/english_without_space_spliting/test.py",
        "type": "filepath"
    },
    "3665": {
        "file_id": 459,
        "content": "The code reads word frequencies from \"words-by-frequency.txt\" and uses dynamic programming to infer space locations in a string without spaces, returning the reconstructed string with spaces. It has some limitations and issues discussed in comments.",
        "type": "summary"
    },
    "3666": {
        "file_id": 459,
        "content": "from math import log\n# Build a cost dictionary, assuming Zipf's law and cost = -math.log(probability).\n# words = open(\"words.txt\").read().split()\nwords = open(\"words-by-frequency.txt\").read().split()\nwordcost = dict((k, log((i+1)*log(len(words)))) for i,k in enumerate(words))\nmaxword = max(len(x) for x in words)\ndef infer_spaces(s):\n    \"\"\"Uses dynamic programming to infer the location of spaces in a string\n    without spaces.\"\"\"\n    # Find the best match for the i first characters, assuming cost has\n    # been built for the i-1 first characters.\n    # Returns a pair (match_cost, match_length).\n    def best_match(i):\n        candidates = enumerate(reversed(cost[max(0, i-maxword):i]))\n        return min((c + wordcost.get(s[i-k-1:i], 9e999), k+1) for k,c in candidates)\n    # Build the cost array.\n    cost = [0]\n    for i in range(1,len(s)+1):\n        c,k = best_match(i)\n        cost.append(c)\n    # Backtrack to recover the minimal-cost string.\n    out = []\n    i = len(s)\n    while i>0:\n        c,k = best_match(i)",
        "type": "code",
        "location": "/tests/english_without_space_spliting/test.py:1-30"
    },
    "3667": {
        "file_id": 459,
        "content": "The code reads words from \"words-by-frequency.txt\" and assigns a cost to each word using Zipf's law. It then infers the location of spaces in a string without spaces using dynamic programming, building a cost array and backtracking to recover the minimal-cost string.",
        "type": "comment"
    },
    "3668": {
        "file_id": 459,
        "content": "        assert c == cost[i]\n        out.append(s[i-k:i])\n        i -= k\n    return \" \".join(reversed(out))\nsample = \"Iamveryhappy\"\nprint(infer_spaces(sample))\n# this is bad.\nimport wordninja\nsample = \"他说\"+sample+\"所以\"\nsplited = wordninja.split(sample)\nprint(splited) # this mostly ignore non-english words.\n# s = 'thumbgreenappleactiveassignmentweeklymetaphor'\n# print(infer_spaces(s))",
        "type": "code",
        "location": "/tests/english_without_space_spliting/test.py:31-50"
    },
    "3669": {
        "file_id": 459,
        "content": "The code snippet asserts that each character in the input string matches the corresponding cost value, then appends substrings of the original string without spaces to a list. It returns the reversed list joined with spaces. The code tests the infer_spaces function with different inputs and comments about the limitations or issues with the function.",
        "type": "comment"
    },
    "3670": {
        "file_id": 460,
        "content": "/tests/english_without_space_spliting/init.sh",
        "type": "filepath"
    },
    "3671": {
        "file_id": 460,
        "content": "This line downloads the \"words.txt\" file from the provided URL using cURL, saving it in the current directory. This file contains a list of English words without spaces.",
        "type": "summary"
    },
    "3672": {
        "file_id": 460,
        "content": "curl -O -L https://github.com/dwyl/english-words/raw/master/words.txt",
        "type": "code",
        "location": "/tests/english_without_space_spliting/init.sh:1-1"
    },
    "3673": {
        "file_id": 460,
        "content": "This line downloads the \"words.txt\" file from the provided URL using cURL, saving it in the current directory. This file contains a list of English words without spaces.",
        "type": "comment"
    },
    "3674": {
        "file_id": 461,
        "content": "/tests/idlefish_闲鱼_xianyu_spider_scraper_taobao_video_guangguang/README.md",
        "type": "filepath"
    },
    "3675": {
        "file_id": 461,
        "content": "This code snippet is a warning about potentially malicious files from a QQ group and the challenge of safely running a specific software (Wine). The comment suggests caution when dealing with such files.",
        "type": "summary"
    },
    "3676": {
        "file_id": 461,
        "content": "the file from qq group might be virus. be careful!\ndamn wine. how to run this shit safely?",
        "type": "code",
        "location": "/tests/idlefish_闲鱼_xianyu_spider_scraper_taobao_video_guangguang/README.md:1-3"
    },
    "3677": {
        "file_id": 461,
        "content": "This code snippet is a warning about potentially malicious files from a QQ group and the challenge of safely running a specific software (Wine). The comment suggests caution when dealing with such files.",
        "type": "comment"
    },
    "3678": {
        "file_id": 462,
        "content": "/tests/hyper_param_optimization/test.py",
        "type": "filepath"
    },
    "3679": {
        "file_id": 462,
        "content": "This code uses Hyperopt library for parameter optimization, chooses hyperparameters from different cases via choice function, and samples 10 times for each search space.",
        "type": "summary"
    },
    "3680": {
        "file_id": 462,
        "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom hyperopt import hp\n# usually this hyper parameter optimization is done regularlly, and the optimized parameters will be used for a while till next update.\n# but can we optimize these parameters offline?\n# if not offline then we can only use traditional machine learning instead...\n# or this trial and error process is actually a kind of offline machine learning, like random search and graph inference...\n# better use hyperopt with a discriminator ML algorithm.\n# space = hp.choice(\n#     \"a\",\n#     [(\"case 1\", 1 + hp.lognormal(\"c1\", 0, 1)), (\"case 2\", hp.uniform(\"c2\", -10, 10))],\n# )\nimport hyperopt.pyll.stochastic as stochastic\nspace = hp.choice(\"lambda\",[lambda :1, lambda:2]) # if it is lambda, function will not resolve. however, after passing this thing into the main criterion function, it will utilize the lambda function.\nfor _ in range(10):\n    sample = stochastic.sample(space)\n    print(\"SAMPLE:\", sample) # this will return the tuple. can we put some custom functions here?",
        "type": "code",
        "location": "/tests/hyper_param_optimization/test.py:1-24"
    },
    "3681": {
        "file_id": 462,
        "content": "This code uses the hyperopt library for parameter optimization. The hyperparameters are chosen from different cases using a choice function, including lambda functions. The space is sampled 10 times using stochastic sampling, and each sample is printed to the console.",
        "type": "comment"
    },
    "3682": {
        "file_id": 462,
        "content": "    # there must be some integrations with custom functions. for example: scikit-learn\nprint(\"_______________________________\") # splited.\nfrom hyperopt.pyll import scope\n@scope.define # this is how we sample the \"LAMBDA\".\ndef my_func(a,b=1):\n    print(\"running function my_func\", a,b)\n    return a*b\nspace_0 = scope.my_func(hp.choice(\"myChoice\",[1,2]))\nspace_1 = scope.my_func(hp.choice(\"myChoice\",[1,2]), hp.choice(\"myChoice2\",[2,3,4]))\nfor _ in range(10):\n    print(stochastic.sample(space_0), stochastic.sample(space_1))",
        "type": "code",
        "location": "/tests/hyper_param_optimization/test.py:25-40"
    },
    "3683": {
        "file_id": 462,
        "content": "This code defines and samples two hyperparameter search spaces using the Hyperopt library's Pyll module. The \"my_func\" function is defined within a scope, allowing for easy integration with custom functions like Scikit-Learn. It then prints and samples from these search spaces 10 times.",
        "type": "comment"
    },
    "3684": {
        "file_id": 463,
        "content": "/tests/hyper_param_optimization/README.md",
        "type": "filepath"
    },
    "3685": {
        "file_id": 463,
        "content": "This code provides a reference to the tutorials section and official documentation of the hyperopt library, found on its GitHub repository.",
        "type": "summary"
    },
    "3686": {
        "file_id": 463,
        "content": "[tutorials](https://github.com/hyperopt/hyperopt/wiki/FMin) found from [official documentation](http://hyperopt.github.io/hyperopt/) of [hyperopt](https://github.com/hyperopt/hyperopt).",
        "type": "code",
        "location": "/tests/hyper_param_optimization/README.md:1-1"
    },
    "3687": {
        "file_id": 463,
        "content": "This code provides a reference to the tutorials section and official documentation of the hyperopt library, found on its GitHub repository.",
        "type": "comment"
    },
    "3688": {
        "file_id": 464,
        "content": "/tests/hyper_param_optimization/optimize_suggest.py",
        "type": "filepath"
    },
    "3689": {
        "file_id": 464,
        "content": "Code defines a function and uses Hyperopt's Tree-structured Parzen Estimators (TPE) algorithm to optimize the given function. It sets the hyperparameter space using hp.uniform and runs 100 trials, printing the result of the best trial.",
        "type": "summary"
    },
    "3690": {
        "file_id": 464,
        "content": "from hyperopt import tpe, fmin, hp, STATUS_OK, STATUS_FAIL\nimport requests\ndef function(x):\n    print(\"trying timeout:\",x)\n    # result = x**2\n    status = STATUS_FAIL\n    try:\n        r = requests.get('https://www.baidu.com/', timeout=x)\n        if r.status_code == 200:\n            status = STATUS_OK\n    except:\n        print(\"FAILED WITH TIMEOUT:\", x) # this will rule out the unwanted ones.\n    return {\"loss\":x, \"status\":status}\nspace = hp.uniform(\"param\",0,2)\nresult = fmin(fn=function, space=space, algo=tpe.suggest, max_evals=100)\nprint(result)\n# {'param': 0.10165862536290635}\n# really working? 100ms could be so damn short...\n# by using `Trials` we could inspect results of every trial.",
        "type": "code",
        "location": "/tests/hyper_param_optimization/optimize_suggest.py:1-21"
    },
    "3691": {
        "file_id": 464,
        "content": "Code defines a function and uses Hyperopt's Tree-structured Parzen Estimators (TPE) algorithm to optimize the given function. It sets the hyperparameter space using hp.uniform and runs 100 trials, printing the result of the best trial.",
        "type": "comment"
    },
    "3692": {
        "file_id": 465,
        "content": "/tests/jina_multimodal_cross_modal_search_examples_apps/get_jina_hub_list.sh",
        "type": "filepath"
    },
    "3693": {
        "file_id": 465,
        "content": "This script uses curl to send an authenticated GET request to 'https://api.hubble.jina.ai/v2/rpc/executor.list' for retrieving the list of executors on Jina Hub. The request includes necessary headers and data parameters in a compressed format.",
        "type": "summary"
    },
    "3694": {
        "file_id": 465,
        "content": "# curl 'https://api.hubble.jina.ai/v2/rpc/executor.list' \\\n#   -H 'authority: api.hubble.jina.ai' \\\n#   -H 'accept: */*' \\\n#   -H 'accept-language: en-US,en;q=0.9' \\\n#   -H 'content-type: application/json' \\\n#   -H 'cookie: _ga=GA1.1.1157816225.1662091624; _ga_48WE9V68SD=GS1.1.1662457192.4.0.1662457192.0.0.0; _ga_K8DQ8TXQJH=GS1.1.1663058102.2.1.1663059426.0.0.0; _ga_E63SXVNDXZ=GS1.1.1663061381.1.1.1663063158.0.0.0; _ga_48ZDWC8GT6=GS1.1.1663064195.8.1.1663064235.0.0.0; _ga_1ESRNDCK35=GS1.1.1663064288.3.0.1663064288.0.0.0; _ga_MMEXL9VXBJ=GS1.1.1663058298.5.1.1663065624.0.0.0' \\\n#   -H 'origin: https://hub.jina.ai' \\\n#   -H 'referer: https://hub.jina.ai/' \\\n#   -H 'sec-ch-ua: \"Google Chrome\";v=\"105\", \"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"105\"' \\\n#   -H 'sec-ch-ua-mobile: ?0' \\\n#   -H 'sec-ch-ua-platform: \"macOS\"' \\\n#   -H 'sec-fetch-dest: empty' \\\n#   -H 'sec-fetch-mode: cors' \\\n#   -H 'sec-fetch-site: same-site' \\\n#   -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36' \\",
        "type": "code",
        "location": "/tests/jina_multimodal_cross_modal_search_examples_apps/get_jina_hub_list.sh:1-15"
    },
    "3695": {
        "file_id": 465,
        "content": "This script is using curl to send a GET request to 'https://api.hubble.jina.ai/v2/rpc/executor.list' API endpoint, retrieving the list of executors available on Jina Hub. The request includes various headers for authorization, language, content type, cookies, origin, referer, user-agent, and browser details to authenticate and fetch the required information.",
        "type": "comment"
    },
    "3696": {
        "file_id": 465,
        "content": "#   --data-raw '{\"sort\":\"-activities.metaMatched\",\"pageIndex\":3,\"pageSize\":16,\"search\":\"\",\"author\":\"\",\"keywords\":[],\"withAnonymous\":true}' \\\n#   --compressed\ncurl 'https://api.hubble.jina.ai/v2/rpc/executor.list' \\\n --data-raw '{\"sort\":\"-activities.metaMatched\",\"pageIndex\":3,\"pageSize\":16,\"search\":\"\",\"author\":\"\",\"keywords\":[],\"withAnonymous\":true}' \\\n  --compressed",
        "type": "code",
        "location": "/tests/jina_multimodal_cross_modal_search_examples_apps/get_jina_hub_list.sh:16-20"
    },
    "3697": {
        "file_id": 465,
        "content": "This code is making a compressed HTTP request to 'https://api.hubble.jina.ai/v2/rpc/executor.list' with specific data parameters and a compressed format.",
        "type": "comment"
    },
    "3698": {
        "file_id": 466,
        "content": "/tests/jina_multimodal_cross_modal_search_examples_apps/get_jina_hub_list.py",
        "type": "filepath"
    },
    "3699": {
        "file_id": 466,
        "content": "This code retrieves a list of Jina Hub executors in chunks and writes them to a JSON file named \"jina_hub.json\". It first makes an API request to the Hubble server, sorts the results by activities.metaMatched, and returns the data as JSON. Then it calculates the number of pages needed based on the total number of executors and loops through each page, appending the data to a list called 'data'. Finally, it writes the list of executors (in multiple chunks) to the file \"jina_hub.json\" with proper indentation and formatting.",
        "type": "summary"
    }
}