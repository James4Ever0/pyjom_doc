{
    "1400": {
        "file_id": 135,
        "content": "/pyjom/medialang/functions/detectors/subtitleDetector.py",
        "type": "filepath"
    },
    "1401": {
        "file_id": 135,
        "content": "The `mediaSubtitleDetector` function uses PaddleOCR to detect subtitles in videos or images, processing media paths and storing results under 'subtitle_result'. It alters and updates metadata before appending the altered results to a list and returning them.",
        "type": "summary"
    },
    "1402": {
        "file_id": 135,
        "content": "from .mediaDetector import *\nfrom .entityDetector import ocrEntityDetector\ndef getPaddleOCR(mediapath, lang=\"ch\",use_angle_cls=True,cls=True,rec=True):\n    ocr = configOCR(use_angle_cls=use_angle_cls,cls=cls,rec=rec, lang=lang)\n    # print(mediapath)\n    # breakpoint()\n    result = ocr.ocr(mediapath,cls=cls,rec=rec)\n    # print(result)\n    # breakpoint()\n    return result\ndef stablePaddleOCR(mediapath, lang=\"ch\"):\n    data = getPaddleOCR(mediapath, lang=lang)\n    for ind, element in enumerate(data):\n        certainty = element[1][1]\n        # print(\"certainty:\",certainty)\n        data[ind][1] = (element[1][0], float(certainty))  # fix the float32 error.\n        # what is the fetched shit anyway?\n    return data\ndef mediaSubtitleDetector(\n    mediapaths,\n    videocr=False,\n    timestep=0.5,\n    videocr_config={\"lang\": \"chi_sim+eng\", \"sim_threshold\": 70, \"conf_threshold\": 65},\n):\n    # it must be video/image.\n    # we detect shit not to remove shit.\n    # this is separated.\n    results = []\n    data_key = \"subtitle_result\"",
        "type": "code",
        "location": "/pyjom/medialang/functions/detectors/subtitleDetector.py:1-34"
    },
    "1403": {
        "file_id": 135,
        "content": "Code snippet defines a `mediaSubtitleDetector` function that detects subtitles in videos or images. It utilizes the `getPaddleOCR` and `stablePaddleOCR` functions for OCR operations. The `getPaddleOCR` function takes media path, language, use_angle_cls, cls, and rec as input to configure OCR, perform OCR on the image, and return the result. The `stablePaddleOCR` function improves certainty values in the results and returns them. The `mediaSubtitleDetector` function processes a list of media paths, performs subtitle detection, and stores the results in the 'subtitle_result' key.",
        "type": "comment"
    },
    "1404": {
        "file_id": 135,
        "content": "    for mediapath in mediapaths:\n        print(\"mediapath:\", mediapath)\n        mediatype = getFileType(mediapath)\n        print(\"subtitle of mediatype:\", mediatype)\n        assert mediatype in [\"video\", \"image\"]\n        result = {\"type\": mediatype, data_key: {}}\n        if mediatype == \"image\":\n            data = getPaddleOCR(mediapath)\n            result[data_key].update({\"paddleocr\": data})\n            # each line per sentence, coordinates.\n        else:\n            if videocr:\n                config = videocr_config\n                data = get_subtitles(\n                    mediapath, **config\n                )  # what is the speed of this? also the quality?\n                data = srt.parse(data)\n                data = [serializeSRT(x) for x in data]\n                result[data_key].update({\"videocr\": data})\n                result[data_key][\"config\"] = config\n            else:\n                keyword = \"paddleocr\" # we will try to merge alike ones.\n                mdata, metadata = videoFrameIterator(\n                    mediapath,",
        "type": "code",
        "location": "/pyjom/medialang/functions/detectors/subtitleDetector.py:35-58"
    },
    "1405": {
        "file_id": 135,
        "content": "The code iterates through a list of media paths, checks the file type, and then fetches subtitles or performs OCR based on the file type. It uses PaddleOCR for image files and either the provided videocr or a default config for video files. The speed and quality of the subtitle detection are not mentioned in the code.",
        "type": "comment"
    },
    "1406": {
        "file_id": 135,
        "content": "                    data_producer=stablePaddleOCR, \n                    timestep=timestep,\n                    keyword=keyword,\n                )\n                # we should process the mdata. alter it and change it.\n                # mdata = ocrEntityDetector(mdata) # we enable this step later.\n                result[data_key][keyword] = mdata\n                result[data_key].update(metadata)\n                # what is this frame?\n            # use traditional things.\n        results.append(result)\n    return results",
        "type": "code",
        "location": "/pyjom/medialang/functions/detectors/subtitleDetector.py:59-70"
    },
    "1407": {
        "file_id": 135,
        "content": "The code processes media data using stablePaddleOCR, potentially alters and changes mdata, and updates metadata for the result. The altered results are then appended to a list before being returned.",
        "type": "comment"
    },
    "1408": {
        "file_id": 136,
        "content": "/pyjom/medialang/processors/__init__.py",
        "type": "filepath"
    },
    "1409": {
        "file_id": 136,
        "content": "This code imports the \"dotProcessor\" and \"mediaProcessor\" modules from the \"pyjom.medialang.processors\" package. These processors may be used for processing data related to dots or media in the medialang context.",
        "type": "summary"
    },
    "1410": {
        "file_id": 136,
        "content": "from pyjom.medialang.processors.dotProcessor import *\nfrom pyjom.medialang.processors.mediaProcessor import *",
        "type": "code",
        "location": "/pyjom/medialang/processors/__init__.py:1-2"
    },
    "1411": {
        "file_id": 136,
        "content": "This code imports the \"dotProcessor\" and \"mediaProcessor\" modules from the \"pyjom.medialang.processors\" package. These processors may be used for processing data related to dots or media in the medialang context.",
        "type": "comment"
    },
    "1412": {
        "file_id": 137,
        "content": "/pyjom/medialang/processors/mediaProcessor/__init__.py",
        "type": "filepath"
    },
    "1413": {
        "file_id": 137,
        "content": "Importing filesystemProcessor module from pyjom.medialang.processors.mediaProcessor package.",
        "type": "summary"
    },
    "1414": {
        "file_id": 137,
        "content": "from pyjom.medialang.processors.mediaProcessor.filesystemProcessor import *",
        "type": "code",
        "location": "/pyjom/medialang/processors/mediaProcessor/__init__.py:1-1"
    },
    "1415": {
        "file_id": 137,
        "content": "Importing filesystemProcessor module from pyjom.medialang.processors.mediaProcessor package.",
        "type": "comment"
    },
    "1416": {
        "file_id": 138,
        "content": "/pyjom/medialang/processors/mediaProcessor/filesystemProcessor.py",
        "type": "filepath"
    },
    "1417": {
        "file_id": 138,
        "content": "This code segment processes media files based on type (video, audio, or image) and returns the processed file path. It handles media processing by selecting appropriate function and printing media type if verbose is True.",
        "type": "summary"
    },
    "1418": {
        "file_id": 138,
        "content": "from pyjom.medialang.commons import *\nimport ffmpeg\ndef videoFsProcessor(videoPath,args={},previous = None, medialangTmpDir = medialangTmpDir):\n    if args == {}:\n        return videoPath\n    newVideoPath = getTmpMediaName(medialangTmpDir = medialangTmpDir)\n    return newVideoPath\ndef audioFsProcessor(audioPath,args={},previous = None, medialangTmpDir = medialangTmpDir):\n    if args == {}:\n        return audioPath\n    newAudioPath = getTmpMediaName(medialangTmpDir = medialangTmpDir)\n    return newAudioPath\ndef imageFsProcessor(imagePath,args={},previous = None, medialangTmpDir = medialangTmpDir):\n    if args == {}:\n        return imagePath\n    newImagePath = getTmpMediaName(medialangTmpDir = medialangTmpDir)\n    return newImagePath\ndef fsProcessor(item,previous=None, verbose=True, medialangTmpDir = medialangTmpDir):\n    path = item.path # it exists!\n    fbase = os.path.basename(path)\n    args = item.args\n    mediatype = getFileType(fbase) # mediatype not sure yet.\n    if verbose:\n        print(\"media path:\",path)",
        "type": "code",
        "location": "/pyjom/medialang/processors/mediaProcessor/filesystemProcessor.py:1-28"
    },
    "1419": {
        "file_id": 138,
        "content": "The code contains three functions: videoFsProcessor, audioFsProcessor, and imageFsProcessor. Each function takes a media file path, optional arguments, and temporary directory as inputs. If the arguments are empty, the function returns the original file path; otherwise, it generates a new temporary file path using getTmpMediaName and returns that instead. The fsProcessor function determines the media type (video, audio, or image) based on the file's extension, selects the appropriate processor function, and applies it to the file path. If verbose is True, it prints the media path.",
        "type": "comment"
    },
    "1420": {
        "file_id": 138,
        "content": "        print(\"media type:\",mediatype)\n    # handle to ffmpeg.\n    mediaFunctions = {\"video\":videoFsProcessor,\"audio\":audioFsProcessor,\"image\":imageFsProcessor}\n    data = mediaFunctions[mediatype](path,args=args,previous=previous, medialangTmpDir = medialangTmpDir)\n    return data",
        "type": "code",
        "location": "/pyjom/medialang/processors/mediaProcessor/filesystemProcessor.py:29-33"
    },
    "1421": {
        "file_id": 138,
        "content": "This code segment handles media processing based on the type. It prints the media type, creates a dictionary of function handlers for video, audio, and image, processes the media using the corresponding function, and returns the result.",
        "type": "comment"
    },
    "1422": {
        "file_id": 139,
        "content": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py",
        "type": "filepath"
    },
    "1423": {
        "file_id": 139,
        "content": "The code utilizes Editly and Fmpeg for video filtering, detects text/logos, crop regions, and handles errors while generating UUIDs, storing temp videos, modifying clip properties, setting layer durations, adding clips to templates, and executes with formatted output.",
        "type": "summary"
    },
    "1424": {
        "file_id": 139,
        "content": "from pyjom.medialang.functions import *\nfrom pyjom.medialang.commons import *\nfrom pyjom.mathlib import *\nfrom pyjom.videotoolbox import *\nimport tempfile\nimport ffmpeg\ndef executeEditlyScript(medialangTmpDir, editly_json):\n    editlyJsonSavePath = os.path.join(medialangTmpDir, \"editly.json\")\n    with open(editlyJsonSavePath, \"w+\", encoding=\"utf8\") as f:\n        f.write(json.dumps(editly_json, ensure_ascii=False))\n    print(\"EXECUTING EDITLY JSON AT %s\" % editlyJsonSavePath)\n    commandline = [\"xvfb-run\", \"editly\", \"--json\", editlyJsonSavePath]\n    print(commandline)\n    status = subprocess.run(commandline)  # is it even successful?\n    returncode = status.returncode\n    assert returncode == 0\n    print(\"RENDER SUCCESSFUL\")\nfrom typing import Literal, List\ndef ffmpegVideoPreProductionFilter(\n    filepath,  # this is actually a video path. must be video here.\n    start=None,\n    end=None,\n    cachePath=None,\n    audio=False,\n    epsilon=0.000001,\n    filters: List[\n        Literal[\n            \"minterpolate\",  # add time-saver option for this shit. use 'blend' instead of motion vector based compensation.",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:1-34"
    },
    "1425": {
        "file_id": 139,
        "content": "The code is a Python script that contains functions for video processing using the Editly library and FFmpeg. It defines the `executeEditlyScript` function which takes a temporary directory and an Editly JSON object, saves it to disk, executes the Editly command line tool with the saved JSON file, and asserts that the operation was successful. The script also includes the `ffmpegVideoPreProductionFilter` function which processes video files using FFmpeg filters, optional start/end time parameters, audio flag, and a list of filter options like \"minterpolate\".",
        "type": "comment"
    },
    "1426": {
        "file_id": 139,
        "content": "            \"removegrain\",\n            \"bilateral\",\n            \"randomFlip\",\n            \"superResolution\",\n            \"pipCrop\",\n            \"textRemoval\",\n            \"logoRemoval\",\n            \"minterpolate_mi_mode=blend\",\n        ]\n    ] = [  # what is slowing us down?\n        \"pipCrop\",\n        \"textRemoval\",  # we got a problem here?\n        \"logoRemoval\",\n        \"randomFlip\",  # these are common\n        \"superResolution\",  # optional below\n        # \"minterpolate\",\n        # \"minterpolate_mi_mode=blend\", # this might be the problem.\n        # \"removegrain\",\n        # \"bilateral\",\n    ],\n    preview=True,\n    # padding=True,\n    paddingBlur=True,\n    output_width: int = 1920,\n    output_height: int = 1080,\n):  # what is the type of this shit?\n    # enable that 'fast' flag? or we use low_resolution ones? not good since that will ruin our detection system!\n    # anyway it will get processed? or not?\n    # uncertain. very uncertain.\n    def paddingBlurFilter(stream, mWidth=1920, mHeight=1080):\n        # video_stream = stream.video",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:35-65"
    },
    "1427": {
        "file_id": 139,
        "content": "This code defines a function `paddingBlurFilter` that takes a video stream as input and applies padding and blur effects if the `paddingBlur` parameter is set to `True`. The video stream's width and height are set to 1920x1080 unless specified otherwise. The code also provides a list of processing steps, where some are marked as common, optional, or potentially causing problems.",
        "type": "comment"
    },
    "1428": {
        "file_id": 139,
        "content": "        video_stream = stream\n        video_stream_split = video_stream.split()\n        output_width = mWidth\n        output_height = mHeight\n        layer_0 = (\n            video_stream_split[0]\n            .filter(\"scale\", w=output_width, h=output_height)\n            .filter(\"gblur\", sigma=9)\n        )\n        layer_1 = video_stream_split[1].filter(\n            \"scale\",\n            w=\"min(floor(iw*{}/ih),{})\".format(output_height, output_width),\n            h=\"min(floor(ih*{}/iw),{})\".format(output_width, output_height),\n        )\n        output_stream = layer_0.overlay(layer_1, x=\"floor((W-w)/2)\", y=\"floor((H-h)/2)\")\n        return output_stream\n    def paddingFilter(stream, mWidth=1920, mHeight=1080):\n        width = \"max(iw, ceil(ih*max({}/{}, iw/ih)))\".format(mWidth, mHeight)\n        height = \"max(ih, ceil(iw*max({}/{}, ih/iw)))\".format(mHeight, mWidth)\n        x = \"max(0,floor(({}-iw)/2))\".format(width)\n        y = \"max(0,floor(({}-ih)/2))\".format(height)\n        return (\n            stream.filter(\n                \"pad\", width=width, height=height, x=x, y=y, color=\"black\"",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:66-90"
    },
    "1429": {
        "file_id": 139,
        "content": "This code defines two functions: `videoProcessor` and `paddingFilter`. The `videoProcessor` function takes a video stream, scales and blurs the first layer of the split video, scales the second layer maintaining aspect ratio, then overlays both layers with padding. The `paddingFilter` function calculates the width and height for padding to center the video. Both functions take optional parameters `mWidth` and `mHeight` for the output resolution.",
        "type": "comment"
    },
    "1430": {
        "file_id": 139,
        "content": "            )  # here to control the padding logic, decide how to 'blur' the thing!\n            .filter(\"scale\", w=mWidth, h=mHeight)\n            .filter(\"setsar\", 1)\n        )\n    assert cachePath is not None\n    assert start is not None\n    assert end is not None\n    # from 4 to 10 seconds?\n    defaultWidth, defaultHeight = getVideoWidthHeight(filepath)\n    previewRatio = 1\n    if preview:\n        previewWidth, previewHeight = getVideoPreviewPixels(filepath)\n        previewRatio = previewWidth / defaultWidth\n        def previewFilter(stream):\n            # maintain original ratio?\n            return stream.filter(\n                \"scale\",\n                \"ceil((iw*{})/4)*4\".format(previewRatio),\n                \"ceil((ih*{})/4)*4\".format(previewRatio),\n            )\n    # stream = ffmpeg.hflip(stream)\n    # this fliping may be useful for copyright evasion, but not very useful for filtering. it just adds more computational burden.\n    # we just need to crop this.\n    # stream = ffmpeg.output(stream, cachePath)",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:91-117"
    },
    "1431": {
        "file_id": 139,
        "content": "Code snippet performs video processing operations including scaling, setting aspect ratio, and potentially applying a preview filter based on the input filepath. It also considers cropping instead of flipping for improved efficiency and removes any unnecessary computational burden.",
        "type": "comment"
    },
    "1432": {
        "file_id": 139,
        "content": "    # ffmpeg.run(stream, overwrite_output=True)\n    # procedureList = []\n    # stream = ffmpeg.input\n    # no_processing = True # change this flag if anything need to change in original video according to filter results.\n    # logo removal/text removal first, pipCrop last.\n    # if overlap, we sort things.\n    # if not, no sorting is needed.\n    mDict = {}\n    def delogoFilter(stream, commandParams):\n        return stream.filter(\n            \"delogo\",\n            x=commandParams[\"x\"],\n            y=commandParams[\"y\"],\n            w=commandParams[\"w\"],\n            h=commandParams[\"h\"],\n        )\n    def cropFilter(stream, commandParams):\n        return stream.filter(\n            \"crop\",\n            x=commandParams[\"x\"],\n            y=commandParams[\"y\"],\n            w=commandParams[\"w\"],\n            h=commandParams[\"h\"],\n        )\n    def filterCommandStringParser(filterCommandString):\n        args_with_kwargs = filterCommandString.split(\":\")\n        args = []\n        kwargs = {}\n        for elem in args_with_kwargs:",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:118-151"
    },
    "1433": {
        "file_id": 139,
        "content": "This code defines functions for applying filters to video streams using ffmpeg. It defines delogoFilter() and cropFilter() functions that take stream and commandParams as input, apply respective filters using ffmpeg, and return the filtered stream. The filterCommandStringParser() function parses filter command strings into arguments and keyword arguments.",
        "type": "comment"
    },
    "1434": {
        "file_id": 139,
        "content": "            if \"=\" in elem:\n                key, value = elem.split(\"=\")\n                kwargs.update({key: value})\n            else:\n                args.append(elem)\n        return args, kwargs\n    def ffmpegStringFilter(stream, commandString):\n        filterName = commandString.split(\"_\")[0]\n        filterPrefix = \"{}_\".format(filterName)\n        filterCommandString = commandString[len(filterPrefix) :]\n        args, kwargs = filterCommandStringParser(filterCommandString)\n        # print(commandString)\n        # print(args, kwargs)\n        # breakpoint()\n        return stream.filter(\"scale\", *args, **kwargs)\n    # TODO: FIX THIS SHIT!\n    # raise Exception(\"TODO: FIX THIS SHIT!\")\n    # these things are ordered to be the last ones. just flags.\n    from caer.video.frames_and_fps import get_duration\n    video_start = 0\n    video_end = get_duration(filepath)\n    if \"randomFlip\" in filters:\n        if random.random() > 0.5:\n            mDict.update({\"hflip\": [(start, end)]})\n    if \"superResolution\" in filters:",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:152-180"
    },
    "1435": {
        "file_id": 139,
        "content": "The code defines a function `ffmpegStringFilter` which takes in a stream and command string. It splits the command string into its filter name, filter prefix, and filter command string. Then it calls another function `filterCommandStringParser` to parse the filter command string into arguments (args) and keyword arguments (kwargs). Finally, it returns the filtered video stream using the parsed arguments. Additionally, there are two TODO comments to fix some issues later on.",
        "type": "comment"
    },
    "1436": {
        "file_id": 139,
        "content": " # not working for extremely poor quality images. however, we can fetch these video elsewhere. no need to repair.\n        mDict.update({\"scale_w=iw*2:h=ih*2:flags=lanczos\": [(start, end)]})\n        # how to parse this shit?\n    simpleFilters = [\"minterpolate\", \"removegrain\", \"bilateral\"]\n    for filterName in simpleFilters:\n        for myFilter in filters:\n            if myFilter.startswith(filterName):\n                # if filterName == \"minterpolate\":\n                # filterName += \"_mi_mode=blend\"\n                # print(\"FILTER NAME:\", filterName)\n                # breakpoint()\n                mDict.update({filterName: [(start, end)]})\n    pipCropDicts = None\n    if \"pipCrop\" in filters:\n        # remember: if pip crop makes any of our logoRemoval or textRemoval filters invalid, we do not execute them.\n        # also it will affect parameters of logoRemoval.\n        pipCropDicts = detectPipRegionOverTime(filepath, start, end)\n        mDict.update(pipCropDicts)  # using default settings?\n        # pass",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:180-199"
    },
    "1437": {
        "file_id": 139,
        "content": "Code snippet is updating a dictionary with specified filters and their corresponding time intervals. It checks if any 'pipCrop' filter is present, and if so, it retrieves the PIP crop regions over time using a separate function 'detectPipRegionOverTime'. The retrieved crop regions are then added to the dictionary using default settings.",
        "type": "comment"
    },
    "1438": {
        "file_id": 139,
        "content": "    if \"textRemoval\" in filters:\n        # process the video, during that duration. fast seek avaliable?\n        mDict.update(detectTextRegionOverTime(filepath, start, end))\n        # pass\n    if \"logoRemoval\" in filters:\n        # dual safe? no?\n        # the dict is not hashable. warning!\n        stationaryLogoDicts = detectStationaryLogoOverTime(\n            filepath, start, end, pipCropDicts=pipCropDicts\n        )  # this need to be improvised. if it is long, we need to do another check.\n        if video_end > 30:\n            stationaryLogoDicts.update(\n                detectStationaryLogoOverTime(\n                    filepath, video_start, video_end, cornersOnly=False, top_k=5\n                )  # are you sure? wtf?\n                # i mean area size similar than one of the corners.\n            )\n        # reprocess these things. really?\n        mDict.update(stationaryLogoDicts)  # output logo mask. or not.\n        # estimate the shape with multiple rectangles? packing algorithm?\n        # polygon to rectangle? decomposition?",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:200-220"
    },
    "1439": {
        "file_id": 139,
        "content": "The code checks if \"textRemoval\" and \"logoRemoval\" are in the filters. If \"textRemoval\" is present, it detects text regions over time for the given video filepath, start, and end duration. If \"logoRemoval\" is present, it detects stationary logos using detectStationaryLogoOverTime function and updates mDict with the results, but only if the video length is greater than 30 seconds. It also considers updating mDict with additional stationary logos if needed by calling detectStationaryLogoOverTime again. Finally, it updates mDict with the stationary logo dictionaries and suggests using a packing algorithm to estimate shapes with multiple rectangles.",
        "type": "comment"
    },
    "1440": {
        "file_id": 139,
        "content": "        # pass\n    MAX_INT = 999999\n    commandValueMap = {\n        \"empty\": -1,\n        \"delogo\": 0,\n        \"crop\": 1,\n        \"removegrain\": 2,\n        \"bilateral\": 2,\n        \"scale\": 3,  ## wtf?\n        \"minterpolate\": 4,\n        \"hflip\": MAX_INT,\n        \"vflip\": MAX_INT,\n    }  # no scale filter shall present. we do not provide such creep. editly will handle it.\n    # commandValueMap.update(simpleFiltersValueMap)\n    renderDict = getContinualMappedNonSympyMergeResultWithRangedEmpty(mDict, start, end)\n    # now we consider the rendering process. how?\n    # shall we line it up?\n    if (\n        list(renderDict.keys()) == [\"empty\"] and not preview\n    ):  # not preview! so we need not to downscale this thing.\n        # nothing happens. just return the original shit.\n        return filepath\n    renderList = mergedRangesToSequential(renderDict)\n    renderVideoStreamList = []\n    if audio:\n        # we may want audio sometime, but not this time.\n        renderAudioStream = ffmpeg.input(filepath, ss=start, to=end).audio",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:221-248"
    },
    "1441": {
        "file_id": 139,
        "content": "The code defines a commandValueMap for different video processing commands and checks if the renderDict contains only \"empty\" key. If it does, it returns the original file path without any processing. If not, it converts merged rendering ranges into sequential format and creates a list of renderVideoStreams (excluding audio if specified).",
        "type": "comment"
    },
    "1442": {
        "file_id": 139,
        "content": "    # for elem in renderList:\n    #     print(elem)\n    # breakpoint()\n    # videoDuration = getVideoDuration(videoPath)\n    for renderCommandIndex, (renderCommandString, commandTimeSpan) in enumerate(\n        renderList\n    ):\n        print(\"#{}\".format(renderCommandIndex), renderCommandString, commandTimeSpan)\n        mStart, mEnd = commandTimeSpan\n        mStart = max(start, mStart)\n        mEnd = min(mEnd, end)\n        clipDuration = mEnd - mStart\n        if clipDuration < epsilon:\n            continue  # if so, this clip is shit.\n        # print(\"CLIP TIMESPAN:\", mStart, mEnd)\n        stream = ffmpeg.input(\n            filepath, ss=mStart, to=mEnd, hwaccel=\"vulkan\"\n        ).video  # no audio? seriously?\n        # this is video stream.\n        if renderCommandString == \"empty\":\n            pass  # do not continue since maybe we have preview filter below?\n            # still need to append shit below. we cannot skip this loop.\n        # do nothing.\n        else:\n            renderCommands = renderCommandString.split(\"|\")",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:249-274"
    },
    "1443": {
        "file_id": 139,
        "content": "The code iterates through a list of render commands, each with a time span. It prints each command and the corresponding timespan, skips any clip duration less than epsilon, and gets the video stream using ffmpeg for specified start and end times. If the command is \"empty\", it does nothing; otherwise, it splits the command into separate render commands.",
        "type": "comment"
    },
    "1444": {
        "file_id": 139,
        "content": "            # sort all commands?\n            renderCommands.sort(\n                key=lambda command: commandValueMap[command.split(\"_\")[0]]\n            )\n            from pyjom.mathlib import uniq\n            for renderCommand in uniq(renderCommands):\n                # print('RENDER COMMAND:',renderCommand, \"SPAN\", mStart, mEnd)\n                # breakpoint()\n                if renderCommand == \"empty\":\n                    # yeah we have failsafe.\n                    continue\n                if \"_\" not in renderCommand:\n                    stream = stream.filter(renderCommand)\n                elif \"=\" in renderCommand:\n                    stream = ffmpegStringFilter(\n                        stream, renderCommand\n                    )  # do not check for validity!\n                else:\n                    # non standard filter formats below. be warned.\n                    for prefix, keyword in [\n                        (\"{}_\".format(k), k) for k in [\"delogo\", \"crop\"]\n                    ]:\n                        if renderCommand.startswith(prefix):",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:275-298"
    },
    "1445": {
        "file_id": 139,
        "content": "Code is sorting commands based on a given key and applying them to the stream. If a command doesn't have an operator or contains non-standard filter formats, it applies prefix-based actions. The code handles different types of filters including 'delogo', 'crop', etc., and applies them accordingly to the stream.",
        "type": "comment"
    },
    "1446": {
        "file_id": 139,
        "content": "                            import parse\n                            commandParams = parse.parse(\n                                keyword + \"_{x:d}_{y:d}_{w:d}_{h:d}\", renderCommand\n                            )\n                            # print(defaultWidth, defaultHeight)\n                            mX, mY, mW, mH = (\n                                commandParams[\"x\"],\n                                commandParams[\"y\"],\n                                commandParams[\"w\"],\n                                commandParams[\"h\"],\n                            )\n                            status, XYWH = checkXYWH(\n                                (mX, mY, mW, mH), (defaultWidth, defaultHeight)\n                            )\n                            if not status:\n                                # cannot process this delogo filter since its parameters are outraged.\n                                # shall we warn you?\n                                # print(\"SOMEHOW DELOGO IS NOT WORKING PROPERLY\")\n                                # breakpoint()",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:299-318"
    },
    "1447": {
        "file_id": 139,
        "content": "The code imports the \"parse\" module and parses a command string using a specific format. It then extracts x, y, w, and h values from the parsed command and checks if they match the default width and height. If not, it cannot process this delogo filter and may warn or raise an issue.",
        "type": "comment"
    },
    "1448": {
        "file_id": 139,
        "content": "                                # maybe it's not because of out of bounds error\n                                print(\"_\" * 30)\n                                print(\n                                    \"ABNORMAL {} FILTER PARAMS:\".format(\n                                        keyword.upper()\n                                    ),\n                                    commandParams,\n                                )\n                                print(\n                                    \"maxX: {} maxY: {}\".format(\n                                        commandParams[\"x\"] + commandParams[\"w\"],\n                                        commandParams[\"y\"] + commandParams[\"h\"],\n                                    )\n                                )\n                                print(\"VALID BOUNDARIES:\", defaultWidth, defaultHeight)\n                                print(\"_\" * 30)\n                                continue\n                            else:\n                                (mX, mY, mW, mH) = XYWH",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:319-337"
    },
    "1449": {
        "file_id": 139,
        "content": "If out of bounds error occurs, it prints abnormal filter params and boundary information before continuing execution.",
        "type": "comment"
    },
    "1450": {
        "file_id": 139,
        "content": "                                commandParams = {\"x\": mX, \"y\": mY, \"w\": mW, \"h\": mH}\n                            # mX1, mY1 = mX+mW, mY+mH\n                            # if mX1>defaultWidth or mY1>defaultHeight: # opecv to be blamed?\n                            #     print(\"DELOGO ERROR:\")\n                            #     print(mX1,defaultWidth,mY1,defaultHeight)\n                            #     breakpoint()\n                            # we also need to consider if this is necessary.\n                            if keyword == \"delogo\":\n                                stream = delogoFilter(stream, commandParams)\n                            elif keyword == \"crop\":\n                                stream = cropFilter(stream, commandParams)\n                                # TODO: the main shit happens here is that if pip region is detected, it (the crop region) will not maintain the width to height ratio. you might need padding, and that's what we about to do here. you may also extract that clip as standalone material.",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:338-349"
    },
    "1451": {
        "file_id": 139,
        "content": "This code checks if the keyword is \"delogo\" or \"crop\". If it's \"crop\", it applies a crop filter to the stream and checks if the pipeline region is detected. If so, it might need padding or could be extracted as standalone material.",
        "type": "comment"
    },
    "1452": {
        "file_id": 139,
        "content": "                                # more inspection is needed for comprehensive reasoning.\n        if paddingBlur:\n            stream = paddingBlurFilter(\n                stream, mWidth=output_width, mHeight=output_height\n            )\n        else:\n            stream = paddingFilter(stream, mWidth=output_width, mHeight=output_height)\n        if preview:  # final filter? need us to crop this?\n            stream = previewFilter(\n                stream\n            )  # just preview, no need to set output width/height!\n            # do nothing here! (no fx.)\n        # and?\n        # we need to concat these shit!\n        # print(stream)\n        # print(dir(stream))\n        # breakpoint()\n        # import copy\n        # print(stream)\n        renderVideoStreamList.append(stream)\n    # for x in renderVideoStreamList:\n    #     print(x)\n    # print(len(renderVideoStreamList))\n    # breakpoint()\n    # breakpoint()\n    renderVideoStream = ffmpeg.concat(*renderVideoStreamList)\n    # detect if there is really anything audio related!",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:350-376"
    },
    "1453": {
        "file_id": 139,
        "content": "The code is processing video streams with optional padding, blur, and preview filters. The resulting streams are concatenated into a single video using the ffmpeg library.",
        "type": "comment"
    },
    "1454": {
        "file_id": 139,
        "content": "    if audio:\n        renderStream = ffmpeg.output(renderVideoStream, renderAudioStream, cachePath)\n    else:\n        renderStream = ffmpeg.output(renderVideoStream, cachePath)\n    # DEBUG #\n    # args = renderStream.get_args()\n    # print(args)\n    # breakpoint()\n    # DEBUG #\n    renderStream.run(overwrite_output=True)\n    return cachePath\ndef dotVideoProcessor(\n    item, previous, format=None, verbose=True, medialangTmpDir=\"/dev/shm/medialang/\"\n):\n    # print(\"DOTVIDEO ARGS:\", item, previous, format)\n    # this item is the video output config, medialang item.\n    itemArgs = item.args\n    if format is None:\n        format = item.path.split(\".\")[-1]\n    backend = itemArgs.get(\n        \"backend\", \"editly\"  # this is mere assumption!\n    )  # so all things will be assumed to put directly into editly render json, unless explicitly specified under other medialang or other backend and need to be resolved into media file format before rendering. sure?\n    fast = itemArgs.get(\"fast\", True)\n    bgm = itemArgs.get(\"bgm\", None)",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:377-402"
    },
    "1455": {
        "file_id": 139,
        "content": "The code is checking if there's an audio stream present. If so, it combines the video and audio streams using ffmpeg. Otherwise, it only processes the video stream. The DEBUG section is for debugging purposes and logs arguments of the rendered stream. Finally, the code runs the rendering process and returns the cache path. This function aims to generate a video output configuration from medialang item, assuming the backend as \"editly\" if not specified.",
        "type": "comment"
    },
    "1456": {
        "file_id": 139,
        "content": "    # outputPath = itemArgs.get(\"\",None)\n    randomUUID = str(uuid.uuid4())\n    outputPath = os.path.join(\n        medialangTmpDir, randomUUID + \".\" + format\n    )  # this is temporary!\n    # usually we choose to use something under medialang tempdir as the storage place.\n    print(\"medialang config:\", format, backend, fast, bgm)\n    # the \"previous\" is the clips, was fucked, filled with non-existant intermediate mpegts files, but no source was out there.\n    # this is initially decided to output mp4, however you might want to decorate it.\n    if verbose:\n        print(\"_________INSIDE DOT VIDEO PROCESSOR_________\")\n        print(\"ITEM:\", item)\n        print(\"PREVIOUS:\", previous)\n        print(\"_________INSIDE DOT VIDEO PROCESSOR_________\")\n    with tempfile.TemporaryDirectory(\n        dir=medialangTmpDir\n    ) as tmpdirname:  # maybe you should take care of the directory prefix?\n        # wtf are you doing over here?\n        # find out where our cache leads to!\n        # maybe the final product is one move away.",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:403-423"
    },
    "1457": {
        "file_id": 139,
        "content": "This code snippet generates a random UUID and stores the video temporarily in a specified directory. It ensures that the output is under medialang's temporary directory, and the verbose parameter allows printing details about the item, previous clip, and other relevant information. The code also utilizes tempfile.TemporaryDirectory to manage the temporary directory.",
        "type": "comment"
    },
    "1458": {
        "file_id": 139,
        "content": "        tmpdirname = os.path.abspath(tmpdirname)\n        print(\"created temporary directory\", tmpdirname)\n        output_path = os.path.join(\n            tmpdirname, randomUUID + \".\" + format\n        )  # this is temporary!\n        # that is the tweak. we have successfully changed the directory!\n        if backend == \"editly\":\n            # iterate through all items.\n            template = {\n                \"width\": 1920,\n                \"height\": 1080,\n                \"fast\": fast,\n                \"fps\": 60,\n                \"outPath\": output_path,\n                \"defaults\": {\"transition\": None},\n                \"clips\": [],\n            }\n            if bgm is not None:\n                template.update({\"audioFilePath\": bgm})\n            for elem in previous:\n                duration = 3  # default duration\n                clip = {\n                    \"duration\": duration,\n                    \"layers\": [],\n                }\n                layer_durations = []\n                for layerElem in elem:\n                    layer = None",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:424-452"
    },
    "1459": {
        "file_id": 139,
        "content": "The code creates a temporary directory, generates a unique output path for the edited video file, and sets up a template for processing using Editly backend. The template includes parameters such as width, height, fast mode, fps, output path, audio file path (if provided), duration of each clip, and layers in each clip. A default transition is also included.",
        "type": "comment"
    },
    "1460": {
        "file_id": 139,
        "content": "                    # print(layerElem) # {\"item\":<item>, \"cache\": <cache_path>}\n                    cachePath = layerElem[\"cache\"]\n                    # breakpoint()\n                    layerElemItem = layerElem[\"item\"]\n                    filepath = layerElemItem.path\n                    # what type is this damn media?\n                    filetype = getFileType(filepath)\n                    if layerElemItem.args.get(\"backend\", \"editly\") == \"editly\":\n                        if filetype == \"video\":\n                            videoInfo = get_media_info(filepath)\n                            endOfVideo = videoInfo[\"duration\"]\n                            cutFrom = layerElemItem.args.get(\"cutFrom\", 0)\n                            cutTo = layerElemItem.args.get(\"cutTo\", endOfVideo)\n                            layerOriginalDuration = cutTo - cutFrom\n                            mute = layerElemItem.args.get(\"slient\", False)\n                            processedFilePath = ffmpegVideoPreProductionFilter(\n                                filepath,",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:453-471"
    },
    "1461": {
        "file_id": 139,
        "content": "This code segment is responsible for processing video layers in a media project. It first retrieves the cache path and filepath from the input layer element, then determines the file type using getFileType function. If the backend is set to \"editly\" and the file type is a video, it extracts information about the video's duration and any specified cut range within the layer element. Finally, it applies ffmpegVideoPreProductionFilter to process the video according to the specified parameters.",
        "type": "comment"
    },
    "1462": {
        "file_id": 139,
        "content": "                                start=cutFrom,\n                                end=cutTo,\n                                cachePath=cachePath,\n                                preview=fast,\n                                audio=not mute,\n                            )\n                            # what is this filepath? man how do i handle this?\n                            videoFilePath = processedFilePath\n                            # get video information!\n                            # if processed:\n                            # this must be true now.\n                            cutFrom = 0\n                            cutTo = layerOriginalDuration\n                            speed = layerElemItem.args.get(\"speed\", 1)\n                            # was wrong.\n                            layerDuration = (cutTo - cutFrom) / speed\n                            layer_durations.append(layerDuration)\n                            layer = {\n                                \"type\": \"video\",\n                                \"path\": videoFilePath,",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:472-492"
    },
    "1463": {
        "file_id": 139,
        "content": "This code is processing a video file and saving it to a specified path. It sets the start and end time of the clip, determines the speed of playback, and appends the duration of the layer to a list. The processed video file's path is stored in \"videoFilePath\".",
        "type": "comment"
    },
    "1464": {
        "file_id": 139,
        "content": "                                \"resizeMode\": \"contain\",\n                                \"cutFrom\": cutFrom,\n                                \"cutTo\": cutTo,\n                                # that's how we mute it.\n                                \"mixVolume\": 1 - int(mute),\n                            }\n                            removeKeys = []\n                            for key, elem in layer.items():\n                                if elem is None:\n                                    removeKeys.append(key)\n                            for key in removeKeys:\n                                del layer[key]\n                    if layer is not None:\n                        clip[\"layers\"].append(layer)\n                    else:\n                        raise Exception(\"NOT IMPLEMENTED LAYER FORMAT:\", layerElem)\n                maxDuration = max(layer_durations)\n                clip[\"duration\"] = maxDuration\n                template[\"clips\"].append(clip)\n                # then just execute this template, or let's just view it.",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:493-512"
    },
    "1465": {
        "file_id": 139,
        "content": "The code is modifying a clip's properties, such as mute and resize mode, based on input parameters like cutFrom and cutTo. It also handles None values in the layer dictionary by removing them. The code then sets the maximum duration of all layers, adds the modified clip to the template, and finally executes or views the template.",
        "type": "comment"
    },
    "1466": {
        "file_id": 139,
        "content": "            if verbose:\n                print(\"________________editly template________________\")\n                print(\n                    json.dumps(template, ensure_ascii=False, indent=4)\n                )  # let's view it elsewhere? or in `less`?\n                print(\"________________editly template________________\")\n            # breakpoint()\n            # return template\n            executeEditlyScript(medialangTmpDir, template)\n            os.rename(output_path, outputPath)\n            return outputPath",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:513-523"
    },
    "1467": {
        "file_id": 139,
        "content": "This code snippet checks if verbose is true and prints the editly template in a formatted way. It then executes the Editly script, renames the output file from `output_path` to `outputPath`, and finally returns the output path.",
        "type": "comment"
    },
    "1468": {
        "file_id": 140,
        "content": "/pyjom/medialang/processors/dotProcessor/jsonProcessor.py",
        "type": "filepath"
    },
    "1469": {
        "file_id": 140,
        "content": "This function dotJsonProcessor takes an item, a previous item, and optional verbose and medialangTmpDir parameters. It extracts the processor name from the item's arguments, gets the corresponding Medialang function using getMedialangFunction, checks if it exists or not, and then applies the processor on the previous item using keywordDecorator. The output of this processing is returned.",
        "type": "summary"
    },
    "1470": {
        "file_id": 140,
        "content": "from pyjom.medialang.functions import *\nfrom pyjom.medialang.commons import *\ndef dotJsonProcessor(item, previous, verbose=True, medialangTmpDir=\"/dev/shm/medialang/\"):\n    # must contain something.\n    args = item.args\n    processorName = args[\"processor\"]\n    processor = getMedialangFunction(processorName)\n    if processor is None:\n        medialangFatalError(\"processor {} not found.\".format(processorName), __file__)\n    print(\"Using JSON processor:\", processorName)\n    args.pop(\"processor\")\n    # breakpoint()\n    output = keywordDecorator(processor, **args)(previous)  # what is this shit?\n    return output",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/jsonProcessor.py:1-16"
    },
    "1471": {
        "file_id": 140,
        "content": "This function dotJsonProcessor takes an item, a previous item, and optional verbose and medialangTmpDir parameters. It extracts the processor name from the item's arguments, gets the corresponding Medialang function using getMedialangFunction, checks if it exists or not, and then applies the processor on the previous item using keywordDecorator. The output of this processing is returned.",
        "type": "comment"
    },
    "1472": {
        "file_id": 141,
        "content": "/pyjom/medialang/processors/dotProcessor/__init__.py",
        "type": "filepath"
    },
    "1473": {
        "file_id": 141,
        "content": "The code imports necessary classes from jsonProcessor and videoProcessor modules, then creates a dictionary called dotProcessors, which maps file extensions to their respective processors. The .json extension is associated with the dotJsonProcessor, while .mp4 is associated with the keywordDecorator-decorated dotVideoProcessor.",
        "type": "summary"
    },
    "1474": {
        "file_id": 141,
        "content": "from pyjom.medialang.processors.dotProcessor.jsonProcessor import *\nfrom pyjom.medialang.processors.dotProcessor.videoProcessor import *\nfrom pyjom.commons import keywordDecorator\ndotProcessors = {\".json\":dotJsonProcessor, \".mp4\": keywordDecorator(dotVideoProcessor,format=\"mp4\")}",
        "type": "code",
        "location": "/pyjom/medialang/processors/dotProcessor/__init__.py:1-5"
    },
    "1475": {
        "file_id": 141,
        "content": "The code imports necessary classes from jsonProcessor and videoProcessor modules, then creates a dictionary called dotProcessors, which maps file extensions to their respective processors. The .json extension is associated with the dotJsonProcessor, while .mp4 is associated with the keywordDecorator-decorated dotVideoProcessor.",
        "type": "comment"
    },
    "1476": {
        "file_id": 142,
        "content": "/pyjom/platforms/bilibili/postMetadata.py",
        "type": "filepath"
    },
    "1477": {
        "file_id": 142,
        "content": "The code filters videos, generates Bilibili post metadata, supports language selection and error handling, extracts video metadata, fetches related videos, applies limits, and generates covers and descriptions for dog or cat topics.",
        "type": "summary"
    },
    "1478": {
        "file_id": 142,
        "content": "from pyjom.commons import *\nimport cv2\nfrom pyjom.modules.topicGenerator.onlineTopicGenerator import getMetaTopicString\nfrom bilibili_api import sync, search\nfrom lazero.utils.tools import flattenUnhashableList  # one of my classic methods\nfrom lazero.utils.logger import sprint\n# TODO: you know the drill. if it really contains nonacceptable characters (currently, must be some rule changes), you use Notofu font for rendering and OCR for recognition.\n# well you might want tesseract.\n# i suspect this change is due to language models used in bilibili's system\nfrom pyjom.languagetoolbox import filterNonChineseOrEnglishOrJapaneseCharacters\ndef filterTitleWithCoreTopicSet(title, core_topic_set, debug=False):\n    value = False\n    for core_topic in core_topic_set:\n        if core_topic in title:\n            value = True\n            break\n    if debug:\n        print(\"TITLE:\", title)\n        print(\"CORE TOPIC SET:\", core_topic_set)\n        print(\"VALUE:\", value)\n        breakpoint()\n    return value\ndef filterTitleListWithCoreTopicSet(titleList, core_topic_set, debug=False):",
        "type": "code",
        "location": "/pyjom/platforms/bilibili/postMetadata.py:1-27"
    },
    "1479": {
        "file_id": 142,
        "content": "This code filters titles for a video platform, checking if they contain specific core topics. It utilizes existing modules and tools for this purpose. The function filterTitleListWithCoreTopicSet takes in a list of titles and a set of core topics, returning true if any title contains a core topic. The function filterTitleWithCoreTopicSet checks individual titles for a single core topic. Both functions have optional debug parameter to print information about the process.",
        "type": "comment"
    },
    "1480": {
        "file_id": 142,
        "content": "    newTitleList = []\n    for title in titleList:\n        result = filterTitleWithCoreTopicSet(title, core_topic_set)\n        if result:\n            newTitleList.append(title)\n    if debug:\n        print(\"TITLE LIST:\", titleList)\n        print(\"CORE TOPIC SET:\", core_topic_set)\n        sprint(\"NEW TITLE LIST:\", newTitleList)\n    return newTitleList\ndef randomChoiceTagList(\n    tag_list, selected_tag_groups=3, selected_tag_per_group=2, pop=True\n):\n    import random\n    if not pop:\n        selected_tags = random.sample(tag_list, selected_tag_groups)\n    else:\n        selected_tags = [\n            shuffleAndPopFromList(tag_list) for _ in range(selected_tag_groups)\n        ]\n    selected_tags = [\n        random.sample(tags, min(len(tags), selected_tag_per_group))\n        for tags in selected_tags\n    ]\n    # flatten this thing.\n    selected_tags = flattenUnhashableList(selected_tags)\n    return list(set(selected_tags))\nfrom typing import Literal\nfrom pyjom.imagetoolbox import resizeImageWithPadding\ndef getCoverTargetFromCoverListDefault(",
        "type": "code",
        "location": "/pyjom/platforms/bilibili/postMetadata.py:28-64"
    },
    "1481": {
        "file_id": 142,
        "content": "This function takes a list of titles, applies a filter based on a core topic set, and creates a new title list. It also generates random tag groups and flattens them to create a final list of unique tags. The function is part of a larger codebase for processing data related to the Bilibili platform.",
        "type": "comment"
    },
    "1482": {
        "file_id": 142,
        "content": "    cover_list,\n    dog_or_cat_original,\n    input_width: int = 1200,\n    output_width: int = 1920,\n    filter_function=lambda image: image,\n    histogramMatch=True,\n    delta=0.2,\n    flip: Literal[True, False, \"random\"] = True,\n):  # default function does not process this tag.\n    import random\n    if flip == \"random\":\n        flip = random.choice([True, False])\n    # random.shuffle(cover_list)\n    # reference_histogram_cover = random.choice(cover_list)\n    reference_histogram_cover = shuffleAndPopFromList(cover_list)\n    cover_target = None\n    # for cover in cover_list:\n    while len(cover_list) > 0:\n        cover = shuffleAndPopFromList(cover_list)\n        import os\n        os.environ[\"http\"] = \"\"\n        os.environ[\"https\"] = \"\"\n        from pyjom.imagetoolbox import (\n            imageLoader,\n            # imageDogCatCoverCropAdvanced,\n            imageHistogramMatch,\n        )\n        image = imageLoader(cover)\n        # downscale this image first.\n        image = resizeImageWithPadding(\n            image, input_width, None, border_type=\"replicate\"",
        "type": "code",
        "location": "/pyjom/platforms/bilibili/postMetadata.py:65-100"
    },
    "1483": {
        "file_id": 142,
        "content": "The code takes a list of image covers, randomly selects one as the reference histogram cover, and iterates over the remaining covers. It prepares for image processing by setting environment variables, loading images, downscaling if necessary, and possibly flipping the image based on a random choice.",
        "type": "comment"
    },
    "1484": {
        "file_id": 142,
        "content": "        )  # are you sure? it is just a cover image.\n        cropped_image = filter_function(\n            image\n        )  # we should do something to the filter function!\n        if cropped_image is not None:\n            if histogramMatch:\n                cropped_image = imageHistogramMatch(\n                    cropped_image, reference_histogram_cover, delta=delta\n                )\n            if flip:\n                cropped_image = cv2.flip(cropped_image, 1)\n            cover_target = cropped_image\n            break\n    if cover_target is not None:\n        cover_target = resizeImageWithPadding(\n            cover_target, output_width, None, border_type=\"replicate\"\n        )  # this is strange.\n    return cover_target\ndef getCoverTargetFromCoverListForDogCat(cover_list, dog_or_cat_original):\n    from pyjom.imagetoolbox import (\n        # imageLoader,\n        imageDogCatCoverCropAdvanced,\n        # imageHistogramMatch,\n    )\n    return getCoverTargetFromCoverListDefault(\n        cover_list,\n        dog_or_cat_original,",
        "type": "code",
        "location": "/pyjom/platforms/bilibili/postMetadata.py:101-130"
    },
    "1485": {
        "file_id": 142,
        "content": "The code applies advanced image cropping and processing for a dog or cat cover image. It checks the cover list, performs histogram matching if necessary, and flips the image if required. Finally, it resizes the image with padding using replicate border type. The function \"imageLoader\" and \"imageHistogramMatch\" are imported but not used in this specific code.",
        "type": "comment"
    },
    "1486": {
        "file_id": 142,
        "content": "        filter_function=lambda image: imageDogCatCoverCropAdvanced(\n            image,\n            yolov5_confidence_threshold=0.27,  # you made it smaller.\n            dog_or_cat=dog_or_cat_original,  # already configured. no need to do shit.\n            area_threshold=0.30,  # 0.7 # could be smaller.\n            corner=False,\n        ),\n    )\nBSP = search.bilibiliSearchParams()\nimport random\nfrom typing import Callable\ndef getBilibiliPostMetadata(\n    sleepTime=2,\n    customParaphraser:Union[Callable,None]=None,\n    getMetatopic={},\n    bgmCacheSetName: Union[str, None] = \"bilibili_cached_bgm_set\",\n    getTids={},  # these two are not specified here.\n    genericTids:list[int]=[],\n    orders=[\n        BSP.all.order.最多点击,\n        BSP.all.order.最多收藏,\n        BSP.all.order.最新发布,\n        BSP.all.order.最多弹幕,\n        BSP.all.order.综合排序,\n    ],\n    pageIndexRange=(1, 5),\n    duration=BSP.all.duration._10分钟以下,\n    lang=\"zh\",\n    duration_limit={\"min\": 70, \"max\": 5 * 60},\n    play_limit={\"min\": 10000},\n    titleLengthLimit={\"min\": 7, \"max\": 17},",
        "type": "code",
        "location": "/pyjom/platforms/bilibili/postMetadata.py:131-165"
    },
    "1487": {
        "file_id": 142,
        "content": "This function generates Bilibili post metadata by specifying parameters like search type, video duration, order of sorting, and title length limits. It also allows for custom paraphrasing, language selection, and optional background music caching.",
        "type": "comment"
    },
    "1488": {
        "file_id": 142,
        "content": "    getCoverTargetFromCoverList=getCoverTargetFromCoverListDefault,  # what is the default process?\n    bgmCacheAutoPurge=False,\n):\n    if bgmCacheSetName and bgmCacheAutoPurge:\n        removeRedisValueByKey(bgmCacheSetName)\n    selected_topic_list_dict = {key: [] for key in getMetatopic.keys()}\n    randomTarget = lambda: random.choice(list(selected_topic_list_dict.keys()))\n    dog_or_cat = randomTarget()\n    description_list = []\n    bgm_list = []\n    title_list = []\n    tag_list = []\n    cover_list = []\n    bvid_list = []\n    def clearMyLists():\n        nonlocal bvid_list, bgm_list, title_list, tag_list, cover_list, bvid_list, description_list\n        description_list = []\n        bgm_list = []\n        title_list = []\n        tag_list = []\n        cover_list = []\n        bvid_list = []\n    getKeywords = {\n        key: lambda: getMetaTopicString(value) for key, value in getMetatopic.items()\n    }\n    # getDogTid = lambda: random.choice([BSP.all.tids.动物圈.tid, BSP.all.tids.动物圈.汪星人])\n    # getCatTid = lambda: random.choice([BSP.all.tids.动物圈.tid, BSP.all.tids.动物圈.喵星人])",
        "type": "code",
        "location": "/pyjom/platforms/bilibili/postMetadata.py:166-196"
    },
    "1489": {
        "file_id": 142,
        "content": "This code retrieves metadata from a bilibili platform, filters and selects topics, randomly chooses between dog or cat content, and initializes lists for BGM, title, tag, cover, and video ID. It also defines functions to clear lists and retrieve keywords. The code does not contain a default process for `getCoverTargetFromCoverList`.",
        "type": "comment"
    },
    "1490": {
        "file_id": 142,
        "content": "    # getTid = {\"dog\": getDogTid, \"cat\": getCatTid}\n    getTid = {key: lambda: random.choice(value) for key, value in getTids.items()}\n    getTargetTid = {key: lambda: random.choice([v for v in value if v not in genericTids]) for key, value in getTids.items()}\n    getRandomPage = lambda: random.randint(*pageIndexRange)  # not so broad.\n    # getRandomPage = lambda: random.randint(1, 50)  # broad range!\n    randomOrder = lambda: random.choice(orders)\n    while True:\n        try:\n            core_topic_set = {\n                *flattenUnhashableList(\n                    [value for key, value in getMetatopic[dog_or_cat].items()]\n                )\n            }\n            static_core_topic_list = flattenUnhashableList(\n                getMetatopic[dog_or_cat][\"static\"]\n            )\n            metatopicString = getKeywords[dog_or_cat]()\n            print(\"METATOPIC STRING:\", metatopicString)\n            # we use video only search.\n            search_tid = getTid[dog_or_cat]()\n            target_tid = getTargetTid[dog_or_cat]()",
        "type": "code",
        "location": "/pyjom/platforms/bilibili/postMetadata.py:197-223"
    },
    "1491": {
        "file_id": 142,
        "content": "This code dynamically generates a set of core topics, static core topic list, and metatopic string for the bilibili platform. It uses lambda functions to generate random values for TIDs, page index, and order. The code ensures that the selected TID is not present in genericTids. Finally, it prints the metatopic string and assigns a search TID and target TID for further processing.",
        "type": "comment"
    },
    "1492": {
        "file_id": 142,
        "content": "            result = sync(\n                search.search_by_type(\n                    keyword=metatopicString,\n                    params={\n                        \"tids\": search_tid,\n                        \"duration\": duration,\n                        \"order\": randomOrder(),\n                    },\n                    page=getRandomPage(),\n                    search_type=search.SearchObjectType.VIDEO,\n                )\n            )\n            # print(result)\n            # breakpoint()\n            from pyjom.platforms.bilibili.searchDataParser import parseSearchVideoResult\n            from pyjom.mathlib import checkMinMaxDict\n            def updateMyLists(\n                videoMetadata,\n                duration_limit={\"min\": 70, \"max\": 5 * 60},\n                titleLengthLimit={\"min\": 7, \"max\": 17},\n                play_limit={\"min\": 10000},\n                debugTag=\"debug\",\n            ):\n                nonlocal bvid_list, bgm_list, title_list, tag_list, cover_list, bvid_list, description_list, static_core_topic_list  # use nonlocal instead in nested functions.",
        "type": "code",
        "location": "/pyjom/platforms/bilibili/postMetadata.py:225-252"
    },
    "1493": {
        "file_id": 142,
        "content": "The code searches for video results on Bilibili based on specified criteria and uses the search result to update local lists of videos, titles, tags, covers, descriptions, and static core topics. It checks duration limits, title length limits, play counts, and debugs if needed.",
        "type": "comment"
    },
    "1494": {
        "file_id": 142,
        "content": "                (\n                    author,\n                    author_id,\n                    bvid,\n                    tags,\n                    categoryId,\n                    categoryName,\n                    title,\n                    duration_seconds,\n                    play,\n                    cover,\n                    description,\n                    links_in_description,\n                    bgms,\n                    title_tags,\n                    pubdate,\n                ) = videoMetadata\n                # print(\"VIDEO_METADATA\",videoMetadata)\n                # breakpoint()\n                if not checkMinMaxDict(len(title), titleLengthLimit):\n                    return\n                if not filterTitleWithCoreTopicSet(title, static_core_topic_list):\n                    return\n                if len(tags) > 0:\n                    tagContainStaticCoreTopicFlags = [\n                        int(filterTitleWithCoreTopicSet(tag, static_core_topic_list))\n                        for tag in tags\n                    ]",
        "type": "code",
        "location": "/pyjom/platforms/bilibili/postMetadata.py:253-280"
    },
    "1495": {
        "file_id": 142,
        "content": "This code extracts video metadata such as author, duration, title, and tags. It checks the length of the title against a limit and filters it for any static core topic. If the tag contains a static core topic, it creates a boolean flag for each tag. The function then returns the extracted metadata and flag list.",
        "type": "comment"
    },
    "1496": {
        "file_id": 142,
        "content": "                    mTagFlag = sum(tagContainStaticCoreTopicFlags) > 0\n                    if not mTagFlag:\n                        return\n                else:\n                    return\n                if duration_seconds == None:\n                    print(debugTag, \"VIDEO_METADATA\", videoMetadata)\n                    breakpoint()\n                elif play == None:\n                    print(debugTag, \"VIDEO_METADATA\", videoMetadata)\n                    breakpoint()\n                if len(bgms) > 0:\n                    bgm_list += bgms\n                try:\n                    if checkMinMaxDict(duration_seconds, duration_limit):\n                        if checkMinMaxDict(play, play_limit):\n                            bvid_list += [bvid]\n                            cover_list += [cover]\n                            title_list += [title]  # this for topic modeling?\n                            if description not in [\"\", None]:\n                                description_list += [description]\n                            if len(tags) > 0:",
        "type": "code",
        "location": "/pyjom/platforms/bilibili/postMetadata.py:281-302"
    },
    "1497": {
        "file_id": 142,
        "content": "This code checks if a video's metadata contains certain elements and whether they meet specific duration and play limits. If the video meets these criteria, it adds it to a list of bvids for further processing. It also handles potential errors by printing a debug message and breaking the execution. The title is added to a list for topic modeling purposes.",
        "type": "comment"
    },
    "1498": {
        "file_id": 142,
        "content": "                                tag_list += [\n                                    tags\n                                ]  # are you sure? this will make the tag_list into different shape!\n                except:\n                    traceError()\n                    breakpoint()\n            def updateMyListsWithIterable(\n                iterable,\n                duration_limit={\"min\": 70, \"max\": 5 * 60},\n                play_limit={\"min\": 10000},\n                titleLengthLimit={\"min\": 7, \"max\": 17},\n                debugTag=\"debug\",\n            ):\n                for videoMetadata in iterable:\n                    updateMyLists(\n                        videoMetadata,\n                        duration_limit=duration_limit,\n                        play_limit=play_limit,\n                        titleLengthLimit=titleLengthLimit,\n                        debugTag=debugTag,\n                    )\n            updateMyListsWithIterable(\n                parseSearchVideoResult(result),\n                duration_limit=duration_limit,",
        "type": "code",
        "location": "/pyjom/platforms/bilibili/postMetadata.py:303-328"
    },
    "1499": {
        "file_id": 142,
        "content": "The code defines a function updateMyListsWithIterable that takes an iterable of videoMetadata and applies the updateMyLists function to each element while applying duration, play, and title length limits. The parseSearchVideoResult is called with result and passed as an argument to updateMyListsWithIterable along with other parameters.",
        "type": "comment"
    }
}