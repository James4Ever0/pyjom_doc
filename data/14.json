{
    "1400": {
        "file_id": 110,
        "content": "/tasks/qq/qq_red_packet_collect/chat_local.py",
        "type": "filepath"
    },
    "1401": {
        "file_id": 110,
        "content": "The code uses the Jiagu library for sentiment analysis, stack management, and string comparison to handle duplicates in chat stacks, calculating differences between strings, and ranking messages based on Levenshtein distance and sentiment before either releasing or removing the selected message.",
        "type": "summary"
    },
    "1402": {
        "file_id": 110,
        "content": "# local chatbot implemetation.\n# first, we need experimental data.\n# a unified stack for every group.\n# import this shit ahead of everything.\nimport Levenshtein\nimport jiagu\nimport random\nfrom base_opq import stderrPrint\ndef update_stack(stack, elem, stackSize=300, no_duplicate=True):\n    if no_duplicate:\n        # check for duplicates.\n        if stack == []:\n            duplicate = False\n        else:\n            duplicate = stack[-1] == elem\n        if duplicate:\n            return stack\n    stack += [elem]\n    length = len(stack)\n    return stack[max(0, length - stackSize) :]\ndef getSentiment(sentence):\n    flag, probability = jiagu.sentiment(sentence)\n    # the probability that flag is true.\n    return flag, probability\ndef getAbsSentiment(sentence):  # ignore positive or negative.\n    flag, probability = getSentiment(sentence)\n    return probability\ndef getLinearSentiment(sentence):\n    flag, probability = getSentiment(sentence)\n    if flag == \"negative\":\n        probability = -probability\n    return probability",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/chat_local.py:1-41"
    },
    "1403": {
        "file_id": 110,
        "content": "This code contains various functions for sentiment analysis and managing a stack. It imports necessary libraries, updates a stack without duplicates (if specified), determines the sentiment of a sentence using Jiagu, and calculates linear sentiment by reversing negative sentiment probability.",
        "type": "comment"
    },
    "1404": {
        "file_id": 110,
        "content": "def compareDifference(sent_0, sent_1):\n    distance = Levenshtein.distance(sent_0, sent_1)\n    return distance\ndef getRatioDifference(sent_0, sent_1, reverse=False):\n    if reverse:\n        base_length = len(sent_1)\n    else:\n        base_length = len(sent_0)\n    distance = compareDifference(sent_0, sent_1)\n    return min(1, distance / base_length)\ndef getMinDifference(sent_0, sent_1):\n    reverse = False\n    if len(sent_0) < len(sent_1):\n        reverse = True\n    return getRatioDifference(sent_0, sent_1, reverse=reverse)\nchat_stack = {}\nhistoricalReplies = []  # should also be a stack.\nchat_stack_lock = False\ndef updateChatStack(group_id, message, stackSize=300, no_duplicate=True):\n    chat_stack[group_id] = update_stack(\n        chat_stack.get(group_id, []),\n        message,\n        stackSize=stackSize,\n        no_duplicate=no_duplicate,\n    )\ndef sampleChatStack(\n    originGroup: int, msg: str, min_corpus_size=100, sample_size=2000, originGroupCut=50\n):  # must exclude sent messages.\n    # assert min_corpus_size >= sample_size",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/chat_local.py:44-84"
    },
    "1405": {
        "file_id": 110,
        "content": "This code contains three functions: `compareDifference`, `getRatioDifference`, and `getMinDifference`. These functions calculate the difference between two strings by comparing their characters. The `updateChatStack` function updates a chat stack, ensuring no duplicate messages are included. The `sampleChatStack` function samples messages from the chat stack, excluding sent messages, for text generation.",
        "type": "comment"
    },
    "1406": {
        "file_id": 110,
        "content": "    # do not do this\n    population = [\n        (group_id, max(0, len(chat_stack[group_id]) - 1))\n        for group_id in chat_stack.keys()\n        if group_id != originGroup\n    ]\n    # population_size = sum([x[1] for x in population]) # wrong.\n    population = [  # no need to check against the original group here.\n        # if (chat_stack[group_id][index] != msg or group_id != originGroup)\n        [\n            (group_id, index)\n            for index in range(group_msg_size)\n            if chat_stack[group_id][index + 1] not in historicalReplies\n        ]\n        for group_id, group_msg_size in population\n    ]  # allow other group with same message or same group with other message\n    originGroupLength = len(chat_stack[originGroup]) - 1\n    if originGroupLength > originGroupCut:\n        # THIS WAS BLOODY WRONG\n        # WAS MISPLACED.\n        population.append(\n            [\n                (originGroup, index)\n                for index in range(0, originGroupLength - originGroupCut)\n                if chat_stack[originGroup][index] != msg",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/chat_local.py:85-110"
    },
    "1407": {
        "file_id": 110,
        "content": "Creates a list of group IDs and corresponding message indexes excluding the original group and message. Excludes groups with same messages or other messages from the same group. Retrieves number of messages in the original group and if more than the cutoff, adds original group's messages except the current one to the population list.",
        "type": "comment"
    },
    "1408": {
        "file_id": 110,
        "content": "            ]\n        )\n    population = [x for y in population for x in y]\n    population_size = len(population)\n    if population_size < min_corpus_size:\n        return []\n    sample_size = min(population_size, sample_size)\n    # it must equal.\n    sample = random.sample(population, sample_size)\n    return sample\ndef sentimentFilter(sentiment, threshold=0.85):\n    assert threshold > 0 and threshold < 1\n    # for too negative ones, we value it as 0.\n    if sentiment < -threshold or sentiment > threshold:\n        return 0\n    return abs(sentiment)\ndef getChatLocalResponse(\n    originGroup: int,\n    msg: str,\n    min_corpus_size=100,\n    sample_size=2000,\n    k_top=30,\n    originGroupCut=50,\n):\n    global chat_stack_lock\n    # assert min_corpus_size >= sample_size\n    if chat_stack_lock:\n        return  # do nothing. maybe another thread is holding the lock.\n    # must set a global lock.\n    chat_stack_lock = True\n    sample = sampleChatStack(\n        originGroup,\n        msg,\n        min_corpus_size=min_corpus_size,\n        sample_size=sample_size,",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/chat_local.py:111-150"
    },
    "1409": {
        "file_id": 110,
        "content": "This function, getChatLocalResponse, samples recent chat messages from a local stack for the given originGroup and message. It takes in parameters like min_corpus_size, sample_size, k_top, and originGroupCut. The function first checks if the global lock is set before proceeding to sample recent chat messages. If the lock is held by another thread, it returns without doing anything. Otherwise, it sets the global lock and calls the sampleChatStack function to get a list of recent chat messages that can be used for further analysis or processing.",
        "type": "comment"
    },
    "1410": {
        "file_id": 110,
        "content": "        originGroupCut=originGroupCut,\n    )\n    if len(sample) == 0 or len(sample) != sample_size:  # no sample received.\n        chat_stack_lock = False  # release lock\n        return\n    # this sample must not be empty.\n    # rank by Levenshtein distance.\n    ranks = [\n        (getMinDifference(msg, chat_stack[group_id][gm_index]), index)\n        for index, (group_id, gm_index) in enumerate(sample)\n    ]\n    ranks.sort(key=lambda x: x[0])\n    selected_ranks = ranks[:k_top]\n    selected_ranks = [sample[index] for difference_score, index in selected_ranks]\n    # do we have to match the mood? like positive/negative -> positive/negative?\n    # increase the negativity?\n    # sentiment shall be next sentence.\n    selected_emotional_ranks = [\n        (getLinearSentiment(chat_stack[group_id][gm_index + 1]), index)\n        for index, (group_id, gm_index) in enumerate(selected_ranks)\n    ]\n    selected_emotional_ranks.sort(\n        key=lambda x: -sentimentFilter(x[0])\n    )  # select the extremes. do not select too extreme ones.",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/chat_local.py:151-176"
    },
    "1411": {
        "file_id": 110,
        "content": "This code is sampling messages from a chat stack, ranking them by Levenshtein distance, and then selecting the top k ranks based on that distance. It also considers the sentiment of the next message in the selection process. If there's no valid sample or if the sample size doesn't match the expected value, it releases the lock and returns without any action.",
        "type": "comment"
    },
    "1412": {
        "file_id": 110,
        "content": "    mReplySentiment, mReplyIndex = selected_emotional_ranks[0]\n    mReply_group_id, mReply_gm_index = selected_ranks[mReplyIndex]\n    mReply = chat_stack[mReply_group_id][mReply_gm_index + 1]  # must plus one.\n    # before release lock we need to remove things from chat_stack and append things into historicalReplies(stack)\n    update_stack(historicalReplies, mReply)\n    # for _ in range(2):\n    #     del chat_stack[mReply_group_id][mReply_gm_index] # may cause problems. we might not delete this.\n    # discontinuality of message replies.\n    # you can somehow make the selected list immutable, into tuple.\n    chat_stack_lock = False\n    return mReply\n# must detect emotion level.\n# maybe do sampling on those stacks will help?\n# sample size must smaller tha population.",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/chat_local.py:177-194"
    },
    "1413": {
        "file_id": 110,
        "content": "This code snippet selects a reply message from a chat_stack list, deletes the selected message from the stack, and updates a historicalReplies stack. The code intends to ensure message replies are immutable by removing them from the original list after selection, but this approach may cause issues.",
        "type": "comment"
    },
    "1414": {
        "file_id": 111,
        "content": "/tasks/qq/qq_red_packet_collect/censorApis.py",
        "type": "filepath"
    },
    "1415": {
        "file_id": 111,
        "content": "The code defines three functions for censoring replies based on sentiment analysis, including \"censorReply\", which sends a request to a censor API; \"censorReplyAbsSentiment\", which censors if the absolute sentiment score exceeds a certain threshold; and \"censorReplyLinearSentiment\", which censors if the linear sentiment score is below a certain level. However, there is an issue with the positive/negative flag for some sentences. The function also returns the original reply if the sentiment change after censoring is less than 0.5; otherwise, it returns the censored reply.",
        "type": "summary"
    },
    "1416": {
        "file_id": 111,
        "content": "import requests\nfrom chat_local import getLinearSentiment, getAbsSentiment\ndef censorReply(reply, moderate=True):\n    url = \"http://127.0.0.1:8932/filter\"\n    response = requests.get(url, params={\"text\": reply, \"moderate\": moderate})\n    response = response.json()\n    reply = response[\"response\"]\n    return reply\ndef censorReplyAbsSentiment(\n    reply, moderate=True, sentiment_abs_level=0.6, censored_sentiment_threshold=0.8\n):\n    sentiment = getAbsSentiment(reply)\n    if sentiment > sentiment_abs_level:\n        reply = censorReply(reply)\n        censored_sentiment = getAbsSentiment(reply)\n        if censored_sentiment > censored_sentiment_threshold:\n            return None\n    return reply\n# however these sentiment based function will not work very well since the positive/negative flag is not working properly for sentence like \"操你妈\" -> (\"positive\", 0.8)\ndef censorReplyLinearSentiment(reply, moderate=True, sentiment_level=-0.9):\n    sentiment = getLinearSentiment(reply)\n    if sentiment < sentiment_level:\n        reply = censorReply(reply)",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/censorApis.py:1-33"
    },
    "1417": {
        "file_id": 111,
        "content": "This code defines three functions for censoring replies based on sentiment analysis. The \"censorReply\" function sends a request to a censor API, the \"censorReplyAbsSentiment\" function censors a reply if its absolute sentiment score is above a certain threshold, and the \"censorReplyLinearSentiment\" function censors a reply if its linear sentiment score is below a certain level. However, the positive/negative flag does not work properly for some sentences.",
        "type": "comment"
    },
    "1418": {
        "file_id": 111,
        "content": "    return reply\ndef censorReplySentimentDelta(reply, moderate=True, sentiment_delta_level=0.5):\n    reply2 = censorReply(reply)\n    sentiment = getLinearSentiment(reply)\n    sentiment2 = getLinearSentiment(reply2)\n    sentiment_delta = sentiment2 - sentiment\n    if sentiment_delta < sentiment_delta_level:  # is that good?\n        return reply\n    else:\n        return reply2",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/censorApis.py:34-47"
    },
    "1419": {
        "file_id": 111,
        "content": "This function censors a reply and returns the original reply if the sentiment change after censoring is less than 0.5; otherwise, it returns the censored reply.",
        "type": "comment"
    },
    "1420": {
        "file_id": 112,
        "content": "/tasks/qq/qq_red_packet_collect/test_download_qq_image.sh",
        "type": "filepath"
    },
    "1421": {
        "file_id": 112,
        "content": "This script downloads a QQ image using curl, saves it as \"qq_image_received.image\", and is compatible with OpenCV for processing.",
        "type": "summary"
    },
    "1422": {
        "file_id": 112,
        "content": "# you cannot receive qq voice with opq!\n# but you can download image when it has not expired.\n# what is the type of this image?\ncurl -L -o qq_image_received.image \"http://gchat.qpic.cn/gchatpic_new/3318506826/205569604-2534335053-7D3B7BA4B3476AD210837D8C86F2E8DA/0?vuin=917521610&term=255&pictype=0\"\n# cv2 can handle that.",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/test_download_qq_image.sh:1-6"
    },
    "1423": {
        "file_id": 112,
        "content": "This script downloads a QQ image using curl, saves it as \"qq_image_received.image\", and is compatible with OpenCV for processing.",
        "type": "comment"
    },
    "1424": {
        "file_id": 113,
        "content": "/tasks/qq/qq_red_packet_collect/test_check_dog_cat.py",
        "type": "filepath"
    },
    "1425": {
        "file_id": 113,
        "content": "This code imports a function to check if an image is of a cat or dog. It prints the rate limits and then runs the check function on an image URL three times, displaying the results. If the confidence score for either 'cat' or 'dog' is above 0.4, it returns that species name.",
        "type": "summary"
    },
    "1426": {
        "file_id": 113,
        "content": "from adtools import checkIsCatOrDogImage, rateLimits\nimage_url = \"http://gchat.qpic.cn/gchatpic_new/3318506826/205569604-2534335053-7D3B7BA4B3476AD210837D8C86F2E8DA/0?vuin=917521610&term=255&pictype=0\"\nprint(\"RATE LIMITS?\", rateLimits)\nfor _ in range(3):\n    r= checkIsCatOrDogImage(image_url) # will raise Exception! warning\n    print(\"RESULT?\")\n    import rich\n    rich.print(r)\nthreshold = 0.4\n# for species in r:\n#     name = species['identity']\n#     if name in ['cat','dog']:\n#         conf = species['confidence']\n#         if conf > threshold:\n#             return name",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/test_check_dog_cat.py:1-20"
    },
    "1427": {
        "file_id": 113,
        "content": "This code imports a function to check if an image is of a cat or dog. It prints the rate limits and then runs the check function on an image URL three times, displaying the results. If the confidence score for either 'cat' or 'dog' is above 0.4, it returns that species name.",
        "type": "comment"
    },
    "1428": {
        "file_id": 114,
        "content": "/tasks/qq/qq_red_packet_collect/test_ad_generator.py",
        "type": "filepath"
    },
    "1429": {
        "file_id": 114,
        "content": "Iterates through a list of video data, generates Bilibili video ads using provided info, displays the image output on screen and waits for key press.",
        "type": "summary"
    },
    "1430": {
        "file_id": 114,
        "content": "from ad_template_2_functional import generateBilibiliVideoAd, getAdLock\nvideoData = [\n    [\n        \"BV1Qd4y177Tc\",\n        \"bbb\",\n        \"https://i0.hdslb.com/bfs/archive/8a5f0a2bdffc99d33776c9d1f101521c0fc85e31.jpg\",\n    ],\n    [\n        \"BV1FG411K7Cd\",\n        \"aaa\",\n        \"https://i2.hdslb.com/bfs/archive/6423c88a8d3011a6a911627d9100b4cc4f08758d.jpg\",\n    ],\n]\nimport cv2\nfor (bvid, title_text, image_link) in videoData:\n    with getAdLock():\n        output_path, output_standalone, output_masked_path = generateBilibiliVideoAd(\n            bvid, title_text, image_link\n        )\n        img = cv2.imread(output_path)\n        cv2.imshow(\"IMAGE\", img)\n        cv2.waitKey(0)",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/test_ad_generator.py:1-25"
    },
    "1431": {
        "file_id": 114,
        "content": "Iterates through a list of video data, generates Bilibili video ads using provided info, displays the image output on screen and waits for key press.",
        "type": "comment"
    },
    "1432": {
        "file_id": 115,
        "content": "/tasks/qq/qq_red_packet_collect/test_neo4j_creds.py",
        "type": "filepath"
    },
    "1433": {
        "file_id": 115,
        "content": "This code tests Neo4j credentials by iterating through various usernames and passwords, attempting to connect and retrieve a single node result. It prints the retrieved result and the used credentials if successful, or catches any exceptions during the process.",
        "type": "summary"
    },
    "1434": {
        "file_id": 115,
        "content": "from adtools import getNeo4jDriver\ndef test_login():\n    usernames = [\"kali\", \"user\", \"neo4j\", \"admin\", \"parrot\", \"\"]\n    passwords = [\"neo4j\", \"kali\", \"parrot\", \"admin\", \"password\", \"\"]\n    for u in usernames:\n        for p in passwords:\n            try:\n                driver = getNeo4jDriver(username=u, password=p, debug=False)\n                # print('RESPONSE?',r)\n                with driver.session() as session:\n                    result = session.run(\"MATCH (n) RETURN n LIMIT 1\")\n                    print(result.single())\n                    print(\"USING:\", u, p)\n            except:\n                pass\n                # import traceback\n                # traceback.print_exc()",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/test_neo4j_creds.py:1-19"
    },
    "1435": {
        "file_id": 115,
        "content": "This code tests Neo4j credentials by iterating through various usernames and passwords, attempting to connect and retrieve a single node result. It prints the retrieved result and the used credentials if successful, or catches any exceptions during the process.",
        "type": "comment"
    },
    "1436": {
        "file_id": 116,
        "content": "/tasks/qq/qq_red_packet_collect/base_opq.py",
        "type": "filepath"
    },
    "1437": {
        "file_id": 116,
        "content": "The code handles group management in a messaging platform using modules and botoy instance for QQ API communication, includes error printing helper functions, and performs searches with API requests. It also has an 'openRedBag' function that retries three times with sleep time backoff strategy and parameter checks, delay ranges, and forbidden keyword filtering. The asyncThread decorator starts new threads to execute original func functions.",
        "type": "summary"
    },
    "1438": {
        "file_id": 116,
        "content": "from botoy import Action\nfrom botoy import Botoy, GroupMsg\nimport threading\nimport json\nimport time\nimport random\nimport sys\nimport traceback\nfrom threading import Event\nexit_event = Event()\nexit_event.clear()\ndef programExit():\n    exit_event.set()\n# my_qq = 1281727431 # freaking int! Yukio.\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\n    \"--qq\", type=int, default=1281727431, required=False\n)  # must not required since we have default value here.\nparser.add_argument(\"--port\", type=int, default=8780, required=False)\nparser.add_argument(\"--log\", action=\"store_true\")\nparser.add_argument(\"--log_file\", action=\"store_true\")\n# 忽略信息的blacklist 还有user_blacklist\ngroup_blacklist = [927825838]  # 微信的hook发布群\nfriend_blacklist = [364831018]  # 发给我微信hook的人\nparsed_args = parser.parse_args()\nmy_qq = parsed_args.qq\nserver_port = parsed_args.port\nlog = parsed_args.log\nlog_file = parsed_args.log_file\n# you can pass the qq via enviorment variable.\n# it is already inside. so the call fails.\n# you might check all friends list and grou list.",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/base_opq.py:1-46"
    },
    "1439": {
        "file_id": 116,
        "content": "The code imports necessary modules and defines functions for handling program exit, parsing command-line arguments, and managing blacklists. The script takes a QQ number as an input and determines which friends and groups to interact with based on the provided arguments. It also allows for logging and handling environment variables.",
        "type": "comment"
    },
    "1440": {
        "file_id": 116,
        "content": "lua_v1_api_path = \"/v1/LuaApiCaller\"\nopq_server = {\"host\": \"localhost\", \"port\": server_port}  # this is for arm\n# opq_server = {\"host\":\"localhost\",\"port\":8781} # this is for amd64\n# not 0.0.0.0 but freaking localhost.\naction = Action(qq=my_qq, port=opq_server[\"port\"], host=opq_server[\"host\"])\nbot = Botoy(\n    qq=my_qq,\n    port=opq_server[\"port\"],\n    host=opq_server[\"host\"],\n    log=log,\n    log_file=log_file,\n    group_blacklist=group_blacklist,\n    friend_blacklist=friend_blacklist,\n)  # have info. have custom log file.\n## this is the damn bot. how to get group name?\nmyGroupDict = {}\ntry:\n    myGroupList = action.getGroupList()\n    myGroupDict = {elem[\"GroupId\"]: elem[\"GroupName\"] for elem in myGroupList}\nexcept:\n    pass\n# [{'GroupId': 118794, 'GroupMemberCount': 2818, 'GroupName': '攻防世界交流群', 'GroupNotice': '第四届“第五空间”网络安全大赛\\n1、报名网站：\\x01https://ctf.360.net/5space\\x02\\n2、 报名时间：8月30日--9月9日（沿用DSCTF）\\n', 'GroupOwner': 41495, 'GroupTotalCount': 3000},...]\n# from lazero.utils.logger import sprint\n# sprint(myGroupList)",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/base_opq.py:47-73"
    },
    "1441": {
        "file_id": 116,
        "content": "This code sets up a botoy instance for communication with the QQ API, retrieves a list of groups, and stores them in a dictionary. The group information is obtained using the `getGroupList()` method from the action class, and the dictionary maps each group ID to its corresponding name. If an error occurs during this process, it is caught and ignored.",
        "type": "comment"
    },
    "1442": {
        "file_id": 116,
        "content": "# breakpoint()\ndef updateGroupNameDict(groupName, group_id):\n    global myGroupDict\n    group_id = int(group_id)\n    if group_id not in myGroupDict.keys():\n        print(\"UPDATING GROUP_ID -> GROUP_NAME DICT\")\n        print(\"OROUP ID:\", group_id)\n        print(\"GROUP NAME:\", groupName)\n        myGroupDict.update({group_id: groupName})\ndef getGroupNameFromDict(group_id):\n    global myGroupList, action, myGroupDict\n    if myGroupList in [None, []]:  # if not empty please update this dict elsewhere?\n        try:\n            myGroupList = action.getGroupList()\n            myGroupDict.update(\n                {elem[\"GroupId\"]: elem[\"GroupName\"] for elem in myGroupList}\n            )\n        except:\n            print(\"NO GROUP LIST AVALIABLE.\")\n            return\n    group_id = int(group_id)\n    groupName = myGroupDict.get(group_id, None)\n    if groupName is None:\n        print(\"NO GROUP NAME AVALIABLE.\")\n    return groupName\n#  \t搜索群组 添加好友\n# openRedBag \t打开红包\n# joinGroup \t加入群聊\n# dealFriend \t处理好友请求\ndef stderrPrint(*args, **kwargs):",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/base_opq.py:74-109"
    },
    "1443": {
        "file_id": 116,
        "content": "The code contains a function to update the group_id to group name dictionary, a function to get the group name from the dictionary based on the given group_id, and three uncommented function calls. The code seems to be related to handling groups and red packets in a messaging platform. It also includes a helper function for error printing.",
        "type": "comment"
    },
    "1444": {
        "file_id": 116,
        "content": "    kwargs.update({\"file\": sys.stderr})\n    print(*args, **kwargs)\ndef searchGroup(keyword, pageNum=0):\n    payload = {\"Content\": keyword, \"Page\": pageNum}\n    result = action.post(\n        funcname=\"SearchGroup\", payload=payload, path=lua_v1_api_path\n    )  # do not pass params since it will auto complete.\n    print(\"SEARCH GROUP RESULT: \", result)\n    return result\ndef addFriend(friend_id, reason=\"\", sourceString=\"search\", group_id=0):\n    # some conversions\n    if friend_id != int:\n        friend_id = int(friend_id)\n    if group_id != int:\n        group_id = int(group_id)  # source group id.\n    add_friend_sources = {\n        \"qzone\": 2011,\n        \"search\": 2020,\n        \"group\": 2004,\n        \"discussion\": 2005,\n    }\n    source = add_friend_sources[sourceString]\n    source_dict = {\n        2011: \"空间\",\n        2020: \"QQ搜索\",\n        2004: \"群组\",\n        2005: \"讨论组\",\n    }  # you can make it into another dict.\n    assert source in source_dict.keys()\n    if source != 2004:\n        group_id = 0  # prevent issues.\n    payload = {",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/base_opq.py:110-146"
    },
    "1445": {
        "file_id": 116,
        "content": "The code contains two functions: `searchGroup` and `addFriend`. The `searchGroup` function performs a search for a keyword in QQ groups and returns the result. It sends a POST request to a specified API endpoint with the keyword and page number as parameters. The `addFriend` function adds a friend using a given friend ID, reason (optional), source string (e.g., 'search'), and group ID. It first checks if the input is of correct type and then maps the source string to a specific QQ friend adding method. If the source is a group, it also checks if the group ID is provided.",
        "type": "comment"
    },
    "1446": {
        "file_id": 116,
        "content": "        \"Content\": reason,\n        \"AddFromSource\": source,\n        \"FromGroupID\": group_id,\n        \"AddUserUid\": friend_id,\n    }\n    result = action.post(\n        funcname=\"AddQQUser\", payload=payload, path=lua_v1_api_path\n    )  # do not pass params since it will auto complete.\n    print(\"ADD FRIEND RESULT: \", result)\n    return result\ndef openRedBag(\n    RedBaginfoDict,\n    group_id,\n    RedBaginfo,\n    delay=(5, 10),\n    prefix=\"[MREDBAG_LOG]\",\n    forbiddenKeywords=[\"test\", \"测试\", \"别抢\", \"不要\"],\n):\n    bag_type = RedBaginfoDict[\"RedType\"]\n    print(prefix, \"THREAD LAUCHED\", file=sys.stderr)\n    if bag_type in [4, 6, 12]:\n        print(prefix, \"COLLECTING RED BAG\", file=sys.stderr)\n        sleep_time = random.randint(*delay)\n        print(prefix, \"SLEEP TIME:\", sleep_time, file=sys.stderr)\n        time.sleep(sleep_time)\n        title = RedBaginfoDict[\"Tittle\"]\n        # filter this title shit.\n        if any(\n            [keyword in title.lower().replace(\" \", \"\") for keyword in forbiddenKeywords]\n        ):\n            stderrPrint(\"title containing forbidden keywords\")",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/base_opq.py:147-179"
    },
    "1447": {
        "file_id": 116,
        "content": "The code defines a function 'openRedBag' that takes parameters such as RedBaginfoDict, group_id, RedBaginfo, delay, prefix and forbiddenKeywords. It determines the bag type based on RedBaginfoDict[\"RedType\"] and checks if the bag type is either 4, 6 or 12. If so, it randomly selects a sleep time from the given delay range, sleeps for that amount of time, and then prints the message with prefix and sleep time to stderr. It also filters the title by checking if any keyword from forbiddenKeywords is present in the title (ignoring spaces).",
        "type": "comment"
    },
    "1448": {
        "file_id": 116,
        "content": "            stderrPrint(\"refuse to open red bag:\", title.__repr__())\n            return\n        if bag_type == 12:\n            action.sendGroupText(group=group_id, content=title)\n        for trial in range(3):  # try three times till we get there.\n            if exit_event.is_set():\n                break\n            try:\n                answer = action.openRedBag(RedBaginfo)\n                print(prefix, \"RESULT:\", answer, file=sys.stderr)\n                print(prefix, \"TRIAL %d: COLLECTED RED BAG\" % trial, file=sys.stderr)\n                assert answer[\"Ret\"] == 0  # assert no problem here.\n                break\n            except:\n                print(\"_____________RedPacket Exception____________\")\n                traceback.print_exc()\n                print(\"_____________RedPacket Exception____________\")\n                sleep_time = random.randint(*delay)\n                time.sleep(sleep_time)\ndef startThread(target, args=(), kwargs={}):\n    thread = threading.Thread(target=target, args=args, kwargs=kwargs, daemon=False)",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/base_opq.py:180-202"
    },
    "1449": {
        "file_id": 116,
        "content": "This code is trying to open a red bag and collect items. If the operation fails, it will attempt three times before giving up. The function uses a try-except block for error handling and includes logging and sleep time for backoff strategy. A startThread function is also defined which can be used to create new threads in the codebase.",
        "type": "comment"
    },
    "1450": {
        "file_id": 116,
        "content": "    thread.start()\ndef asyncThread(func):\n    def new_func(*args, **kwargs):\n        startThread(func, args=args, kwargs=kwargs)\n    return new_func",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/base_opq.py:203-210"
    },
    "1451": {
        "file_id": 116,
        "content": "This code defines an asyncThread decorator function that starts a new thread when called, using the startThread function to execute the original func function in a separate thread.",
        "type": "comment"
    },
    "1452": {
        "file_id": 117,
        "content": "/tasks/qq/qq_red_packet_collect/test_adtools.sh",
        "type": "filepath"
    },
    "1453": {
        "file_id": 117,
        "content": "This code changes the current directory (CD) and then runs a test script named \"test_make_dog_cat_connection.py\" using the pytest-3 command, specifically focusing on the test function \"test_query\". This might be related to testing connections between dog and cat data.",
        "type": "summary"
    },
    "1454": {
        "file_id": 117,
        "content": "cd . # really sure that is just because of insufficient power supply for external drives?\npytest-3 -s test_make_dog_cat_connection.py::test_query",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/test_adtools.sh:1-2"
    },
    "1455": {
        "file_id": 117,
        "content": "This code changes the current directory (CD) and then runs a test script named \"test_make_dog_cat_connection.py\" using the pytest-3 command, specifically focusing on the test function \"test_query\". This might be related to testing connections between dog and cat data.",
        "type": "comment"
    },
    "1456": {
        "file_id": 118,
        "content": "/tasks/qq/qq_red_packet_collect/red_packet.yaml",
        "type": "filepath"
    },
    "1457": {
        "file_id": 118,
        "content": "The code establishes a window with three panes, executes shell commands for server testing, bilibili video recommendation, and xiaoice chat API; requires login and cautions on Gitter token pasting.",
        "type": "summary"
    },
    "1458": {
        "file_id": 118,
        "content": "session_name: qq_red_packet\nwindows:\n  - window_name: qq_red_packet_window\n    layout: tiled\n    shell_command_before:\n      - cd ~/Desktop/works/pyjom # run as a first command in all panes\n      - bash # to ensure we use the right shell\n      - conda deactivate # to disable conda enviorment\n    panes:\n      - shell_command:\n          - cd tests/qq_opqbot\n          - cd opq_arm64\n          - bash launch.sh # will kill all opqbots.\n      - shell_command: # magic from https://www.wikitechy.com/tutorials/linux/how-to-write-stderr-to-a-file-while-using-tee-with-a-pipe\n          - sleep 10\n          - cd tasks/qq/qq_red_packet_collect # run multiple commands in this pane\n          - keepalive python3 botoy_redpacket_collect.py 1>/dev/null 2> >(tee -a logs/redPacketLog_0.log >&2)\n          # - python3 botoy_redpacket_collect.py 1>/dev/null\n        #   - python3 botoy_redpacket_collect.py --log 1 --log_file 0 1>/dev/null 2> >(tee -a redPacketLog_0.log >&2)\n      # it seems we need another github account to have another gitter developer token.",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/red_packet.yaml:1-20"
    },
    "1459": {
        "file_id": 118,
        "content": "This code is setting up a window with tiled layout and three panes. The first pane runs a command to change the directory, the second pane waits for 10 seconds before changing to another directory, and the third pane runs a Python script called `botoy_redpacket_collect.py`, redirecting both standard output (STDOUT) and standard error (STDERR) to a log file while using `keepalive` to keep the script running indefinitely.",
        "type": "comment"
    },
    "1460": {
        "file_id": 118,
        "content": "      - shell_command:\n          - cd tests/qq_opqbot\n          - cd opq_arm64_another_account\n          - sleep 3\n          - bash launch.sh # port 8784\n      - shell_command:\n          - sleep 10\n          - cd tasks/qq/qq_red_packet_collect # run multiple commands in this pane\n          - keepalive python3 botoy_redpacket_collect.py --qq 917521610 --port 8784 1>/dev/null 2> >(tee -a logs/redPacketLog_1.log >&2)\n          # - python3 botoy_redpacket_collect.py --qq 917521610 --port 8784 1>/dev/null \n        #   - python3 botoy_redpacket_collect.py  --log 1 --log_file 0 --qq 917521610 --port 8784 1>/dev/null 2> >(tee -a redPacketLog_1.log >&2)\n      - shell_command: # GPT2 LOCAL CHATBOT SERVER\n          - cd tests/cpm_chinese_chitchat_model_gpt2/server/\n          - bash launch.sh\n      - shell_command: # text censor api\n          - cd tasks/qq/qq_red_packet_collect/textfilter \n          - bash launch.sh\n      - shell_command: # image dog/cat recognition server\n          - cd tests/bezier_paddlehub_dogcat_detector_serving",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/red_packet.yaml:21-39"
    },
    "1461": {
        "file_id": 118,
        "content": "This code is setting up and running multiple services for a chatbot application. It changes directories, executes scripts to launch servers, and specifies ports and other configurations for each service. The primary focus appears to be on the \"botoy_redpacket_collect\" application, which requires multiple command line options.",
        "type": "comment"
    },
    "1462": {
        "file_id": 118,
        "content": "          - python3 server.py\n      - shell_command:\n          - cd tests/bilibili_video_recommendation_server\n          - python3 test.py\n      - shell_command: # xiaoice chat api\n          - cd tests/microsoft_xiaobing_conversation_bing\n          # - node chat_with_session_id.js\n          # - bash xiaobing_server_keepalive.sh\n          - keepalive node chat_with_session_id.js # try it. you may want to replace it with python.\n      # login first!\n      # when pasting gitter tokens, be careful.",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/red_packet.yaml:40-50"
    },
    "1463": {
        "file_id": 118,
        "content": "The code includes three separate shell commands for running different Python and Node.js scripts related to server testing, bilibili video recommendation, and a xiaoice chat API. It also mentions the need to login first and advises being careful when pasting Gitter tokens.",
        "type": "comment"
    },
    "1464": {
        "file_id": 119,
        "content": "/tasks/qq/qq_red_packet_collect/test_make_dog_cat_connection.py",
        "type": "filepath"
    },
    "1465": {
        "file_id": 119,
        "content": "This code imports a function from adtools to test making connections between cats and dogs. It defines three test functions: \"test_main\", \"test_delete\", and \"test_query\". The \"test_query\" function retrieves cat and dog ads. The main code block runs the \"test_query\" function if this script is run directly.",
        "type": "summary"
    },
    "1466": {
        "file_id": 119,
        "content": "from adtools import makeCatOrDogConnections, getCatOrDogAd\ndef test_main():\n    makeCatOrDogConnections(\"123\", \"345\", \"cat\", debug=True)\ndef test_delete():\n    makeCatOrDogConnections(\"123\", \"345\", \"cat\", debug=True, delete=True)\ndef test_query():\n    response = getCatOrDogAd(\"cat\", debug=True)\n    response = getCatOrDogAd(\"dog\", debug=True)\nif __name__ == \"__main__\":\n    test_query()",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/test_make_dog_cat_connection.py:1-18"
    },
    "1467": {
        "file_id": 119,
        "content": "This code imports a function from adtools to test making connections between cats and dogs. It defines three test functions: \"test_main\", \"test_delete\", and \"test_query\". The \"test_query\" function retrieves cat and dog ads. The main code block runs the \"test_query\" function if this script is run directly.",
        "type": "comment"
    },
    "1468": {
        "file_id": 120,
        "content": "/tasks/qq/qq_red_packet_collect/test_get_all_my_videos.py",
        "type": "filepath"
    },
    "1469": {
        "file_id": 120,
        "content": "Code makes a POST request to localhost on port 7341, endpoint \"searchUserVideos\", with an empty query and tid 0 for the latest video of own user. Uses requests library, prints data in JSON format using rich library.",
        "type": "summary"
    },
    "1470": {
        "file_id": 120,
        "content": "import requests\nport, endpoint = 7341, \"searchUserVideos\"\npostData = {\"query\":\"\", \"tid\": 0, \"method\": \"online\"} # this is to get latest video of my own. fuck. better turned into registration based method.\n# postData = {'query':\"狗\", \"tid\":0, \"method\":\"bm25\"}\nr = requests.post(f\"http://localhost:{port}/{endpoint}\", json=postData)\ndata = r.json()\nprint(\"data\")\nimport rich\nrich.print(data)",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/test_get_all_my_videos.py:1-11"
    },
    "1471": {
        "file_id": 120,
        "content": "Code makes a POST request to localhost on port 7341, endpoint \"searchUserVideos\", with an empty query and tid 0 for the latest video of own user. Uses requests library, prints data in JSON format using rich library.",
        "type": "comment"
    },
    "1472": {
        "file_id": 121,
        "content": "/tasks/qq/qq_red_packet_collect/adtools.py",
        "type": "filepath"
    },
    "1473": {
        "file_id": 121,
        "content": "The code uses image classification, conversation recording, and Neo4j driver for detecting cat and dog lovers, and generates ads from video dictionaries with cover images. It has various features like rate limiting, debug mode, and handles unimplemented styles randomly.",
        "type": "summary"
    },
    "1474": {
        "file_id": 121,
        "content": "import rich\ncatSignals = [\"喵喵\", \"猫\", \"猫咪\", \"喵\"]\ndogSignals = [\n    \"狗狗\",\n    \"狗\",\n    \"汪汪\",\n    \"修勾\",\n    \"汪\",\n    \"狗子\",\n]\n# def getQueryWordFromSignals(signals:list):\n#     msignals = signals.copy()\n#     msignals.sort(key=lambda x: len(x))\n#     response = []\n#     for s in msignals:\n#         if s not in \" \".join(response):\n#             response.append(s)\n#     return \" \".join(response)\ncatDogElemDict = {\"cat\": catSignals, \"dog\": dogSignals}\n# catQueryWord = getQueryWordFromSignals(catSignals)\n# dogQueryWord = getQueryWordFromSignals(dogSignals)\n# # print(\"DOG QUERY WORD?\",dogQueryWord)\n# catDogQueryWords = {\"cat\": catQueryWord,\"dog\":dogQueryWord}\n# TODO: detect if some \"dog\" or \"cat\" lover is talking\ndef checkIsCatOrDogLover(qq_user_id):\n    # if both, return either one.\n    # TODO: for more topics, sort topics by popularity and views\n    ...\n# TODO: record those who talks to other.\n# TODO: decay this relationship counter by 0.8 everyday\ndef recordQQUserTalkingToAnotherUser(\n    former_speaker: dict, later_speaker: dict, threshold: int = 60",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/adtools.py:1-39"
    },
    "1475": {
        "file_id": 121,
        "content": "This code defines a function that detects if a QQ user is a cat or dog lover, and includes functions to generate query words from signals for cats and dogs, and record users talking to each other. The code also sorts topics by popularity and views, and decays relationship counters daily.",
        "type": "comment"
    },
    "1476": {
        "file_id": 121,
        "content": "):\n    # only record those who answers within the time.\n    if former_speaker[\"UserID\"] != later_speaker[\"UserID\"]:\n        if abs(former_speaker[\"SpeakTime\"] - later_speaker[\"SpeakTime\"]) <= threshold:\n            # make the connection\n            ...\n# [DONE]: detect \"cat\" or \"dog\" image.\n# [DONE]: rate limit\n# from ratelimiter import RateLimiter\n# def rateLimitReached(until):\n#     raise Exception(f\"rate limit reached. wait {until} seconds\")\n# # this can slow me down.\n# @RateLimiter(max_calls=1, period=5,callback=rateLimitReached )\nimport time\nrateLimits = {}\nimport sys\ndef checkIsCatOrDogImage(\n    image_url,\n    download_timeout=2,\n    timeout=4,\n    port=4675,\n    endpoint=\"analyzeImage\",\n    rateLimitPeriod=5,\n    threshold=0.4,\n    debug=True\n):\n    lastRun = rateLimits.get(\"checkIsCatOrDogImage\", 0)\n    now = time.time()\n    if now - lastRun > rateLimitPeriod:\n        rateLimits[\"checkIsCatOrDogImage\"] = now\n    else:\n        raise Exception(\n            f\"Rate limit exceeded. One request per {rateLimitPeriod} seconds.\"",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/adtools.py:40-77"
    },
    "1477": {
        "file_id": 121,
        "content": "This function checks if an image is of a cat or dog. It also includes rate limiting to prevent overloading the server by allowing only one request per 5 seconds. The threshold parameter determines how close in time two users must respond for their answers to be connected. Debug mode can be enabled to provide additional information during testing.",
        "type": "comment"
    },
    "1478": {
        "file_id": 121,
        "content": "        )\n    try:\n        import requests\n        # img_bytes = requests.get(image_url, \n        # # timeout=download_timeout\n        # # also some damn timeout. fuck.\n        # ).content\n        # import cv2\n        # import numpy as np\n        # import numpy_serializer\n        # nparr = np.fromstring(img_bytes, np.uint8)\n        # img_np = cv2.imdecode(nparr, flags=1)  # cv2.IMREAD_COLOR in OpenCV 3.1\n        # np_array_bytes = numpy_serializer.to_bytes(img_np)\n        api_url = f\"http://localhost:{port}/{endpoint}\"\n        params = dict(isBytes=False)\n        # params = dict(isBytes=True)\n        before_request = time.time()\n        if debug:\n            print(\"DOG_CAT REQ SENT\",file=sys.stderr)\n        r = requests.post(\n            api_url, \n            data={\"image\":image_url}, \n            # data={\"image\": np_array_bytes}, \n            # timeout=timeout,\n            # oh shit.\n            params=params, proxies=None\n        )\n        result = r.json()\n        after_request = time.time()\n        if debug:\n            print(\"DOG_CAT REQ RECV\",file=sys.stderr)",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/adtools.py:78-110"
    },
    "1479": {
        "file_id": 121,
        "content": "This code is making a request to an API endpoint using the requests library. It attempts to send the image data as bytes or content depending on the value of `isBytes` parameter. If debug is set, it prints messages for request sending and receiving. The time taken for the request is also recorded.",
        "type": "comment"
    },
    "1480": {
        "file_id": 121,
        "content": "            print(\"RESULT?\", file=sys.stderr)\n            print(result, file=sys.stderr)\n        if debug:\n            print(f\"DOG/CAT SERVER REQUEST TAKING TIME: {(after_request-before_request):.3f}s\",file=sys.stderr)\n        for species in result:\n            name = species[\"identity\"]\n            if name in [\"cat\", \"dog\"]:\n                conf = species[\"confidence\"]\n                if conf > threshold:\n                    if debug:\n                        print(\"CAT/DOG RESULT:\", name, file=sys.stderr)\n                    return name\n    except:\n        import traceback\n        traceback.print_exc()\n        print(\"Error when downloading and detecting image content if is cat or dog\")\n    return None\ndef checkCatOrDog(Content: str):\n    # cat? dog? None?\n    for key, elems in catDogElemDict.items():\n        for elem in elems:\n            if elem in Content.lower():\n                return key\n    return None\n# pip3 install python_cypher\n# pip3 install neo4j\nfrom functools import lru_cache\nNEO4J_PORT = 7687\n@lru_cache(maxsize=1)",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/adtools.py:111-148"
    },
    "1481": {
        "file_id": 121,
        "content": "Function `checkCatOrDog` checks if the given input string contains words related to cat or dog and returns \"cat\" or \"dog\" accordingly, otherwise it returns None. The function also utilizes `catDogElemDict`.\n\nThe code snippet uses an exception handling mechanism where if any error occurs during image downloading and content detection, it prints the error message and returns None. It imports traceback for printing the exception details. \n\nIt imports the necessary libraries for working with Neo4j: pip3 install python_cypher and pip3 install neo4j.\n\nThe `@lru_cache(maxsize=1)` decorator is used to cache the results of a function call, which can improve performance by avoiding redundant computations for the same inputs. In this case, it's applied to some function (not shown in the code snippet).",
        "type": "comment"
    },
    "1482": {
        "file_id": 121,
        "content": "def getNeo4jDriver(\n    address=\"neo4j://localhost:{}\".format(NEO4J_PORT),\n    username=\"neo4j\",\n    password=\"kali\",\n    debug=False,\n):  # so we bruteforced it. thanks to chatgpt.\n    from neo4j import GraphDatabase\n    driver = GraphDatabase.driver(address, auth=(username, password))\n    if debug:\n        print(\"login successful: username:%s password:%s\" % (username, password))\n    return driver\nfrom pypher import Pypher\ndef makeCatOrDogConnections(\n    group_id: str,\n    sender_id: str,\n    cat_or_dog: str,\n    debug: bool = False,\n    delete: bool = False,\n):  # whatever.\n    # Create a new Pypher object\n    with getNeo4jDriver().session() as session:\n        p = Pypher()\n        if delete:\n            p.MATCH.node(\"n1\", labels=\"qq_group\", group_id=group_id)\n            p.MATCH.node(\"n2\", labels=\"qq_user\", user_id=sender_id)\n            p.MATCH.node(\"n3\", labels=\"ad_keyword\", keyword=cat_or_dog)  # fine.\n            p.DETACHDELETE.node(\"n1\").DETACHDELETE.node(\"n2\").DETACHDELETE.node(\"n3\")\n        # Use the MERGE clause to create the nodes if they do not already exist",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/adtools.py:149-182"
    },
    "1483": {
        "file_id": 121,
        "content": "The function `getNeo4jDriver()` returns a Neo4j driver with the provided address, username, password, and debug option. The function `makeCatOrDogConnections()` uses Pypher to create or delete connections between nodes based on group_id, sender_id, cat_or_dog, debug, and delete options. It establishes a Neo4j session using the driver returned by `getNeo4jDriver()`.",
        "type": "comment"
    },
    "1484": {
        "file_id": 121,
        "content": "        else:\n            p.MERGE.node(\"n1\", labels=\"qq_group\", group_id=group_id)\n            p.MERGE.node(\"n2\", labels=\"qq_user\", user_id=sender_id)\n            p.MERGE.node(\"n3\", labels=\"ad_keyword\", keyword=cat_or_dog)\n            # Use the MERGE clause to create the relationship between the nodes if it does not already exist\n            p.MERGE.node(\"n1\").rel_out(\"r\", labels=\"includes\").node(\"n2\")\n            p.MERGE.node(\"n2\").rel_out(\"r1\", labels=\"talks_of\").node(\"n3\")\n        # Generate the Cypher query string\n        query = str(p)\n        if debug:\n            print(\"QUERY?\", query)\n            print(\"QUERY TYPE?\", type(query))\n            # how to roll back?\n        # Execute the query using the Neo4j driver\n        result = session.run(query, parameters=p.bound_params)\n        if debug:\n            print(\"RESULT?\", result)\nfrom lazero.network.checker import waitForServerUp\nBILIBILI_RECOMMENDATION_SERVER_PORT = 7341\nwaitForServerUp(BILIBILI_RECOMMENDATION_SERVER_PORT, \"bilibili recommendation server\")",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/adtools.py:183-208"
    },
    "1485": {
        "file_id": 121,
        "content": "The code checks if a user is in a group and creates necessary nodes and relationships using the MERGE clause. It generates a Cypher query, prints it for debugging purposes (if enabled), and executes it with the Neo4j driver. Additionally, it waits for the BILIBILI_RECOMMENDATION_SERVER to be up before running the code.",
        "type": "comment"
    },
    "1486": {
        "file_id": 121,
        "content": "import requests\n# import random\nfrom bilibili_api.search import bilibiliSearchParams\n# you might just want some delay when searching online.\nfrom typing import Literal\ndef getCatOrDogAd(\n    cat_or_dog: str,\n    server: str = \"http://localhost:{}\".format(BILIBILI_RECOMMENDATION_SERVER_PORT),\n    debug: bool = False,\n    method: Literal[\"bm25\", \"online\"] = \"bm25\",\n):\n    # how do we get one? by label? by category? by name?\n    url = server + \"/searchUserVideos\"\n    # queryWord = catDogQueryWords.get(cat_or_dog,None)\n    queryWords = catDogElemDict.get(cat_or_dog, None)\n    try:\n        assert queryWords is not None\n    except Exception as e:\n        print(\"Could not find topic with keyword:\", cat_or_dog)\n        raise e\n    animalTid = bilibiliSearchParams.video.tids.动物圈.tid\n    # myTids = {\"cat\":bilibiliSearchParams.video.tids.动物圈.喵星人,\"dog\":bilibiliSearchParams.video.tids.动物圈.汪星人}\n    # myTid = myTids[cat_or_dog]\n    # queryWord = random.choice([\"\",random.choice(queryWords)]) # you can still have things without query",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/adtools.py:210-240"
    },
    "1487": {
        "file_id": 121,
        "content": "This code defines a function called getCatOrDogAd that searches for user videos related to cats or dogs. It takes the type of animal as input, along with server details, search method, and debug flag as optional parameters. The function constructs the URL for the API call and retrieves the query words based on the animal type. It then performs an assertion to ensure that valid query words are provided. If not, it raises an exception with a relevant error message.",
        "type": "comment"
    },
    "1488": {
        "file_id": 121,
        "content": "    # queryWord = \" \".join(queryWords)\n    # queryWord = {\"cat\":'猫',\"dog\":'狗'}[cat_or_dog] # Whatever. fuck it. replace it with semantic search later? or you use multiple searches.\n    # you cannot just ignore the queryWord in bm25\n    responses = []\n    for queryWord in queryWords:\n        # data = {\"query\":queryWord,\"tid\":random.choice([0]*20+[animalTid]*10+[myTid]*5)} # you can specify my user id. you may make that empty?\n        data = {\"query\": queryWord, \"tid\": animalTid, \"method\": method}\n        if debug:\n            print(\"POSTING DATA:\")\n            rich.print(data)\n        r = requests.post(url, json=data)\n        response = r.json()\n        for elem in response:\n            if elem not in responses:\n                responses.append(elem)\n    responses.sort(key=lambda elem: -elem.get(\"pubdate\", -1))\n    if debug:\n        print(\"RESPONSES?\")\n        rich.print(responses)\n    return responses  # select one such response.\nfrom ad_template_2_functional import (\n    TMP_DIR_PATH,\n    generateBilibiliVideoAd,",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/adtools.py:241-267"
    },
    "1489": {
        "file_id": 121,
        "content": "The code fetches relevant data for multiple query words, posts the data to a URL, filters and sorts the responses based on the publication date, and returns the filtered responses. The debug option allows printing of the posted data and response for troubleshooting purposes.",
        "type": "comment"
    },
    "1490": {
        "file_id": 121,
        "content": "    getAdLock,\n)  # use the lock during sending the ad.\ndef generateAdFromVideoInfo(videoInfo):  # which style you want the most?\n    # selected video info.\n    bvid, pic, title = videoInfo[\"bvid\"], videoInfo[\"pic\"], videoInfo[\"title\"]\n    import os\n    extension = pic.split(\"?\")[0].split(\".\")[-1]\n    cover_download_path = os.path.join(TMP_DIR_PATH, \"video_cover.{}\".format(extension))\n    (\n        output_path,\n        output_standalone,\n        output_masked_path,\n    ), link = generateBilibiliVideoAd(bvid, title, pic, cover_download_path)\n    return (\n        output_path,\n        output_standalone,\n        output_masked_path,\n    ), link  # which one you want?\nfrom botoy import Action\nfrom typing import Literal\nimport random\n# you can send it to qq user, qq group, channels, qzone, email\n# if send by json, qzone, channels, email that will be ajax. set up another server to handle ajax requests.\ndef getBase64StringFromFilePath(\n    filePath: str, binary: bool = False, encoding: str = \"utf-8\"\n):\n    import os\n    assert os.path.isfile(filePath)",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/adtools.py:268-305"
    },
    "1491": {
        "file_id": 121,
        "content": "This function `generateAdFromVideoInfo` takes a `videoInfo` dictionary as input, extracts the required fields (bvid, pic, and title), downloads the cover image if necessary, and generates three ad paths (output_path, output_standalone, output_masked_path) along with an associated link. These ads can be sent to various platforms like QQ user, group, channels, Qzone, or email. If sending via JSON, Qzone, channels, or email, a separate server is required to handle AJAX requests. The function `getBase64StringFromFilePath` converts a file path into a Base64 string, which can be used for sending images.",
        "type": "comment"
    },
    "1492": {
        "file_id": 121,
        "content": "    import base64\n    with open(filePath, \"rb\") as img_file:\n        b64_string = base64.b64encode(img_file.read())\n    if not binary:\n        b64_string = b64_string.decode(encoding)\n    return b64_string\ndef sendCatOrDogAdToQQGroup(\n    group_id: str,\n    cat_or_dog: str,\n    action: Action,\n    style: Literal[\n        \"single_qr\", \"text_link\", \"image_link\", \"json\", \"random\", \"random_not_json\"\n    ] = \"random\",\n    recentLimits: int = 20,\n):  # many things not implemented yet.\n    totalStyles = [\n        \"single_qr\",\n        \"text_link\",\n        \"image_link\",\n        \"json\",\n        \"random\",\n        \"random_not_json\",\n    ]\n    notImplementedStyles = [\n        \"image_link\",\n        \"json\",\n    ]  # if json, first we search for avaliable json messages, if missing, we search for android devices, unlock the device then send the message. if failed, use other non-json methods.\n    usableStyles = [s for s in totalStyles if s not in notImplementedStyles]\n    nonRandomStyles = [s for s in usableStyles if not s.startswith(\"random\")]",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/adtools.py:306-339"
    },
    "1493": {
        "file_id": 121,
        "content": "Function takes a file path, encodes its content in base64, and returns the string. It does not specify encoding type if binary is False.\nFunction sends a cat or dog ad to a QQ group with multiple available styles, but some features are currently unimplemented.",
        "type": "comment"
    },
    "1494": {
        "file_id": 121,
        "content": "    nonRandomNorJsonStyles = [s for s in nonRandomStyles if s is not \"json\"]\n    def noSuchStyle(style: str):\n        raise NotImplementedError(\"Not implemented style: '{}'\".format(style))\n    if style in notImplementedStyles:\n        noSuchStyle(style)\n    if style == \"random\":\n        style = random.choice(nonRandomStyles)\n    elif style == \"random_not_json\":\n        style = random.choice(nonRandomNorJsonStyles)\n    responses = getCatOrDogAd(cat_or_dog)\n    success = False\n    with getAdLock():\n        if responses != []:\n            videoInfo = random.choice(responses[:recentLimits])\n            title_text = videoInfo[\"title\"]\n            (\n                output_path,\n                output_standalone,\n                output_masked_path,  # what is this?\n            ), link = generateAdFromVideoInfo(videoInfo)\n            if style == \"single_qr\":\n                content = \"\"\n                picturePath = output_path\n            elif style == \"text_link\":\n                # you must censor that.\n                from censorApis import censorReply",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/adtools.py:340-370"
    },
    "1495": {
        "file_id": 121,
        "content": "This code snippet checks the specified style for an ad and generates different types of ads based on the style. It handles unimplemented styles, selects random non-JSON styles, and generates outputs (paths, links) using a helper function generateAdFromVideoInfo(). It also mentions censoring a reply using another function censorReply() from censorApis module.",
        "type": "comment"
    },
    "1496": {
        "file_id": 121,
        "content": "                title_text = censorReply(title_text)\n                content = \"观看视频:\\n{}\\n{}\".format(link, title_text)\n                picturePath = output_standalone\n            else:\n                noSuchStyle(style)\n            picBase64Buf = getBase64StringFromFilePath(picturePath)\n            sendMessageStatus = action.sendGroupPic(\n                group=int(group_id), content=content, picBase64Buf=picBase64Buf\n            )\n            # stderrPrint(\"SENT AD STATUS:\",sendMessageStatus)\n            success = (\n                sendMessageStatus.get(\"ErrMsg\", None) is \"\"\n                or sendMessageStatus.get(\"Msg\", None) is \"\"\n                or sendMessageStatus.get(\"Ret\", None) is 0\n            )\n    return success",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/adtools.py:372-388"
    },
    "1497": {
        "file_id": 121,
        "content": "The code censors reply text and creates a message with a video link and title. If no style is provided, it uses noSuchStyle function. It then sends a group picture message using the sendGroupPic action and returns whether the message was sent successfully based on the response's error message or return value.",
        "type": "comment"
    },
    "1498": {
        "file_id": 122,
        "content": "/tasks/qq/qq_red_packet_collect/test_qrcode_insert_replace.py",
        "type": "filepath"
    },
    "1499": {
        "file_id": 122,
        "content": "This code imports a function to remove and insert QR codes, then tests it with two image inputs and a specific qrcode_path. It displays the output images in a window before exiting.",
        "type": "summary"
    }
}