{
    "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_xml_qq.py:36-41": "QQ Music File Sharing XML Message",
    "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_xml_qq.py:42-51": "XML POST Request with QQ and Funcname Parameters",
    "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img.py": "QQ Image Upload Python Script",
    "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img.py:1-25": "Python QQ Image Upload",
    "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img.py:26-68": "Python Script for Image Upload and Processing",
    "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img.py:69-82": "QQ Session Data and Tokens in Header",
    "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img.py:83-112": "POST Request with Headers",
    "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img2.py": "Binary Uploads with JSON Conversion",
    "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img2.py:1-25": "Binary Image Uploader with Requests",
    "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img2.py:110-112": "POST Request with Files in Python",
    "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img2.py:26-68": "Upload Image with Cookies and Headers",
    "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img2.py:69-109": "HTTP Header List Generation",
    "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/view_bilibili_qq_share_xml.sh": "Analyzing Bilibili QQ Share XML Network Traffic",
    "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/view_qq.sh": "Analyzing QQ Logs with Mitmproxy",
    "/tests/bilibili_video_recommendation_server/zbar_detect_qrcode.py": "Detecting and Decoding QR Codes with Pyzbar",
    "/tests/bilibili_video_recommendation_server/zbar_detect_qrcode.py:2-36": "QR Code Detection Function with Pyzbar",
    "/tests/bilibili_video_recommendation_server/zbar_detect_qrcode.py:37-46": "ZBar QR Code Detection for Bilibili",
    "/tests/black_autopep8_ast_parser_formatter_skipexception/format_functional.py": "Black + Autopep8 Python Formatter",
    "/tests/black_autopep8_ast_parser_formatter_skipexception/format_test.sh": "Automating Python Formatting with Black & Autopep8",
    "/tests/black_autopep8_ast_parser_formatter_skipexception/test.py": "Unrelated Fragmented Code",
    "/tests/blur_image_detection_mask/BlurDetection_install/test.py": "Blur Detection and Masking Toolkit",
    "/tests/blur_image_detection_mask/BlurDetection_install/test.py:1-28": "Blur Detection and Watermark Removal",
    "/tests/blur_image_detection_mask/BlurDetection_install/test.py:127-128": "Bounding Box Contour Detection",
    "/tests/blur_image_detection_mask/BlurDetection_install/test.py:29-57": "Blur Detection and Inpainting Algorithm",
    "/tests/blur_image_detection_mask/BlurDetection_install/test.py:58-93": "Contour-based Image Detection",
    "/tests/blur_image_detection_mask/BlurDetection_install/test.py:94-126": "Contour Detection and Bounding Box Calculation",
    "/tests/blur_image_detection_mask/test_blur_detection.py": "Blur Detection Mask Test",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/download_sample.sh": "Bilibili Video Download with Yt-Dlp",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/generate_random_clip_lengths.py": "Random Clip Lengths with Truncated Gaussian",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/get_scene_cuts.sh": "Automated Video Scene Splitting",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/load_data_do_experiment.py": "Efficient Video Scene Extraction",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/load_data_do_experiment.py:1-46": "Calculating Video Scene Duration",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/load_data_do_experiment.py:101-127": "Shuffle and Filter Scene Duration",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/load_data_do_experiment.py:128-150": "Checking Neighbor Indices with getNeighborIndexs",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/load_data_do_experiment.py:151-180": "Neighbor Checking Algorithm",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/load_data_do_experiment.py:181-205": "Acceptable Candidate Threshold",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/load_data_do_experiment.py:206-208": "Ban and Shuffle Neighbors",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/load_data_do_experiment.py:47-73": "Optimized FFmpeg Command Generator",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/load_data_do_experiment.py:74-99": "Efficient Video Scene Filtering",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/preview_clips.sh": "Pause-Play Video Scene Extraction",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/preview_clips.sh:1-31": "Auto-Playing Video Clips with Pauses",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/preview_clips.sh:32-63": "Automate Dog Video Scene Analysis",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/preview_clips.sh:64-95": "Preview Video Clips with Delayed Commands",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/preview_clips.sh:96-126": "Automated Video Scene Extraction with ffplay",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/render.sh": "Extract 3-sec Video Clips with FFmpeg",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/render.sh:1-13": "Extract & Save Video Clips in Dog Video with BGM",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/render.sh:14-26": "Split Video Clips with FFmpeg",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/render.sh:27-39": "Extract Separate Video Scenes with FFmpeg",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/render.sh:40-52": "Extract Video Segments with FFmpeg",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/render.sh:53-55": "Extract Three 3-Second Segments from Video Using FFmpeg",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/viewRenderResult.sh": "Sequential Video Playback Script",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/viewer.sh": "Sequential FLV Player & Exit",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/viewer.sh:1-24": "Sequential Video Player",
    "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/viewer.sh:25-34": "Auto-Play and Exit FLV Files with Pauses",
    "/tests/chatgpt_multiagent_agent_product_line_multimodal_langchain_experiments/README.md": "Multi-Agent ChatGPT Bot with URL Extraction",
    "/tests/chatgpt_multiagent_agent_product_line_multimodal_langchain_experiments/test_chatgpt_cn_api.py": "Streamlined ChatGPT API Integration",
    "/tests/chatgpt_multiagent_agent_product_line_multimodal_langchain_experiments/test_chatgpt_cn_api.py:1-37": "ChatGPT API Wrapper for Development",
    "/tests/chatgpt_multiagent_agent_product_line_multimodal_langchain_experiments/test_chatgpt_cn_api.py:38-47": "ChatGPT API Test: Sending and Receiving Messages",
    "/tests/chatgpt_multiagent_agent_product_line_multimodal_langchain_experiments/test_url_repair_extract_trace_media_source.py": "URL Repair and Extraction Tool",
    "/tests/chatgpt_multiagent_agent_product_line_multimodal_langchain_experiments/test_url_repair_extract_trace_media_source.py:115-118": "Printing Selected URLs",
    "/tests/chatgpt_multiagent_agent_product_line_multimodal_langchain_experiments/test_url_repair_extract_trace_media_source.py:2-42": "URL Recovery and Extraction Tool",
    "/tests/chatgpt_multiagent_agent_product_line_multimodal_langchain_experiments/test_url_repair_extract_trace_media_source.py:43-69": "Extract and Select YouTube URLs",
    "/tests/chatgpt_multiagent_agent_product_line_multimodal_langchain_experiments/test_url_repair_extract_trace_media_source.py:70-114": "URL Repair and Extraction Algorithm",
    "/tests/chatterbot_test/README.md": "Switch Chatterbot for Levenshtein Bot",
    "/tests/chatterbot_test/test.py": "Chinese ChatBot Training and Testing",
    "/tests/chatterbot_test/test.py:1-40": "Chinese ChatBot Setup and Training",
    "/tests/chatterbot_test/test.py:41-72": "Training and Testing Chinese Chatbot",
    "/tests/check_json_update.py": "Testing JSON Update Functionality",
    "/tests/conversation_talk_apis/api_tests.py": "Weibo Chatbot API Tests",
    "/tests/conversation_talk_apis/api_tests.py:1-37": "API-Powered Chat Functions for Atri and QingYunKe",
    "/tests/conversation_talk_apis/api_tests.py:100-103": "Calling checkApi with Chatbot Parameters",
    "/tests/conversation_talk_apis/api_tests.py:38-69": "Weibo API Direct Messaging in Python",
    "/tests/conversation_talk_apis/api_tests.py:70-99": "Weibo/OwnThink API Conversation Test",
    "/tests/cpm_chinese_chitchat_model_gpt2/init.sh": "GPT2 Chitchat Model Cloning",
    "/tests/cpm_chinese_chitchat_model_gpt2/test.sh": "GPT2 Chitchat RAM Test & Model Run",
    "/tests/dapp_ethereum_python_crypto/README.md": "Dummy Crypto for AGI Testing",
    "/tests/dapp_ethereum_python_crypto/test.py": "Ethereum Dapp Python Test",
    "/tests/dapp_ethereum_python_crypto/test.py:1-26": "Connecting to Local Ethereum Node",
    "/tests/dapp_ethereum_python_crypto/test.py:27-52": "Ethereum Mainnet Crypto Transaction Test",
    "/tests/dog_cat_demo_not_for_test.mdl": "Video Properties and Configurations",
    "/tests/dog_cat_demo_not_for_test.mdl:1-33": "Video File Properties and TODO Notes",
    "/tests/dog_cat_demo_not_for_test.mdl:104-138": "Media List with File Properties",
    "/tests/dog_cat_demo_not_for_test.mdl:139-173": "Video File Properties List",
    "/tests/dog_cat_demo_not_for_test.mdl:174-208": "Video File Details List",
    "/tests/dog_cat_demo_not_for_test.mdl:209-243": "Video Parameters List and Storage Directory",
    "/tests/dog_cat_demo_not_for_test.mdl:244-278": "Video Metadata Code Explained",
    "/tests/dog_cat_demo_not_for_test.mdl:279-313": "Video File List and Properties",
    "/tests/dog_cat_demo_not_for_test.mdl:314-321": "Dual Video Configuration: Speed, Silent, and Cut Points",
    "/tests/dog_cat_demo_not_for_test.mdl:34-68": "Video Properties Listing Code",
    "/tests/dog_cat_demo_not_for_test.mdl:69-103": "Video Properties Listing in \"/dev/shm/medialang/online\" Directory",
    "/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/cron_update_cookies_stored_under_root_home.py": "Update Stored Cookies for Browsers",
    "/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/test_bilibili.sh": "Bilibili Video Portion Downloader",
    "/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/test_bilibili.sh:1-26": "Partial Download Bilibili Videos with YT-DLP",
    "/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/test_bilibili.sh:26-42": "Partial Bilibili Download with yt-dlp",
    "/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/test_bilibili.sh:44-59": "Efficient Bilibili Video Partial Download",
    "/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/test_bilibili.sh:60-75": "Bilibili Playlist Metadata with yt-dlp",
    "/tests/dump_python_dependencies/dump.py": "Log Python Dependencies",
    "/tests/editly_test_video_render_with_bgm/test.sh": "Headless Linux Test Environment for Editly Video Render",
    "/tests/elastic_search_engine/README.md": "Memory-Efficient Search Engine: Meilisearch Alternative",
    "/tests/english_chinese_mixing_spliter/default.yaml": "GAN-based App Config: Image/Video Input-Output",
    "/tests/english_chinese_mixing_spliter/english_grepper.py": "Python Mix Language Splitter",
    "/tests/english_chinese_mixing_spliter/english_grepper.py:1-32": "Regex-based Search and Number List Formatting Functions",
    "/tests/english_chinese_mixing_spliter/english_grepper.py:33-68": "English-Chinese Text Tokenizer",
    "/tests/english_chinese_mixing_spliter/english_grepper.py:69-90": "English-Chinese Mixing Splitter",
    "/tests/english_chinese_mixing_spliter/paddlebobo_paddletools_tts.py": "Multi-Language TTS Synthesis",
    "/tests/english_chinese_mixing_spliter/paddlebobo_paddletools_tts.py:1-35": "Initializing Models and Libraries",
    "/tests/english_chinese_mixing_spliter/paddlebobo_paddletools_tts.py:119-141": "Dual Language TTS Setup",
    "/tests/english_chinese_mixing_spliter/paddlebobo_paddletools_tts.py:142-164": "PaddleTTS: English-Chinese TTS Synthesis Model",
    "/tests/english_chinese_mixing_spliter/paddlebobo_paddletools_tts.py:165-187": "English-Chinese TTS System with Missing Chinese Tone Information",
    "/tests/english_chinese_mixing_spliter/paddlebobo_paddletools_tts.py:188-204": "Chinese TTS using Mel Spectrogram and WAV Conversion",
    "/tests/english_chinese_mixing_spliter/paddlebobo_paddletools_tts.py:205-219": "Audio File Concatenator and Deleter",
    "/tests/english_chinese_mixing_spliter/paddlebobo_paddletools_tts.py:35-69": "Paddlebobo TTS Models Dictionary",
    "/tests/english_chinese_mixing_spliter/paddlebobo_paddletools_tts.py:70-91": "TTSExecutor Initialization: Retrieving Models and Paths",
    "/tests/english_chinese_mixing_spliter/paddlebobo_paddletools_tts.py:92-118": "Loading Pre-Trained Models for ASR System",
    "/tests/english_chinese_mixing_spliter/sample_strings.txt": "Mixed-Language Test Strings",
    "/tests/english_chinese_mixing_spliter/test_tts.py": "TTS Tool for Multilingual Audio Generation",
    "/tests/english_chinese_mixing_spliter/test_tts.py:1-25": "English-Chinese Mixing Spliter: TTS Executor Test",
    "/tests/english_chinese_mixing_spliter/test_tts.py:26-32": "English TTS Integration",
    "/tests/english_without_space_spliting/init.sh": "Fetch English Words List",
    "/tests/english_without_space_spliting/test.py": "Reconstructing Text with Frequency",
    "/tests/english_without_space_spliting/test.py:1-30": "Zipf's Law and Dynamic Programming for Word Frequency",
    "/tests/english_without_space_spliting/test.py:31-50": "Inferring Spaces from Cost Values",
    "/tests/experiment_iterate_and_merge_alike_text_regions.py": "Iterate, Merge, and Compare Coordinates",
    "/tests/experiment_iterate_and_merge_alike_text_regions.py:1-51": "Finite State Machine Encoding",
    "/tests/experiment_iterate_and_merge_alike_text_regions.py:105-107": "Copy and Append Items in Sample List",
    "/tests/experiment_iterate_and_merge_alike_text_regions.py:52-104": "Merge Similar Text Regions",
    "/tests/ffmpeg_audio_volume_detect_adjust/test.py": "Automated Audio Adjustment for Testing",
    "/tests/ffmpeg_audio_volume_detect_adjust/test.py:1-28": "Black Video Generator with Audio Duration",
    "/tests/ffmpeg_audio_volume_detect_adjust/test.py:29-65": "Video with Muted Audio using FFmpeg",
    "/tests/ffmpeg_audio_volume_detect_adjust/test.py:66-75": "Audio Volume Detection & Adjustment Test",
    "/tests/ffmpeg_audio_volume_detect_adjust/test_get_audio_length.py": "Audio Duration Retriever",
    "/tests/ffmpeg_audio_volume_detect_adjust/test_get_media_bitrate.py": "Media Bitrate Extractor",
    "/tests/ffmpeg_audio_volume_detect_adjust/test_output_file_error.py": "FFmpeg Audio Normalization and Clipping",
    "/tests/ffmpeg_audio_volume_detect_adjust/test_output_file_error.py:1-23": "Volume Detection and Adjustment in FFmpeg",
    "/tests/ffmpeg_audio_volume_detect_adjust/test_output_file_error.py:24-32": "Audio Clipping Warning and Normalization",
    "/tests/ffmpeg_python_test/test.py": "Python FFmpeg Video Processing and Concatenation",
    "/tests/ffmpeg_python_test/test.py:1-30": "Trim, Crop, and Output Videos with FFmpeg",
    "/tests/ffmpeg_python_test/test.py:115-122": "FFmpeg Audio Concatenation",
    "/tests/ffmpeg_python_test/test.py:31-53": "Dynamic Crop and Zoom with FFmpeg",
    "/tests/ffmpeg_python_test/test.py:53-66": "FFmpeg Python: Cropping and Resizing Video Streams",
    "/tests/ffmpeg_python_test/test.py:68-96": "Python FFmpeg Merger Tool",
    "/tests/ffmpeg_python_test/test.py:97-114": "Overlay Delogo with FFMPEG Python",
    "/tests/generator_yield_from_python_extract_element_one_by_one/test.py": "Generators and Lambda: Iterative Resource Management",
    "/tests/generator_yield_from_python_extract_element_one_by_one/test.py:1-35": "Generators with Lambda: Streamline Iteration and Cleanup",
    "/tests/generator_yield_from_python_extract_element_one_by_one/test.py:38-50": "Testing Generator Yield from Python: Temporary File Handling",
    "/tests/hmm_test_speech_recognization_time_series/pomegranate_test.py": "Pomegranate: Advanced HMM Library",
    "/tests/hmm_test_speech_recognization_time_series/seqlearn_test.py": "Time-Series Speech Recognition via Structured Perceptron",
    "/tests/hmm_test_speech_recognization_time_series/test.py": "Gaussian HMM Time Series Speech Recognition",
    "/tests/hmm_test_speech_recognization_time_series/test.py:1-24": "Gaussian HMM Model for Speech Recognition",
    "/tests/hmm_test_speech_recognization_time_series/test.py:25-38": "Lower Score, Better Model",
    "/tests/hyper_param_optimization/README.md": "Hyperopt Library Guide",
    "/tests/hyper_param_optimization/optimize_suggest.py": "Hyperopt TPE: Optimizing Functions Efficiently",
    "/tests/hyper_param_optimization/test.py": "Hyperopt-Driven Hyperparameter Optimization",
    "/tests/hyper_param_optimization/test.py:1-24": "Hyperopt Library for Parameter Optimization",
    "/tests/hyper_param_optimization/test.py:25-40": "Hyperparameter Search with Hyperopt & Pyll",
    "/tests/idlefish_闲鱼_xianyu_spider_scraper_taobao_video_guangguang/README.md": "Malicious File Warning: Wine Software",
    "/tests/image_quality_tests/README.md": "Optimizing Image Quality for Model Accuracy",
    "/tests/image_quality_tests/pybrisque_init.sh": "Pybrisque Dependencies Installation",
    "/tests/image_quality_tests/pybrisque_test.py": "Fast Image Quality Assessment with PyBrisque",
    "/tests/image_quality_tests/pyiqa_inference.py": "Pyiqa Image Quality Benchmarking",
    "/tests/image_quality_tests/pyiqa_inference.py:1-26": "PyIQA Inference Demo",
    "/tests/image_quality_tests/pyiqa_inference.py:27-53": "Image Quality Assessment Model Setup",
    "/tests/image_quality_tests/pyiqa_inference.py:55-85": "Image Quality Scorer with Pre-Trained Model",
    "/tests/image_quality_tests/pyiqa_inference.py:86-99": "Time-Based Image Quality Algorithm Comparison",
    "/tests/image_quality_tests/pyiqa_test.py": "Effective Metric Filtering Confusion",
    "/tests/image_quality_tests/t_pyiqa2.sh": "Pyiqa Test Piping",
    "/tests/image_quality_tests/test_image_quality.py": "Frame-by-Frame BRISQUE Image Quality Test",
    "/tests/image_quality_tests/test_pyiqa.sh": "Image Quality Test with PyIQA Script",
    "/tests/image_quality_tests/tiq2.py": "BRISQUE-Based Image Quality Assessment",
    "/tests/image_quality_tests/tiq2.py:1-40": "BRISQUE Algorithm for Image Quality Assessment",
    "/tests/image_quality_tests/tiq2.py:41-50": "OpenCV GUI Image Display",
    "/tests/interval_set_math_operations/continual_less_sympy.py": "SymPy-Driven Interval Operations",
    "/tests/interval_set_math_operations/continual_less_sympy.py:1-33": "Merging Intervals with SymPy",
    "/tests/interval_set_math_operations/continual_less_sympy.py:35-55": "Interval Boundary Tracking Algorithm",
    "/tests/interval_set_math_operations/continual_less_sympy.py:56-78": "Continual Less Sympy Test",
    "/tests/interval_set_math_operations/continual_less_sympy.py:79-94": "Interval Set Math: Continual Less SymPy Update",
    "/tests/interval_set_math_operations/continual_sympy.py": "Sympy-Driven Interval Operations",
    "/tests/interval_set_math_operations/continual_sympy.py:1-33": "Sympy Interval Set Operations",
    "/tests/interval_set_math_operations/continual_sympy.py:114-127": "Interval Set Difference and Union Calculator",
    "/tests/interval_set_math_operations/continual_sympy.py:35-66": "Sympy-Aided Interval Set Math Operations",
    "/tests/interval_set_math_operations/continual_sympy.py:68-92": "Sympy Interval Set Reverse Indexing",
    "/tests/interval_set_math_operations/continual_sympy.py:94-113": "Interval Set Math Operations Revisit",
    "/tests/jina_deploy_free_gpu_cpu/README.md": "Test Jina's Free GPU/CPU Usage",
    "/tests/jina_deploy_free_gpu_cpu/hello-jina/client.py": "Jina Client for Remote Processing",
    "/tests/jina_deploy_free_gpu_cpu/hello-jina/executor1/config.yml": "MyExecutor Config",
    "/tests/jina_deploy_free_gpu_cpu/hello-jina/executor1/executor.py": "Custom Executor for Jina Deployment",
    "/tests/jina_deploy_free_gpu_cpu/hello-jina/executor1/executor.py:1-29": "Custom Executor in Jina",
    "/tests/jina_deploy_free_gpu_cpu/hello-jina/executor1/executor.py:30-37": "Command Execution with Subprocess and Error Handling",
    "/tests/jina_deploy_free_gpu_cpu/hello-jina/flow.yml": "Jina Flow Deployment with Toy Executor",
    "/tests/jina_deploy_free_gpu_cpu/random_shell/README.md": "Shell to Jina Transition Script",
    "/tests/jina_deploy_free_gpu_cpu/random_shell/config.yml": "Configure Random Shell Executor",
    "/tests/jina_deploy_free_gpu_cpu/random_shell/executor.py": "Random Shell Executor for Jina Deployment",
    "/tests/jina_deploy_free_gpu_cpu/random_shell/executor.py:1-23": "Deploy Executor on Jina Platform",
    "/tests/jina_deploy_free_gpu_cpu/random_shell/executor.py:24-42": "Jina Executor Types Demo",
    "/tests/jina_deploy_free_gpu_cpu/random_shell/executor.py:42-63": "Command Executor Class",
    "/tests/jina_deploy_free_gpu_cpu/random_shell/flow.yml": "Jina Flow with Random Shell and GPU",
    "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/README.md": "Jina Framework Shell Transition",
    "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/client.py": "Jina Semantic Search Client",
    "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/config.yml": "Multilingual Semantic Search Encoder",
    "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/deploy_to_jina_cloud.sh": "Deploy Jina Cloud App",
    "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/executor.py": "Multilingual Semantic Search Encoder Executor",
    "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/executor.py:1-28": "Multilingual Semantic Search Encoder Executor",
    "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/executor.py:29-31": "Error Handling in Semantic Search Encoder",
    "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/flow.yml": "Jina Flow with Multilingual Encoder",
    "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/push_to_jina_hub.sh": "Push to Jina Hub",
    "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/requirements.txt": "Python Packages for Semantic Search",
    "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/test.py": "Deploying Semantic Search Encoder Multilingual",
    "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/test.sh": "Setting JINA MP Start Method for Semantic Search",
    "/tests/jina_deploy_free_gpu_cpu/semantic_search_encoder_multilingual/test_client.py": "Test Jina Client with Multilingual Encoder",
    "/tests/jina_multimodal_cross_modal_search_examples_apps/get_jina_hub_list.py": "Jina Hub Executors Scraper",
    "/tests/jina_multimodal_cross_modal_search_examples_apps/get_jina_hub_list.sh": "Get Jina Hub Executor List",
    "/tests/jina_multimodal_cross_modal_search_examples_apps/get_jina_hub_list.sh:1-15": "Fetching Jina Hub Executors with Curl",
    "/tests/jina_multimodal_cross_modal_search_examples_apps/get_jina_hub_list.sh:16-20": "Compressed HTTP Request to Jina Hub List",
    "/tests/kaggle_yt_dls/test.py": "YTDL Installer and Downloader Script",
    "/tests/kaggle_yt_dls/test_init.sh": "Initiate Kaggle Kernel Downloads",
    "/tests/kaggle_yt_dls/transcode_nvenc.sh": "Transcode NVENC Testing",
    "/tests/kaggle_yt_dls/transcode_nvenc.sh:1-11": "Hardware-Accelerated FFmpeg Transcode Test",
    "/tests/kaggle_yt_dls/transcode_nvenc.sh:11-14": "NVENC Alternatives in Video Transcoding",
    "/tests/karaoke_effects/clash_auto_update.py": "Clash Proxy Auto-Updater",
    "/tests/karaoke_effects/clash_auto_update.py:1-30": "Automatic Clash Configuration Updater",
    "/tests/karaoke_effects/clash_auto_update.py:134-173": "Refining Clash YAML Configs",
    "/tests/karaoke_effects/clash_auto_update.py:174-202": "Automatic Proxy and DNS Update",
    "/tests/karaoke_effects/clash_auto_update.py:203-240": "Clash DNS Server Setup Script",
    "/tests/karaoke_effects/clash_auto_update.py:240-269": "Clash Auto-Update via YAML",
    "/tests/karaoke_effects/clash_auto_update.py:270-318": "Clash Proxy Auto-Update Flask Server",
    "/tests/karaoke_effects/clash_auto_update.py:30-56": "Clash Auto-Update with Proxy Management",
    "/tests/karaoke_effects/clash_auto_update.py:319-353": "Clash Proxy Auto-Update Functionality",
    "/tests/karaoke_effects/clash_auto_update.py:57-98": "Auto-updating Tested Proxy List",
    "/tests/karaoke_effects/clash_auto_update.py:99-133": "Clash Proxy Candidate Generator",
    "/tests/karaoke_effects/fastapi_translator.py": "FastAPI Translator App with Proxies and Endpoints",
    "/tests/karaoke_effects/fastapi_translator.py:1-41": "FastAPI Translator Setup",
    "/tests/karaoke_effects/fastapi_translator.py:112-148": "Deepl API Request Handler",
    "/tests/karaoke_effects/fastapi_translator.py:149-181": "Random Proxy Selector and Updater",
    "/tests/karaoke_effects/fastapi_translator.py:182-213": "Multi-Backend Text Translator",
    "/tests/karaoke_effects/fastapi_translator.py:214-245": "Error-checking Proxy Function",
    "/tests/karaoke_effects/fastapi_translator.py:246-283": "FastAPI Translator Cache System",
    "/tests/karaoke_effects/fastapi_translator.py:284-287": "FastAPI Translator Dictionary",
    "/tests/karaoke_effects/fastapi_translator.py:44-83": "FastAPI Translator Functions",
    "/tests/karaoke_effects/fastapi_translator.py:84-111": "Random Proxy Selection for DeepL Translator",
    "/tests/karaoke_effects/in2.ass.j2": "Karaoke Effects Styles",
    "/tests/karaoke_effects/in2.ass.j2:1-23": "Aegisub Script Template",
    "/tests/karaoke_effects/in2.ass.j2:23-31": "Karaoke Effects Code Generation",
    "/tests/karaoke_effects/in2.ass.j2:32-36": "Karaoke Timings and Translations",
    "/tests/karaoke_effects/launch_clash.sh": "Launch Clash Script",
    "/tests/karaoke_effects/loadLingua_jpype.py": "Python-Java Language Detection with Jpype and Lingua",
    "/tests/karaoke_effects/loadLingua_jpype.py:1-34": "Jpype-based Java Language Detection",
    "/tests/karaoke_effects/loadLingua_jpype.py:35-42": "JVM Shutdown Unclear in Code",
    "/tests/karaoke_effects/loadLingua_jpype_fastapi.py": "FastAPI-JPype Language Detection",
    "/tests/karaoke_effects/loadLingua_jpype_fastapi.py:1-42": "FastAPI-JPype Lingua Detector",
    "/tests/karaoke_effects/loadLingua_jpype_fastapi.py:43-50": "Exception-Handling LangID Analysis with LangID Library",
    "/tests/karaoke_effects/loadLingua_pyjnius.py": "Load Lingua with Pyjnius",
    "/tests/karaoke_effects/loadSomeCustomClashYaml.py": "Load Custom Clash YAML and Convert Formats",
    "/tests/karaoke_effects/load_translator.sh": "Load Translator Session & Configuration",
    "/tests/karaoke_effects/lrc2ass_py3/README.md": "LRC to ASS Converter with Karaoke Effects",
    "/tests/karaoke_effects/lrc2ass_py3/README.md:1-41": "Easy LRC to ASS Converter with Karaoke Effects (Python 3)",
    "/tests/karaoke_effects/lrc2ass_py3/README.md:42-72": "LRC to ASS Converter: Features, Warnings & To-Do List",
    "/tests/karaoke_effects/lrc2ass_py3/localTest.sh": "Silent MPV Player with ASS Subtitle Issues",
    "/tests/karaoke_effects/lrc2ass_py3/test.sh": "Karaoke Subtitle Sync Issue",
    "/tests/karaoke_effects/lyricToAss_test.py": "Generate Karaoke .ass File with Python",
    "/tests/karaoke_effects/pyonfx_test/first_try.py": "Modify ASS File with PyonFX",
    "/tests/karaoke_effects/pyonfx_test/macos_view_best_example.sh": "Open ASS File with Karaoke Effects on Mac",
    "/tests/karaoke_effects/pyonfx_test/render_ass_video.sh": "Karaoke Effects Video Rendering",
    "/tests/karaoke_effects/pyonfx_test/test.py": "Initializing LRC File and Importing Modules",
    "/tests/karaoke_effects/pyonfx_test/view_best_example.sh": "Karaoke Subtitles with mpv Player",
    "/tests/karaoke_effects/starJumping.py": "Karaoke Star Jump Animation",
    "/tests/karaoke_effects/starJumping.py:1-14": "Star Jumping Karaoke Effects",
    "/tests/karaoke_effects/starJumping.py:123-152": "Star Jumping Karaoke Effect",
    "/tests/karaoke_effects/starJumping.py:153-186": "Star-Jumping Karaoke Effect",
    "/tests/karaoke_effects/starJumping.py:16-53": "Star Jumping Effect Customization",
    "/tests/karaoke_effects/starJumping.py:187-221": "Karaoke Star Jumping Effect",
    "/tests/karaoke_effects/starJumping.py:223-254": "Star Jumping Karaoke Animation",
    "/tests/karaoke_effects/starJumping.py:255-291": "Dynamic Text Effects in Karaoke Application",
    "/tests/karaoke_effects/starJumping.py:292-327": "Star Jumping Karaoke Effect",
    "/tests/karaoke_effects/starJumping.py:328-365": "Karaoke Effects: Star Jumping Text",
    "/tests/karaoke_effects/starJumping.py:366-403": "Dynamic Line Alteration and Word Positioning",
    "/tests/karaoke_effects/starJumping.py:404-429": "Star Jumping Karaoke Effect",
    "/tests/karaoke_effects/starJumping.py:430-460": "Karaoke Lyrics Modification Algorithm",
    "/tests/karaoke_effects/starJumping.py:54-85": "Star Jumping Karaoke Effect",
    "/tests/karaoke_effects/starJumping.py:86-122": "Star Jumping Karaoke Effect",
    "/tests/karaoke_effects/test_baidu_language_recognize.py": "Baidu Language Recognition Test",
    "/tests/karaoke_effects/test_detect_different_language.py": "Unreliable Multilingual Detection",
    "/tests/karaoke_effects/test_detect_different_language.py:1-36": "Multi-Library Language Detection Instability",
    "/tests/karaoke_effects/test_detect_different_language.py:37-39": "Testing Chinese Language Detection",
    "/tests/karaoke_effects/test_pylrc.py": "LRC Parser and Duration Calculator",
    "/tests/karaoke_effects/test_pylrc.py:1-43": "Parse Music Lyrics with Duration",
    "/tests/karaoke_effects/test_pylrc.py:45-73": "Calculating Lyric Durations",
    "/tests/karaoke_effects/test_split_different_lang.py": "Multilingual Test Cases Translation",
    "/tests/karaoke_effects/test_split_different_lang.py:1-38": "Testing Translation of Multilingual Texts",
    "/tests/karaoke_effects/test_split_different_lang.py:39-40": "Split Different Languages Test",
    "/tests/karaoke_effects/translator.yml": "Automatic Clash Translation with FastAPI",
    "/tests/karaoke_effects/translator.yml:1-24": "Multi-Pane Translator Session with Proxies",
    "/tests/karaoke_effects/translator.yml:25-29": "Automatic Clash Update via Python",
    "/tests/keepalive_service/install.sh": "Installs Keepalive System-Wide",
    "/tests/keepalive_service/test.sh": "Testing Keepalive Service Execution",
    "/tests/launch_test_enviroment.py": "Launch Test Environment Setup",
    "/tests/launch_test_enviroment.py:1-34": "Launch and Change Directory with Program's Terminal",
    "/tests/launch_test_enviroment.py:105-145": "Iterative Program Launching Code",
    "/tests/launch_test_enviroment.py:146-147": "Formatted Argument Printing and Breakpoint",
    "/tests/launch_test_enviroment.py:35-70": "Automated Test Environment Launcher",
    "/tests/launch_test_enviroment.py:71-104": "Launching Multiple Services for Test Environment"
}