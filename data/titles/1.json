{
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:152-180": "Parse FFmpeg Command Strings",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:180-199": "Updating Dictionary with PIP Crop Regions",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:200-220": "Logo and Text Detection Algorithm",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:221-248": "Video Processing Command Map and Render Check",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:249-274": "Video Processing Pipeline",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:275-298": "Stream Command Processor",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:299-318": "Delogo Filter Parsing and Validation",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:319-337": "Abnormal Filter Parameters Printing",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:338-349": "Crop and Detect Pipeline Region",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:35-65": "Video Blur Padding Filter Function",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:350-376": "Filtered Video Stream Concatenation",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:377-402": "Audio-Video Stream Combination using FFmpeg",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:403-423": "Generate Random UUID and Temporary Videos",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:424-452": "Video Processing Template Setup",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:453-471": "Video Layer Processing in Editly Backend",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:472-492": "Video Processor: Clip and Save",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:493-512": "Modifying Clip Properties in dotProcessor",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:513-523": "Verbose Check and Editly Printing",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:66-90": "Video Overlay Padding Processor",
    "/pyjom/medialang/processors/dotProcessor/videoProcessor.py:91-117": "Efficient Video Processing with Code Snippet",
    "/pyjom/medialang/processors/mediaProcessor/__init__.py": "MediaProcessor FileSystem Import",
    "/pyjom/medialang/processors/mediaProcessor/filesystemProcessor.py": "Media Processor for Filesystem",
    "/pyjom/medialang/processors/mediaProcessor/filesystemProcessor.py:1-28": "Dynamic Media Processor with FSProcessor",
    "/pyjom/medialang/processors/mediaProcessor/filesystemProcessor.py:29-33": "Media Processor: Handles and Processes Various Media Types",
    "/pyjom/modify_package.sh": "Pyjom Package Replacer",
    "/pyjom/modules/__init__.py": "Modularizing Pyjom Framework",
    "/pyjom/modules/contentCensoring/__init__.py": "Importing ContentCensoring Components",
    "/pyjom/modules/contentCensoring/autoCensor.py": "Auto Censoring with Tkinter",
    "/pyjom/modules/contentCensoring/autoCensor.py:1-31": "Auto Censorship Tool with Tkinter",
    "/pyjom/modules/contentCensoring/autoCensor.py:32-57": "Auto Censor: Automated Content Filtering with Python",
    "/pyjom/modules/contentCensoring/autoCensor.py:58-59": "Removing Key-Value Pair from Dictionary",
    "/pyjom/modules/contentCensoring/core.py": "Censoring Media with GUI and Library Integration",
    "/pyjom/modules/contentCensoring/core.py:1-32": "Media File Downloader with Progress Bar",
    "/pyjom/modules/contentCensoring/core.py:135-158": "Place Tag Buttons Function",
    "/pyjom/modules/contentCensoring/core.py:158-176": "Window-Based Button Placement with User Input Check",
    "/pyjom/modules/contentCensoring/core.py:177-206": "GUI Window for Tagging and Commenting",
    "/pyjom/modules/contentCensoring/core.py:207-234": "Background Media Play and Censoring Functions",
    "/pyjom/modules/contentCensoring/core.py:235-269": "Auto Censoring Decorator",
    "/pyjom/modules/contentCensoring/core.py:270-299": "Creating Dictionary and Managing Media Data Types",
    "/pyjom/modules/contentCensoring/core.py:300-332": "Picture Censoring Algorithm",
    "/pyjom/modules/contentCensoring/core.py:33-65": "Media Download and Censorship Interface",
    "/pyjom/modules/contentCensoring/core.py:333-344": "Censoring Media with CoreMediaCensor",
    "/pyjom/modules/contentCensoring/core.py:66-98": "Pyjom Window Buttons Setup",
    "/pyjom/modules/contentCensoring/core.py:99-134": "GUI Post Display Tabular Layout",
    "/pyjom/modules/contentPosting/__init__.py": "Avoiding Circular Imports: Essential Modules",
    "/pyjom/modules/contentPosting/bilibiliPoster.py": "Bilibili Poster: Content Posting Module",
    "/pyjom/modules/contentPosting/bilibiliPoster.py:1-44": "Bilibili Video Registration Function",
    "/pyjom/modules/contentPosting/bilibiliPoster.py:113-132": "Bilibili URL Generator Function",
    "/pyjom/modules/contentPosting/bilibiliPoster.py:45-67": "Retry Decorator Video Upload with Temporary Storage",
    "/pyjom/modules/contentPosting/bilibiliPoster.py:68-88": "Bilibili Poster Metadata Extraction",
    "/pyjom/modules/contentPosting/bilibiliPoster.py:89-112": "Bilibili Content Posting Process",
    "/pyjom/modules/contentPosting/dummyPoster.py": "Dummy Poster: Protocol Link Generator",
    "/pyjom/modules/contentPosting/onlinePoster.py": "Online Poster: Decorator-like Bilibili Content Sharing",
    "/pyjom/modules/contentProducing/__init__.py": "Pyjom Content Producers",
    "/pyjom/modules/contentProducing/dummyProducer.py": "Dummy Producer Module",
    "/pyjom/modules/contentProducing/localProducer.py": "YOLOv5 Filter Applier",
    "/pyjom/modules/contentProducing/localProducer.py:1-27": "Filter Checker Function",
    "/pyjom/modules/contentProducing/localProducer.py:115-140": "Video Cuts Filter and Storage",
    "/pyjom/modules/contentProducing/localProducer.py:141-169": "FilesystemInfoFilter Application and Combination",
    "/pyjom/modules/contentProducing/localProducer.py:28-48": "Media Filter Snippet",
    "/pyjom/modules/contentProducing/localProducer.py:49-73": "Filter Abandonment Checker",
    "/pyjom/modules/contentProducing/localProducer.py:74-94": "Collect and Filter Video Cuts",
    "/pyjom/modules/contentProducing/localProducer.py:95-114": "Filter Size and Ratio Checker",
    "/pyjom/modules/contentProducing/onlineProducer.py": "Temporary Directory Media Generator",
    "/pyjom/modules/contentProducing/onlineProducer.py:1-30": "Online Producer: Generating Media with Info Generators",
    "/pyjom/modules/contentProducing/onlineProducer.py:31-39": "Online Producer with Fast Parameters",
    "/pyjom/modules/contentProducing/producerTemplates.py": "Media Processing with getFileCuts",
    "/pyjom/modules/contentProducing/producerTemplates.py:1-30": "Media File Cuts Generator",
    "/pyjom/modules/contentProducing/producerTemplates.py:126-147": "File Cut Shuffler and Trial Tracker",
    "/pyjom/modules/contentProducing/producerTemplates.py:148-165": "Checking Clip Validity within Span Range",
    "/pyjom/modules/contentProducing/producerTemplates.py:166-198": "Cut Selection and Media File Creation",
    "/pyjom/modules/contentProducing/producerTemplates.py:199-225": "Create Medialang Script from Information",
    "/pyjom/modules/contentProducing/producerTemplates.py:226-257": "Music File Parser and Cutter",
    "/pyjom/modules/contentProducing/producerTemplates.py:258-285": "Editly Video Generation Issues",
    "/pyjom/modules/contentProducing/producerTemplates.py:286-310": "Temporary UUID File for MediaLang",
    "/pyjom/modules/contentProducing/producerTemplates.py:31-52": "Synthesized Audio Cuts from BPM Spans",
    "/pyjom/modules/contentProducing/producerTemplates.py:313-343": "Music-Infused MediaLang Generator",
    "/pyjom/modules/contentProducing/producerTemplates.py:344-367": "Configure Music Processing Settings",
    "/pyjom/modules/contentProducing/producerTemplates.py:368-389": "Unpacking and Processing Parsed Results",
    "/pyjom/modules/contentProducing/producerTemplates.py:390-411": "Batch Subtitle Generator",
    "/pyjom/modules/contentProducing/producerTemplates.py:412-431": "Optimal Cut Span Determination",
    "/pyjom/modules/contentProducing/producerTemplates.py:432-447": "Average Motion Vector-Based Clip Segmentation",
    "/pyjom/modules/contentProducing/producerTemplates.py:448-465": "Error Checking and Cutting Module",
    "/pyjom/modules/contentProducing/producerTemplates.py:466-486": "Exception-Handled List Rendering and Backup",
    "/pyjom/modules/contentProducing/producerTemplates.py:487-505": "Media Processing Code snippet",
    "/pyjom/modules/contentProducing/producerTemplates.py:506-519": "Audio Normalization with Random MP4 File Generation and ASS Subtitle Filtering",
    "/pyjom/modules/contentProducing/producerTemplates.py:520-541": "Video Rendering with FFmpeg",
    "/pyjom/modules/contentProducing/producerTemplates.py:53-72": "Non-overlapping Template Handler",
    "/pyjom/modules/contentProducing/producerTemplates.py:542-551": "Retrieve Producer Template and Function",
    "/pyjom/modules/contentProducing/producerTemplates.py:73-91": "Iterates Through File Cuts, Updates Modifiers",
    "/pyjom/modules/contentProducing/producerTemplates.py:92-125": "Infinite Shuffled Cut Generator",
    "/pyjom/modules/contentReviewer/__init__.py": "Multipurpose Content Reviewers",
    "/pyjom/modules/contentReviewer/dummyReviewer.py": "Dummy Reviewer: \"Fantastic\" Verdict",
    "/pyjom/modules/contentReviewer/localReviewer.py": "Local Content Reviewer: filesystemReviewer",
    "/pyjom/modules/contentReviewer/localReviewer.py:1-39": "Content Reviewer: Automated File Analyzer and Censoring",
    "/pyjom/modules/contentReviewer/localReviewer.py:40-86": "Filesystem Reviewer: Generator or Core Analyzer",
    "/pyjom/modules/contentReviewer/localReviewer.py:87-90": "Local Class Instantiation",
    "/pyjom/modules/contentReviewer/weiboSearchReviewer.py": "Weibo Search Reviewer",
    "/pyjom/modules/contentReviewer/weiboSearchReviewer.py:1-27": "Weibo Search Reviewer and Censor Function",
    "/pyjom/modules/contentReviewer/weiboSearchReviewer.py:28-28": "Weibo Search Reviewer's mreview",
    "/pyjom/modules/feedbackCollecting/__init__.py": "Importing Feedback Modules",
    "/pyjom/modules/feedbackCollecting/dummyFeedback.py": "Dummy Feedback Function",
    "/pyjom/modules/feedbackCollecting/weiboFeedback.py": "Weibo Feedback Collector",
    "/pyjom/modules/feedbackCollecting/weiboFeedback.py:1-27": "Weibo Feedback Data Extractor",
    "/pyjom/modules/feedbackCollecting/weiboFeedback.py:28-53": "Weibo Feedback Function",
    "/pyjom/modules/feedbackCollecting/weiboFeedback.py:54-59": "Weibo Feedback Update",
    "/pyjom/modules/globalOptimizer/__init__.py": "Importing Dummy Optimizer Functions",
    "/pyjom/modules/globalOptimizer/dummyOptimizer.py": "Inefficient Decorators in DummyOptimizer",
    "/pyjom/modules/globalUpdator/__init__.py": "Importing GlobalUpdator's Dummy Functions",
    "/pyjom/modules/globalUpdator/dummyUpdator.py": "Scheduling Pending Optimization",
    "/pyjom/modules/informationGathering/__init__.py": "Multi-Source Data Fetching Module",
    "/pyjom/modules/informationGathering/dummyFetcher.py": "DummyFetcher: Protocol Strings and Huskies Data",
    "/pyjom/modules/informationGathering/dummyInfoGather.py": "Dummy Animal List",
    "/pyjom/modules/informationGathering/localFetcher.py": "Filesystem Fetcher Function",
    "/pyjom/modules/informationGathering/onlineFetcher.py": "Gather Media Assets Effortlessly",
    "/pyjom/modules/informationGathering/onlineFetcher.py:1-32": "Online Media Asset Retriever with Criteria",
    "/pyjom/modules/informationGathering/onlineFetcher.py:33-53": "URL Extractor and Downloader",
    "/pyjom/modules/informationGathering/onlineFetcher.py:54-57": "Exception Handling for Giphy Asset Fetch",
    "/pyjom/modules/informationGathering/weiboInfo.py": "Weibo Info Parser",
    "/pyjom/modules/informationGathering/weiboInfo.py:1-33": "Weibo Keyword Scraper",
    "/pyjom/modules/informationGathering/weiboInfo.py:124-151": "Retrieving Weibo Video Titles",
    "/pyjom/modules/informationGathering/weiboInfo.py:152-171": "Weibo Video Link Parser",
    "/pyjom/modules/informationGathering/weiboInfo.py:172-201": "Weibo Information Fetcher",
    "/pyjom/modules/informationGathering/weiboInfo.py:34-66": "Weibo Content Parser",
    "/pyjom/modules/informationGathering/weiboInfo.py:67-94": "Weibo Info Extractor",
    "/pyjom/modules/informationGathering/weiboInfo.py:95-123": "Extract Video Links from Weibo Content",
    "/pyjom/modules/informationProcessing/__init__.py": "Versatile Information Processors",
    "/pyjom/modules/informationProcessing/dummyProcessor.py": "Decorator Function in Dummy Processor",
    "/pyjom/modules/informationProcessing/localProcessor.py": "File Metadata Processor",
    "/pyjom/modules/informationProcessing/localProcessor.py:1-38": "Filesystem Processor: Extracting Meta Data and Intercepting Filters",
    "/pyjom/modules/informationProcessing/localProcessor.py:109-128": "Discarding Labeled Reviews",
    "/pyjom/modules/informationProcessing/localProcessor.py:130-149": "YOLOv5 Filter Check",
    "/pyjom/modules/informationProcessing/localProcessor.py:150-168": "YoloV5 Object Filtering",
    "/pyjom/modules/informationProcessing/localProcessor.py:169-187": "Identity Array Creation Algorithm",
    "/pyjom/modules/informationProcessing/localProcessor.py:188-205": "Image Processing with Convolution and YoloV5",
    "/pyjom/modules/informationProcessing/localProcessor.py:206-226": "Filtering and Assigning Values in localProcessor.py",
    "/pyjom/modules/informationProcessing/localProcessor.py:227-250": "Filter Frames Based on Minimum Threshold",
    "/pyjom/modules/informationProcessing/localProcessor.py:251-266": "Filter and Debug Files",
    "/pyjom/modules/informationProcessing/localProcessor.py:39-62": "Media Duration, Resolution Calculator",
    "/pyjom/modules/informationProcessing/localProcessor.py:63-87": "Media Info Retriever: LocalProcessor",
    "/pyjom/modules/informationProcessing/localProcessor.py:88-108": "Universal Metadata Updater",
    "/pyjom/modules/informationProcessing/onlineProcessor.py": "OnlineProcessor: Video Filters and Animal Detection",
    "/pyjom/modules/informationProcessing/onlineProcessor.py:1-34": "OnlineProcessor: Processes Video Elements with Dog/Cat Filters and Proxy Support",
    "/pyjom/modules/informationProcessing/onlineProcessor.py:116-137": "Video Validation and Extraction",
    "/pyjom/modules/informationProcessing/onlineProcessor.py:138-161": "Validating Video Duration: Online Processor",
    "/pyjom/modules/informationProcessing/onlineProcessor.py:163-187": "Filtering Video Parameters",
    "/pyjom/modules/informationProcessing/onlineProcessor.py:188-211": "Video Analysis Functions",
    "/pyjom/modules/informationProcessing/onlineProcessor.py:212-234": "Video Processing Filter Chain",
    "/pyjom/modules/informationProcessing/onlineProcessor.py:235-258": "Video Filter and Processing Algorithm",
    "/pyjom/modules/informationProcessing/onlineProcessor.py:259-268": "Video Details Initialization",
    "/pyjom/modules/informationProcessing/onlineProcessor.py:36-64": "Online Video Processor",
    "/pyjom/modules/informationProcessing/onlineProcessor.py:65-89": "Adaptive Video Speed Control",
    "/pyjom/modules/informationProcessing/onlineProcessor.py:90-115": "Video Speed Control Algorithm",
    "/pyjom/modules/methodIdentifier/__init__.py": "Importing Contents from MethodIdentifier",
    "/pyjom/modules/methodIdentifier/dummyIdentifier.py": "Unique UUID Generator and Identifier Class",
    "/pyjom/modules/topicGenerator/__init__.py": "Multi-Topic Data Generator",
    "/pyjom/modules/topicGenerator/dummyTopicGenerator.py": "Pyjom's Dummy Topic Generator",
    "/pyjom/modules/topicGenerator/localTopicGenerator.py": "Filesystem-Based Topic Generator",
    "/pyjom/modules/topicGenerator/localTopicGenerator.py:1-33": "Local File System Topic Generator",
    "/pyjom/modules/topicGenerator/localTopicGenerator.py:34-37": "File Existence Checker",
    "/pyjom/modules/topicGenerator/onlineTopicGenerator.py": "Topic-Based GIF/Video Generator",
    "/pyjom/modules/topicGenerator/onlineTopicGenerator.py:1-33": "Topic Generator: Remove Duplicate Keywords",
    "/pyjom/modules/topicGenerator/onlineTopicGenerator.py:123-143": "Random Picture Generator",
    "/pyjom/modules/topicGenerator/onlineTopicGenerator.py:144-165": "Online Topic-Based Image Keyword Generator",
    "/pyjom/modules/topicGenerator/onlineTopicGenerator.py:167-170": "Exception Handling for GIPHY Topics Fetching",
    "/pyjom/modules/topicGenerator/onlineTopicGenerator.py:34-65": "Online Topic Generator",
    "/pyjom/modules/topicGenerator/onlineTopicGenerator.py:66-95": "Meta Topic String Generator",
    "/pyjom/modules/topicGenerator/onlineTopicGenerator.py:96-122": "Random Keyword Requests in Online Topic Generator",
    "/pyjom/modules/topicGenerator/weiboTopicGenerator.py": "Multilingual Pet Topic Generator",
    "/pyjom/musictoolbox.py": "Universal Music Identifier",
    "/pyjom/musictoolbox.py:1-31": "Music Waveform Generator",
    "/pyjom/musictoolbox.py:105-133": "Min/Max Time Boundary Calculator and BPM Span Generator",
    "/pyjom/musictoolbox.py:134-158": "Minimum BPM Selection Algorithm",
    "/pyjom/musictoolbox.py:159-184": "Cutting Points by Timespan Range",
    "/pyjom/musictoolbox.py:185-212": "Generate Music Cut Spans List",
    "/pyjom/musictoolbox.py:213-249": "Retrieves Music Metadata and Updates Lyrics",
    "/pyjom/musictoolbox.py:252-284": "Shazam-based Music Recognition Functionality",
    "/pyjom/musictoolbox.py:285-318": "ShazamIO-Powered Music Recognition",
    "/pyjom/musictoolbox.py:319-354": "Music Recognition from File using Midomi API",
    "/pyjom/musictoolbox.py:32-68": "Audio Analysis and Lyrics Extraction",
    "/pyjom/musictoolbox.py:355-381": "Music Recognition Code Snippet",
    "/pyjom/musictoolbox.py:382-408": "Music Recognition Toolbox Function",
    "/pyjom/musictoolbox.py:409-443": "Netease Music Interface Class",
    "/pyjom/musictoolbox.py:444-474": "Netease API GET Request Handler",
    "/pyjom/musictoolbox.py:475-505": "Music Search and Retrieval Functions",
    "/pyjom/musictoolbox.py:506-540": "NetEase Music Toolbox: Check and Retrieve Lyrics",
    "/pyjom/musictoolbox.py:541-567": "Pyjom's Music Search Function",
    "/pyjom/musictoolbox.py:568-594": "Random Song Downloader",
    "/pyjom/musictoolbox.py:595-611": "Validates, Retrieves, and Cleans Lyrics",
    "/pyjom/musictoolbox.py:70-104": "Generate BPM Spans and Lyric Candidates",
    "/pyjom/platforms/bilibili/credentials.py": "Bilibili Credential Manager",
    "/pyjom/platforms/bilibili/credentials.py:102-125": "SMS-Based Login and Credential Management",
    "/pyjom/platforms/bilibili/credentials.py:126-140": "Bilibil Decorator: Retrieve and Pass Credentials",
    "/pyjom/platforms/bilibili/credentials.py:2-38": "Bilibili API Credential Manager",
    "/pyjom/platforms/bilibili/credentials.py:39-74": "Bilibil Credential Management in Python",
    "/pyjom/platforms/bilibili/credentials.py:75-101": "Bilibili Credential Retrieval and Verification",
    "/pyjom/platforms/bilibili/database.py": "Bilibili Video Recommendation API",
    "/pyjom/platforms/bilibili/database.py:1-43": "Bilibili Video Recommendation Code",
    "/pyjom/platforms/bilibili/database.py:1020-1053": "BiliBili Video Status Refresh Functions",
    "/pyjom/platforms/bilibili/database.py:1054-1082": "Bilibili Video Status Updater",
    "/pyjom/platforms/bilibili/database.py:1083-1123": "Bilibili Recommendation Server: Initialization and Search",
    "/pyjom/platforms/bilibili/database.py:1124-1157": "Bilibil Search and Register Endpoints",
    "/pyjom/platforms/bilibili/database.py:1158-1178": "Bilibili Video Registration Script",
    "/pyjom/platforms/bilibili/database.py:118-151": "Bilibili Keyword Extraction and Query Forming",
    "/pyjom/platforms/bilibili/database.py:154-195": "Bilibili Video Search Forms",
    "/pyjom/platforms/bilibili/database.py:197-223": "Bilbili Major-Minor Mapping Fetcher",
    "/pyjom/platforms/bilibili/database.py:224-257": "BiliBili Topic Details Retrieval Function",
    "/pyjom/platforms/bilibili/database.py:258-290": "Bilibili User Class and Info Extract",
    "/pyjom/platforms/bilibili/database.py:293-318": "BilibiliVideo Class and Extractor",
    "/pyjom/platforms/bilibili/database.py:319-354": "Bilibili Video Index Model",
    "/pyjom/platforms/bilibili/database.py:355-383": "Bilibili SQLite Database Setup",
    "/pyjom/platforms/bilibili/database.py:384-415": "Bilibili Data Fetching and Updating",
    "/pyjom/platforms/bilibili/database.py:416-442": "Bilibili Search Results Parser",
    "/pyjom/platforms/bilibili/database.py:44-82": "Text Preprocessing with OpenCC and Jieba",
    "/pyjom/platforms/bilibili/database.py:443-474": "Iterating, Fetching, Processing Pages",
    "/pyjom/platforms/bilibili/database.py:475-525": "Bilibili Video Database Checker",
    "/pyjom/platforms/bilibili/database.py:526-558": "Bilibili Video Data Processing",
    "/pyjom/platforms/bilibili/database.py:559-593": "Bilibili Video Retrieval and Database Updater",
    "/pyjom/platforms/bilibili/database.py:594-613": "Bilibili Video Scraper",
    "/pyjom/platforms/bilibili/database.py:613-629": "Bilibili Video Tag Updating Algorithm",
    "/pyjom/platforms/bilibili/database.py:630-653": "Bilibili Database Interaction Code",
    "/pyjom/platforms/bilibili/database.py:654-686": "Topic ID Resolution Algorithm",
    "/pyjom/platforms/bilibili/database.py:687-716": "Filter and Sort Bilibili Videos",
    "/pyjom/platforms/bilibili/database.py:717-742": "Bilibili Video Search with BM25 Algorithm",
    "/pyjom/platforms/bilibili/database.py:743-778": "Bilibili Video Search Functions",
    "/pyjom/platforms/bilibili/database.py:779-806": "Hybrid Video Search Algorithm",
    "/pyjom/platforms/bilibili/database.py:807-837": "Bilibili BM25 Video Search",
    "/pyjom/platforms/bilibili/database.py:83-117": "Chinese Text Preprocessing with TF-IDF",
    "/pyjom/platforms/bilibili/database.py:838-869": "Bilibili Video Visibility Checker",
    "/pyjom/platforms/bilibili/database.py:870-892": "Verify Video Publication Time",
    "/pyjom/platforms/bilibili/database.py:893-910": "Bilibili Database Video Checker",
    "/pyjom/platforms/bilibili/database.py:910-933": "Verify and Manage Bilibili Video Database Entry",
    "/pyjom/platforms/bilibili/database.py:934-963": "Bilibili Video Management Function",
    "/pyjom/platforms/bilibili/database.py:964-990": "Bilibili Video Indexer",
    "/pyjom/platforms/bilibili/database.py:991-1019": "Bilibili Video Index Generation and Search Function",
    "/pyjom/platforms/bilibili/postMetadata.py": "Bilibili Post Metadata Generator",
    "/pyjom/platforms/bilibili/postMetadata.py:1-27": "Core Topic Filter for Bilibili Video Titles",
    "/pyjom/platforms/bilibili/postMetadata.py:101-130": "Advanced Dog/Cat Image Cropping",
    "/pyjom/platforms/bilibili/postMetadata.py:131-165": "Generate Bilibili Post Metadata",
    "/pyjom/platforms/bilibili/postMetadata.py:166-196": "Bilibili Metadata Retriever and Filter",
    "/pyjom/platforms/bilibili/postMetadata.py:197-223": "Dynamic Bilibili Topic Generation",
    "/pyjom/platforms/bilibili/postMetadata.py:225-252": "Bilibili Video Metadata Updater",
    "/pyjom/platforms/bilibili/postMetadata.py:253-280": "Filtering Bilibili Video Metadata",
    "/pyjom/platforms/bilibili/postMetadata.py:28-64": "Bilibili Post Title Filtration",
    "/pyjom/platforms/bilibili/postMetadata.py:281-302": "Bilibili Video Metadata Checker",
    "/pyjom/platforms/bilibili/postMetadata.py:303-328": "Bilibili Video Metadata Updater",
    "/pyjom/platforms/bilibili/postMetadata.py:329-353": "Bilibili Video Fetch and Parse",
    "/pyjom/platforms/bilibili/postMetadata.py:355-377": "Video Data Parser and Keyword Collector",
    "/pyjom/platforms/bilibili/postMetadata.py:379-404": "Topic-Based Keyword Generation",
    "/pyjom/platforms/bilibili/postMetadata.py:405-424": "Bilibili Post Metadata Processing",
    "/pyjom/platforms/bilibili/postMetadata.py:425-439": "Random Cover and Description Selection",
    "/pyjom/platforms/bilibili/postMetadata.py:440-454": "Random Bilibili Post Metadata Generator",
    "/pyjom/platforms/bilibili/postMetadata.py:454-478": "Fetch Bilibil Post Metadata for Dogs or Cats",
    "/pyjom/platforms/bilibili/postMetadata.py:479-515": "Bilibili Metatopics for Cats and Dogs",
    "/pyjom/platforms/bilibili/postMetadata.py:516-523": "Bilibili Post Metadata Functions",
    "/pyjom/platforms/bilibili/postMetadata.py:65-100": "Random Image Selection and Processing",
    "/pyjom/platforms/bilibili/searchDataParser.py": "Bilibili Video Parser: Metadata Extraction and Error Handling",
    "/pyjom/platforms/bilibili/searchDataParser.py:1-37": "Bilibili Search Data Parser",
    "/pyjom/platforms/bilibili/searchDataParser.py:107-138": "Bilibili Search Results Parser",
    "/pyjom/platforms/bilibili/searchDataParser.py:139-162": "Bilibili Search Data Parser",
    "/pyjom/platforms/bilibili/searchDataParser.py:163-190": "Bilibili Video Parser and Updater",
    "/pyjom/platforms/bilibili/searchDataParser.py:191-223": "Bilibili Search Data Parser Test Suite",
    "/pyjom/platforms/bilibili/searchDataParser.py:224-249": "Bilibili Search Data Parser and Link Extractor",
    "/pyjom/platforms/bilibili/searchDataParser.py:38-61": "Bilibili Video Data Parser and Cleaner",
    "/pyjom/platforms/bilibili/searchDataParser.py:62-106": "Bilibili Search Data Parser",
    "/pyjom/platforms/bilibili/uploader.py": "Bilibili Video Uploader Asynchronously",
    "/pyjom/platforms/bilibili/uploader.py:1-34": "Asynchronous Bilibili Video Uploader",
    "/pyjom/platforms/bilibili/uploader.py:122-151": "Chunked Upload Preparation",
    "/pyjom/platforms/bilibili/uploader.py:152-175": "Bilibili Uploader with Retry and Threading",
    "/pyjom/platforms/bilibili/uploader.py:177-205": "Bilibili Multipart Uploader",
    "/pyjom/platforms/bilibili/uploader.py:206-234": "Bilibili Image Uploader",
    "/pyjom/platforms/bilibili/uploader.py:236-270": "Upload Video and Cover: Bilibili Uploader",
    "/pyjom/platforms/bilibili/uploader.py:271-305": "Bilibili Video Upload Setup",
    "/pyjom/platforms/bilibili/uploader.py:306-333": "Bilibili Video Uploader Code Snippet",
    "/pyjom/platforms/bilibili/uploader.py:334-367": "Multithreaded Bilibili Video Uploader",
    "/pyjom/platforms/bilibili/uploader.py:35-67": "Multithreaded Bilibili Video Uploader",
    "/pyjom/platforms/bilibili/uploader.py:368-401": "Bilibili Video Uploader Function",
    "/pyjom/platforms/bilibili/uploader.py:402-428": "Bilibili Video Uploader Dictionary",
    "/pyjom/platforms/bilibili/uploader.py:429-445": "Sync Video Uploader Check",
    "/pyjom/platforms/bilibili/uploader.py:68-94": "Bilibili API Preupload Setup",
    "/pyjom/platforms/bilibili/uploader.py:95-120": "Bilibili File Uploader Code Snippet",
    "/pyjom/platforms/bilibili/utils.py": "Bilibili API Utilities",
    "/pyjom/platforms/bilibili/utils.py:1-41": "Bilibili API Utilities",
    "/pyjom/platforms/bilibili/utils.py:100-126": "Duration Converter Function",
    "/pyjom/platforms/bilibili/utils.py:127-163": "Author Analysis Utilities",
    "/pyjom/platforms/bilibili/utils.py:164-181": "Bilibili Video Title Parser",
    "/pyjom/platforms/bilibili/utils.py:44-67": "Bilibili Extract Links Function",
    "/pyjom/platforms/bilibili/utils.py:68-99": "BGM Parser and Duration Conversion",
    "/pyjom/primitives/__init__.py": "Importing Primitives",
    "/pyjom/primitives/localPrimitives.py": "Automatic Content Review and Production Class",
    "/pyjom/primitives/localPrimitives.py:1-29": "Filesystem Content Reviewer Class",
    "/pyjom/primitives/localPrimitives.py:30-66": "Filesystem Content Review and Production Classes",
    "/pyjom/primitives/localPrimitives.py:66-84": "Local Class File Operations",
    "/pyjom/primitives/localPrimitives.py:85-95": "Local Filesystem Topic Producer",
    "/pyjom/primitives/onlinePrimitives.py": "Online Auto Content Producer",
    "/pyjom/primitives/onlinePrimitives.py:1-30": "Online Auto Content Producer Class",
    "/pyjom/primitives/onlinePrimitives.py:31-55": "OnlinePrimitives Class Setup",
    "/pyjom/primitives/onlinePrimitives.py:56-73": "Multi-Platform Poster with Keyword Decoration",
    "/pyjom/primitives/onlinePrimitives.py:74-74": "Closing Parenthesis Indicator",
    "/pyjom/primitives/weiboPrimitives.py": "Weibo Pets Reviewer: Automated Content Labeling"
}