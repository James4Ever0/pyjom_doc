{
    "/tests/unittest_nsfw_video_score.py": "NSFW Content Detection and Posting API",
    "/tests/unittest_nsfw_video_score.py:1-44": "Test NSFW Image Classification Tool",
    "/tests/unittest_nsfw_video_score.py:109-130": "NSFW Video Frame Classifier",
    "/tests/unittest_nsfw_video_score.py:131-149": "NSFW Video Test Evaluation",
    "/tests/unittest_nsfw_video_score.py:149-154": "NSFW Content Classification Model Test",
    "/tests/unittest_nsfw_video_score.py:155-161": "Testing NSFW Image Classifier Accuracy",
    "/tests/unittest_nsfw_video_score.py:161-170": "NSFW Image Padding and Classification",
    "/tests/unittest_nsfw_video_score.py:171-180": "NSFW Video Classification and Image Posting",
    "/tests/unittest_nsfw_video_score.py:45-80": "Filtered NSFW Video Scores",
    "/tests/unittest_nsfw_video_score.py:81-108": "NSFW Video Frame Display Test",
    "/tests/unittest_ocr_filter_large_area_of_text.py": "OCR Image Rectangle Detection",
    "/tests/unittest_ocr_filter_large_area_of_text.py:1-37": "Setting Up for OCR Detection",
    "/tests/unittest_ocr_filter_large_area_of_text.py:38-50": "Text Area Percentage Calculator",
    "/tests/unittest_online_topic_generator_giphy.py": "Giphy Online Topic Generator",
    "/tests/unittest_online_topic_generator_giphy.py:1-36": "Testing Online Topic Generator with GIPHY",
    "/tests/unittest_online_topic_generator_giphy.py:112-131": "Video Filtering and Validation",
    "/tests/unittest_online_topic_generator_giphy.py:37-61": "Multithreaded Asset Download with Error Handling",
    "/tests/unittest_online_topic_generator_giphy.py:62-85": "Video Filtering Algorithm",
    "/tests/unittest_online_topic_generator_giphy.py:86-111": "Video Filter Criteria and Thresholds",
    "/tests/unittest_paddlehub_animal_resnet.py": "Animal ResNet Classifier: Testing PaddleHub Model",
    "/tests/unittest_paddlehub_animal_resnet.py:1-32": "Dog and Cat Labels Data Preprocessing",
    "/tests/unittest_paddlehub_animal_resnet.py:101-114": "Animal Recognition Model Testing & Improvement",
    "/tests/unittest_paddlehub_animal_resnet.py:115-134": "Image Classifier Accuracy Test",
    "/tests/unittest_paddlehub_animal_resnet.py:33-78": "Dog/Cat Name Recognizer: PaddleHub-Animal ResNet",
    "/tests/unittest_paddlehub_animal_resnet.py:79-100": "Video Animal Classification with PaddleHub's ResNet Model",
    "/tests/unittest_photo_histogram_match_0.2.py": "Image Processing Algorithms Demo",
    "/tests/unittest_photo_histogram_match_0.2.py:1-38": "Inpainting-based Text Removal",
    "/tests/unittest_photo_histogram_match_0.2.py:40-60": "Image Processing Pipeline",
    "/tests/unittest_property_decorator.py": "Dynamic Property Increment",
    "/tests/unittest_sqlalchemy_1.3_alternative_wrapper_peewee.py": "Peewee SQLite Database CRUD with Bilibili Videos",
    "/tests/unittest_sqlalchemy_1.3_alternative_wrapper_peewee.py:1-39": "Peewee SQLite Database and Models Setup",
    "/tests/unittest_sqlalchemy_1.3_alternative_wrapper_peewee.py:103-139": "Peewee Model CRUD Operations with SQLAlchemy",
    "/tests/unittest_sqlalchemy_1.3_alternative_wrapper_peewee.py:140-146": "Peewee Test for Username None Error",
    "/tests/unittest_sqlalchemy_1.3_alternative_wrapper_peewee.py:40-71": "Peewee Tables and Fields Code Snippet",
    "/tests/unittest_sqlalchemy_1.3_alternative_wrapper_peewee.py:73-102": "Peewee User and Bilibili Video Checker",
    "/tests/unittest_tempfile_generator.py": "Tempfile Generator and Reader",
    "/tests/unittest_translate_lyrictoolbox.py": "Pyjom Lyric Translation Unit Test",
    "/tests/unittest_update_peewee_while_get.py": "Updating Bilibili Username with Peewee",
    "/tests/unittest_video_cover_extraction_dog_cat_detections.py": "YOLOv5 Dog & Cat Cover Detection",
    "/tests/unittest_video_cover_extraction_dog_cat_detections.py:1-31": "YOLOv5 Dog & Cat Detection and Image Processing",
    "/tests/unittest_video_cover_extraction_dog_cat_detections.py:123-141": "Dog-Cat Detection Covers",
    "/tests/unittest_video_cover_extraction_dog_cat_detections.py:32-67": "Dog Detection via YOLOv5 Inference",
    "/tests/unittest_video_cover_extraction_dog_cat_detections.py:69-98": "Filtering and Cropping Animal Detections",
    "/tests/unittest_video_cover_extraction_dog_cat_detections.py:99-122": "Image Crop and Resize Algorithm",
    "/tests/unittest_video_sampler.py": "Video Sampler Testing",
    "/tests/unittest_yolov5_dog_cat_filter_filesystemreviewer.py": "YOLOv5 and PaddleResnet50 Animals Classifier Test Suite",
    "/tests/unittest_yolov5_dog_cat_filter_filesystemreviewer.py:1-26": "Extracting YOLOv5 Detection Data",
    "/tests/unittest_yolov5_dog_cat_filter_filesystemreviewer.py:109-138": "Confidence-Based Category Filtering",
    "/tests/unittest_yolov5_dog_cat_filter_filesystemreviewer.py:139-175": "Yolov5 Filter Logic Testing",
    "/tests/unittest_yolov5_dog_cat_filter_filesystemreviewer.py:176-207": "FilesystemReviewer for YoloV5 Detection Data",
    "/tests/unittest_yolov5_dog_cat_filter_filesystemreviewer.py:208-242": "Video Confidence Filter with PaddleHub's ResNet50 Animals Classifier",
    "/tests/unittest_yolov5_dog_cat_filter_filesystemreviewer.py:243-280": "Dog and Cat Video Filter",
    "/tests/unittest_yolov5_dog_cat_filter_filesystemreviewer.py:27-51": "YOLOv5 Frame Detection Data Processing",
    "/tests/unittest_yolov5_dog_cat_filter_filesystemreviewer.py:281-312": "Dog vs. Cat Name Recognizer",
    "/tests/unittest_yolov5_dog_cat_filter_filesystemreviewer.py:314-334": "Dog and Cat Detection from Video Frames",
    "/tests/unittest_yolov5_dog_cat_filter_filesystemreviewer.py:335-356": "YOLOv5 Dog/Cat Filter Test",
    "/tests/unittest_yolov5_dog_cat_filter_filesystemreviewer.py:357-374": "Yolov5 Filter with Bezier and Resnet",
    "/tests/unittest_yolov5_dog_cat_filter_filesystemreviewer.py:52-84": "Max-Mean Detection Confidence Calculator",
    "/tests/unittest_yolov5_dog_cat_filter_filesystemreviewer.py:85-108": "Dog-Cat Detection and Reporting Tool",
    "/tests/update_progressbar_network/client.py": "Network Progress Bar Client",
    "/tests/update_progressbar_network/load_session.sh": "Efficient Terminal Session Management with tmux",
    "/tests/update_progressbar_network/test.py": "Network Progress Bar Updates with FastAPI",
    "/tests/update_progressbar_network/test.py:1-46": "FastAPI Progress Bar via Network Endpoints",
    "/tests/update_progressbar_network/test.py:47-56": "Closing Progressbar with GET Route",
    "/tests/update_progressbar_network/test.sh": "Uvicorn Server Setup",
    "/tests/update_progressbar_network/test.yaml": "Dual-Pane Tmux Testing Setup",
    "/tests/vapoursynth_linux_test/basic_test.py": "VapourSynth Python Test: Video Transpose",
    "/tests/vapoursynth_linux_test/cloneBasicRepo.sh": "Linux/macOS Software Components Cloning",
    "/tests/vapoursynth_linux_test/denoise_and_upscale_samoyed.py": "Enhancing Samoyed Videos with OpenCV",
    "/tests/vapoursynth_linux_test/denoise_and_upscale_samoyed.py:1-36": "Improved GIF Quality with BM3D Denoising",
    "/tests/vapoursynth_linux_test/denoise_and_upscale_samoyed.py:38-68": "Denoise & Upscale Samoyed Video with VapourSynth",
    "/tests/vapoursynth_linux_test/denoise_and_upscale_samoyed.py:69-87": "Denoising and Upscaling Dog Videos",
    "/tests/vapoursynth_linux_test/ffmpeg_pip_examine.sh": "FFmpeg Pip Screenshots",
    "/tests/vapoursynth_linux_test/improve_video_quality.sh": "Upscaling Videos with vspipe and ffmpeg",
    "/tests/vapoursynth_linux_test/make_vapoursynth_autoload.sh": "Preparing VapourSynth on Linux",
    "/tests/vapoursynth_linux_test/motion_estimation.sh": "Motion Estimation with FFmpeg",
    "/tests/vapoursynth_linux_test/pip_examine.sh": "Capture and Save Screenshots at Specific Timestamps",
    "/tests/vapoursynth_linux_test/pip_examine.sh:1-7": "FFmpeg Screenshot Capture Script",
    "/tests/vapoursynth_linux_test/pip_examine.sh:15-21": "Capture Screenshots with FFmpeg Script",
    "/tests/vapoursynth_linux_test/pip_examine.sh:22-28": "FFmpeg Screenshot Capture Script",
    "/tests/vapoursynth_linux_test/pip_examine.sh:29-35": "Capture Screenshots with FFmpeg",
    "/tests/vapoursynth_linux_test/pip_examine.sh:36-42": "Screenshot Video Timestamps",
    "/tests/vapoursynth_linux_test/pip_examine.sh:43-49": "FFmpeg Screenshot Capture Script",
    "/tests/vapoursynth_linux_test/pip_examine.sh:50-56": "Capture Screenshots with FFmpeg",
    "/tests/vapoursynth_linux_test/pip_examine.sh:57-63": "FFmpeg Screenshots from Video Timestamps",
    "/tests/vapoursynth_linux_test/pip_examine.sh:64-70": "Screenshot Video with FFmpeg",
    "/tests/vapoursynth_linux_test/pip_examine.sh:71-77": "Screenshot Video Intervals with FFmpeg",
    "/tests/vapoursynth_linux_test/pip_examine.sh:78-84": "Video Frame Cropper: Screenshot Extractor with FFmpeg",
    "/tests/vapoursynth_linux_test/pip_examine.sh:8-14": "Screenshot Video Timestamps",
    "/tests/vapoursynth_linux_test/pip_examine.sh:85-91": "Screenshot Video with FFmpeg",
    "/tests/vapoursynth_linux_test/pip_examine.sh:92-97": "Video Screenshot Capture Script",
    "/tests/vapoursynth_linux_test/previewTestVideo.sh": "Linux VapourSynth Preview Test",
    "/tests/vapoursynth_linux_test/pure_ffmpeg_interpolate_resolution_denoise.sh": "AI-Enhanced Video Processing with FFmpeg and TensorFlow",
    "/tests/vapoursynth_linux_test/pure_ffmpeg_interpolate_resolution_denoise.sh:1-13": "GIF Super-Resolution with FFmpeg, TensorFlow",
    "/tests/vapoursynth_linux_test/pure_ffmpeg_interpolate_resolution_denoise.sh:13-27": "Super Resolution with FFmpeg",
    "/tests/vapoursynth_linux_test/scene_change_detection.sh": "Scene Change Detection via FFmpeg Script",
    "/tests/vapoursynth_linux_test/test.sh": "Vspipe Linux Test",
    "/tests/vapoursynth_linux_test/test_ffmpeg_docker.sh": "Upscale Video with FFmpeg-Tensorflow Docker",
    "/tests/vapoursynth_linux_test/view_test.py": "VapourSynth Preview Issue on Linux",
    "/tests/vapoursynth_linux_test/view_test.py:1-23": "VapourSynth Linux View Test",
    "/tests/vapoursynth_linux_test/view_test.py:24-28": "VapourSynth Preview Problem",
    "/tests/video_detector_tests/cocoNames.py": "MS COCO Dictionaries for Image Classification",
    "/tests/video_detector_tests/cocoNames.py:1-64": "COCO Name Dictionary for Image Class",
    "/tests/video_detector_tests/cocoNames.py:65-83": "Mapping COCO Names to Indexes",
    "/tests/video_detector_tests/detectron2_model_zoo_url.py": "Detectron2 COCO Model Mapping and URLs",
    "/tests/video_detector_tests/detectron2_model_zoo_url.py:108-122": "Detectron2 Model URL Fetcher",
    "/tests/video_detector_tests/detectron2_model_zoo_url.py:2-20": "Detectron2 Model URL Mapping",
    "/tests/video_detector_tests/detectron2_model_zoo_url.py:21-34": "Detectron2 Models: URLs and Mapping",
    "/tests/video_detector_tests/detectron2_model_zoo_url.py:35-45": "Detectron2 Model Mapping and Training Enhancements",
    "/tests/video_detector_tests/detectron2_model_zoo_url.py:46-56": "Detectron2 Model Mapping",
    "/tests/video_detector_tests/detectron2_model_zoo_url.py:57-67": "Detectron2 Model Checkpoints",
    "/tests/video_detector_tests/detectron2_model_zoo_url.py:68-81": "Detectron2 Model Configs and Checkpoints",
    "/tests/video_detector_tests/detectron2_model_zoo_url.py:82-107": "Detectron2 URL Mapping Function",
    "/tests/video_detector_tests/detectron2_norfair.py": "Detectron2 Object Detection in Video",
    "/tests/video_detector_tests/detectron2_norfair.py:1-21": "Detectron2 Object Detection Setup",
    "/tests/video_detector_tests/detectron2_norfair.py:23-48": "Video Detector Test: Detectron2 Norfair",
    "/tests/video_detector_tests/detectron2_norfair.py:49-68": "Detecting Persons and Dogs with Detectron2",
    "/tests/video_detector_tests/detectron2_norfair.py:69-97": "Bounding Boxes and Labels with OpenCV",
    "/tests/video_detector_tests/detectron2_norfair.py:98-106": "OpenCV Video Display and Key Input",
    "/tests/video_detector_tests/frameDifference.py": "Motion Detection in Video: FrameDifference",
    "/tests/video_detector_tests/frameDifference.py:1-30": "Video Motion Detection Algorithm",
    "/tests/video_detector_tests/frameDifference.py:32-46": "Frame Difference Video Display",
    "/tests/video_detector_tests/mathlib.py": "Merging Intervals with Sympy",
    "/tests/video_detector_tests/mathlib.py:1-28": "Interval Operations and Merging with Sympy",
    "/tests/video_detector_tests/mathlib.py:104-130": "Merging Sets: Continual Mappings Algorithm",
    "/tests/video_detector_tests/mathlib.py:131-164": "Continuous Mapped Range Merging Function",
    "/tests/video_detector_tests/mathlib.py:165-188": "Merged Ranges to Sequential Conversion",
    "/tests/video_detector_tests/mathlib.py:189-190": "Merged Ranges via Continuous Number Function",
    "/tests/video_detector_tests/mathlib.py:29-55": "Merge Overlapping Intervals in List",
    "/tests/video_detector_tests/mathlib.py:56-77": "Unifying Boundaries and Mapping Markers",
    "/tests/video_detector_tests/mathlib.py:78-103": "Checking and Updating Marks",
    "/tests/video_detector_tests/motion_github.py": "Motion Detection Video Algorithm",
    "/tests/video_detector_tests/motion_github.py:1-29": "Motion Detector Python Video Processing",
    "/tests/video_detector_tests/motion_github.py:30-62": "Real-Time Video Motion Detection Algorithm",
    "/tests/video_detector_tests/motion_gpl.sh": "Webcam Video Capture with FFmpeg",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py": "Mean Variance Stabilization",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:1-33": "Stable Pip Data Processing Functions",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:100-129": "Parse and Crop Command Creation",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:131-155": "Kalman Filter for Time-Series Data",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:156-184": "Span List Filtering and Derivative Signal Generation",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:185-210": "Signal Filtering and Threshold Analysis",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:211-238": "Pip Mean Variance Stabilization",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:239-259": "Command Merging Algorithm",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:260-291": "PIP Image Stabilization and Detection",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:292-318": "Default Values and Dictionary Conversions",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:319-334": "Sequence Continuity Maintenance",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:335-358": "Command Dictionary Manipulation and Conversion",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:34-52": "Exponential Moving Average Video Detector",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:359-387": "Video Detector Test Data Processing",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:388-419": "PIP Region Exporter Script",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:421-427": "Creating Rectangles with Matplotlib",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:53-77": "Threshold-Based Command Adjustment",
    "/tests/video_detector_tests/pip_meanVariance_stablize.py:78-99": "Checking and Updating Command Dictionary",
    "/tests/video_detector_tests/rect_active_rect_frame_difference.py": "Rect-Based Active Frame Difference Detection",
    "/tests/video_detector_tests/rect_corner_detect_fast.py": "Exploring Corner Detection Methods for Canny Edge Detector",
    "/tests/video_detector_tests/rect_detect.py": "Rect-Based Video Object Detection",
    "/tests/video_detector_tests/rect_detect.py:1-20": "Rectangle Similarity Checker",
    "/tests/video_detector_tests/rect_detect.py:118-152": "Rectangle Detection and Edge Processing in Video Detector",
    "/tests/video_detector_tests/rect_detect.py:154-176": "Filtering and Storing Lines in HoughLines",
    "/tests/video_detector_tests/rect_detect.py:177-204": "Trigonometry-Based Line Drawing Algorithm",
    "/tests/video_detector_tests/rect_detect.py:20-43": "Rectangle Change Detection Algorithm",
    "/tests/video_detector_tests/rect_detect.py:205-226": "Rectangle Detection Algorithm",
    "/tests/video_detector_tests/rect_detect.py:227-245": "Rectangle Threshold Drawing",
    "/tests/video_detector_tests/rect_detect.py:246-264": "Lines and Edges Detection in Images",
    "/tests/video_detector_tests/rect_detect.py:266-290": "OpenCV Line Detection and Display",
    "/tests/video_detector_tests/rect_detect.py:291-298": "Rect Detect: Mode 1 Output Results",
    "/tests/video_detector_tests/rect_detect.py:44-65": "Rectangle Merging Algorithm",
    "/tests/video_detector_tests/rect_detect.py:66-89": "Rectangle Dictionary Updater",
    "/tests/video_detector_tests/rect_detect.py:90-117": "Mean Difference Calculator for Rectangles",
    "/tests/video_detector_tests/rectangle_framedifference.py": "Motion-Based Object Detection",
    "/tests/video_detector_tests/rectangle_framedifference.py:1-33": "Motion Detector with Frame Difference Algorithm",
    "/tests/video_detector_tests/rectangle_framedifference.py:120-140": "Frame Tracker in Video Detection",
    "/tests/video_detector_tests/rectangle_framedifference.py:141-169": "Video Frame Rectangle Detection",
    "/tests/video_detector_tests/rectangle_framedifference.py:34-70": "Video Object Tracking Algorithm",
    "/tests/video_detector_tests/rectangle_framedifference.py:71-95": "Merging Contour Bounding Boxes",
    "/tests/video_detector_tests/rectangle_framedifference.py:96-119": "Average Threshold Check for Video Detector",
    "/tests/video_detector_tests/rectangle_test.py": "Rectangle Test: Video Object Tracking",
    "/tests/video_detector_tests/rectangle_test.py:1-31": "OpenCV Motion Detector Testing",
    "/tests/video_detector_tests/rectangle_test.py:32-66": "Video Frame Algorithm with Progress Bar",
    "/tests/video_detector_tests/rectangle_test.py:67-91": "Bounding Box Detection Algorithm",
    "/tests/video_detector_tests/rectangle_test.py:92-116": "Rectangle Test Frame Detection",
    "/tests/video_detector_tests/siamMask/demo.sh": "Run SiamMask Demo Script",
    "/tests/video_detector_tests/siamMask/setup.sh": "SiamMask Setup and Model Download",
    "/tests/video_detector_tests/singleTracker.py": "Dog Detection and Tracking with YOLOv5",
    "/tests/video_detector_tests/singleTracker.py:1-31": "Dog Detection using YOLOv5",
    "/tests/video_detector_tests/singleTracker.py:115-115": "Closing OpenCV Video Windows",
    "/tests/video_detector_tests/singleTracker.py:32-56": "Deep Learning Dog Detector",
    "/tests/video_detector_tests/singleTracker.py:57-86": "Video Tracking Initialization Code",
    "/tests/video_detector_tests/singleTracker.py:87-114": "Dog Tracker in Video Frames",
    "/tests/video_detector_tests/yolo.py": "YOLOv5-Based Video Object Detection and Extraction",
    "/tests/video_detector_tests/yolo.py:1-37": "YOLOv5-Based Text Extraction from Video Frames",
    "/tests/video_detector_tests/yolo.py:37-41": "YOLO-based Object Detection and Display",
    "/tests/video_detector_tests/yolo_norfair.py": "YOLO Video Object Detector",
    "/tests/video_detector_tests/yolo_norfair.py:1-22": "Detectron2 Instance Segmentation Setup",
    "/tests/video_detector_tests/yolo_norfair.py:24-48": "YOLO Object Detector Frame Analysis",
    "/tests/video_detector_tests/yolo_norfair.py:49-66": "Updating Tracked Objects with Detections",
    "/tests/video_detector_tests/yolo_norfair.py:67-94": "Tracking Objects and Drawing Circles",
    "/tests/video_detector_tests/yolo_norfair.py:95-103": "Key-Triggered Video Frame and Save Control",
    "/tests/video_phash_deduplication/README.md": "Video File Deduplication with Phash",
    "/tests/video_phash_deduplication/config_milvus.sh": "Setting Up Milvus Database",
    "/tests/video_phash_deduplication/test_image_hash.py": "Image Color Hash Comparison with PIL and Imagehash",
    "/tests/video_phash_deduplication/test_image_hash_milvus_database_search.py": "Milvus Image Phash Search",
    "/tests/video_phash_deduplication/test_milvus.py": "Debugging Milvus Video Collection",
    "/tests/video_phash_deduplication/test_milvus.py:1-39": "Milvus Database Connection and Collection Management",
    "/tests/video_phash_deduplication/test_milvus.py:103-139": "Video Phash Deduplication Test",
    "/tests/video_phash_deduplication/test_milvus.py:140-141": "Debugging Milvus Document Retrieval",
    "/tests/video_phash_deduplication/test_milvus.py:40-76": "Milvus Schema and Deduplication Test",
    "/tests/video_phash_deduplication/test_milvus.py:77-102": "Milvus Collection Data Insertion and Querying",
    "/tests/video_phash_deduplication/test_milvus_library.py": "Milvus Library for Video Deduplication",
    "/tests/video_phash_deduplication/test_milvus_library.py:1-35": "Milvus Collection Management Function",
    "/tests/video_phash_deduplication/test_milvus_library.py:104-136": "Milvus Video Duplicate Search",
    "/tests/video_phash_deduplication/test_milvus_library.py:137-164": "Milvus Video Duration Filter",
    "/tests/video_phash_deduplication/test_milvus_library.py:165-200": "Duplicated Video Indexing with Milvus",
    "/tests/video_phash_deduplication/test_milvus_library.py:201-226": "Milvus Video Deduplication Check",
    "/tests/video_phash_deduplication/test_milvus_library.py:226-234": "Video Phash Deduplication and Comparison",
    "/tests/video_phash_deduplication/test_milvus_library.py:36-65": "Milvus Video Phash Collection Schema",
    "/tests/video_phash_deduplication/test_milvus_library.py:68-103": "Video Phash Indexing with Milvus",
    "/tests/video_phash_deduplication/test_video_hash.py": "Video Phash Deduplication Test",
    "/tests/video_phash_deduplication/test_video_hash.py:1-32": "Video Phash Calculation with `videohashes`",
    "/tests/video_phash_deduplication/test_video_hash.py:33-65": "Video Hashing Deduplication Test",
    "/tests/video_script_generation_reconstruction/README.md": "AI Toolkit Scripting for PaddleVideo",
    "/tests/video_script_generation_reconstruction/lstm_trial.py": "LSTM Layer Output Shapes",
    "/tests/video_script_generation_reconstruction/raw_data_cut.py": "Neural Network Data Preprocessing",
    "/tests/video_script_generation_reconstruction/raw_data_cut.py:1-33": "Random Shape Cut Generator for Video Data",
    "/tests/video_script_generation_reconstruction/raw_data_cut.py:34-67": "Conv-Pool-Act Activation and RNN Processing",
    "/tests/video_script_generation_reconstruction/raw_data_cut.py:69-81": "RNN Layer for Character Extraction",
    "/tests/video_script_generation_reconstruction/raw_data_understanding.py": "Random Video and Audio Data Generation",
    "/tests/video_script_generation_reconstruction/spp_any_video.py": "Spatial Pyramid Pooling for Video Reconstruction",
    "/tests/video_script_generation_reconstruction/spp_any_video.py:1-30": "Video and Audio Shape Creation for Inputs",
    "/tests/video_script_generation_reconstruction/spp_any_video.py:124-153": "Merged Audio-Video LSTM Processing with ReLU",
    "/tests/video_script_generation_reconstruction/spp_any_video.py:154-186": "Video CutNet Model Training Loop",
    "/tests/video_script_generation_reconstruction/spp_any_video.py:188-209": "Gradient Descent on Audio-Video Data",
    "/tests/video_script_generation_reconstruction/spp_any_video.py:210-211": "Unspecified Batch Size in Recurrent Network",
    "/tests/video_script_generation_reconstruction/spp_any_video.py:31-63": "Random Data Arrays Initialization",
    "/tests/video_script_generation_reconstruction/spp_any_video.py:65-91": "LSTM Neural Network for Video-Audio Data Processing",
    "/tests/video_script_generation_reconstruction/spp_any_video.py:92-123": "SPP LSTM Video Feature Extraction",
    "/tests/video_script_generation_reconstruction/spp_module.py": "Spatial Pyramid Pooling Module",
    "/tests/video_script_generation_reconstruction/spp_module.py:1-22": "Spatial Pyramid Pooling Function",
    "/tests/video_script_generation_reconstruction/spp_module.py:23-49": "Spatial Pyramid Pooling Function",
    "/tests/video_script_generation_reconstruction/spp_module.py:50-67": "1D Conv-LSTM Processing Sequences",
    "/tests/viral_video_experiments/init.sh": "Viral Video Data Analysis Setup",
    "/tests/voice_detect_extract_split/paddlespeech/test.sh": "PaddleSpeech ASR Test Script",
    "/tests/voice_detect_extract_split/spleeter/README.md": "Spleeter Paraphrasing with HF and WNNL",
    "/tests/voice_detect_extract_split/spleeter/download_models.sh": "Spleeter Model Download",
    "/tests/voice_detect_extract_split/spleeter/spleeter_init.sh": "Spleeter Version 2.1.0 Installation and Imports",
    "/tests/voice_detect_extract_split/spleeter/test.sh": "Spleeter Audio Separation Issues",
    "/tests/voice_detect_extract_split/spleeter/test2.sh": "Audio Separation Issue with Spleeter's 2-Stems Model",
    "/tests/youtube_shorts_heuristic_search/README.md": "YouTube Shorts Search: Python Library and API",
    "/tests/youtube_shorts_heuristic_search/heuristic_model.py": "Heuristic-Based Video Search"
}