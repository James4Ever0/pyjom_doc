{
    "4400": {
        "file_id": 558,
        "content": "5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%22CHOOSE_ADDR%5C%5C%5C%22%7D%5D%7D%5C%22%2C%5C%22TMALL_MARKET_O2O%5C%22%3A%5C%22%7B%5C%5C%5C%22stores%5C%5C%5C%22%3A%5B%7B%5C%5C%5C%22code%5C%5C%5C%22%3A%5C%5C%5C%22235565019%5C%5C%5C%22%2C%5C%5C%5C%22bizType%5C%5C%5C%22%3A%5C%5C%5C%22DELIVERY_TIME_HALF_DAY%5C%5C%5C%22%2C%5C%5C%5C%22addrId%5C%5C%5C%22%3A%5C%5C%5C%229056332332%5C%5C%5C%22%2C%5C%5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%22CHOOSE_ADDR%5C%5C%5C%22%7D%5D%7D%5C%22%7D%22%2C%22URL_REFERER_ORIGIN%22%3A%22%2F%2Fs.m.taobao.com%2Fh5entry%3Fg_channelSrp%3Dvideointeract%26g_tab%3Dtbexperience%26g_pfilter%3Ddaren%26g_closeModues%3Dtab%26closeExpSubTab%3Dtrue%26g_csearchdoor_spm%3Da310p.14955560%26spm%3Da310p.13800399%26launchMode%3Dandroid_new_task%26g_closeExpSubTab%3Dtrue%22%2C%22ad_type%22%3A%221.0%22%2C%22apptimestamp%22%3A%221665607023%22%2C%22areaCode%22%3A%22CN%22%2C%22brand%22%3A%22Xiaomi%22%2C%22canP4pVideoPlay%22%3A%22true%22%2C%22channelSrp%22%3A%22videointeract%22%2C%22cityCode%22%3A%223201",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/taobao_query.sh:11-11"
    },
    "4401": {
        "file_id": 558,
        "content": "Code snippet representing JSON data with information on stores and categories. It includes store codes, bizTypes, addresses, and types for TMALL_MARKET_O2O. The URL_REFERER_ORIGIN specifies the referer origin as \"s.m.taobao.com\".",
        "type": "comment"
    },
    "4402": {
        "file_id": 558,
        "content": "00%22%2C%22closeExpSubTab%22%3A%22true%22%2C%22closeModues%22%3A%22tab%22%2C%22countryNum%22%3A%22156%22%2C%22csearchdoor_spm%22%3A%22a310p.14955560%22%2C%22device%22%3A%22Mi+MIX+2%22%2C%22editionCode%22%3A%22CN%22%2C%22from%22%3A%22input%22%2C%22globalLbs%22%3A%22%7B%5C%22biz_common%5C%22%3A%7B%5C%22recommendedAddress%5C%22%3A%7B%5C%22addressId%5C%22%3A%5C%229056332332%5C%22%2C%5C%22area%5C%22%3A%5C%22%E6%A0%96%E9%9C%9E%E5%8C%BA%5C%22%2C%5C%22areaDivisionCode%5C%22%3A%5C%22320113%5C%22%2C%5C%22city%5C%22%3A%5C%22%E5%8D%97%E4%BA%AC%E5%B8%82%5C%22%2C%5C%22cityDivisionCode%5C%22%3A%5C%22320100%5C%22%2C%5C%22detailText%5C%22%3A%5C%22%E6%96%87%E8%8B%91%E8%B7%AF9%E5%8F%B7%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E5%9C%86%E9%80%9A%E5%BF%AB%E9%80%92%5C%22%2C%5C%22lat%5C%22%3A%5C%2232.11078%5C%22%2C%5C%22lng%5C%22%3A%5C%22118.932821%5C%22%2C%5C%22province%5C%22%3A%5C%22%E6%B1%9F%E8%8B%8F%E7%9C%81%5C%22%2C%5C%22provinceDivisionCode%5C%22%3A%5C%22320000%5C%22%2C%5C%22town%5C%22%3A%5",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/taobao_query.sh:11-11"
    },
    "4403": {
        "file_id": 558,
        "content": "This code segment represents a JSON object with various parameters, including the device model, country, search input source, and recommended address information for geolocation. It seems to be part of a larger API request or webpage interaction, likely related to user location settings or preferences.",
        "type": "comment"
    },
    "4404": {
        "file_id": 558,
        "content": "C%22%E4%BB%99%E6%9E%97%E8%A1%97%E9%81%93%5C%22%2C%5C%22townDivisionCode%5C%22%3A%5C%22320113007%5C%22%2C%5C%22type%5C%22%3A%5C%22deliver%5C%22%7D%7D%2C%5C%22eleme%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22999%5C%22%7D%5D%7D%2C%5C%22meeting_place%5C%22%3A%7B%7D%2C%5C%22on_time_promise%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22353585008%5C%22%7D%2C%7B%5C%22storeId%5C%22%3A%5C%22353612036%5C%22%7D%2C%7B%5C%22storeId%5C%22%3A%5C%22525826023%5C%22%7D%5D%7D%2C%5C%22same_city_buy%5C%22%3A%7B%7D%2C%5C%22tmall_market_o2o%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22235565019%5C%22%7D%5D%7D%2C%5C%22txd%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22707447478%5C%22%7D%5D%7D%7D%22%2C%22gpsEnabled%22%3A%22false%22%2C%\"",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/taobao_query.sh:11-11"
    },
    "4405": {
        "file_id": 558,
        "content": "This code contains nested JSON objects representing various services and store information for an online platform. It includes options for food delivery, eleme, meeting place, on-time promise, same city buy, tmall_market_o2o, and txd with their respective store IDs. GPS is disabled.",
        "type": "comment"
    },
    "4406": {
        "file_id": 559,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/run_weishi.sh",
        "type": "filepath"
    },
    "4407": {
        "file_id": 559,
        "content": "This command starts Mitmproxy in Socks5 mode, listens on port 8050 for incoming connections, writes logs to weishi.log, and enables handling of WebSocket streams.",
        "type": "summary"
    },
    "4408": {
        "file_id": 559,
        "content": "mitmproxy --mode socks5 --listen-port 8050 -w weishi.log --set stream_websocket=true",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/run_weishi.sh:1-1"
    },
    "4409": {
        "file_id": 559,
        "content": "This command starts Mitmproxy in Socks5 mode, listens on port 8050 for incoming connections, writes logs to weishi.log, and enables handling of WebSocket streams.",
        "type": "comment"
    },
    "4410": {
        "file_id": 560,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/run_gg.sh",
        "type": "filepath"
    },
    "4411": {
        "file_id": 560,
        "content": "This command starts mitmproxy in socks5 mode, listening on port 8050 and logs to gg.log. It also enables websocket streaming support. The user asks for domain name confirmation and doubts about IP stability.",
        "type": "summary"
    },
    "4412": {
        "file_id": 560,
        "content": "mitmproxy --mode socks5 --listen-port 8050 -w gg.log --set stream_websocket=true\n# what is the domain name for this service? are you sure the ip will not change?",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/run_gg.sh:1-3"
    },
    "4413": {
        "file_id": 560,
        "content": "This command starts mitmproxy in socks5 mode, listening on port 8050 and logs to gg.log. It also enables websocket streaming support. The user asks for domain name confirmation and doubts about IP stability.",
        "type": "comment"
    },
    "4414": {
        "file_id": 561,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/README.md",
        "type": "filepath"
    },
    "4415": {
        "file_id": 561,
        "content": "This code seems to be related to the tiktok_douyin module of pyjom project. It refers to a server address (111.48.141.77:8081) and mentions that the direction arrows indicate request and response, suggesting it deals with network communication. The code also references a query related to taobao guangguang, indicating it could be used for data retrieval from the Tmall platform of Taobao, involving an app crawler. It also refers to a JAR file for further information on how this is implemented.",
        "type": "summary"
    },
    "4416": {
        "file_id": 561,
        "content": "weishi use jce with TYPE_COMPRESS\nwhat is this server doing?\n111.48.141.77:8081\nmaybe the direction is not right.\n-> is response.\n<- is request.\nhttps://github.com/tsuzcx/qq_apk/blob/36c43445f737ed1c8854ce9dadac3979a0fc8b90/com.tencent.tim/classes.jar/com/tencent/beacon/base/net/b/d.java\nfor taobao guangguang it seems just a query away. but that query is a long one. hard to tell.\n淘口令解析\n淘宝app爬虫",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/README.md:1-17"
    },
    "4417": {
        "file_id": 561,
        "content": "This code seems to be related to the tiktok_douyin module of pyjom project. It refers to a server address (111.48.141.77:8081) and mentions that the direction arrows indicate request and response, suggesting it deals with network communication. The code also references a query related to taobao guangguang, indicating it could be used for data retrieval from the Tmall platform of Taobao, involving an app crawler. It also refers to a JAR file for further information on how this is implemented.",
        "type": "comment"
    },
    "4418": {
        "file_id": 562,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/guangguang_update.sh",
        "type": "filepath"
    },
    "4419": {
        "file_id": 562,
        "content": "The code fetches Taobao API content recommendations using JSONP, specific parameters, and JavaScript version 2.6.1 with authentication cookies in two GET requests; it also sends a POST request with JSON format to an API endpoint including authentication, but the purpose remains unclear.",
        "type": "summary"
    },
    "4420": {
        "file_id": 562,
        "content": "# curl 'https://h5api.m.taobao.com/h5/mtop.taobao.content.detail.mix.recommend.h5/1.0/?jsv=2.6.1&appKey=12574478&t=1652513788601&sign=898aac6857c0497f83579230a5117e9e&api=mtop.taobao.content.detail.mix.recommend.h5&v=1.0&H5Request=true&preventFallback=true&type=jsonp&dataType=jsonp&callback=mtopjsonp3&data=%7B%22contentId%22%3A%22346882467812%22%2C%22source%22%3A%22guangguang_cainixihuan%22%2C%22pageSize%22%3A5%2C%22pageIndex%22%3A0%2C%22bizParameters%22%3A%22%7B%5C%22itemIds%5C%22%3A%5B%5D%2C%5C%22contentId%5C%22%3A%5C%22346882467812%5C%22%2C%5C%22videoId%5C%22%3A%5C%22346882467812%5C%22%7D%22%2C%22extendParameters%22%3A%22%7B%5C%22expoContents%5C%22%3A%5C%22346882467812%5C%22%2C%5C%22slideAction%5C%22%3A%5C%22up%5C%22%2C%5C%22utparam%5C%22%3Anull%2C%5C%22page%5C%22%3A%5C%22guess-guangguang%5C%22%7D%22%7D' -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0' -H 'Accept: */*' -H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'Connection: keep-alive' ",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/guangguang_update.sh:1-1"
    },
    "4421": {
        "file_id": 562,
        "content": "This code is making a GET request to retrieve data from the Taobao API endpoint for content recommendations. It uses JSONP as the data type and callback parameter, specifies the content ID and source, and sets some other parameters like page size and index.",
        "type": "comment"
    },
    "4422": {
        "file_id": 562,
        "content": "-H 'Referer: https://market.m.taobao.com/' -H 'Cookie: cna=xXJJF/edElYCAd9ok0ozTO9S; isg=BJCQTV2Txmwd0ZnJwllsjEHhYtfiWXSjzRmbHophXOu-xTBvMmlEM-b3nQUlDix7; tfstk=cXgPBIwvIGQj6XUTrzaedIY7JeERZ4r3bZPLqdArAHqPwSrci16Limmag5IpJuf..; l=eBSy3J_rg94a6G7SBOfahurza77OSIOYYuPzaNbMiOCP9L1H5PGOW64n2rTMC31Nh6zWR3orgupwBeYBYIc8c1UNiHwStXDmn; miid=5838535061391394454; enc=iGbYsBExryBryNGDIeLiB3TSNdcdTPSzvhRgC0EExZrv5jHl85qb6bwqwxCyHxis8MkbUtiGLNI%2FRL7axbcx4GXUUuIsmiBDAl4K%2BLKyFBGK0mR%2FlBHvBVipuG5%2BY2CL; thw=cn; t=bc8cdf0df40cdf9cf6967741f7a75f8a; _m_h5_tk=8461de16a664d8efdf7a03b9cb8551f9_1652520895580; _m_h5_tk_enc=4a0616ef73708445252bf305732ce7fe; xlly_s=1' -H 'Sec-Fetch-Dest: script' -H 'Sec-Fetch-Mode: no-cors' -H 'Sec-Fetch-Site: same-site' -H 'TE: trailers'\n# how to get the freaking cat?\n# but what are these signs?\ncurl  'https://h5api.m.taobao.com/h5/mtop.taobao.content.detail.mix.recommend.h5/1.0/?jsv=2.6.1&appKey=12574478&t=1652513788601&sign=898aac6857c0497f83579230a5117e9e&api=mtop.taobao.c",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/guangguang_update.sh:1-7"
    },
    "4423": {
        "file_id": 562,
        "content": "This code is making a HTTP GET request to 'https://h5api.m.taobao.com/h5/mtop.taobao.content.detail.mix.recommend.h5/1.0/' with various headers, including Cookie and Referer. The purpose might be to fetch data from the server or interact with the website's API. It seems to involve authentication as it contains multiple cookies and other tokens.",
        "type": "comment"
    },
    "4424": {
        "file_id": 562,
        "content": "ontent.detail.mix.recommend.h5&v=1.0&H5Request=true&preventFallback=true&type=jsonp&dataType=jsonp&callback=mtopjsonp3&data=%7B%22contentId%22%3A%22346882467812%22%2C%22source%22%3A%22guangguang_cainixihuan%22%2C%22pageSize%22%3A5%2C%22pageIndex%22%3A0%2C%22bizParameters%22%3A%22%7B%5C%22itemIds%5C%22%3A%5B%5D%2C%5C%22contentId%5C%22%3A%5C%22346882467812%5C%22%2C%5C%22videoId%5C%22%3A%5C%22346882467812%5C%22%7D%22%2C%22extendParameters%22%3A%22%7B%5C%22expoContents%5C%22%3A%5C%22346882467812%5C%22%2C%5C%22slideAction%5C%22%3A%5C%22up%5C%22%2C%5C%22utparam%5C%22%3Anull%2C%5C%22page%5C%22%3A%5C%22guess-guangguang%5C%22%7D%22%7D'  -H \"Cookie: _m_h5_tk=8461de16a664d8efdf7a03b9cb8551f9_1652520895580; _m_h5_tk_enc=4a0616ef73708445252bf305732ce7fe;\"\n# mtop.taobao.content.detail.mix.recommend.h5\n# execute it twice to get the cookie. no need for other shits.\n# jsv\n# \t2.6.1\n# appKey\n# \t12574478\n# t\n# \t1652513695322\n# sign\n# \t8b9b8134ff54f4d4a725dc37db8f10e1\n# api\n# \tmtop.taobao.content.detail.mix.detail.h5\n# v",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/guangguang_update.sh:7-22"
    },
    "4425": {
        "file_id": 562,
        "content": "The code is making a GET request to retrieve the recommended content from Taobao's API. It includes specific parameters, such as content ID, source, page size, and page index. The request is using JSONP format with a specified callback function \"mtopjsonp3\". The cookies _m_h5_tk and _m_h5_tk_enc are included in the headers for authentication. The code is written in JavaScript (jsv) using version 2.6.1. The request will be executed twice, but it's unclear why, as there are no other relevant instructions provided.",
        "type": "comment"
    },
    "4426": {
        "file_id": 562,
        "content": "# \t1.0\n# H5Request\n# \ttrue\n# preventFallback\n# \ttrue\n# type\n# \tjsonp\n# dataType\n# \tjsonp\n# callback\n# \tmtopjsonp1\n# data\n# \t{\"contentId\":\"346882467812\",\"source\":\"guangguang_cainixihuan\",\"extendParameters\":\"{\\\"page\\\":\\\"guess-guangguang\\\",\\\"product_type\\\":\\\"videointeract\\\"}\"}\n# contentId, videoId, expoContents, all have videoId inside\n# https://market.m.taobao.com/app/tb-source-app/video-fullpage/pages/index?wh_weex=true&wx_navbar_hidden=true&origin=VideoInteract%7Ca310p.13800399.0.0%7C%7B%22contentId%22%3A%22346882467812%22%7D&contentId=346882467812&source=guess-guangguang&type=guangguang_cainixihuan&spm=a2141.1.guessitemtab_1.3&accountId=0&videoUrl=https%3A%2F%2Fcloud.video.taobao.com%2Fplay%2Fu%2Fnull%2Fp%2F1%2Fe%2F6%2Ft%2F1%2F346882467812.mp4&coverImage=https%3A%2F%2Fimg.alicdn.com%2Fimgextra%2Fi2%2F604321789%2FO1CN01rVTgs31P5PIQ7r2JR_!!604321789.jpg&id=346882467812&sourceType=other&suid=7f31e56f-2878-4462-9a5a-acd7d5deeec5&ut_sk=1.W4yy2CtIMUMDAA1l3Dnx4jNG_21646297_1651742283972.Copy.tblive-video&",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/guangguang_update.sh:23-39"
    },
    "4427": {
        "file_id": 562,
        "content": "This code seems to be a request for video information from Taobao API, specifying parameters like contentId, source, and extendParameters. It is using JSONP as the data type and includes a callback function \"mtopjsonp1\". The URL points to video resources on Taobao's platform.",
        "type": "comment"
    },
    "4428": {
        "file_id": 562,
        "content": "un=42ad1253bebcb796f3ba5a7177d3a823&share_crt_v=1&un_site=0&sp_abtk=common_tblive-video_commonInfo&sp_tk=55Sf5a%2B55Zyo54S25pyJ5Li65LiK5a2Q5piv5Y675L2g&cpp=1&shareurl=true&short_name=h.fJE9C6B&bxsign=scdEMXp8zB45hs84KNhAae8siAPZ43wmqm4C-4UXtj2EzGyI0oMyb12vk2tKevOe4p1bZfPRmWxc9UVR3vFx6qhAj6WS0roAs_XJt2bkVF7n1o6YetJv7wgLiCitW-wW5CW&sm=ee59f9&app=firefox\n# https://g.alicdn.com/tnode/fullpageshortvideo/2.1.0/main.json.json\n# wtf is this shit? binary?\n# https://g.alicdn.com/tnode/fullpageshortvideo/2.1.0/main.json.json\nset $parameter=\"359455393248\"\ncurl  'https://h5api.m.taobao.com/h5/mtop.taobao.content.detail.mix.recommend.h5/1.0/?jsv=2.6.1&api=mtop.taobao.content.detail.mix.recommend.h5&v=1.0&H5Request=true&preventFallback=true&type=jsonp&dataType=jsonp&callback=mtopjsonp3&data=%7B%22contentId%22%3A%22'$parameter'%22%2C%22source%22%3A%22guangguang_cainixihuan%22%2C%22pageSize%22%3A5%2C%22pageIndex%22%3A0%2C%22bizParameters%22%3A%22%7B%5C%22itemIds%5C%22%3A%5B%5D%2C%5C%22contentId%5C%22%3A%5C%",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/guangguang_update.sh:39-47"
    },
    "4429": {
        "file_id": 562,
        "content": "This code seems to be a URL for fetching data using the cURL command-line tool. It makes a GET request to 'https://h5api.m.taobao.com/...' with specific parameters like jsv, api, preventFallback, type, dataType, and callback, along with the contentId and source. The purpose of this request is unclear as it's mentioned that \"wtf is this shit? binary?\"",
        "type": "comment"
    },
    "4430": {
        "file_id": 562,
        "content": "22'$parameter'%5C%22%2C%5C%22videoId%5C%22%3A%5C%22'$parameter'%5C%22%7D%22%2C%22extendParameters%22%3A%22%7B%5C%22expoContents%5C%22%3A%5C%22'$parameter'%5C%22%2C%5C%22slideAction%5C%22%3A%5C%22up%5C%22%2C%5C%22utparam%5C%22%3Anull%2C%5C%22page%5C%22%3A%5C%22guess-guangguang%5C%22%7D%22%7D'  -H \"Cookie: _m_h5_tk=8461de16a664d8efdf7a03b9cb8551f9_1652520895580; _m_h5_tk_enc=4a0616ef73708445252bf305732ce7fe;\"",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/guangguang_update.sh:47-47"
    },
    "4431": {
        "file_id": 562,
        "content": "This code is sending a POST request with parameters in JSON format to an API endpoint. The request includes \"videoId\" and \"extendParameters\" which contain values from '$parameter'. It also sets a Cookie header for authentication.",
        "type": "comment"
    },
    "4432": {
        "file_id": 563,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/get_url.py",
        "type": "filepath"
    },
    "4433": {
        "file_id": 563,
        "content": "This code uses the requests library to send a GET request to a specific URL, passing parameters in the query string. The response cookies are printed, and then another GET request is sent with those cookies included. Finally, the response data is printed.",
        "type": "summary"
    },
    "4434": {
        "file_id": 563,
        "content": "import requests\ns = requests.Session()\nparameter=\"359455393248\"\nurl = 'https://h5api.m.taobao.com/h5/mtop.taobao.content.detail.mix.recommend.h5/1.0/?jsv=2.6.1&appKey=12574478&t=1652513788601&api=mtop.taobao.content.detail.mix.recommend.h5&v=1.0&H5Request=true&preventFallback=true&type=jsonp&dataType=jsonp&callback=mtopjsonp3&data=%7B%22contentId%22%3A%22{}%22%2C%22source%22%3A%22guangguang_cainixihuan%22%2C%22pageSize%22%3A5%2C%22pageIndex%22%3A0%2C%22bizParameters%22%3A%22%7B%5C%22itemIds%5C%22%3A%5B%5D%2C%5C%22contentId%5C%22%3A%5C%22{}%5C%22%2C%5C%22videoId%5C%22%3A%5C%22{}%5C%22%7D%22%2C%22extendParameters%22%3A%22%7B%5C%22expoContents%5C%22%3A%5C%22{}%5C%22%2C%5C%22slideAction%5C%22%3A%5C%22up%5C%22%2C%5C%22utparam%5C%22%3Anull%2C%5C%22page%5C%22%3A%5C%22guess-guangguang%5C%22%7D%22%7D'.format(parameter,parameter,parameter,parameter)\ns.get(url)\nprint(s.cookies) # must be valid url then you will be set cookie.\nr = s.get(url)\ndata = r.text\nprint(data)",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/get_url.py:1-15"
    },
    "4435": {
        "file_id": 563,
        "content": "This code uses the requests library to send a GET request to a specific URL, passing parameters in the query string. The response cookies are printed, and then another GET request is sent with those cookies included. Finally, the response data is printed.",
        "type": "comment"
    },
    "4436": {
        "file_id": 564,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/get_frida_codeshare_source.sh",
        "type": "filepath"
    },
    "4437": {
        "file_id": 564,
        "content": "This script retrieves the project source from Frida CodeShare using the provided parameter and outputs it in a format that can be easily consumed by various programming languages, such as JSON5 or JavaScript. However, there is a potential code injection warning due to the use of shell commands like `grep`, `sed`, and `python3` for data processing.",
        "type": "summary"
    },
    "4438": {
        "file_id": 564,
        "content": "# warning! potential code injection.\n# better use some json5 formatter instead.\n# this is strict! fuck.\nPARAM=$1\necho \"// script name: $PARAM\"\necho\n# exit\ncurl \"https://codeshare.frida.re/@$PARAM/\" 2>/dev/null | grep \"projectSource: \" | sed 's/projectSource:/\"projectSource\":/;s/^/{/;s/,$//;s/$/}/' | python3 -c \"d=input();import json;p=json.loads(d);print(p['projectSource'])\"\n# curl \"https://codeshare.frida.re/@Gand3lf/xamarin-antiroot/\" 2>/dev/null | grep \"projectSource: \" | sed 's/^/var a={/;s/$/}\\; console.log(a.projectSource);/' | node",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/get_frida_codeshare_source.sh:1-9"
    },
    "4439": {
        "file_id": 564,
        "content": "This script retrieves the project source from Frida CodeShare using the provided parameter and outputs it in a format that can be easily consumed by various programming languages, such as JSON5 or JavaScript. However, there is a potential code injection warning due to the use of shell commands like `grep`, `sed`, and `python3` for data processing.",
        "type": "comment"
    },
    "4440": {
        "file_id": 565,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/frida_globalswitch_apk.js",
        "type": "filepath"
    },
    "4441": {
        "file_id": 565,
        "content": "The code disables SSL-SPDY and SPDY for packet capture debugging, and attempts to print class names using Frida in an APK, but fails to hook 'Response' methods. It uses Java classes in 'mtopsdk.network' to track requests, log details, and initializes ANetworkCallImpl, while modifying 'mtopsdk.mtop.global.SwitchConfig' using Frida for URL logging.",
        "type": "summary"
    },
    "4442": {
        "file_id": 565,
        "content": "////////////////////////////////////////////////////////////////////////\n// try to disable security? disable ssl-spdy and spdy\n////////////////////////////////////////////////////////////////////////\n// try this first anyway.\nsetTimeout(function () {\n    console.log('start——*-*-*-*-*-');\n   Java.perform(function () {\n       var SwitchConfig = Java.use('mtopsdk.mtop.global.SwitchConfig');\n       SwitchConfig.isGlobalSpdySwitchOpen.overload().implementation = function () {\n           var ret = this.isGlobalSpdySwitchOpen.apply(this, arguments);\n           console.log(\"开启抓包\" + ret);\n           return false;\n       }\n       SwitchConfig.isGlobalSpdySslSwitchOpen.overload().implementation = function () {\n        var ret = this.isGlobalSpdySslSwitchOpen.apply(this, arguments);\n        console.log(\"开启抓包\" + ret);\n        return false;\n       }\n   });\n});\n// ————————————————\n// 版权声明：本文为CSDN博主「哈里哈气」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n// 原文链接：https://blog.csdn.net/qq_34067821/article/details/103203549\n////////////////////////////////////////////////////////////////////////",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/frida_globalswitch_apk.js:2-27"
    },
    "4443": {
        "file_id": 565,
        "content": "This code attempts to disable SSL-SPDY and SPdy by overriding the isGlobalSpdySwitchOpen and isGlobalSpdySslSwitchOpen methods of the SwitchConfig class. It sets both switches to off, effectively disabling them, in order to enable packet capture for debugging purposes. The code is attributed to a CSDN blog post by the author \"哈里哈气\".",
        "type": "comment"
    },
    "4444": {
        "file_id": 565,
        "content": "// print class names\n////////////////////////////////////////////////////////////////////////\n// var callback = {\n// \t'onMatch': function(cname){\n// \t\t//lets just print out the class name.\n// \t\tconsole.log(cname);\n// \t},\n// \t'onComplete': function() {\n// \t\tconsole.log(\"done\");\n// \t},\n// \t'onError': function(){\n// \t\tconsole.log(\"There is error\");\n// \t}\n// };\n// Java.perform(function(){\n// \tJava.enumerateLoadedClasses(callback);\t//onMatch: function (className)\n// });\n////////////////////////////////////////////////////////////////////////// failed to hook request/response methods as expected\n////////////////////////////////////////////////////////////////////////\n// // Java.perform(function () {\n// //     // Function to hook is defined here\n// //     //所有响应\n// in this apk we do not find 'Response' shit.\n// //     var Response = Java.use('mtopsdk.network.domain.Response');\n// //     Response.$init.overload('mtopsdk.network.domain.Response$Builder').implementation = function() {\n// //         //PrintStack()\n// //         console.log(\"Response \" + arguments[0].body)",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/frida_globalswitch_apk.js:28-59"
    },
    "4445": {
        "file_id": 565,
        "content": "The code aims to print class names using Frida in an APK. It defines a callback with 'onMatch' and 'onComplete' functions, then uses Java.enumerateLoadedClasses() to obtain the class names. The code also attempts to hook 'Response' methods but failed as they were not found in the APK.",
        "type": "comment"
    },
    "4446": {
        "file_id": 565,
        "content": "// //         var ret = this.$init.apply(this, arguments);\n// //         //all request\n// //         console.log(\"Response \" + this.toString())\n// //         return ret;\n// //     };\n// //     //所有请求\n// //     var RequestBuilder = Java.use('mtopsdk.network.domain.Request$Builder');\n// //     RequestBuilder.build.overload().implementation = function() {\n// //         //PrintStack()\n// //         var ret = this.build.apply(this, arguments);\n// //         //all request\n// //         console.log(\"RequestBuilder \" + ret.toString())\n// //         return ret;\n// //     };\n// //     //所有请求\n// //     var ANetworkCallImpl = Java.use('mtopsdk.network.impl.ANetworkCallImpl');\n// //     ANetworkCallImpl.$init.overload('mtopsdk.network.domain.Request', 'android.content.Context').implementation = function() {\n// //         //PrintStack()\n// //         console.log('ANetworkCallImpl ' + arguments[0])\n// //         var ret = this.$init.apply(this, arguments);\n// //         return ret;\n// //     };\n// //     //所有请求url\n// //     var AbstractNetworkConverter = Java.use(",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/frida_globalswitch_apk.js:60-87"
    },
    "4447": {
        "file_id": 565,
        "content": "This code is manipulating several Java classes in the 'mtopsdk.network' package for tracking all requests, logging the request details and builder objects, and initializing an ANetworkCallImpl with a Request object and Context.",
        "type": "comment"
    },
    "4448": {
        "file_id": 565,
        "content": "// //         'mtopsdk.mtop.protocol.converter.impl.AbstractNetworkConverter'\n// //     );\n// //     AbstractNetworkConverter.buildBaseUrl.overload(\n// //         'mtopsdk.framework.domain.MtopContext',\n// //         'java.lang.String',\n// //         'java.lang.String'\n// //     ).implementation = function() {\n// //         console.log(\"buildBaseUrl \"+arguments[1]+' '+arguments[2])\n// //         var ret = this.buildBaseUrl.apply(this, arguments);\n// //         //url\n// //         console.log(\"buildBaseUrl \"+ret)\n// //         return ret;\n// //     };\n// //     // 禁用spdy协议\n// //     var SwitchConfig = Java.use('mtopsdk.mtop.global.SwitchConfig');\n// //     SwitchConfig.setGlobalSpdySslSwitchOpen.overload().implementation = function() {\n// //         var ret = this.isGlobalSpdySwitchOpen.apply(this, arguments);\n// //         console.log('isGlobalSpdySwitchOpenl ' + ret)\n// //         return false;\n// //     };\n// // });",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/frida_globalswitch_apk.js:88-112"
    },
    "4449": {
        "file_id": 565,
        "content": "This code is using Frida to instrument the 'mtopsdk.mtop.global.SwitchConfig' class in an APK. It overrides the 'setGlobalSpdySslSwitchOpen' method to always return false, disabling SPDY protocol. Additionally, it modifies the 'AbstractNetworkConverter.buildBaseUrl' method to log the arguments and base URL.",
        "type": "comment"
    },
    "4450": {
        "file_id": 566,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/disable_ssl.js",
        "type": "filepath"
    },
    "4451": {
        "file_id": 566,
        "content": "Bypasses Universal Android SSL Pinning using frida, replacing checkTrustedRecursive implementation to enable SSL communication.",
        "type": "summary"
    },
    "4452": {
        "file_id": 566,
        "content": "// script name: sowdust/universal-android-ssl-pinning-bypass-2\n/* \n   Universal Android SSL Pinning Bypass\n   by Mattia Vinci and Maurizio Agazzini \n   $ frida -U -f org.package.name -l universal-ssl-check-bypass.js --no-pause\n    https://techblog.mediaservice.net/2018/11/universal-android-ssl-check-bypass-2/\n*/\nJava.perform(function() {\n    var array_list = Java.use(\"java.util.ArrayList\");\n    var ApiClient = Java.use('com.android.org.conscrypt.TrustManagerImpl');\n    ApiClient.checkTrustedRecursive.implementation = function(a1, a2, a3, a4, a5, a6) {\n        // console.log('Bypassing SSL Pinning');\n        var k = array_list.$new();\n        return k;\n    }\n}, 0);",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/disable_ssl.js:1-22"
    },
    "4453": {
        "file_id": 566,
        "content": "Bypasses Universal Android SSL Pinning using frida, replacing checkTrustedRecursive implementation to enable SSL communication.",
        "type": "comment"
    },
    "4454": {
        "file_id": 567,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/decodeTaobaoQuery.py",
        "type": "filepath"
    },
    "4455": {
        "file_id": 567,
        "content": "The code decodes a Taobao query string, parses the URL-encoded data into JSON format with various parameters, and prints it using pprint for readability.",
        "type": "summary"
    },
    "4456": {
        "file_id": 567,
        "content": "import urllib.parse\nimport json\na = \"\"\"%7B%22LBS%22%3A%22%7B%5C%22TB%5C%22%3A%5C%22%7B%5C%5C%5C%22stores%5C%5C%5C%22%3A%5B%7B%5C%5C%5C%22code%5C%5C%5C%22%3A%5C%5C%5C%22236736190%5C%5C%5C%22%2C%5C%5C%5C%22bizType%5C%5C%5C%22%3A%5C%5C%5C%222%5C%5C%5C%22%2C%5C%5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%2224%5C%5C%5C%22%7D%5D%7D%5C%22%2C%5C%22TMALL_MARKET_B2C%5C%22%3A%5C%22%7B%5C%5C%5C%22stores%5C%5C%5C%22%3A%5B%7B%5C%5C%5C%22code%5C%5C%5C%22%3A%5C%5C%5C%22107%5C%5C%5C%22%2C%5C%5C%5C%22bizType%5C%5C%5C%22%3A%5C%5C%5C%22REGION_TYPE_REGION%5C%5C%5C%22%2C%5C%5C%5C%22addrId%5C%5C%5C%22%3A%5C%5C%5C%229056332332%5C%5C%5C%22%2C%5C%5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%22CHOOSE_ADDR%5C%5C%5C%22%7D%5D%7D%5C%22%2C%5C%22TMALL_MARKET_O2O%5C%22%3A%5C%22%7B%5C%5C%5C%22stores%5C%5C%5C%22%3A%5B%7B%5C%5C%5C%22code%5C%5C%5C%22%3A%5C%5C%5C%22235565019%5C%5C%5C%22%2C%5C%5C%5C%22bizType%5C%5C%5C%22%3A%5C%5C%5C%22DELIVERY_TIME_HALF_DAY%5C%5C%5C%22%2C%5C%5C%5C%22addrId%5C%5C%5C%22%3A%5C%5C%5C%229056332332%5C%5C%5C%22%2C%",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/decodeTaobaoQuery.py:1-3"
    },
    "4457": {
        "file_id": 567,
        "content": "This code is decoding a Taobao query string containing information about various stores and their types, likely used for filtering or search purposes.",
        "type": "comment"
    },
    "4458": {
        "file_id": 567,
        "content": "5C%5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%22CHOOSE_ADDR%5C%5C%5C%22%7D%5D%7D%5C%22%7D%22%2C%22URL_REFERER_ORIGIN%22%3A%22%2F%2Fs.m.taobao.com%2Fh5entry%3Fg_channelSrp%3Dvideointeract%26g_tab%3Dtbexperience%26g_pfilter%3Ddaren%26g_closeModues%3Dtab%26closeExpSubTab%3Dtrue%26g_csearchdoor_spm%3Da310p.14955560%26spm%3Da310p.13800399%26launchMode%3Dandroid_new_task%26g_closeExpSubTab%3Dtrue%22%2C%22ad_type%22%3A%221.0%22%2C%22apptimestamp%22%3A%221665607023%22%2C%22areaCode%22%3A%22CN%22%2C%22brand%22%3A%22Xiaomi%22%2C%22canP4pVideoPlay%22%3A%22true%22%2C%22channelSrp%22%3A%22videointeract%22%2C%22cityCode%22%3A%22320100%22%2C%22closeExpSubTab%22%3A%22true%22%2C%22closeModues%22%3A%22tab%22%2C%22countryNum%22%3A%22156%22%2C%22csearchdoor_spm%22%3A%22a310p.14955560%22%2C%22device%22%3A%22Mi+MIX+2%22%2C%22editionCode%22%3A%22CN%22%2C%22from%22%3A%22input%22%2C%22globalLbs%22%3A%22%7B%5C%22biz_common%5C%22%3A%7B%5C%22recommendedAddress%5C%22%3A%7B%5C%22addressId%5C%22%3A%5C%229056332332%5C%22%2",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/decodeTaobaoQuery.py:3-3"
    },
    "4459": {
        "file_id": 567,
        "content": "This code contains a complex JSON object with various parameters like type, URL_REFERER_ORIGIN, ad_type, areaCode, brand, canP4pVideoPlay, channelSrp, cityCode, closeExpSubTab, closeModues, countryNum, csearchdoor\\_spm, device, editionCode, from, and globalLbs. These parameters are used to describe the source of the request, user's location, device information, and other relevant data for an API call.",
        "type": "comment"
    },
    "4460": {
        "file_id": 567,
        "content": "C%5C%22area%5C%22%3A%5C%22%E6%A0%96%E9%9C%9E%E5%8C%BA%5C%22%2C%5C%22areaDivisionCode%5C%22%3A%5C%22320113%5C%22%2C%5C%22city%5C%22%3A%5C%22%E5%8D%97%E4%BA%AC%E5%B8%82%5C%22%2C%5C%22cityDivisionCode%5C%22%3A%5C%22320100%5C%22%2C%5C%22detailText%5C%22%3A%5C%22%E6%96%87%E8%8B%91%E8%B7%AF9%E5%8F%B7%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E5%9C%86%E9%80%9A%E5%BF%AB%E9%80%92%5C%22%2C%5C%22lat%5C%22%3A%5C%2232.11078%5C%22%2C%5C%22lng%5C%22%3A%5C%22118.932821%5C%22%2C%5C%22province%5C%22%3A%5C%22%E6%B1%9F%E8%8B%8F%E7%9C%81%5C%22%2C%5C%22provinceDivisionCode%5C%22%3A%5C%22320000%5C%22%2C%5C%22town%5C%22%3A%5C%22%E4%BB%99%E6%9E%97%E8%A1%97%E9%81%93%5C%22%2C%5C%22townDivisionCode%5C%22%3A%5C%22320113007%5C%22%2C%5C%22type%5C%22%3A%5C%22deliver%5C%22%7D%7D%2C%5C%22eleme%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22999%5C%22%7D%5D%7D%2C%5C%22meeting_place%5C%22%3A%7B%7D%2C%5C%22on_time_promise%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/decodeTaobaoQuery.py:3-3"
    },
    "4461": {
        "file_id": 567,
        "content": "This code block represents a JSON object containing information about the location, delivery details, and stores related to an order. The location data includes area, city, province, town, and latitude/longitude coordinates. There are also delivery-related details such as type (deliver), and store information with store IDs.",
        "type": "comment"
    },
    "4462": {
        "file_id": 567,
        "content": "%22353585008%5C%22%7D%2C%7B%5C%22storeId%5C%22%3A%5C%22353612036%5C%22%7D%2C%7B%5C%22storeId%5C%22%3A%5C%22525826023%5C%22%7D%5D%7D%2C%5C%22same_city_buy%5C%22%3A%7B%7D%2C%5C%22tmall_market_o2o%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22235565019%5C%22%7D%5D%7D%2C%5C%22txd%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22707447478%5C%22%7D%5D%7D%7D%22%2C%22gpsEnabled%22%3A%22false%22%2C%\"\"\"\nb =urllib.parse.unquote(a)\n# c=json.loads(b)\nimport pprint\n# pprint.pprint(c)\npprint.pprint(b)",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/decodeTaobaoQuery.py:3-8"
    },
    "4463": {
        "file_id": 567,
        "content": "This code is parsing a URL-encoded string and loading its content into a JSON format. It then prints the parsed JSON data using the pprint module for better readability.",
        "type": "comment"
    },
    "4464": {
        "file_id": 568,
        "content": "/tests/image_quality_tests/tiq2.py",
        "type": "filepath"
    },
    "4465": {
        "file_id": 568,
        "content": "The code reads video frames, calculates image quality using BRISQUE algorithm, resizes and converts to grayscale. It then displays the resized frame on a GUI window and checks for user input (exiting upon 'q').",
        "type": "summary"
    },
    "4466": {
        "file_id": 568,
        "content": "import imquality.brisque as brisque\nimport cv2\nimport PIL\nfrom brisque import BRISQUE\n# integrated svmutil.py and svm.py from that git repo.\n# really strange.\nbrisq = BRISQUE()\nvideo = cv2.VideoCapture(\"../../samples/video/dog_with_text.mp4\")\n_,frame = video.read()\n# frame = imutils.resize(frame,width=720) #why?\nindex = 0\nscore = -1\nperiod = 2\nwhile frame is not None:\n    _, frame = video.read()\n    index+=1\n    if frame is None:\n        print(\"VIDEO END.\")\n        break\n    # just get image quality.\n    # the speed is not so damn fast.\n    image = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)\n    # image = PIL.Image.fromarray(image)\n    if index%period == 0:\n        try:\n            score = brisq.get_score(image) # the lower the better, it was said.\n        except:\n            # this is super fast. but i doubt that.\n            # import traceback\n            # traceback.print_exc()\n            # breakpoint()\n            score = -1 # unknown.\n    cv2.putText(\n        frame,\n        \"[{}]\".format(str(score)[:5]),\n        (200,200),",
        "type": "code",
        "location": "/tests/image_quality_tests/tiq2.py:1-40"
    },
    "4467": {
        "file_id": 568,
        "content": "The code is reading frames from a video file and calculating the image quality using the BRISQUE algorithm. It prints the score for every 'period' number of frames, with a lower score indicating better image quality. If an error occurs while calculating the score, it assigns -1 (unknown) as the value. The code is also resizing the frame to a width of 720 pixels using imutils library and converting it to grayscale using cv2.cvtColor function.",
        "type": "comment"
    },
    "4468": {
        "file_id": 568,
        "content": "        cv2.FONT_HERSHEY_SIMPLEX,\n        2,\n        (0,255,0),\n        3,\n        cv2.LINE_AA,\n    )\n    cv2.imshow('Output',frame)\n    key  =  cv2.waitKey(1) & 0xff\n    if key == ord('q'):\n        break",
        "type": "code",
        "location": "/tests/image_quality_tests/tiq2.py:41-50"
    },
    "4469": {
        "file_id": 568,
        "content": "This code is using OpenCV library to display an image on a GUI window with the title 'Output'. The image is drawn on it using a green color (0,255,0) and a simplex font. It checks for user input (key pressed) and if 'q' is entered, the loop breaks.",
        "type": "comment"
    },
    "4470": {
        "file_id": 569,
        "content": "/tests/image_quality_tests/test_pyiqa.sh",
        "type": "filepath"
    },
    "4471": {
        "file_id": 569,
        "content": "This code is running the pyiqa_inference.py script with the specified image and name argument, which downloads the necessary weights from Torch Hub directory for image quality testing.",
        "type": "summary"
    },
    "4472": {
        "file_id": 569,
        "content": "python3 pyiqa_inference.py -n $1 -i sample.bmp\n# it is downloading weights to torch hub directory.",
        "type": "code",
        "location": "/tests/image_quality_tests/test_pyiqa.sh:1-2"
    },
    "4473": {
        "file_id": 569,
        "content": "This code is running the pyiqa_inference.py script with the specified image and name argument, which downloads the necessary weights from Torch Hub directory for image quality testing.",
        "type": "comment"
    },
    "4474": {
        "file_id": 570,
        "content": "/tests/image_quality_tests/test_image_quality.py",
        "type": "filepath"
    },
    "4475": {
        "file_id": 570,
        "content": "This code reads a video, extracts frames at periodic intervals, calculates the image quality using BRISQUE algorithm and displays it on the frame. The score is displayed in the lower-left corner of each frame, and the user can stop the loop by pressing 'q'.",
        "type": "summary"
    },
    "4476": {
        "file_id": 570,
        "content": "# import imquality.brisque as brisque\nimport cv2\nimport PIL\nvideo = cv2.VideoCapture(\"../../samples/video/dog_with_text.mp4\")\n_,frame = video.read()\n# frame = imutils.resize(frame,width=720) #why?\nindex = 0\nscore = -1\nperiod = 20\nwhile frame is not None:\n    _, frame = video.read()\n    index+=1\n    if frame is None:\n        print(\"VIDEO END.\")\n        break\n    # just get image quality.\n    # the speed is not so damn fast.\n    image = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)\n    image = PIL.Image.fromarray(image)\n    if index%period == 0:\n        try:\n            score = brisque.score(image) # the lower the better, it was said.\n        except:\n            score = -1 # unknown.\n    cv2.putText(\n        frame,\n        \"[{}]\".format(str(score)[:5]),\n        (200,200),\n        cv2.FONT_HERSHEY_SIMPLEX,\n        2,\n        (0,255,0),\n        3,\n        cv2.LINE_AA,\n    )\n    cv2.imshow('Output',frame)\n    key  =  cv2.waitKey(1) & 0xff\n    if key == ord('q'):\n        break",
        "type": "code",
        "location": "/tests/image_quality_tests/test_image_quality.py:1-40"
    },
    "4477": {
        "file_id": 570,
        "content": "This code reads a video, extracts frames at periodic intervals, calculates the image quality using BRISQUE algorithm and displays it on the frame. The score is displayed in the lower-left corner of each frame, and the user can stop the loop by pressing 'q'.",
        "type": "comment"
    },
    "4478": {
        "file_id": 571,
        "content": "/tests/image_quality_tests/t_pyiqa2.sh",
        "type": "filepath"
    },
    "4479": {
        "file_id": 571,
        "content": "This code is piping the output of `pyiqa_test.py` into `test_pyiqa.sh`, filtering for lines containing \"taking time\", and returning those results.",
        "type": "summary"
    },
    "4480": {
        "file_id": 571,
        "content": "python3 pyiqa_test.py | xargs -iabc bash test_pyiqa.sh abc 2>&1 | grep \"taking time\"",
        "type": "code",
        "location": "/tests/image_quality_tests/t_pyiqa2.sh:1-1"
    },
    "4481": {
        "file_id": 571,
        "content": "This code is piping the output of `pyiqa_test.py` into `test_pyiqa.sh`, filtering for lines containing \"taking time\", and returning those results.",
        "type": "comment"
    },
    "4482": {
        "file_id": 572,
        "content": "/tests/image_quality_tests/README.md",
        "type": "filepath"
    },
    "4483": {
        "file_id": 572,
        "content": "This code provides a solution to ensure image quality for model accuracy, examines ROI using DasiamRPN and siamMask, re-examines for potential loss of mark, applies motion analysis, suggests integrating TA-Lib for statistics, and recommends upscaling video with anime4k or other engines.",
        "type": "summary"
    },
    "4484": {
        "file_id": 572,
        "content": "# princlple\nif the image quality is bad, then no matter what model we use we will get poor result.\n# solution\nuse image quality assessment to examine ROI tracked by DasiamRPN and make sure we will use the best sample and get most accurate result.\n# footnote\nDasiamRPN is a good tracker. so before abandon the tracking data re-examine the ROI for several times to see if it really lost its mark. so as the siamMask.\nYou can also examine the image quality by means of motion. if it heavily moves, we refuse to feed it into model.\nIntegrate TA-Lib for less boilerplates. i mean financial analysis can be applied anywhere. they are basically statistics. anything other than that might just be fake.\nwhere is your dog video?\n# further actions\nyou may upscale video using anime4k or other engines.",
        "type": "code",
        "location": "/tests/image_quality_tests/README.md:1-21"
    },
    "4485": {
        "file_id": 572,
        "content": "This code provides a solution to ensure image quality for model accuracy, examines ROI using DasiamRPN and siamMask, re-examines for potential loss of mark, applies motion analysis, suggests integrating TA-Lib for statistics, and recommends upscaling video with anime4k or other engines.",
        "type": "comment"
    },
    "4486": {
        "file_id": 573,
        "content": "/tests/image_quality_tests/pyiqa_test.py",
        "type": "filepath"
    },
    "4487": {
        "file_id": 573,
        "content": "This code is filtering out certain metric modes from the DEFAULT_CONFIGS dictionary, printing only those not in the allow_lists. The author comments that these methods may not be as useful and seems difficult to determine their effectiveness before downloading all models. They express confusion about the size of some model files.",
        "type": "summary"
    },
    "4488": {
        "file_id": 573,
        "content": "from pyiqa.default_model_configs import DEFAULT_CONFIGS\nmlist = []\nfor key in DEFAULT_CONFIGS.keys():\n    config = DEFAULT_CONFIGS[key]\n    mode = config[\"metric_mode\"]\n    if mode == \"NR\":\n        mlist.append(key)\n# print(mlist)\n# forbid_lists = [\"ilniqe\",\"nima\"]\nallow_lists = [\"niqe\", \"brisque\", \"paq2piq\"]\nfor elem in mlist:\n    if elem not in allow_lists:\n        continue\n    print(elem)\n# i need to say these methods are not as useful as it was said.\n# the objective shall be EMA based.\n# ['niqe', 'ilniqe', 'brisque', 'nrqm', 'pi', 'musiq', 'musiq-ava', 'musiq-koniq', 'musiq-paq2piq', 'musiq-spaq', 'nima', 'paq2piq', 'dbcnn']\n# you may try them all?\n# it is really hard to say before we download all these models.\n# seems not really dependent on the model size?\n# we've got freaking huge shits.\n# like this one, for nima.\n# https://download.pytorch.org/models/vgg16-397923af.pth\n# what is this shit for anyway?",
        "type": "code",
        "location": "/tests/image_quality_tests/pyiqa_test.py:1-31"
    },
    "4489": {
        "file_id": 573,
        "content": "This code is filtering out certain metric modes from the DEFAULT_CONFIGS dictionary, printing only those not in the allow_lists. The author comments that these methods may not be as useful and seems difficult to determine their effectiveness before downloading all models. They express confusion about the size of some model files.",
        "type": "comment"
    },
    "4490": {
        "file_id": 574,
        "content": "/tests/image_quality_tests/pyiqa_inference.py",
        "type": "filepath"
    },
    "4491": {
        "file_id": 574,
        "content": "This code uses pyiqa library to evaluate image quality and compare algorithms, averaging scores for multiple inputs and timing the process. It saves or prints results and handles missing files with errors.",
        "type": "summary"
    },
    "4492": {
        "file_id": 574,
        "content": "import argparse\nimport glob\nimport os\nfrom PIL import Image\nfrom pyiqa.models.inference_model import InferenceModel\nmetric_name = None\ndef main():\n    global metric_name\n    \"\"\"Inference demo for pyiqa.\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--input', type=str, default=None, help='input image/folder path.')\n    parser.add_argument('-r', '--ref', type=str, default=None, help='reference image/folder path if needed.')\n    parser.add_argument(\n        '-m',\n        '--metric_mode',\n        type=str,\n        default='FR',\n        help='metric mode Full Reference or No Reference. options: FR|NR.')\n    parser.add_argument('-n', '--metric_name', type=str, default='PSNR', help='IQA metric name, case sensitive.')\n    parser.add_argument('--model_path', type=str, default=None, help='Weight path for CNN based models.')\n    parser.add_argument('--img_range', type=float, default=1.0, help='Max value of image tensor.')\n    parser.add_argument(\n        '--input_size', type=int, nargs='+', default=None, help='size of input image. (H, W) for tuple input.')",
        "type": "code",
        "location": "/tests/image_quality_tests/pyiqa_inference.py:1-26"
    },
    "4493": {
        "file_id": 574,
        "content": "This code defines a main function for inference demo of the pyiqa library. It takes input, reference image or folder paths as arguments, and allows selection of metric mode (Full Reference or No Reference) and metric name (IQA metric). It also accepts optional parameters like model path, maximum value of image tensor, and input size.",
        "type": "comment"
    },
    "4494": {
        "file_id": 574,
        "content": "    parser.add_argument(\n        '--mean', type=float, nargs='+', default=None, metavar='MEAN', help='Override mean pixel value of dataset')\n    parser.add_argument(\n        '--std', type=float, nargs='+', default=None, metavar='STD', help='Override std deviation of of dataset')\n    parser.add_argument('--save_file', type=str, default=None, help='path to save results.')\n    args = parser.parse_args()\n    metric_name = args.metric_name.lower()\n    # set up IQA model\n    iqa_model = InferenceModel(metric_name, args.metric_mode, args.model_path, args.img_range, args.input_size,\n                               args.mean, args.std)\n    metric_mode = iqa_model.metric_mode\n    if os.path.isfile(args.input):\n        input_paths = [args.input]\n        if args.ref is not None:\n            ref_paths = [args.ref]\n    else:\n        input_paths = sorted(glob.glob(os.path.join(args.input, '*')))\n        if args.ref is not None:\n            ref_paths = sorted(glob.glob(os.path.join(args.ref, '*')))\n    if args.save_file:\n        sf = open(args.save_file, 'w')",
        "type": "code",
        "location": "/tests/image_quality_tests/pyiqa_inference.py:27-53"
    },
    "4495": {
        "file_id": 574,
        "content": "This code sets up an IQA (Image Quality Assessment) model for image quality evaluation. It takes in arguments such as the metric name, input and reference file paths, model path, image range, input size, mean, and std deviation values. If any file is missing, it throws an error. Finally, if a save file is specified, it opens the file for writing.",
        "type": "comment"
    },
    "4496": {
        "file_id": 574,
        "content": "    avg_score = 0\n    test_img_num = len(input_paths)\n    for idx, img_path in enumerate(input_paths):\n        img_name = os.path.basename(img_path)\n        tar_img = Image.open(img_path)\n        if metric_mode == 'FR':\n            ref_img_path = ref_paths[idx]\n            ref_img = Image.open(ref_img_path)\n        else:\n            ref_img = None\n        score = iqa_model.test(tar_img, ref_img)\n        avg_score += score\n        print(f'{metric_name} score of {img_name} is: {score}')\n        if args.save_file:\n            sf.write(f'{img_name}\\t{score}\\n')\n    avg_score /= test_img_num\n    if test_img_num > 1:\n        print(f'Average {metric_name} score of {args.input} with {test_img_num} images is: {avg_score}')\n    if args.save_file:\n        sf.close()\n    if args.save_file:\n        print(f'Done! Results are in {args.save_file}.')\n    else:\n        print(f'Done!')\nimport timeit\nif __name__ == '__main__':\n    main() # to eliminate first time error.\n    repeatTime = 10 # just test\n    taketime = timeit.timeit(main,number=repeatTime)",
        "type": "code",
        "location": "/tests/image_quality_tests/pyiqa_inference.py:55-85"
    },
    "4497": {
        "file_id": 574,
        "content": "This code calculates the image quality score using a pre-trained model. It takes input images and optionally references images, then averages the scores for each image if there are multiple inputs. The results can be saved to a file or simply printed out. It also times how long the process took.",
        "type": "comment"
    },
    "4498": {
        "file_id": 574,
        "content": "    print(\"{} taking time:\".format(metric_name),taketime)\n###########SCOREBOARD##############\n# niqe taking time: 0.24909197200031485\n# brisque taking time: 0.1862209509999957\n# nrqm taking time: 18.15363560300466\n# pi taking time: 18.80046885000047\n# musiq taking time: 2.963457034995372\n# musiq-ava taking time: 2.9661162160045933\n# musiq-koniq taking time: 3.0705577400003676\n# musiq-paq2piq taking time: 2.957391322001058\n# musiq-spaq taking time: 2.948993805999635\n# paq2piq taking time: 1.4981017659956706\n# dbcnn taking time: 16.063134230993455",
        "type": "code",
        "location": "/tests/image_quality_tests/pyiqa_inference.py:86-99"
    },
    "4499": {
        "file_id": 574,
        "content": "This code snippet measures the time taken by various image quality assessment algorithms. The output shows the names and respective times for each algorithm in descending order. It can be used to compare the efficiency of these algorithms when evaluating image quality.",
        "type": "comment"
    }
}