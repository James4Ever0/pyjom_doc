{
    "4000": {
        "file_id": 495,
        "content": "/tests/microsoft_xiaobing_conversation_bing/xiaobing_server_keepalive.sh",
        "type": "filepath"
    },
    "4001": {
        "file_id": 495,
        "content": "This script continuously runs the \"chat_with_session_id.js\" Node.js program in a loop, likely for testing or maintaining an active conversation state.",
        "type": "summary"
    },
    "4002": {
        "file_id": 495,
        "content": "cd /root/Desktop/works/pyjom/tests/microsoft_xiaobing_conversation_bing\nwhile true; do\n    node chat_with_session_id.js\ndone",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/xiaobing_server_keepalive.sh:1-5"
    },
    "4003": {
        "file_id": 495,
        "content": "This script continuously runs the \"chat_with_session_id.js\" Node.js program in a loop, likely for testing or maintaining an active conversation state.",
        "type": "comment"
    },
    "4004": {
        "file_id": 496,
        "content": "/tests/microsoft_xiaobing_conversation_bing/test_curl_bing_search_normal_conversation_chitchat.sh",
        "type": "filepath"
    },
    "4005": {
        "file_id": 496,
        "content": "The code uses cURL to make a POST request for English chat, sets headers and cookies, and tests Bing search functionality with Python-related queries.",
        "type": "summary"
    },
    "4006": {
        "file_id": 496,
        "content": "curl 'https://cn.bing.com/english/zochatv2?cc=cn&ensearch=0' \\\n  -H 'authority: cn.bing.com' \\\n  -H 'accept: */*' \\\n  -H 'accept-language: en-US,en;q=0.9' \\\n  -H 'content-type: text/plain;charset=UTF-8' \\\n  -H 'cookie: MUID=1B560BA4BCDC678502F21A48BDF2660B; MUIDB=1B560BA4BCDC678502F21A48BDF2660B; _EDGE_V=1; SRCHD=AF=NOFORM; SRCHUID=V=2&GUID=5F8EE8D909ED4343AF0A332575F18DCC&dmnchg=1; _UR=QS=0&TQS=0; _FP=hta=off; MMCASM=ID=EB1F15CA82AF4F2EACA836E498185727; _clck=pkzyck|1|f48|0; MicrosoftApplicationsTelemetryDeviceId=0fa0bc06-15c9-4c72-bba4-c2eb1d1d4998; MSFPC=GUID=02bec15aac9e4b00b0f093e37277467c&HASH=02be&LV=202207&V=4&LU=1658791106497; ZHCHATSTRONGATTRACT=TRUE; _ITAB=STAB=TR; imgv=flts=20220824&lodlg=2&gts=20220908; _tarLang=default=ja; _TTSS_OUT=hist=WyJlbiIsImphIl0=; _TTSS_IN=hist=WyJlcyIsInpoLUhhbnMiLCJlbiIsImF1dG8tZGV0ZWN0Il0=; ZHLASTACTIVECHAT=0; _EDGE_S=SID=1ECE53E4DFC262F3137041F9DEEC63B0; _SS=SID=1ECE53E4DFC262F3137041F9DEEC63B0&PC=U316; SRCHS=PC=U316; dsc=order=ShopOrderImagesOverS",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/test_curl_bing_search_normal_conversation_chitchat.sh:1-6"
    },
    "4007": {
        "file_id": 496,
        "content": "Making a POST request to retrieve English conversation chat using Curl with specified headers and cookies.",
        "type": "comment"
    },
    "4008": {
        "file_id": 496,
        "content": "hop; ENSEARCH=BENVER=0; SUID=M; SRCHUSR=DOB=20220725&T=1663127833000&TPC=1663086470000; ZHCHATWEAKATTRACT=TRUE; ipv6=hit=1663131446469&t=4; ABDEF=V=13&ABDV=11&MRNB=1663128202067&MRB=0; _HPVN=CS=eyJQbiI6eyJDbiI6NTIsIlN0IjoyLCJRcyI6MCwiUHJvZCI6IlAifSwiU2MiOnsiQ24iOjUyLCJTdCI6MCwiUXMiOjAsIlByb2QiOiJIIn0sIlF6Ijp7IkNuIjo1MiwiU3QiOjEsIlFzIjowLCJQcm9kIjoiVCJ9LCJBcCI6dHJ1ZSwiTXV0ZSI6dHJ1ZSwiTGFkIjoiMjAyMi0wOS0xNFQwMDowMDowMFoiLCJJb3RkIjowLCJHd2IiOjAsIkRmdCI6bnVsbCwiTXZzIjowLCJGbHQiOjAsIkltcCI6MjM0Mn0=; RECSEARCH=SQs=[{\"q\":\"teddy%20funny\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"python%20download%20with%20progress%20bar\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"python%20download%20tqdm\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"python%20multithread%20download\"%2C\"c\":1%2C\"ad\":true}%2C{\"q\":\"python%20tqdm\"%2C\"c\":1%2C\"ad\":true}%2C{\"q\":\"python%20megabyte%20human%20readable\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"python%20request%20get%20header%20without%20download\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"python%20request%20get%20response%20header%20wi",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/test_curl_bing_search_normal_conversation_chitchat.sh:6-6"
    },
    "4009": {
        "file_id": 496,
        "content": "This code snippet sets various environment variables and cookies for a web request. The request includes multiple search queries related to Python, such as \"teddy funny\", \"python download with progress bar\", \"python tqdm\", etc. It appears to be testing the Bing search functionality through a series of requests.",
        "type": "comment"
    },
    "4010": {
        "file_id": 496,
        "content": "thout%20download\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"aiohttp%20args%20allow%20redirect\"%2C\"c\":1%2C\"ad\":false}]; SNRHOP=I=&TS=; ZHSEARCHCHATSTATUS=STATUS=1; SRCHHPGUSR=SRCHLANG=en&BRW=NOTP&BRH=S&CW=602&CH=603&SW=1280&SH=800&DPR=2.200000047683716&UTC=480&DM=1&PV=12.5.0&BZA=0&HV=1663129340&WTS=63798724633&SCW=1164&SCH=2909&PRVCW=1163&PRVCH=603' \\\n  -H 'origin: https://cn.bing.com' \\\n  -H 'referer: https://cn.bing.com/search?q=aiohttp+args+allow+redirect&form=QBLH&sp=-1&pq=aiohttp+args+allow+redirec&sc=8-26&qs=n&sk=&cvid=44FA71281A5246FF9D0859E4146194FF&ghsh=0&ghacc=0&ghpl=' \\\n  -H 'sec-ch-ua: \"Google Chrome\";v=\"105\", \"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"105\"' \\\n  -H 'sec-ch-ua-arch: \"arm\"' \\\n  -H 'sec-ch-ua-bitness: \"64\"' \\\n  -H 'sec-ch-ua-full-version: \"105.0.5195.102\"' \\\n  -H 'sec-ch-ua-full-version-list: \"Google Chrome\";v=\"105.0.5195.102\", \"Not)A;Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"105.0.5195.102\"' \\\n  -H 'sec-ch-ua-mobile: ?0' \\\n  -H 'sec-ch-ua-model: ' \\\n  -H 'sec-ch-ua-platform: \"macOS\"' \\\n  -H 'sec-ch-ua-platform-version: \"12.5.0\"' \\",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/test_curl_bing_search_normal_conversation_chitchat.sh:6-17"
    },
    "4011": {
        "file_id": 496,
        "content": "This code seems to be making a CURL request with specific headers for Bing search functionality. It is sending a GET request to the Bing search API, specifying parameters like origin, referer, user agent, and other relevant details for the search query \"aiohttp args allow redirect\".",
        "type": "comment"
    },
    "4012": {
        "file_id": 496,
        "content": "  -H 'sec-fetch-dest: empty' \\\n  -H 'sec-fetch-mode: cors' \\\n  -H 'sec-fetch-site: same-origin' \\\n  -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36' \\\n  --data-raw '{\"zoTextResponse\":\"我在，是有什么事吗？\",\"zoIsGCSResponse\":\"true\",\"zoSearchQuery\":\"aiohttp args allow redirect\",\"zoTimestampUtc\":\"Wed, 14 Sep 2022 05:28:25 GMT\",\"zoIsStartOfSession\":\"false\",\"zoRequestId\":\"c18862bd321ea770ac1609f9b552d4bb\",\"conversationId\":\"712e7968-9607-4abc-9c51-847f15bc6620\",\"query\":{\"NormalizedQuery\":\"0xd701543d84662163ce6999\"},\"from\":\"chatbox\",\"traceId\":\"632156f9d8a842048d33001cbeb8df23\"}' \\\n  --compressed",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/test_curl_bing_search_normal_conversation_chitchat.sh:18-23"
    },
    "4013": {
        "file_id": 496,
        "content": "This code sets headers and data for a POST request using cURL, mimicking a Chrome browser on Mac OS X 10.15.7 with specific timestamps and search query. The data includes conversation details for a chatbot session.",
        "type": "comment"
    },
    "4014": {
        "file_id": 497,
        "content": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js",
        "type": "filepath"
    },
    "4015": {
        "file_id": 497,
        "content": "The code utilizes \"request\" library, manages IDs and delays, handles GET/POST requests with error handling, sets up a chat server, uses Microsoft Xiaoice for responses, and includes test code.",
        "type": "summary"
    },
    "4016": {
        "file_id": 497,
        "content": "var request = require(\"request\");\n// var mysqld = require(\"./mysql\");\n// const { init: initDB, Counter, Chatid } = require(\"./db\");\nfunction getRequestId() {\n    return (ot() + ot() + ot() + ot() + ot() + ot() + ot() + ot()).toLowerCase();\n}\nconst sleep = (ms) => {\n    return new Promise(resolve => setTimeout(resolve, ms))\n}\nfunction ot() {\n    return (((1 + Math.random()) * 65536) | 0).toString(16).substring(1);\n}\nfunction i(n, i) {\n    for (\n        var s, c, e = 4, l = i.length / e - 1, r = [\n            [],\n            [],\n            [],\n            []\n        ], o = 0; o < 4 * e; o++\n    )\n        r[o % 4][Math.floor(o / 4)] = n[o];\n    for (r = t(r, i, 0, e), s = 1; s < l; s++)\n        (r = u(r, e)), (r = f(r, e)), (r = h(r, e)), (r = t(r, i, s, e));\n    for (\n        r = u(r, e), r = f(r, e), r = t(r, i, l, e), c = new Array(4 * e), o = 0; o < 4 * e; o++\n    )\n        c[o] = r[o % 4][Math.floor(o / 4)];\n    return c;\n}\nfunction u(n, t) {\n    for (var r, i = 0; i < 4; i++)\n        for (r = 0; r < t; r++) n[i][r] = o[n[i][r]];",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:1-37"
    },
    "4017": {
        "file_id": 497,
        "content": "This code imports the \"request\" library and contains functions for generating a unique request ID, sleeping for a specified time, and working with arrays. It also includes a function for string manipulation and an algorithm that performs some operations on input arrays.",
        "type": "comment"
    },
    "4018": {
        "file_id": 497,
        "content": "    return n;\n}\nfunction f(n, t) {\n    for (var i, u = new Array(4), r = 1; r < 4; r++) {\n        for (i = 0; i < 4; i++) u[i] = n[r][(i + r) % t];\n        for (i = 0; i < 4; i++) n[r][i] = u[i];\n    }\n    return n;\n}\nfunction h(n) {\n    for (var t, r, u, i = 0; i < 4; i++) {\n        for (t = new Array(4), r = new Array(4), u = 0; u < 4; u++)\n            (t[u] = n[u][i]),\n            (r[u] = n[u][i] & 128 ? (n[u][i] << 1) ^ 283 : n[u][i] << 1);\n        n[0][i] = r[0] ^ t[1] ^ r[1] ^ t[2] ^ t[3];\n        n[1][i] = t[0] ^ r[1] ^ t[2] ^ r[2] ^ t[3];\n        n[2][i] = t[0] ^ t[1] ^ r[2] ^ t[3] ^ r[3];\n        n[3][i] = t[0] ^ r[0] ^ t[1] ^ t[2] ^ r[3];\n    }\n    return n;\n}\nfunction t(n, t, i, r) {\n    for (var f, u = 0; u < 4; u++)\n        for (f = 0; f < r; f++) n[u][f] ^= t[i * 4 + f][u];\n    return n;\n}\nfunction e(n) {\n    for (var t = 0; t < 4; t++) n[t] = o[n[t]];\n    return n;\n}\nfunction c(n) {\n    for (var i = n[0], t = 0; t < 3; t++) n[t] = n[t + 1];\n    return (n[3] = i), n;\n}\nfunction rr(n) {\n    for (\n        var h,",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:38-80"
    },
    "4019": {
        "file_id": 497,
        "content": "This code contains multiple functions that perform various operations on a 4x4 matrix. The 'g' function seems to return a value 'n'. The 'f' function rearranges the elements within each row of the 4x4 matrix. The 'h' function applies XOR operations between different elements in the matrix, resulting in modified values for each row. The 't' function performs XOR operations between the given matrix and another 4x4 matrix, affecting specific rows based on provided indices. The 'e' function replaces the values in the matrix with corresponding values from a lookup table 'o'. Lastly, the 'c' function rearranges the elements in the matrix by shifting each row one position to the left and moving the last row as the first. The function 'rr' appears to be incomplete as it lacks the closing brace '}'.",
        "type": "comment"
    },
    "4020": {
        "file_id": 497,
        "content": "            i,\n            o = 4,\n            r = n.length / 4,\n            s = r + 6,\n            f = new Array(o * (s + 1)),\n            u = new Array(4),\n            t = 0; t < r; t++\n    )\n        (h = [n[4 * t], n[4 * t + 1], n[4 * t + 2], n[4 * t + 3]]), (f[t] = h);\n    for (t = r; t < o * (s + 1); t++) {\n        for (f[t] = new Array(4), i = 0; i < 4; i++) u[i] = f[t - 1][i];\n        if (t % r == 0)\n            for (u = e(c(u)), i = 0; i < 4; i++) u[i] ^= l[t / r][i];\n        else r > 6 && t % r == 4 && (u = e(u));\n        for (i = 0; i < 4; i++) f[t][i] = f[t - r][i] ^ u[i];\n    }\n    return f;\n}\nfunction r(n) {\n    for (\n        var h,\n            i,\n            o = 4,\n            r = n.length / 4,\n            s = r + 6,\n            f = new Array(o * (s + 1)),\n            u = new Array(4),\n            t = 0; t < r; t++\n    )\n        (h = [n[4 * t], n[4 * t + 1], n[4 * t + 2], n[4 * t + 3]]), (f[t] = h);\n    for (t = r; t < o * (s + 1); t++) {\n        for (f[t] = new Array(4), i = 0; i < 4; i++) u[i] = f[t - 1][i];",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:81-113"
    },
    "4021": {
        "file_id": 497,
        "content": "This code appears to be decrypting an input array, `n`, by manipulating its elements and storing the results in a new array, `f`. The process involves breaking down `n` into smaller chunks of 4 elements each and applying different operations based on the position within the original array. It also includes a step to XOR specific elements with values from another array, `l`, and an optional encryption/decryption operation if the current position is divisible by `r` and greater than 6. Finally, it returns the modified array `f`.",
        "type": "comment"
    },
    "4022": {
        "file_id": 497,
        "content": "        if (t % r == 0)\n            for (u = e(c(u)), i = 0; i < 4; i++) u[i] ^= l[t / r][i];\n        else r > 6 && t % r == 4 && (u = e(u));\n        for (i = 0; i < 4; i++) f[t][i] = f[t - r][i] ^ u[i];\n    }\n    return f;\n}\nfunction a(n, t, u) {\n    var c = 16,\n        a,\n        y,\n        l,\n        w,\n        o,\n        e,\n        f,\n        nt;\n    if (!(u == 128 || u == 192 || u == 256)) return \"\";\n    for (n = s(n), t = s(t), a = u / 8, y = new Array(a), f = 0; f < a; f++)\n        y[f] = isNaN(t.charCodeAt(f)) ? 0 : t.charCodeAt(f);\n    l = i(y, rr(y));\n    l = l.concat(l.slice(0, a - 16));\n    var h = new Array(c),\n        k = new Date().getTime(),\n        tt = k % 1e3,\n        it = Math.floor(k / 1e3),\n        rt = Math.floor(Math.random() * 65535);\n    for (f = 0; f < 2; f++) h[f] = (tt >>> (f * 8)) & 255;\n    for (f = 0; f < 2; f++) h[f + 2] = (rt >>> (f * 8)) & 255;\n    for (f = 0; f < 4; f++) h[f + 4] = (it >>> (f * 8)) & 255;\n    for (w = \"\", f = 0; f < 8; f++) w += String.fromCharCode(h[f]);\n    var ut = rr(l),",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:114-146"
    },
    "4023": {
        "file_id": 497,
        "content": "This code encodes and decodes a string using a specific encryption algorithm. It takes an input string, splits it into chunks of 16 characters, then applies a series of XOR operations on each chunk before combining the results. The result is an encoded or decoded string based on the provided parameters.",
        "type": "comment"
    },
    "4024": {
        "file_id": 497,
        "content": "        b = Math.ceil(n.length / c),\n        d = new Array(b);\n    for (o = 0; o < b; o++) {\n        for (e = 0; e < 4; e++) h[15 - e] = (o >>> (e * 8)) & 255;\n        for (e = 0; e < 4; e++) h[11 - e] = (o / 4294967296) >>> (e * 8);\n        var ft = i(h, ut),\n            g = o < b - 1 ? c : ((n.length - 1) % c) + 1,\n            p = new Array(g);\n        for (f = 0; f < g; f++)\n            (p[f] = ft[f] ^ n.charCodeAt(o * c + f)),\n            (p[f] = String.fromCharCode(p[f]));\n        d[o] = p.join(\"\");\n    }\n    return (nt = w + d.join(\"\")), v(nt);\n}\nfunction v(n) {\n    for (\n        var i = \"0x\",\n            r = [\n                \"0\",\n                \"1\",\n                \"2\",\n                \"3\",\n                \"4\",\n                \"5\",\n                \"6\",\n                \"7\",\n                \"8\",\n                \"9\",\n                \"a\",\n                \"b\",\n                \"c\",\n                \"d\",\n                \"e\",\n                \"f\",\n            ],\n            t = 0; t < n.length; t++\n    )\n        i += r[n.charCodeAt(t) >> 4] + r[n.charCodeAt(t) & 15];",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:147-186"
    },
    "4025": {
        "file_id": 497,
        "content": "This code takes a string, splits it into chunks of specific size, and encodes each chunk using a simple encoding scheme. It then joins the encoded chunks together and returns the result, which is further processed in the v() function.",
        "type": "comment"
    },
    "4026": {
        "file_id": 497,
        "content": "    return i;\n}\nfunction s(n) {\n    var t = n.replace(/[\\u0080-\\u07ff]/g, function(n) {\n        var t = n.charCodeAt(0);\n        return String.fromCharCode(192 | (t >> 6), 128 | (t & 63));\n    });\n    return t.replace(/[\\u0800-\\uffff]/g, function(n) {\n        var t = n.charCodeAt(0);\n        return String.fromCharCode(\n            224 | (t >> 12),\n            128 | ((t >> 6) & 63),\n            128 | (t & 63)\n        );\n    });\n}\nvar o = [\n        99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118,\n        202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114,\n        192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49,\n        21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9,\n        131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209,\n        0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170,\n        251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143,",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:187-212"
    },
    "4027": {
        "file_id": 497,
        "content": "This code snippet defines a function 's' that takes in a string 'n', and replaces any non-basic Latin characters with their respective 3-byte sequences. It then returns the modified string. Additionally, there is an array of numbers representing a sequence that is used for some purpose in the codebase.",
        "type": "comment"
    },
    "4028": {
        "file_id": 497,
        "content": "        146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236,\n        95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34,\n        42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6,\n        36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213,\n        78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166,\n        180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3,\n        246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217,\n        142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230,\n        66, 104, 65, 153, 45, 15, 176, 84, 187, 22,\n    ],\n    l = [\n        [0, 0, 0, 0],\n        [1, 0, 0, 0],\n        [2, 0, 0, 0],\n        [4, 0, 0, 0],\n        [8, 0, 0, 0],\n        [16, 0, 0, 0],\n        [32, 0, 0, 0],\n        [64, 0, 0, 0],\n        [128, 0, 0, 0],\n        [27, 0, 0, 0],\n        [54, 0, 0, 0],\n    ];\n// n.encrypt = a\nasync function iceAI_word(",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:213-237"
    },
    "4029": {
        "file_id": 497,
        "content": "This code contains two arrays of numbers. The first array, `a`, seems to be encrypted or encoded data. The second array, `l`, represents a set of bitmasks. The function `iceAI_word` appears to use these arrays for encryption and decryption purposes, but the specific implementation details are not included in the provided code snippet.",
        "type": "comment"
    },
    "4030": {
        "file_id": 497,
        "content": "    // ToUserName,\n    // FromUserName,\n    // CreateTime,\n    // MsgType,\n    Content,\n    config,\n    query\n    // MsgId,\n) {\n    await sleep(1000);\n    // for whatever reason you have to wait for this long.\n    try {\n        var wquery = a(Content, \"3d9d5f16-5df0-43d7-902e-19274eecdc41\", 256);\n        console.log(\"encrypt:\" + wquery);\n        // let config = {};\n        // if ((await mysqld.isHaveChatIdIn(fromQQ)) == true) {\n        //     console.log(\"没有chatid，获取新id\")\n        //     config = await mysqld.getChatId(fromQQ);\n        // } else {\n        //     config = await newChatId(fromQQ);\n        // }\n        if (config) {\n            console.log(\"config:\" + config);\n        } else {\n            console.log('no config for xiaoice chat.')\n            return;\n        }\n        var h = {\n            zoTextResponse: \"\",\n            zoIsGCSResponse: false,\n            zoSearchQuery: query,\n            zoTimestampUtc: \"\",\n            zoIsStartOfSession: true,\n            zoRequestId: getRequestId(),\n            conversationId: config.conversationId,",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:238-274"
    },
    "4031": {
        "file_id": 497,
        "content": "The code waits for 1 second, then encrypts the message with a specific key and prints it to the console. It also checks if there's an existing chat ID for the fromQQ parameter. If not, it gets a new one by calling `mysqld.getChatId` or `newChatId`. The code then logs the config, creating a conversation ID, and assigns it to the h object.",
        "type": "comment"
    },
    "4032": {
        "file_id": 497,
        "content": "            query: { NormalizedQuery: wquery },\n            from: \"chatbox\",\n            traceId: config.traceId,\n        };\n        var url = \"https://cn.bing.com/english/zochatv2?cc=cn&ensearch=0\";\n        // {\"zoTextResponse\":\"\",\"zoIsGCSResponse\":\"false\",\"zoSearchQuery\":\"123\",\"zoTimestampUtc\":\"\",\"zoIsStartOfSession\":\"true\",\"zoRequestId\":\"ff90e6f70a6048d4fe5cc3c3327bbd32\",\"conversationId\":\"4a91fb33-73f7-43d4-b7b6-ba86a16e32fb\",\"query\":{\"NormalizedQuery\":\"0x23028811be44f661169365\"},\"from\":\"chatbox\",\"traceId\":\"B224B190F87941CD94AD0AC31A189D30\"}\n        let result = await getContents({\n            url: url,\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"text/plain;charset=UTF-8\",\n                origin: \"https://cn.bing.com\",\n                referer: \"https://cn.bing.com/search?q=123&form=QBLH&sp=-1&pq=123&sc=6-3&qs=n&sk=&cvid=566F001FDA424EEB805E1C175363B5AE\",\n                \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36\",",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:275-288"
    },
    "4033": {
        "file_id": 497,
        "content": "Sending a POST request to Bing's chat API endpoint with a normalized query, specifying the from source as \"chatbox\", and including a trace ID for identification purposes. The URL is set to the Bing chat API endpoint, headers include content type, origin, referer, and user-agent, all necessary information for the API request.",
        "type": "comment"
    },
    "4034": {
        "file_id": 497,
        "content": "                Connection: \"keep-alive\",\n            },\n            body: JSON.stringify(h),\n        });\n        if (result == null){ return}\n        // {\"content\":\"嘿 啾 嘿 啾啊\",\"type\":1,\"delayContents\":null,\"entityInfo\":[{\"Entity\":\"嘿 啾 嘿 啾啊\",\"IsEntity\":false}],\"target\":\"b\",\"history\":null,\"hasClientIdinMem\":true,\"needSayHello\":false,\"isHookStr\":false,\"showChatBox\":true,\"metadata\":{\"AnswerFeed\":\"RandomChitChatService\",\"EmotionInfo\":\"{\\\"EmotionClassificationInfo\\\":[{\\\"Category\\\":\\\"Sad\\\",\\\"Score\\\":0.0651140139},{\\\"Category\\\":\\\"Happy\\\",\\\"Score\\\":0.139467061},{\\\"Category\\\":\\\"Surprise\\\",\\\"Score\\\":0.176786855},{\\\"Category\\\":\\\"Angry\\\",\\\"Score\\\":0.358794},{\\\"Category\\\":\\\"Disgust\\\",\\\"Score\\\":0.2598381}],\\\"NeutralScore\\\":0.9992748,\\\"DomainInMatchScenario\\\":\\\"None\\\"}\"}}\n        result = JSON.parse(result);\n        if (result.content) {\n            var reply = result.content;\n            reply = reply.replace(\"小冰\", \"小姝\");\n            var message = 1;\n            var unuseless =\n                \"看的我一脸懵逼，都开始怀疑我的智商",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:289-302"
    },
    "4035": {
        "file_id": 497,
        "content": "Sends a POST request to the API with request parameters, parses the response as JSON, and replaces \"小冰\" with \"小姝\" if present in the response content.",
        "type": "comment"
    },
    "4036": {
        "file_id": 497,
        "content": "了。哎呀，不好意思，我刚刚好像走神了,感觉你知道的挺多的呢,额，我现在也不知道该说些什么,这个…不太好说啊,我语文不太好，不确定是不是懂了你的意思,刚刚不小心溜号了，真是不好意思这个我要好好想想再说这很难说，还是让我想想吧哦哦，这样啊我怎么理解比较好呢？\";\n            if (unuseless.indexOf(reply) != -1) {\n                console.log('xiaoice is returning useless reply', reply)\n                    //   message = 2;\n                    //   Log.trace(\"iceAi have unuseless message\");\n                    //   request(\n                    //     {\n                    //       url:\n                    //         \"http://api.qingyunke.com/api.php?key=free&appid=0&msg=\" +\n                    //         encodeURIComponent(msg2),\n                    //       method: \"GET\",\n                    //     },\n                    //     function (error, response, body) {\n                    //       var result = JSON.parse(body);\n                    //       reply = result.content;\n                    //       var logtext = \"\";\n                    //       return;\n                    //     }\n                    //   );\n            } else {\n                return reply;",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:302-322"
    },
    "4037": {
        "file_id": 497,
        "content": "Code is checking if the reply is useless (stored in unnecessary array) and returning it. If not, it returns the reply. If it's useless, it makes a request to an API for a new response and returns it.",
        "type": "comment"
    },
    "4038": {
        "file_id": 497,
        "content": "            }\n        }\n    } catch (e) {\n        console.log('ERROR FETCHING XIAOBING CHAT', e)\n            // will return nothing.\n            // sleep for 1 second?\n            // would you sleep for a while?\n    }\n}\nasync function newChatId(query) {\n    var options = options || {};\n    var httpOptions = {\n        url: \"https://cn.bing.com/search?q=\" + encodeURIComponent(query) + \"&form=QBLH&rdr=1&rdrig=E8F3C1A722454F949CCC4B98C4570A4A\",\n        method: \"get\",\n        timeout: 1000,\n        headers: {\n            accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\",\n            \"accept-language\": \"zh-CN,zh;q=0.9\",\n            \"cache-control\": \"max-age=0\",\n            \"sec-ch-ua\": '\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"',\n            \"sec-ch-ua-arch\": '\"x86\"',\n            \"sec-ch-ua-bitness\": '\"64\"',\n            \"sec-ch-ua-full-version\": '\"102.0.5005.63\"',\n            \"sec-ch-ua-mobile\": \"?0\",",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:323-347"
    },
    "4039": {
        "file_id": 497,
        "content": "This code appears to be a function for fetching a new chat ID based on a given query. If an error occurs during the fetch, it logs an error and may sleep for a second before retrying. The HTTP options include various headers for language and browser information, indicating that this function likely makes a GET request to retrieve the new chat ID from a Microsoft Bing search page.",
        "type": "comment"
    },
    "4040": {
        "file_id": 497,
        "content": "            \"sec-ch-ua-model\": '\"\"',\n            \"sec-ch-ua-platform\": '\"Windows\"',\n            \"sec-ch-ua-platform-version\": '\"10.0.0\"',\n            \"sec-fetch-dest\": \"document\",\n            \"sec-fetch-mode\": \"navigate\",\n            \"sec-fetch-site\": \"same-origin\",\n            cookie: \"MUID=005F25E7699168532D05342768F769B3; MUIDB=005F25E7699168532D05342768F769B3; _EDGE_V=1; SRCHD=AF=NOFORM; SRCHUID=V=2&GUID=31127A3BD4B84FF08E8E51EEEA34857F&dmnchg=1; _UR=QS=0&TQS=0; _HPVN=CS=eyJQbiI6eyJDbiI6MSwiU3QiOjAsIlFzIjowLCJQcm9kIjoiUCJ9LCJTYyI6eyJDbiI6MSwiU3QiOjAsIlFzIjowLCJQcm9kIjoiSCJ9LCJReiI6eyJDbiI6MSwiU3QiOjAsIlFzIjowLCJQcm9kIjoiVCJ9LCJBcCI6dHJ1ZSwiTXV0ZSI6dHJ1ZSwiTGFkIjoiMjAyMi0wNi0xMVQwMDowMDowMFoiLCJJb3RkIjowLCJHd2IiOjAsIkRmdCI6bnVsbCwiTXZzIjowLCJGbHQiOjAsIkltcCI6NH0=; SUID=M; SRCHUSR=DOB=20220611&T=1659599964000&TPC=1659599966000; ZHCHATSTRONGATTRACT=TRUE; ZHCHATWEAKATTRACT=TRUE; _EDGE_S=SID=05C5058B7100688001DB147D702E698C; _SS=SID=05C5058B7100688001DB147D702E698C; _tarLang=default=zh-Hans; ",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:348-354"
    },
    "4041": {
        "file_id": 497,
        "content": "This code sets various HTTP headers and cookies for a web request, such as user-agent information and session identifiers. It includes details about the browser model, platform, and version, as well as cookies that store user information and preferences.",
        "type": "comment"
    },
    "4042": {
        "file_id": 497,
        "content": "_TTSS_IN=hist=WyJlbiIsImF1dG8tZGV0ZWN0Il0=; _TTSS_OUT=hist=WyJ6aC1IYW5zIl0=; ipv6=hit=1659603639345&t=4; SNRHOP=I=&TS=; SRCHHPGUSR=SRCHLANG=zh-Hans&BRW=NOTP&BRH=S&CW=599&CH=657&SW=1366&SH=768&DPR=1&UTC=480&DM=0&PV=0.3.0&BZA=0&HV=1659600073&WTS=63795196764\",\n            \"sec-fetch-user\": \"?1\",\n            accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\",\n            \"accept-language\": \"zh-CN,zh;q=0.9\",\n            \"cache-control\": \"max-age=0\",\n            \"upgrade-insecure-requests\": \"1\",\n            Referer: \"referer: https://cn.bing.com/search?q=\" + encodeURIComponent(query) + \"&form=QBLHCN&sp=-1&pq=a&sc=6-1&qs=n&sk=&cvid=A91AB41228AD45E694D5F2EEBF87FE70\",\n            \"Referrer-Policy\": \"strict-origin-when-cross-origin\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36\",\n        },\n    };\n    let body = await getContents(httpOptions)",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:354-365"
    },
    "4043": {
        "file_id": 497,
        "content": "The code is setting up HTTP request options for a GET request to Bing.com, with headers including user agent, accept language, and upgrade insecure requests, and specifying the referer as the current query search term on Bing's Chinese site. It then sends the request using getContents function and stores the response body in the 'body' variable.",
        "type": "comment"
    },
    "4044": {
        "file_id": 497,
        "content": "    //console.log(body)\n    if (body.indexOf(\"conversationId\") == -1) {\n        console.log(\"请求chatid失败\");\n        return;\n    }\n    console.log(body.indexOf(\"conversationId\"));\n    console.log(body.indexOf(\"iframeTalkStatus\"));\n    let config =\n        '{\"' +\n        body.substring(\n            body.indexOf(\"conversationId\"),\n            body.indexOf(\"iframeTalkStatus\")\n        ) +\n        '\":\"\"}';\n    config = JSON.parse(config);\n    console.log(config);\n    // mysqld.addChatId(fromQQ, config);\n    return config;\n}\nasync function getAuth(opts, redis) {\n    cookie = await post(opts);\n    //redis.set(\"ice_cookie\", cookie)\n    log.info(\"new cookie:\" + cookie);\n    return cookie;\n}\nfunction post(opts) {\n    return new Promise((resolve, reject) => {\n        request(opts, function(error, response) {\n            if (error) throw new Error(error);\n            if (response.statusCode != \"200\") {\n                console.log(\"requestCode:\" + response.statusCode);\n            }\n            console.log(\"requestCode:\" + response.statusCode);",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:367-401"
    },
    "4045": {
        "file_id": 497,
        "content": "This code appears to handle API requests, logging, and cookie management. It checks the response for specific parameters, extracts them, and parses the data into a JSON object. The `post` function makes a POST request and logs the response status code. The `getAuth` function uses this `post` function and handles the asynchronous result of the API call to set the cookie in Redis.",
        "type": "comment"
    },
    "4046": {
        "file_id": 497,
        "content": "            var responseCookies = response.headers[\"set-cookie\"];\n            console.log(response.body);\n            var requestCookies = \"\";\n            for (var i = 0; i < responseCookies.length; i++) {\n                var oneCookie = responseCookies[i];\n                oneCookie = oneCookie.split(\";\");\n                requestCookies = requestCookies + oneCookie[0] + \";\";\n            }\n            resolve(requestCookies);\n        });\n    });\n}\nfunction getContents(opts) {\n    return new Promise((resolve, reject) => {\n        request(opts, function(error, response) {\n            try {\n                if (error) reject(error);\n                if (response.statusCode != \"200\") {\n                    console.log(\"requestCode:\" + response.statusCode);\n                }\n                console.log(\"requestCode:\" + response.statusCode);\n                var responseCookies = response.headers[\"set-cookie\"];\n                resolve(response.body);\n            } catch (e) {\n                console.log('ERROR', e)\n                console.log('request failed')",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:402-429"
    },
    "4047": {
        "file_id": 497,
        "content": "Code snippet handles HTTP requests, retrieves response cookies and body content, and handles errors. It uses the request library to make GET requests with optional headers and parameters, then processes the response status code and cookies before resolving the Promise with response body or rejecting with an error.",
        "type": "comment"
    },
    "4048": {
        "file_id": 497,
        "content": "                resolve(null);\n            }\n        });\n    });\n}\n// module.exports = { iceAI_word };\n// let test_request = \"不会吧\"\n// let test_request = \"python\"\nconst http = require('http');\nfunction getQueryParams(reqUrl) {\n    current_url = new URL('http://localhost' + reqUrl)\n    params = current_url.searchParams\n    console.log('query parameters:', params)\n    return params\n}\nlet topic_chatId_dict = {}\nconst requestListener = function(req, res) {\n    console.log(\"________________________________________________\")\n    console.log(\"REQUEST AT:\", req.url, req.method)\n    if (req.url == \"/\") {\n        res.writeHead(200);\n        res.end('xiaoice chat server');\n    } else if (req.url.split(\"?\")[0] == '/chat') {\n        callback = (result) => {\n            res.writeHead(200);\n            content = { \"msg\": 'success', 'reply': result }\n            res.end(JSON.stringify(content))\n        }\n        params = getQueryParams(req.url)\n        message = params.get(\"message\")\n        topic = params.get(\"topic\")\n        if (message == null) {",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:430-462"
    },
    "4049": {
        "file_id": 497,
        "content": "This code sets up a chat server that listens for incoming requests and handles them. It checks if the request is for a chat, extracts the message and topic from the query parameters, and calls a callback function with the result to send back as a response. The `getQueryParams` function helps extract the query parameters from the URL.",
        "type": "comment"
    },
    "4050": {
        "file_id": 497,
        "content": "            message = \"你好呀\"\n        }\n        if (topic == null) {\n            topic = \"hhh\"\n        }\n        message = message.split(\" \").pop()\n        console.log(\"MESSAGE:\", message)\n        console.log(\"TOPIC:\", topic)\n        if (topic_chatId_dict[topic] == null) {\n            topic_chatId_dict[topic] = newChatId(topic)\n        }\n        chatId = topic_chatId_dict[topic]\n        if (chatId != null) {\n            response = iceAI_word(message, chatId,topic)\n            response.then((content) => {\n                console.log(\"REAL RESPONSE:\", content)\n                if (content != null) {\n                    callback(content)\n                } else {\n                    res.writeHead(401);\n                    res.end(JSON.stringify({ 'msg': 'empty response from microsoft xiaoice' }))\n                }\n            })\n        } else {\n            res.writeHead(401)\n            res.end(JSON.stringify({ 'msg': 'error when getting chatid' }))\n        }\n    } else {\n        res.writeHead(400);\n        res.end('please use /chat?topic={topic}&message={message} to chat with xiaoice.')",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:463-494"
    },
    "4051": {
        "file_id": 497,
        "content": "This code handles chat requests with Microsoft Xiaoice, extracting the topic and message from the URL parameters. It assigns a unique chat ID to the topic if it doesn't exist in the dictionary, calls the iceAI_word function to get a response, and sends it back as the HTTP response body. If any step fails or returns null, an error message is sent instead.",
        "type": "comment"
    },
    "4052": {
        "file_id": 497,
        "content": "    }\n}\nconst server = http.createServer(requestListener);\nport = 8735\nserver.listen(port);\nconsole.log('xiaoice server running on http://localhost:' + port);\n// // these code are just for test.\n// let test_request = \"你吃了没有\"\n// // let test_request2 = \"你吃了没有\"\n// query = 'python'\n// let config = newChatId(query)\n// response = iceAI_word(test_request, config) // automatically retry once. if keeping generating useless shits, we may decide to give it up?\n// // it is a promise.\n// // this is async shit.\n// // what if there's some error?\n// response.then((content) => {console.log(\"REAL RESPONSE:\", content)})\n// // REAL RESPONSE: 不想就不说了\n// // console.log(\"RESPONSE:\", response)\n// // response = iceAI_word(test_request2, config)\n// // console.log(\"RESPONSE:\", response)",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:495-516"
    },
    "4053": {
        "file_id": 497,
        "content": "The code sets up a server and listens for requests. It also includes test code to send a request, retrieve the response, and log the content of the response.",
        "type": "comment"
    },
    "4054": {
        "file_id": 498,
        "content": "/tests/video_phash_deduplication/test_video_hash.py",
        "type": "filepath"
    },
    "4055": {
        "file_id": 498,
        "content": "The code defines `getVideoPHash` to calculate a video's phash using the `videohashes` tool, testing it by comparing pairwise differences between hash values for different videos and considering duplicates based on a threshold.",
        "type": "summary"
    },
    "4056": {
        "file_id": 498,
        "content": "# use some delogo stuff.\nfrom lazero.program.subprocess import runCommandGetJson\n# these two are similar. can be used as threshold.\n# aaaa3d8a2eaa1f8a delogo\n# aaaa398a2faa5d8a not delogoed.\n# aaaa3c8a2faa5e8a mp4 (very similar to delogoed version)\ndef getVideoPHash(filepath,debug=False, timeout=100):\n    import os\n    import imagehash\n    assert os.path.exists(filepath)\n    assert os.path.isfile(filepath)\n    if not os.path.isabs(filepath):\n        filepath = os.path.abspath(filepath)\n    commandLine = [\n        \"videohashes\", # installed in path.\n        # \"/root/Desktop/works/pyjom/tests/video_phash_deduplication/videohashes/videohashes-linux\",\n        \"-json\",\n        filepath,\n    ]\n    success, myJson = runCommandGetJson(commandLine, debug=debug, timeout=timeout)\n    if debug:\n        print(\"SUCCESS?\", success)\n        print(myJson, type(myJson))\n    if not success:\n        return\n    # breakpoint()\n    phashString = myJson[\"phash\"]\n    phash = imagehash.hex_to_hash(phashString)\n    if debug:\n        print(\"FILEPATH: %s\" % filepath)",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_video_hash.py:1-32"
    },
    "4057": {
        "file_id": 498,
        "content": "The code defines a function `getVideoPHash` that calculates a video's phash (a unique identifier for an image or video) using the `videohashes` command-line tool. It takes a filepath as input, checks if it exists and is a file, then runs the command to generate the JSON output. The function also converts the returned phash string to a binary hash and optionally prints debug information.",
        "type": "comment"
    },
    "4058": {
        "file_id": 498,
        "content": "        print(myJson)\n        print(\"PHASH:\", phash)\n    # if withDuration:\n    #     duration = myJson[\"duration\"]\n    #     return duration, phash\n    # duration is inaccurate\n    return phash\nif __name__ == \"__main__\":\n    videoPaths = [\n        \"cute_cat_gif.mp4\",\n        \"cute_cat_gif.gif\",\n        \"cat_delogo.gif\",\n        \"/root/Desktop/works/pyjom/samples/video/dog_with_large_text.gif\",\n    ]\n    hashs = [getVideoPHash(filepath,debug=True) for filepath in videoPaths]\n    dis0 = hashs[0] - hashs[1]  # small\n    dis1 = hashs[1] - hashs[2]  # big\n    dis2 = hashs[0] - hashs[2]  # big\n    dis3 = hashs[0] - hashs[3]  # big\n    print(dis0, dis1, dis2, dis3)\n    # 4 4 4\n    # strange. why?\n    # 4 4 4 42\n    # huge difference.\n    # what value do you decide to be duplicate?\n    # phash < 7 (really?)\n    # so how do we run this test?",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_video_hash.py:33-65"
    },
    "4059": {
        "file_id": 498,
        "content": "This code tests the video hashing function by calculating pairwise differences between hash values for different video files. It then compares the differences to determine potential duplicates and prints the results. The hash difference threshold for considering duplicates is set to 7, but this seems low and may need adjustment based on further testing.",
        "type": "comment"
    },
    "4060": {
        "file_id": 499,
        "content": "/tests/video_phash_deduplication/test_milvus_library.py",
        "type": "filepath"
    },
    "4061": {
        "file_id": 499,
        "content": "This code defines a Milvus function for connecting, managing collections, and caching. It creates Collections with specified data types, searches duplicated videos, retrieves video duration/hash, indexes videos, and reloads collection if necessary.",
        "type": "summary"
    },
    "4062": {
        "file_id": 499,
        "content": "# # duplicate -> remove, do not insert\n# # not duplicate -> get the data, insert\n# # you want to clear the collection after this run?\n# from functools import lru_cache\n# from pymilvus import connections\n# @lru_cache(maxsize=1)\n# def connectMilvusDatabase(alias=\"default\", host=\"localhost\", port=\"19530\"):\n#     connection = connections.connect(\n#         alias=alias, host=host, port=port\n#     )  # can we reconnect?\n#     print(\"milvus connected\")\n# # connectMilvusDatabase()\n# # connectMilvusDatabase() # will not connect again.\n# from pymilvus import Collection\n# from pymilvus import utility\n# from pymilvus import CollectionSchema, FieldSchema, DataType\n# import traceback\n# def getMilvusVideoDeduplicationCollection(\n#     get_existing: bool = False,\n# ):  # most of the time we just use the same\n#     collection_name = \"video_deduplication\"\n#     try:\n#         if utility.has_collection(collection_name):  # be prudent.\n#             if get_existing:\n#                 return Collection(collection_name)\n#             utility.drop_collection(collection_name)",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_milvus_library.py:1-35"
    },
    "4063": {
        "file_id": 499,
        "content": "The code defines a function to connect to a Milvus database, get or remove an existing collection named \"video_deduplication\", and returns the collection if it already exists. The function uses caching and checks if the collection already exists before performing any actions.",
        "type": "comment"
    },
    "4064": {
        "file_id": 499,
        "content": "#     except:\n#         traceback.print_exc()\n#         print(\"maybe the collection does not exist\")\n#     video_semantic_id = FieldSchema(  # how to insert this shit without prior knowledge?\n#         name=\"video_semantic_id\",\n#         dtype=DataType.INT64,\n#         is_primary=True,  # if is primary, will do check for 'not duplicate' or something.\n#         auto_id=True,  # no need for id generation.\n#     )\n#     video_length = FieldSchema(\n#         name=\"video_length\",\n#         dtype=DataType.FLOAT,\n#     )\n#     video_phash = FieldSchema(\n#         name=\"video_phash\", dtype=DataType.BINARY_VECTOR, dim=64\n#     )  # 64\n#     # single dimension? no multi dimension support?\n#     schema = CollectionSchema(\n#         fields=[video_semantic_id, video_length, video_phash],\n#         description=\"Test video deduplication\",\n#     )\n#     collection = Collection(\n#         name=collection_name,\n#         schema=schema,\n#         using=\"default\",\n#         shards_num=2,\n#     )\n#     # is this demo collection?\n#     return collection",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_milvus_library.py:36-65"
    },
    "4065": {
        "file_id": 499,
        "content": "This code defines a CollectionSchema and Collection for Milvus library. The schema contains fields for video_semantic_id, video_length, and video_phash, with their respective data types and properties. The Collection is created with a name, schema, database usage, and number of shards.",
        "type": "comment"
    },
    "4066": {
        "file_id": 499,
        "content": "# # seems hard to setup.\n# # not started!\n# # https://milvus.io/docs/v2.0.0/metric.md#binary\n# # the metric is important to us.\n# import numpy as np\n# import bitarray\n# @lru_cache(maxsize=1)\n# def transformVideoPhash(videoPhash):\n#     # we need the raw phash.\n#     queryData = videoPhash.hash  # videoPhashTruthTable8x8 or something\n#     queryData = queryData.reshape(-1).tolist()\n#     queryData = [\"1\" if x else \"0\" for x in queryData]\n#     queryData = bitarray.bitarray(\"\".join(queryData), endian=\"little\")\n#     queryData = queryData.tobytes()\n#     return queryData\n# # dimension: 8*8=64\n# def indexVideoWithVideoDurationAndPhash(collection, videoDuration, videoPhash):\n#     queryData = transformVideoPhash(videoPhash)\n#     collection.insert([[np.float32(videoDuration)], [queryData]])\n# # can release even if not loaded.\n# from test_video_hash import getVideoPHash\n# import caer\n# @lru_cache(maxsize=1)\n# def getVideoDurationAndPhashFromFile(videoFilePath):\n#     videoDuration = caer.video.frames_and_fps.get_duration(videoFilePath)",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_milvus_library.py:68-103"
    },
    "4067": {
        "file_id": 499,
        "content": "Function `transformVideoPhash` takes a video phash and converts it into a binary format for Milvus library indexing. Function `indexVideoWithVideoDurationAndPhash` inserts the video duration and transformed phash into the specified collection. The `getVideoDurationAndPhashFromFile` function retrieves the video duration and corresponding phash of a given video file using caer's video module. All functions are cached to avoid redundant computations.",
        "type": "comment"
    },
    "4068": {
        "file_id": 499,
        "content": "#     videoPhash = getVideoPHash(videoFilePath)\n#     return videoDuration, videoPhash\n# def indexVideoWithVideoDurationAndPhashFromFile(collection, videoFilePath):\n#     videoDuration, videoPhash = getVideoDurationAndPhashFromFile(videoFilePath)\n#     indexVideoWithVideoDurationAndPhash(collection, videoDuration, videoPhash)\n# def reloadMilvusCollection(collection):\n#     collection.release()  # unload.\n#     collection.load()\n# # make it into some library!\n# # insert after load?\n# # # 1,64\n# # what is wrong? wtf?\n# # queryData = queryData.tolist()\n# def getDistancesBySearchingDuplicatedVideoInMilvusByFile(\n#     collection,\n#     videoFilePath,\n#     search_params={\"metric_type\": \"Jaccard\", \"params\": {\"nprobe\": 10}},\n#     autoreload: bool = True,\n#     span: float = 2,\n#     debug: bool = False,\n#     limit: int = 10,\n# ):\n#     if autoreload:\n#         reloadMilvusCollection(collection)\n#     videoDuration, videoPhash = getVideoDurationAndPhashFromFile(videoFilePath)\n#     queryData = transformVideoPhash(videoPhash)",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_milvus_library.py:104-136"
    },
    "4069": {
        "file_id": 499,
        "content": "This code snippet defines a function for searching duplicated videos in Milvus by their file path, using Jaccard metric. It also includes functions to get video duration and hash from the file, index videos with duration and hash, and reload Milvus collection if necessary. The search parameters include metric type, probe count, span, limit, and whether to enable debug mode.",
        "type": "comment"
    },
    "4070": {
        "file_id": 499,
        "content": "#     minVideoLength = max(0, videoDuration - span)\n#     maxVideoLength = videoDuration + span\n#     results = collection.search(\n#         data=[queryData],  # this is the float dimension.\n#         anns_field=\"video_phash\",\n#         param=search_params,\n#         output_fields=[\"video_length\"],\n#         limit=limit,\n#         expr=\"video_length > {minVideoLength} and video_length < {maxVideoLength}\".format(\n#             minVideoLength=minVideoLength, maxVideoLength=maxVideoLength\n#         ),\n#     )\n#     theHit = results[0]\n#     # print(theHit)\n#     # so we can perform search without filtering afterwards.\n#     # results[0][0].entity.get('video_length')\n#     # print(results[0].ids)\n#     # now, we want to have the 'distance' parameter.\n#     # print(results[0])\n#     # print(theHit)\n#     distances = list(theHit.distances)\n#     if debug:\n#         print(\"distances: %s\" % distances)\n#     return distances\n#     # what is the distance? we need to try.\n#     # returh the closest distance?\n#     # results = [x for x in theHit]",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_milvus_library.py:137-164"
    },
    "4071": {
        "file_id": 499,
        "content": "This code searches for videos within a specified range of video length in the Milvus library. It sets minimum and maximum lengths based on the query's duration and span, and uses these values to filter results from the search. The closest distance between the query and each result is then returned.",
        "type": "comment"
    },
    "4072": {
        "file_id": 499,
        "content": "#     # hits = len(theHit)\n#     # breakpoint()\n#     # how to get document by id? wtf\n# def checkDuplicatedVideoAndInsertVector(\n#     collection,\n#     videoPath,\n#     threshold: float = 0.15,  # are you sure?\n#     insertDuplicatedVector: bool = True,\n#     debug: bool = True,\n# ):\n#     reloadMilvusCollection(collection)\n#     distances = getDistancesBySearchingDuplicatedVideoInMilvusByFile(\n#         collection, videoPath, debug=debug\n#     )\n#     minDistance = min(distances + [1])  # empty!\n#     duplicated = minDistance < threshold\n#     if insertDuplicatedVector or (not duplicated):\n#         indexVideoWithVideoDurationAndPhashFromFile(\n#             collection, videoPath\n#         )  # anyway let's do this.\n#     return duplicated\n# shall we insert that vector or not, even if we have detected the duplicated media?\n# you choose.\nimport sys\nimport os\n# os.chdir(\"../../\")\nsys.path.append(\"../../\")\n# ignore the global proxy now, we are not going to use that.\nos.environ[\"http_proxy\"] = \"\"\nos.environ[\"https_proxy\"] = \"\"",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_milvus_library.py:165-200"
    },
    "4073": {
        "file_id": 499,
        "content": "Function checkDuplicatedVideoAndInsertVector checks if a video file exists in Milvus collection and returns whether the video is duplicated or not. If insertDuplicatedVector is True, it indexes the video regardless of duplication status. The function uses getDistancesBySearchingDuplicatedVideoInMilvusByFile to find distances between the new video and existing videos in Milvus.",
        "type": "comment"
    },
    "4074": {
        "file_id": 499,
        "content": "from pyjom.videotoolbox import getMilvusVideoDeduplicationCollection,checkDuplicatedVideoAndInsertVector\nif __name__ == \"__main__\":\n    # connectMilvusDatabase()\n    collection = (\n        getMilvusVideoDeduplicationCollection()\n    )  # will not get existing collections\n    videoPaths = [\n        \"cute_cat_gif.mp4\",\n        \"cute_cat_gif.gif\",\n        \"cat_delogo.gif\",\n        \"/root/Desktop/works/pyjom/samples/video/dog_with_large_text.gif\",\n    ]\n    # for videoPath in videoPaths:\n    from lazero.utils.logger import sprint\n    for videoPath in videoPaths:\n        print(\"filepath: %s\" % videoPath)\n        duplicated = checkDuplicatedVideoAndInsertVector(collection, videoPath)\n        sprint(\"duplicated?\", duplicated)\n\"\"\"\nfilepath: cute_cat_gif.mp4\ndistances: [0.0, 0.11764705926179886, 0.11764705926179886, 0.7200000286102295, 0.7200000286102295, 0.7346938848495483, 0.7659574747085571, 0.7924528121948242]\n______________________________\nfilepath: cute_cat_gif.gif\ndistances: [0.0, 0.11764705926179886, 0.117647",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_milvus_library.py:201-226"
    },
    "4075": {
        "file_id": 499,
        "content": "The code connects to a Milvus database, retrieves the video deduplication collection, and checks if each given video path is already in the collection. It prints the file paths of the videos and whether they are duplicated or not using `checkDuplicatedVideoAndInsertVector` function from `lazero.utils.logger` module. The distances between the new video and existing ones in the database are also printed.",
        "type": "comment"
    },
    "4076": {
        "file_id": 499,
        "content": "05926179886, 0.7200000286102295, 0.7200000286102295, 0.7346938848495483, 0.7659574747085571, 0.7692307829856873]\n______________________________\nfilepath: cat_delogo.gif\ndistances: [0.0, 0.11764705926179886, 0.11764705926179886, 0.7200000286102295, 0.7200000286102295, 0.7346938848495483, 0.7659574747085571, 0.7924528121948242]\n______________________________\nfilepath: /root/Desktop/works/pyjom/samples/video/dog_with_large_text.gif\ndistances: [0.0, 0.6808510422706604, 0.6938775777816772, 0.6938775777816772, 0.739130437374115, 0.7692307829856873, 0.7924528121948242, 0.7924528121948242]\n______________________________\n\"\"\"",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_milvus_library.py:226-234"
    },
    "4077": {
        "file_id": 499,
        "content": "The code appears to be storing and comparing distances between video phashes for different files. Each line contains a file path followed by an array of distances, indicating the similarity of that video phash to other video phashes in the system. The lower the distance value, the more similar the videos are.",
        "type": "comment"
    },
    "4078": {
        "file_id": 500,
        "content": "/tests/video_phash_deduplication/test_milvus.py",
        "type": "filepath"
    },
    "4079": {
        "file_id": 500,
        "content": "The code demonstrates Milvus database operations, including creating a \"video\" collection, inserting data and performing searches. It is part of debugging process to retrieve documents by ID. The programmer is stuck and requires further investigation.",
        "type": "summary"
    },
    "4080": {
        "file_id": 500,
        "content": "# duplicate -> remove, do not insert\n# not duplicate -> get the data, insert\n# you want to clear the collection after this run?\n# import pymilvus\nfrom pymilvus import connections\nfrom functools import lru_cache\n@lru_cache(maxsize=1)\ndef connectMilvusDatabase(alias=\"default\", host=\"localhost\", port=\"19530\"):\n\tconnection = connections.connect(alias=alias, host=host, port=port)# can we reconnect?\n\tprint('milvus connected')\nconnectMilvusDatabase()\nconnectMilvusDatabase() # will not connect again.\ncollection_name = \"video_deduplication\"\nfrom pymilvus import Collection\n# Collection(collection_name)\n# remote this thing.\nfrom pymilvus import utility\ntry:\n    if utility.has_collection(collection_name):  # be prudent.\n        utility.drop_collection(collection_name)\nexcept:\n    import traceback\n    traceback.print_exc()\n    print(\"maybe the collection does not exist\")\nfrom pymilvus import CollectionSchema, FieldSchema, DataType\nvideo_semantic_id = FieldSchema(  # how to insert this shit without prior knowledge?\n    name=\"video_semantic_id\",",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_milvus.py:1-39"
    },
    "4081": {
        "file_id": 500,
        "content": "This code establishes a connection to a Milvus database, checks if the \"video_deduplication\" collection exists, and if so, removes it before creating a new one. The `connectMilvusDatabase` function sets up a connection with specified alias, host, and port (default values used in this code). The `utility.has_collection` and `utility.drop_collection` functions from the `pymilvus` utility module are used to check for and remove an existing collection named \"video_deduplication\". A `CollectionSchema` is defined for the new collection, specifying a field schema named \"video_semantic_id\".",
        "type": "comment"
    },
    "4082": {
        "file_id": 500,
        "content": "    dtype=DataType.INT64,\n    is_primary=True,  # if is primary, will do check for 'not duplicate' or something.\n    auto_id=True,  # no need for id generation.\n)\nvideo_length = FieldSchema(\n    name=\"video_length\",\n    dtype=DataType.FLOAT,\n)\nvideo_phash = FieldSchema(\n    name=\"video_phash\", dtype=DataType.BINARY_VECTOR, dim=64\n)  # 64\n# single dimension? no multi dimension support?\nschema = CollectionSchema(\n    fields=[video_semantic_id, video_length, video_phash],\n    description=\"Test video deduplication\",\n)\n# collection = Collection(\"video\")      # Get an existing collection.\ncollection = Collection(\n    name=collection_name,\n    schema=schema,\n    using=\"default\",\n    shards_num=2,\n)\n# is this demo collection?\n# seems hard to setup.\n# not started!\n# https://milvus.io/docs/v2.0.0/metric.md#binary\n# the metric is important to us.\nsearch_params = {\"metric_type\": \"Jaccard\", \"params\": {\"nprobe\": 10}}\nimport numpy as np\nqueryData = np.array(\n    [\n        [True, True, True, False, False, True, False, True],\n        [True, False, False, True, False, True, True, False],",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_milvus.py:40-76"
    },
    "4083": {
        "file_id": 500,
        "content": "This code is defining a schema for a Milvus collection, specifying the data types and field names. The schema includes video_semantic_id, video_length, and video_phash fields, which are used in video deduplication. The code creates a collection named \"video\" with 2 shards using the specified schema and sets the metric type for searching as Jaccard with nprobe parameter set to 10. It also imports numpy and creates queryData, which seems to be a binary vector.",
        "type": "comment"
    },
    "4084": {
        "file_id": 500,
        "content": "        [True, False, False, True, True, False, False, True],\n        [True, True, True, True, True, False, False, True],\n        [True, False, False, True, False, True, True, False],\n        [False, True, True, False, False, False, False, True],\n        [True, True, False, False, False, True, True, False],\n        [False, False, True, False, False, True, False, False],\n    ]\n)\nqueryData = queryData.reshape(-1).tolist()\nqueryData = [\"1\" if x else \"0\" for x in queryData]\nimport bitarray\nqueryData = bitarray.bitarray(\"\".join(queryData), endian=\"little\")\nqueryData2 = queryData.copy()\nqueryData2[1:4] = 0\nqueryData3 = queryData2.copy()\nqueryData2 = queryData2.tobytes()\nqueryData3[8:15] = 0\nqueryData3 = queryData3.tobytes()\nqueryData = queryData.tobytes()\n# dimension: 8*8=64\n# collection.insert([[1], [np.float32(3.5)], [queryData]])\n# collection.insert([[np.float32(3.5)], [queryData]])\n# for _ in range(8):\ncollection.insert([[np.float32(3.5)], [queryData]])\ncollection.insert([[np.float32(3.5)], [queryData2]])  # slight difference.",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_milvus.py:77-102"
    },
    "4085": {
        "file_id": 500,
        "content": "The code is preparing and inserting data into a Milvus collection. It creates binary representations of queryData, queryData2, and queryData3 (slightly different from queryData2), then inserts them along with a float value (np.float32(3.5)) into the collection, representing a 64-dimensional vector.",
        "type": "comment"
    },
    "4086": {
        "file_id": 500,
        "content": "collection.insert([[np.float32(3.5)], [queryData3]])  # more difference.\n# print(len(queryData), len(queryData)*8)\n# # print(queryData.shape)\n# breakpoint()\n# collection.load()\ncollection.insert([[np.float32(3.5)], [queryData]]) # still three.\n# can release even if not loaded.\ncollection.release() # unload.\ncollection.load()\n# make it into some library!\n# insert after load?\n# # 1,64\n# what is wrong? wtf?\n# queryData = queryData.tolist()\nresults = collection.search(\n    data=[queryData],  # this is the float dimension.\n    anns_field=\"video_phash\",\n    param=search_params,\n    output_fields=[\"video_length\"],\n    limit=10,\n    expr=\"video_length > 1.2 and video_length < 4\",\n    # expr='video_length < 1.2',\n)\ntheHit = results[0]\nprint(theHit)\n# so we can perform search without filtering afterwards.\n# results[0][0].entity.get('video_length')\n# print(results[0].ids)\n# now, we want to have the 'distance' parameter.\n# print(results[0])\n# print(theHit)\n# distances = theHit.distances\n# results = [x for x in theHit]\n# hits = len(theHit)",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_milvus.py:103-139"
    },
    "4087": {
        "file_id": 500,
        "content": "The code is inserting data into a collection, releasing and reloading it, performing a search based on specific parameters, and accessing the results. The purpose seems to be searching for video data within a database based on certain criteria, such as length, and extracting relevant information from the resulting hits.",
        "type": "comment"
    },
    "4088": {
        "file_id": 500,
        "content": "# breakpoint()\n# how to get document by id? wtf",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_milvus.py:140-141"
    },
    "4089": {
        "file_id": 500,
        "content": "This code appears to be part of a debugging process, where the programmer is trying to understand how to retrieve a document by its ID using the Milvus database. The \"breakpoint()\" comment suggests they are currently stuck or needing to pause execution for further investigation.",
        "type": "comment"
    },
    "4090": {
        "file_id": 501,
        "content": "/tests/video_phash_deduplication/test_image_hash_milvus_database_search.py",
        "type": "filepath"
    },
    "4091": {
        "file_id": 501,
        "content": "This code is initializing image paths and loading necessary libraries. It calculates image hashes for three different images using the phash function from imagehash library. It then creates a connection to a Milvus database and loads an existing collection.",
        "type": "summary"
    },
    "4092": {
        "file_id": 501,
        "content": "pic_0 = \"cat.png\"\npic_0_similar = \"cat3.png\"\npic_1 = \"/root/Desktop/works/pyjom/samples/image/dick.png\"\nfrom PIL import Image\n# >>> import imagehash\n# >>> hash = imagehash.average_hash(Image.open\nimport imagehash\npics = [pic_0, pic_0_similar, pic_1]\nhashs = [imagehash.phash(Image.open(pic)) for pic in pics]\n# dis0 = hashs[0]-hashs[1]\n# dis1 = hashs[1]-hashs[2]\n# print(dis0, dis1)\n# 0 24\n# 6 24\n# well, let's check?\n# print(hashs)\n# three truth tables.\n# 2^4 = 16, total 2*8 digits=16?\n# towhee(multimodal search like jina), haystack, milvus\n# import pymilvus\nfrom pymilvus import connections\nconnection = connections.connect(alias=\"default\", host=\"localhost\", port=\"19530\")\nfrom pymilvus import Collection\ncollection = Collection(\"book\")  # Get an existing collection.\ncollection.load()\n# seems hard to setup.\n# not started!",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_image_hash_milvus_database_search.py:1-37"
    },
    "4093": {
        "file_id": 501,
        "content": "This code is initializing image paths and loading necessary libraries. It calculates image hashes for three different images using the phash function from imagehash library. It then creates a connection to a Milvus database and loads an existing collection.",
        "type": "comment"
    },
    "4094": {
        "file_id": 502,
        "content": "/tests/video_phash_deduplication/test_image_hash.py",
        "type": "filepath"
    },
    "4095": {
        "file_id": 502,
        "content": "This code uses the Python Imaging Library (PIL) and imagehash module to calculate average color hash values for images. It opens three images, 'pic_0', 'pic_0_similar', and 'pic_1', calculates their color hash values using the phash function from imagehash, and then calculates the differences between the hashes of each pair of images. The code checks the types of the calculated hashes and prints the distances (dis0 and dis1) between the pairs of images. It also mentions a possible discrepancy in the expected number of digits for the distances.",
        "type": "summary"
    },
    "4096": {
        "file_id": 502,
        "content": "pic_0= 'cat.png'\npic_0_similar = \"cat3.png\"\npic_1 = \"/root/Desktop/works/pyjom/samples/image/dick.png\"\nfrom PIL import Image\n# >>> import imagehash\n# >>> hash = imagehash.average_hash(Image.open\nimport imagehash\npics = [pic_0, pic_0_similar, pic_1]\nhashs = [imagehash.phash(Image.open(pic)) for pic in pics]\ndis0 = hashs[0]-hashs[1]\ndis1 = hashs[1]-hashs[2]\n# 0 24\n# 6 24\n# well, let's check?\nprint([type(h) for h in hashs])\nbreakpoint()\nprint(dis0, dis1)\n# three truth tables.\n# 2^4 = 16, total 2*8 digits=16?",
        "type": "code",
        "location": "/tests/video_phash_deduplication/test_image_hash.py:1-23"
    },
    "4097": {
        "file_id": 502,
        "content": "This code uses the Python Imaging Library (PIL) and imagehash module to calculate average color hash values for images. It opens three images, 'pic_0', 'pic_0_similar', and 'pic_1', calculates their color hash values using the phash function from imagehash, and then calculates the differences between the hashes of each pair of images. The code checks the types of the calculated hashes and prints the distances (dis0 and dis1) between the pairs of images. It also mentions a possible discrepancy in the expected number of digits for the distances.",
        "type": "comment"
    },
    "4098": {
        "file_id": 503,
        "content": "/tests/video_phash_deduplication/README.md",
        "type": "filepath"
    },
    "4099": {
        "file_id": 503,
        "content": "Code detects identical video files and finds repeated intervals within each video file.",
        "type": "summary"
    }
}