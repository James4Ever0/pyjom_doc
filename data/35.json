{
    "3500": {
        "file_id": 428,
        "content": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js",
        "type": "filepath"
    },
    "3501": {
        "file_id": 428,
        "content": "The code utilizes \"request\" library, manages IDs and delays, handles GET/POST requests with error handling, sets up a chat server, uses Microsoft Xiaoice for responses, and includes test code.",
        "type": "summary"
    },
    "3502": {
        "file_id": 428,
        "content": "var request = require(\"request\");\n// var mysqld = require(\"./mysql\");\n// const { init: initDB, Counter, Chatid } = require(\"./db\");\nfunction getRequestId() {\n    return (ot() + ot() + ot() + ot() + ot() + ot() + ot() + ot()).toLowerCase();\n}\nconst sleep = (ms) => {\n    return new Promise(resolve => setTimeout(resolve, ms))\n}\nfunction ot() {\n    return (((1 + Math.random()) * 65536) | 0).toString(16).substring(1);\n}\nfunction i(n, i) {\n    for (\n        var s, c, e = 4, l = i.length / e - 1, r = [\n            [],\n            [],\n            [],\n            []\n        ], o = 0; o < 4 * e; o++\n    )\n        r[o % 4][Math.floor(o / 4)] = n[o];\n    for (r = t(r, i, 0, e), s = 1; s < l; s++)\n        (r = u(r, e)), (r = f(r, e)), (r = h(r, e)), (r = t(r, i, s, e));\n    for (\n        r = u(r, e), r = f(r, e), r = t(r, i, l, e), c = new Array(4 * e), o = 0; o < 4 * e; o++\n    )\n        c[o] = r[o % 4][Math.floor(o / 4)];\n    return c;\n}\nfunction u(n, t) {\n    for (var r, i = 0; i < 4; i++)\n        for (r = 0; r < t; r++) n[i][r] = o[n[i][r]];",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:1-37"
    },
    "3503": {
        "file_id": 428,
        "content": "This code imports the \"request\" library and contains functions for generating a unique request ID, sleeping for a specified time, and working with arrays. It also includes a function for string manipulation and an algorithm that performs some operations on input arrays.",
        "type": "comment"
    },
    "3504": {
        "file_id": 428,
        "content": "    return n;\n}\nfunction f(n, t) {\n    for (var i, u = new Array(4), r = 1; r < 4; r++) {\n        for (i = 0; i < 4; i++) u[i] = n[r][(i + r) % t];\n        for (i = 0; i < 4; i++) n[r][i] = u[i];\n    }\n    return n;\n}\nfunction h(n) {\n    for (var t, r, u, i = 0; i < 4; i++) {\n        for (t = new Array(4), r = new Array(4), u = 0; u < 4; u++)\n            (t[u] = n[u][i]),\n            (r[u] = n[u][i] & 128 ? (n[u][i] << 1) ^ 283 : n[u][i] << 1);\n        n[0][i] = r[0] ^ t[1] ^ r[1] ^ t[2] ^ t[3];\n        n[1][i] = t[0] ^ r[1] ^ t[2] ^ r[2] ^ t[3];\n        n[2][i] = t[0] ^ t[1] ^ r[2] ^ t[3] ^ r[3];\n        n[3][i] = t[0] ^ r[0] ^ t[1] ^ t[2] ^ r[3];\n    }\n    return n;\n}\nfunction t(n, t, i, r) {\n    for (var f, u = 0; u < 4; u++)\n        for (f = 0; f < r; f++) n[u][f] ^= t[i * 4 + f][u];\n    return n;\n}\nfunction e(n) {\n    for (var t = 0; t < 4; t++) n[t] = o[n[t]];\n    return n;\n}\nfunction c(n) {\n    for (var i = n[0], t = 0; t < 3; t++) n[t] = n[t + 1];\n    return (n[3] = i), n;\n}\nfunction rr(n) {\n    for (\n        var h,",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:38-80"
    },
    "3505": {
        "file_id": 428,
        "content": "This code contains multiple functions that perform various operations on a 4x4 matrix. The 'g' function seems to return a value 'n'. The 'f' function rearranges the elements within each row of the 4x4 matrix. The 'h' function applies XOR operations between different elements in the matrix, resulting in modified values for each row. The 't' function performs XOR operations between the given matrix and another 4x4 matrix, affecting specific rows based on provided indices. The 'e' function replaces the values in the matrix with corresponding values from a lookup table 'o'. Lastly, the 'c' function rearranges the elements in the matrix by shifting each row one position to the left and moving the last row as the first. The function 'rr' appears to be incomplete as it lacks the closing brace '}'.",
        "type": "comment"
    },
    "3506": {
        "file_id": 428,
        "content": "            i,\n            o = 4,\n            r = n.length / 4,\n            s = r + 6,\n            f = new Array(o * (s + 1)),\n            u = new Array(4),\n            t = 0; t < r; t++\n    )\n        (h = [n[4 * t], n[4 * t + 1], n[4 * t + 2], n[4 * t + 3]]), (f[t] = h);\n    for (t = r; t < o * (s + 1); t++) {\n        for (f[t] = new Array(4), i = 0; i < 4; i++) u[i] = f[t - 1][i];\n        if (t % r == 0)\n            for (u = e(c(u)), i = 0; i < 4; i++) u[i] ^= l[t / r][i];\n        else r > 6 && t % r == 4 && (u = e(u));\n        for (i = 0; i < 4; i++) f[t][i] = f[t - r][i] ^ u[i];\n    }\n    return f;\n}\nfunction r(n) {\n    for (\n        var h,\n            i,\n            o = 4,\n            r = n.length / 4,\n            s = r + 6,\n            f = new Array(o * (s + 1)),\n            u = new Array(4),\n            t = 0; t < r; t++\n    )\n        (h = [n[4 * t], n[4 * t + 1], n[4 * t + 2], n[4 * t + 3]]), (f[t] = h);\n    for (t = r; t < o * (s + 1); t++) {\n        for (f[t] = new Array(4), i = 0; i < 4; i++) u[i] = f[t - 1][i];",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:81-113"
    },
    "3507": {
        "file_id": 428,
        "content": "This code appears to be decrypting an input array, `n`, by manipulating its elements and storing the results in a new array, `f`. The process involves breaking down `n` into smaller chunks of 4 elements each and applying different operations based on the position within the original array. It also includes a step to XOR specific elements with values from another array, `l`, and an optional encryption/decryption operation if the current position is divisible by `r` and greater than 6. Finally, it returns the modified array `f`.",
        "type": "comment"
    },
    "3508": {
        "file_id": 428,
        "content": "        if (t % r == 0)\n            for (u = e(c(u)), i = 0; i < 4; i++) u[i] ^= l[t / r][i];\n        else r > 6 && t % r == 4 && (u = e(u));\n        for (i = 0; i < 4; i++) f[t][i] = f[t - r][i] ^ u[i];\n    }\n    return f;\n}\nfunction a(n, t, u) {\n    var c = 16,\n        a,\n        y,\n        l,\n        w,\n        o,\n        e,\n        f,\n        nt;\n    if (!(u == 128 || u == 192 || u == 256)) return \"\";\n    for (n = s(n), t = s(t), a = u / 8, y = new Array(a), f = 0; f < a; f++)\n        y[f] = isNaN(t.charCodeAt(f)) ? 0 : t.charCodeAt(f);\n    l = i(y, rr(y));\n    l = l.concat(l.slice(0, a - 16));\n    var h = new Array(c),\n        k = new Date().getTime(),\n        tt = k % 1e3,\n        it = Math.floor(k / 1e3),\n        rt = Math.floor(Math.random() * 65535);\n    for (f = 0; f < 2; f++) h[f] = (tt >>> (f * 8)) & 255;\n    for (f = 0; f < 2; f++) h[f + 2] = (rt >>> (f * 8)) & 255;\n    for (f = 0; f < 4; f++) h[f + 4] = (it >>> (f * 8)) & 255;\n    for (w = \"\", f = 0; f < 8; f++) w += String.fromCharCode(h[f]);\n    var ut = rr(l),",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:114-146"
    },
    "3509": {
        "file_id": 428,
        "content": "This code encodes and decodes a string using a specific encryption algorithm. It takes an input string, splits it into chunks of 16 characters, then applies a series of XOR operations on each chunk before combining the results. The result is an encoded or decoded string based on the provided parameters.",
        "type": "comment"
    },
    "3510": {
        "file_id": 428,
        "content": "        b = Math.ceil(n.length / c),\n        d = new Array(b);\n    for (o = 0; o < b; o++) {\n        for (e = 0; e < 4; e++) h[15 - e] = (o >>> (e * 8)) & 255;\n        for (e = 0; e < 4; e++) h[11 - e] = (o / 4294967296) >>> (e * 8);\n        var ft = i(h, ut),\n            g = o < b - 1 ? c : ((n.length - 1) % c) + 1,\n            p = new Array(g);\n        for (f = 0; f < g; f++)\n            (p[f] = ft[f] ^ n.charCodeAt(o * c + f)),\n            (p[f] = String.fromCharCode(p[f]));\n        d[o] = p.join(\"\");\n    }\n    return (nt = w + d.join(\"\")), v(nt);\n}\nfunction v(n) {\n    for (\n        var i = \"0x\",\n            r = [\n                \"0\",\n                \"1\",\n                \"2\",\n                \"3\",\n                \"4\",\n                \"5\",\n                \"6\",\n                \"7\",\n                \"8\",\n                \"9\",\n                \"a\",\n                \"b\",\n                \"c\",\n                \"d\",\n                \"e\",\n                \"f\",\n            ],\n            t = 0; t < n.length; t++\n    )\n        i += r[n.charCodeAt(t) >> 4] + r[n.charCodeAt(t) & 15];",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:147-186"
    },
    "3511": {
        "file_id": 428,
        "content": "This code takes a string, splits it into chunks of specific size, and encodes each chunk using a simple encoding scheme. It then joins the encoded chunks together and returns the result, which is further processed in the v() function.",
        "type": "comment"
    },
    "3512": {
        "file_id": 428,
        "content": "    return i;\n}\nfunction s(n) {\n    var t = n.replace(/[\\u0080-\\u07ff]/g, function(n) {\n        var t = n.charCodeAt(0);\n        return String.fromCharCode(192 | (t >> 6), 128 | (t & 63));\n    });\n    return t.replace(/[\\u0800-\\uffff]/g, function(n) {\n        var t = n.charCodeAt(0);\n        return String.fromCharCode(\n            224 | (t >> 12),\n            128 | ((t >> 6) & 63),\n            128 | (t & 63)\n        );\n    });\n}\nvar o = [\n        99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118,\n        202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114,\n        192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49,\n        21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9,\n        131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209,\n        0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170,\n        251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143,",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:187-212"
    },
    "3513": {
        "file_id": 428,
        "content": "This code snippet defines a function 's' that takes in a string 'n', and replaces any non-basic Latin characters with their respective 3-byte sequences. It then returns the modified string. Additionally, there is an array of numbers representing a sequence that is used for some purpose in the codebase.",
        "type": "comment"
    },
    "3514": {
        "file_id": 428,
        "content": "        146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236,\n        95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34,\n        42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6,\n        36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213,\n        78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166,\n        180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3,\n        246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217,\n        142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230,\n        66, 104, 65, 153, 45, 15, 176, 84, 187, 22,\n    ],\n    l = [\n        [0, 0, 0, 0],\n        [1, 0, 0, 0],\n        [2, 0, 0, 0],\n        [4, 0, 0, 0],\n        [8, 0, 0, 0],\n        [16, 0, 0, 0],\n        [32, 0, 0, 0],\n        [64, 0, 0, 0],\n        [128, 0, 0, 0],\n        [27, 0, 0, 0],\n        [54, 0, 0, 0],\n    ];\n// n.encrypt = a\nasync function iceAI_word(",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:213-237"
    },
    "3515": {
        "file_id": 428,
        "content": "This code contains two arrays of numbers. The first array, `a`, seems to be encrypted or encoded data. The second array, `l`, represents a set of bitmasks. The function `iceAI_word` appears to use these arrays for encryption and decryption purposes, but the specific implementation details are not included in the provided code snippet.",
        "type": "comment"
    },
    "3516": {
        "file_id": 428,
        "content": "    // ToUserName,\n    // FromUserName,\n    // CreateTime,\n    // MsgType,\n    Content,\n    config,\n    query\n    // MsgId,\n) {\n    await sleep(1000);\n    // for whatever reason you have to wait for this long.\n    try {\n        var wquery = a(Content, \"3d9d5f16-5df0-43d7-902e-19274eecdc41\", 256);\n        console.log(\"encrypt:\" + wquery);\n        // let config = {};\n        // if ((await mysqld.isHaveChatIdIn(fromQQ)) == true) {\n        //     console.log(\"没有chatid，获取新id\")\n        //     config = await mysqld.getChatId(fromQQ);\n        // } else {\n        //     config = await newChatId(fromQQ);\n        // }\n        if (config) {\n            console.log(\"config:\" + config);\n        } else {\n            console.log('no config for xiaoice chat.')\n            return;\n        }\n        var h = {\n            zoTextResponse: \"\",\n            zoIsGCSResponse: false,\n            zoSearchQuery: query,\n            zoTimestampUtc: \"\",\n            zoIsStartOfSession: true,\n            zoRequestId: getRequestId(),\n            conversationId: config.conversationId,",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:238-274"
    },
    "3517": {
        "file_id": 428,
        "content": "The code waits for 1 second, then encrypts the message with a specific key and prints it to the console. It also checks if there's an existing chat ID for the fromQQ parameter. If not, it gets a new one by calling `mysqld.getChatId` or `newChatId`. The code then logs the config, creating a conversation ID, and assigns it to the h object.",
        "type": "comment"
    },
    "3518": {
        "file_id": 428,
        "content": "            query: { NormalizedQuery: wquery },\n            from: \"chatbox\",\n            traceId: config.traceId,\n        };\n        var url = \"https://cn.bing.com/english/zochatv2?cc=cn&ensearch=0\";\n        // {\"zoTextResponse\":\"\",\"zoIsGCSResponse\":\"false\",\"zoSearchQuery\":\"123\",\"zoTimestampUtc\":\"\",\"zoIsStartOfSession\":\"true\",\"zoRequestId\":\"ff90e6f70a6048d4fe5cc3c3327bbd32\",\"conversationId\":\"4a91fb33-73f7-43d4-b7b6-ba86a16e32fb\",\"query\":{\"NormalizedQuery\":\"0x23028811be44f661169365\"},\"from\":\"chatbox\",\"traceId\":\"B224B190F87941CD94AD0AC31A189D30\"}\n        let result = await getContents({\n            url: url,\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"text/plain;charset=UTF-8\",\n                origin: \"https://cn.bing.com\",\n                referer: \"https://cn.bing.com/search?q=123&form=QBLH&sp=-1&pq=123&sc=6-3&qs=n&sk=&cvid=566F001FDA424EEB805E1C175363B5AE\",\n                \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36\",",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:275-288"
    },
    "3519": {
        "file_id": 428,
        "content": "Sending a POST request to Bing's chat API endpoint with a normalized query, specifying the from source as \"chatbox\", and including a trace ID for identification purposes. The URL is set to the Bing chat API endpoint, headers include content type, origin, referer, and user-agent, all necessary information for the API request.",
        "type": "comment"
    },
    "3520": {
        "file_id": 428,
        "content": "                Connection: \"keep-alive\",\n            },\n            body: JSON.stringify(h),\n        });\n        if (result == null){ return}\n        // {\"content\":\"嘿 啾 嘿 啾啊\",\"type\":1,\"delayContents\":null,\"entityInfo\":[{\"Entity\":\"嘿 啾 嘿 啾啊\",\"IsEntity\":false}],\"target\":\"b\",\"history\":null,\"hasClientIdinMem\":true,\"needSayHello\":false,\"isHookStr\":false,\"showChatBox\":true,\"metadata\":{\"AnswerFeed\":\"RandomChitChatService\",\"EmotionInfo\":\"{\\\"EmotionClassificationInfo\\\":[{\\\"Category\\\":\\\"Sad\\\",\\\"Score\\\":0.0651140139},{\\\"Category\\\":\\\"Happy\\\",\\\"Score\\\":0.139467061},{\\\"Category\\\":\\\"Surprise\\\",\\\"Score\\\":0.176786855},{\\\"Category\\\":\\\"Angry\\\",\\\"Score\\\":0.358794},{\\\"Category\\\":\\\"Disgust\\\",\\\"Score\\\":0.2598381}],\\\"NeutralScore\\\":0.9992748,\\\"DomainInMatchScenario\\\":\\\"None\\\"}\"}}\n        result = JSON.parse(result);\n        if (result.content) {\n            var reply = result.content;\n            reply = reply.replace(\"小冰\", \"小姝\");\n            var message = 1;\n            var unuseless =\n                \"看的我一脸懵逼，都开始怀疑我的智商",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:289-302"
    },
    "3521": {
        "file_id": 428,
        "content": "Sends a POST request to the API with request parameters, parses the response as JSON, and replaces \"小冰\" with \"小姝\" if present in the response content.",
        "type": "comment"
    },
    "3522": {
        "file_id": 428,
        "content": "了。哎呀，不好意思，我刚刚好像走神了,感觉你知道的挺多的呢,额，我现在也不知道该说些什么,这个…不太好说啊,我语文不太好，不确定是不是懂了你的意思,刚刚不小心溜号了，真是不好意思这个我要好好想想再说这很难说，还是让我想想吧哦哦，这样啊我怎么理解比较好呢？\";\n            if (unuseless.indexOf(reply) != -1) {\n                console.log('xiaoice is returning useless reply', reply)\n                    //   message = 2;\n                    //   Log.trace(\"iceAi have unuseless message\");\n                    //   request(\n                    //     {\n                    //       url:\n                    //         \"http://api.qingyunke.com/api.php?key=free&appid=0&msg=\" +\n                    //         encodeURIComponent(msg2),\n                    //       method: \"GET\",\n                    //     },\n                    //     function (error, response, body) {\n                    //       var result = JSON.parse(body);\n                    //       reply = result.content;\n                    //       var logtext = \"\";\n                    //       return;\n                    //     }\n                    //   );\n            } else {\n                return reply;",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:302-322"
    },
    "3523": {
        "file_id": 428,
        "content": "Code is checking if the reply is useless (stored in unnecessary array) and returning it. If not, it returns the reply. If it's useless, it makes a request to an API for a new response and returns it.",
        "type": "comment"
    },
    "3524": {
        "file_id": 428,
        "content": "            }\n        }\n    } catch (e) {\n        console.log('ERROR FETCHING XIAOBING CHAT', e)\n            // will return nothing.\n            // sleep for 1 second?\n            // would you sleep for a while?\n    }\n}\nasync function newChatId(query) {\n    var options = options || {};\n    var httpOptions = {\n        url: \"https://cn.bing.com/search?q=\" + encodeURIComponent(query) + \"&form=QBLH&rdr=1&rdrig=E8F3C1A722454F949CCC4B98C4570A4A\",\n        method: \"get\",\n        timeout: 1000,\n        headers: {\n            accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\",\n            \"accept-language\": \"zh-CN,zh;q=0.9\",\n            \"cache-control\": \"max-age=0\",\n            \"sec-ch-ua\": '\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"',\n            \"sec-ch-ua-arch\": '\"x86\"',\n            \"sec-ch-ua-bitness\": '\"64\"',\n            \"sec-ch-ua-full-version\": '\"102.0.5005.63\"',\n            \"sec-ch-ua-mobile\": \"?0\",",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:323-347"
    },
    "3525": {
        "file_id": 428,
        "content": "This code appears to be a function for fetching a new chat ID based on a given query. If an error occurs during the fetch, it logs an error and may sleep for a second before retrying. The HTTP options include various headers for language and browser information, indicating that this function likely makes a GET request to retrieve the new chat ID from a Microsoft Bing search page.",
        "type": "comment"
    },
    "3526": {
        "file_id": 428,
        "content": "            \"sec-ch-ua-model\": '\"\"',\n            \"sec-ch-ua-platform\": '\"Windows\"',\n            \"sec-ch-ua-platform-version\": '\"10.0.0\"',\n            \"sec-fetch-dest\": \"document\",\n            \"sec-fetch-mode\": \"navigate\",\n            \"sec-fetch-site\": \"same-origin\",\n            cookie: \"MUID=005F25E7699168532D05342768F769B3; MUIDB=005F25E7699168532D05342768F769B3; _EDGE_V=1; SRCHD=AF=NOFORM; SRCHUID=V=2&GUID=31127A3BD4B84FF08E8E51EEEA34857F&dmnchg=1; _UR=QS=0&TQS=0; _HPVN=CS=eyJQbiI6eyJDbiI6MSwiU3QiOjAsIlFzIjowLCJQcm9kIjoiUCJ9LCJTYyI6eyJDbiI6MSwiU3QiOjAsIlFzIjowLCJQcm9kIjoiSCJ9LCJReiI6eyJDbiI6MSwiU3QiOjAsIlFzIjowLCJQcm9kIjoiVCJ9LCJBcCI6dHJ1ZSwiTXV0ZSI6dHJ1ZSwiTGFkIjoiMjAyMi0wNi0xMVQwMDowMDowMFoiLCJJb3RkIjowLCJHd2IiOjAsIkRmdCI6bnVsbCwiTXZzIjowLCJGbHQiOjAsIkltcCI6NH0=; SUID=M; SRCHUSR=DOB=20220611&T=1659599964000&TPC=1659599966000; ZHCHATSTRONGATTRACT=TRUE; ZHCHATWEAKATTRACT=TRUE; _EDGE_S=SID=05C5058B7100688001DB147D702E698C; _SS=SID=05C5058B7100688001DB147D702E698C; _tarLang=default=zh-Hans; ",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:348-354"
    },
    "3527": {
        "file_id": 428,
        "content": "This code sets various HTTP headers and cookies for a web request, such as user-agent information and session identifiers. It includes details about the browser model, platform, and version, as well as cookies that store user information and preferences.",
        "type": "comment"
    },
    "3528": {
        "file_id": 428,
        "content": "_TTSS_IN=hist=WyJlbiIsImF1dG8tZGV0ZWN0Il0=; _TTSS_OUT=hist=WyJ6aC1IYW5zIl0=; ipv6=hit=1659603639345&t=4; SNRHOP=I=&TS=; SRCHHPGUSR=SRCHLANG=zh-Hans&BRW=NOTP&BRH=S&CW=599&CH=657&SW=1366&SH=768&DPR=1&UTC=480&DM=0&PV=0.3.0&BZA=0&HV=1659600073&WTS=63795196764\",\n            \"sec-fetch-user\": \"?1\",\n            accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\",\n            \"accept-language\": \"zh-CN,zh;q=0.9\",\n            \"cache-control\": \"max-age=0\",\n            \"upgrade-insecure-requests\": \"1\",\n            Referer: \"referer: https://cn.bing.com/search?q=\" + encodeURIComponent(query) + \"&form=QBLHCN&sp=-1&pq=a&sc=6-1&qs=n&sk=&cvid=A91AB41228AD45E694D5F2EEBF87FE70\",\n            \"Referrer-Policy\": \"strict-origin-when-cross-origin\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36\",\n        },\n    };\n    let body = await getContents(httpOptions)",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:354-365"
    },
    "3529": {
        "file_id": 428,
        "content": "The code is setting up HTTP request options for a GET request to Bing.com, with headers including user agent, accept language, and upgrade insecure requests, and specifying the referer as the current query search term on Bing's Chinese site. It then sends the request using getContents function and stores the response body in the 'body' variable.",
        "type": "comment"
    },
    "3530": {
        "file_id": 428,
        "content": "    //console.log(body)\n    if (body.indexOf(\"conversationId\") == -1) {\n        console.log(\"请求chatid失败\");\n        return;\n    }\n    console.log(body.indexOf(\"conversationId\"));\n    console.log(body.indexOf(\"iframeTalkStatus\"));\n    let config =\n        '{\"' +\n        body.substring(\n            body.indexOf(\"conversationId\"),\n            body.indexOf(\"iframeTalkStatus\")\n        ) +\n        '\":\"\"}';\n    config = JSON.parse(config);\n    console.log(config);\n    // mysqld.addChatId(fromQQ, config);\n    return config;\n}\nasync function getAuth(opts, redis) {\n    cookie = await post(opts);\n    //redis.set(\"ice_cookie\", cookie)\n    log.info(\"new cookie:\" + cookie);\n    return cookie;\n}\nfunction post(opts) {\n    return new Promise((resolve, reject) => {\n        request(opts, function(error, response) {\n            if (error) throw new Error(error);\n            if (response.statusCode != \"200\") {\n                console.log(\"requestCode:\" + response.statusCode);\n            }\n            console.log(\"requestCode:\" + response.statusCode);",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:367-401"
    },
    "3531": {
        "file_id": 428,
        "content": "This code appears to handle API requests, logging, and cookie management. It checks the response for specific parameters, extracts them, and parses the data into a JSON object. The `post` function makes a POST request and logs the response status code. The `getAuth` function uses this `post` function and handles the asynchronous result of the API call to set the cookie in Redis.",
        "type": "comment"
    },
    "3532": {
        "file_id": 428,
        "content": "            var responseCookies = response.headers[\"set-cookie\"];\n            console.log(response.body);\n            var requestCookies = \"\";\n            for (var i = 0; i < responseCookies.length; i++) {\n                var oneCookie = responseCookies[i];\n                oneCookie = oneCookie.split(\";\");\n                requestCookies = requestCookies + oneCookie[0] + \";\";\n            }\n            resolve(requestCookies);\n        });\n    });\n}\nfunction getContents(opts) {\n    return new Promise((resolve, reject) => {\n        request(opts, function(error, response) {\n            try {\n                if (error) reject(error);\n                if (response.statusCode != \"200\") {\n                    console.log(\"requestCode:\" + response.statusCode);\n                }\n                console.log(\"requestCode:\" + response.statusCode);\n                var responseCookies = response.headers[\"set-cookie\"];\n                resolve(response.body);\n            } catch (e) {\n                console.log('ERROR', e)\n                console.log('request failed')",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:402-429"
    },
    "3533": {
        "file_id": 428,
        "content": "Code snippet handles HTTP requests, retrieves response cookies and body content, and handles errors. It uses the request library to make GET requests with optional headers and parameters, then processes the response status code and cookies before resolving the Promise with response body or rejecting with an error.",
        "type": "comment"
    },
    "3534": {
        "file_id": 428,
        "content": "                resolve(null);\n            }\n        });\n    });\n}\n// module.exports = { iceAI_word };\n// let test_request = \"不会吧\"\n// let test_request = \"python\"\nconst http = require('http');\nfunction getQueryParams(reqUrl) {\n    current_url = new URL('http://localhost' + reqUrl)\n    params = current_url.searchParams\n    console.log('query parameters:', params)\n    return params\n}\nlet topic_chatId_dict = {}\nconst requestListener = function(req, res) {\n    console.log(\"________________________________________________\")\n    console.log(\"REQUEST AT:\", req.url, req.method)\n    if (req.url == \"/\") {\n        res.writeHead(200);\n        res.end('xiaoice chat server');\n    } else if (req.url.split(\"?\")[0] == '/chat') {\n        callback = (result) => {\n            res.writeHead(200);\n            content = { \"msg\": 'success', 'reply': result }\n            res.end(JSON.stringify(content))\n        }\n        params = getQueryParams(req.url)\n        message = params.get(\"message\")\n        topic = params.get(\"topic\")\n        if (message == null) {",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:430-462"
    },
    "3535": {
        "file_id": 428,
        "content": "This code sets up a chat server that listens for incoming requests and handles them. It checks if the request is for a chat, extracts the message and topic from the query parameters, and calls a callback function with the result to send back as a response. The `getQueryParams` function helps extract the query parameters from the URL.",
        "type": "comment"
    },
    "3536": {
        "file_id": 428,
        "content": "            message = \"你好呀\"\n        }\n        if (topic == null) {\n            topic = \"hhh\"\n        }\n        message = message.split(\" \").pop()\n        console.log(\"MESSAGE:\", message)\n        console.log(\"TOPIC:\", topic)\n        if (topic_chatId_dict[topic] == null) {\n            topic_chatId_dict[topic] = newChatId(topic)\n        }\n        chatId = topic_chatId_dict[topic]\n        if (chatId != null) {\n            response = iceAI_word(message, chatId,topic)\n            response.then((content) => {\n                console.log(\"REAL RESPONSE:\", content)\n                if (content != null) {\n                    callback(content)\n                } else {\n                    res.writeHead(401);\n                    res.end(JSON.stringify({ 'msg': 'empty response from microsoft xiaoice' }))\n                }\n            })\n        } else {\n            res.writeHead(401)\n            res.end(JSON.stringify({ 'msg': 'error when getting chatid' }))\n        }\n    } else {\n        res.writeHead(400);\n        res.end('please use /chat?topic={topic}&message={message} to chat with xiaoice.')",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:463-494"
    },
    "3537": {
        "file_id": 428,
        "content": "This code handles chat requests with Microsoft Xiaoice, extracting the topic and message from the URL parameters. It assigns a unique chat ID to the topic if it doesn't exist in the dictionary, calls the iceAI_word function to get a response, and sends it back as the HTTP response body. If any step fails or returns null, an error message is sent instead.",
        "type": "comment"
    },
    "3538": {
        "file_id": 428,
        "content": "    }\n}\nconst server = http.createServer(requestListener);\nport = 8735\nserver.listen(port);\nconsole.log('xiaoice server running on http://localhost:' + port);\n// // these code are just for test.\n// let test_request = \"你吃了没有\"\n// // let test_request2 = \"你吃了没有\"\n// query = 'python'\n// let config = newChatId(query)\n// response = iceAI_word(test_request, config) // automatically retry once. if keeping generating useless shits, we may decide to give it up?\n// // it is a promise.\n// // this is async shit.\n// // what if there's some error?\n// response.then((content) => {console.log(\"REAL RESPONSE:\", content)})\n// // REAL RESPONSE: 不想就不说了\n// // console.log(\"RESPONSE:\", response)\n// // response = iceAI_word(test_request2, config)\n// // console.log(\"RESPONSE:\", response)",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:495-516"
    },
    "3539": {
        "file_id": 428,
        "content": "The code sets up a server and listens for requests. It also includes test code to send a request, retrieve the response, and log the content of the response.",
        "type": "comment"
    },
    "3540": {
        "file_id": 429,
        "content": "/tests/microsoft_xiaobing_conversation_bing/test_curl_bing_search_normal_conversation_chitchat.sh",
        "type": "filepath"
    },
    "3541": {
        "file_id": 429,
        "content": "The code uses cURL to make a POST request for English chat, sets headers and cookies, and tests Bing search functionality with Python-related queries.",
        "type": "summary"
    },
    "3542": {
        "file_id": 429,
        "content": "curl 'https://cn.bing.com/english/zochatv2?cc=cn&ensearch=0' \\\n  -H 'authority: cn.bing.com' \\\n  -H 'accept: */*' \\\n  -H 'accept-language: en-US,en;q=0.9' \\\n  -H 'content-type: text/plain;charset=UTF-8' \\\n  -H 'cookie: MUID=1B560BA4BCDC678502F21A48BDF2660B; MUIDB=1B560BA4BCDC678502F21A48BDF2660B; _EDGE_V=1; SRCHD=AF=NOFORM; SRCHUID=V=2&GUID=5F8EE8D909ED4343AF0A332575F18DCC&dmnchg=1; _UR=QS=0&TQS=0; _FP=hta=off; MMCASM=ID=EB1F15CA82AF4F2EACA836E498185727; _clck=pkzyck|1|f48|0; MicrosoftApplicationsTelemetryDeviceId=0fa0bc06-15c9-4c72-bba4-c2eb1d1d4998; MSFPC=GUID=02bec15aac9e4b00b0f093e37277467c&HASH=02be&LV=202207&V=4&LU=1658791106497; ZHCHATSTRONGATTRACT=TRUE; _ITAB=STAB=TR; imgv=flts=20220824&lodlg=2&gts=20220908; _tarLang=default=ja; _TTSS_OUT=hist=WyJlbiIsImphIl0=; _TTSS_IN=hist=WyJlcyIsInpoLUhhbnMiLCJlbiIsImF1dG8tZGV0ZWN0Il0=; ZHLASTACTIVECHAT=0; _EDGE_S=SID=1ECE53E4DFC262F3137041F9DEEC63B0; _SS=SID=1ECE53E4DFC262F3137041F9DEEC63B0&PC=U316; SRCHS=PC=U316; dsc=order=ShopOrderImagesOverS",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/test_curl_bing_search_normal_conversation_chitchat.sh:1-6"
    },
    "3543": {
        "file_id": 429,
        "content": "Making a POST request to retrieve English conversation chat using Curl with specified headers and cookies.",
        "type": "comment"
    },
    "3544": {
        "file_id": 429,
        "content": "hop; ENSEARCH=BENVER=0; SUID=M; SRCHUSR=DOB=20220725&T=1663127833000&TPC=1663086470000; ZHCHATWEAKATTRACT=TRUE; ipv6=hit=1663131446469&t=4; ABDEF=V=13&ABDV=11&MRNB=1663128202067&MRB=0; _HPVN=CS=eyJQbiI6eyJDbiI6NTIsIlN0IjoyLCJRcyI6MCwiUHJvZCI6IlAifSwiU2MiOnsiQ24iOjUyLCJTdCI6MCwiUXMiOjAsIlByb2QiOiJIIn0sIlF6Ijp7IkNuIjo1MiwiU3QiOjEsIlFzIjowLCJQcm9kIjoiVCJ9LCJBcCI6dHJ1ZSwiTXV0ZSI6dHJ1ZSwiTGFkIjoiMjAyMi0wOS0xNFQwMDowMDowMFoiLCJJb3RkIjowLCJHd2IiOjAsIkRmdCI6bnVsbCwiTXZzIjowLCJGbHQiOjAsIkltcCI6MjM0Mn0=; RECSEARCH=SQs=[{\"q\":\"teddy%20funny\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"python%20download%20with%20progress%20bar\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"python%20download%20tqdm\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"python%20multithread%20download\"%2C\"c\":1%2C\"ad\":true}%2C{\"q\":\"python%20tqdm\"%2C\"c\":1%2C\"ad\":true}%2C{\"q\":\"python%20megabyte%20human%20readable\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"python%20request%20get%20header%20without%20download\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"python%20request%20get%20response%20header%20wi",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/test_curl_bing_search_normal_conversation_chitchat.sh:6-6"
    },
    "3545": {
        "file_id": 429,
        "content": "This code snippet sets various environment variables and cookies for a web request. The request includes multiple search queries related to Python, such as \"teddy funny\", \"python download with progress bar\", \"python tqdm\", etc. It appears to be testing the Bing search functionality through a series of requests.",
        "type": "comment"
    },
    "3546": {
        "file_id": 429,
        "content": "thout%20download\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"aiohttp%20args%20allow%20redirect\"%2C\"c\":1%2C\"ad\":false}]; SNRHOP=I=&TS=; ZHSEARCHCHATSTATUS=STATUS=1; SRCHHPGUSR=SRCHLANG=en&BRW=NOTP&BRH=S&CW=602&CH=603&SW=1280&SH=800&DPR=2.200000047683716&UTC=480&DM=1&PV=12.5.0&BZA=0&HV=1663129340&WTS=63798724633&SCW=1164&SCH=2909&PRVCW=1163&PRVCH=603' \\\n  -H 'origin: https://cn.bing.com' \\\n  -H 'referer: https://cn.bing.com/search?q=aiohttp+args+allow+redirect&form=QBLH&sp=-1&pq=aiohttp+args+allow+redirec&sc=8-26&qs=n&sk=&cvid=44FA71281A5246FF9D0859E4146194FF&ghsh=0&ghacc=0&ghpl=' \\\n  -H 'sec-ch-ua: \"Google Chrome\";v=\"105\", \"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"105\"' \\\n  -H 'sec-ch-ua-arch: \"arm\"' \\\n  -H 'sec-ch-ua-bitness: \"64\"' \\\n  -H 'sec-ch-ua-full-version: \"105.0.5195.102\"' \\\n  -H 'sec-ch-ua-full-version-list: \"Google Chrome\";v=\"105.0.5195.102\", \"Not)A;Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"105.0.5195.102\"' \\\n  -H 'sec-ch-ua-mobile: ?0' \\\n  -H 'sec-ch-ua-model: ' \\\n  -H 'sec-ch-ua-platform: \"macOS\"' \\\n  -H 'sec-ch-ua-platform-version: \"12.5.0\"' \\",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/test_curl_bing_search_normal_conversation_chitchat.sh:6-17"
    },
    "3547": {
        "file_id": 429,
        "content": "This code seems to be making a CURL request with specific headers for Bing search functionality. It is sending a GET request to the Bing search API, specifying parameters like origin, referer, user agent, and other relevant details for the search query \"aiohttp args allow redirect\".",
        "type": "comment"
    },
    "3548": {
        "file_id": 429,
        "content": "  -H 'sec-fetch-dest: empty' \\\n  -H 'sec-fetch-mode: cors' \\\n  -H 'sec-fetch-site: same-origin' \\\n  -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36' \\\n  --data-raw '{\"zoTextResponse\":\"我在，是有什么事吗？\",\"zoIsGCSResponse\":\"true\",\"zoSearchQuery\":\"aiohttp args allow redirect\",\"zoTimestampUtc\":\"Wed, 14 Sep 2022 05:28:25 GMT\",\"zoIsStartOfSession\":\"false\",\"zoRequestId\":\"c18862bd321ea770ac1609f9b552d4bb\",\"conversationId\":\"712e7968-9607-4abc-9c51-847f15bc6620\",\"query\":{\"NormalizedQuery\":\"0xd701543d84662163ce6999\"},\"from\":\"chatbox\",\"traceId\":\"632156f9d8a842048d33001cbeb8df23\"}' \\\n  --compressed",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/test_curl_bing_search_normal_conversation_chitchat.sh:18-23"
    },
    "3549": {
        "file_id": 429,
        "content": "This code sets headers and data for a POST request using cURL, mimicking a Chrome browser on Mac OS X 10.15.7 with specific timestamps and search query. The data includes conversation details for a chatbot session.",
        "type": "comment"
    },
    "3550": {
        "file_id": 430,
        "content": "/tests/microsoft_xiaobing_conversation_bing/xiaobing_server_keepalive.sh",
        "type": "filepath"
    },
    "3551": {
        "file_id": 430,
        "content": "This script continuously runs the \"chat_with_session_id.js\" Node.js program in a loop, likely for testing or maintaining an active conversation state.",
        "type": "summary"
    },
    "3552": {
        "file_id": 430,
        "content": "cd /root/Desktop/works/pyjom/tests/microsoft_xiaobing_conversation_bing\nwhile true; do\n    node chat_with_session_id.js\ndone",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/xiaobing_server_keepalive.sh:1-5"
    },
    "3553": {
        "file_id": 430,
        "content": "This script continuously runs the \"chat_with_session_id.js\" Node.js program in a loop, likely for testing or maintaining an active conversation state.",
        "type": "comment"
    },
    "3554": {
        "file_id": 431,
        "content": "/tests/mitm_chatbot_framework/README.md",
        "type": "filepath"
    },
    "3555": {
        "file_id": 431,
        "content": "The code represents the MITM (Man-in-the-Middle) Chatbot, which goes beyond traditional chat applications. This indicates that it likely involves advanced functionality or interactions beyond typical text-based conversations.",
        "type": "summary"
    },
    "3556": {
        "file_id": 431,
        "content": "mitm chatbot, beyond chat",
        "type": "code",
        "location": "/tests/mitm_chatbot_framework/README.md:1-1"
    },
    "3557": {
        "file_id": 431,
        "content": "The code represents the MITM (Man-in-the-Middle) Chatbot, which goes beyond traditional chat applications. This indicates that it likely involves advanced functionality or interactions beyond typical text-based conversations.",
        "type": "comment"
    },
    "3558": {
        "file_id": 432,
        "content": "/tests/mmd_human_dance_pose/test_detection_yolo.py",
        "type": "filepath"
    },
    "3559": {
        "file_id": 432,
        "content": "Importing necessary libraries and setting proxy environments to ensure proper model loading. Loading the YOLOv5 model from a local directory, and performing inference on an image file. Saving and displaying results. Some confusion regarding the 'bird' detection category.",
        "type": "summary"
    },
    "3560": {
        "file_id": 432,
        "content": "import torch\nimport os\nos.environ[\"http_proxy\"] = \"\"\nos.environ[\"https_proxy\"] = \"\"\n# Model\nlocalModelDir = '/root/Desktop/works/pyjom/pyjom/models/yolov5/ultralytics_yolov5_master/'\n# import os\nos.environ[\"YOLOV5_MODEL_DIR\"] = '/root/Desktop/works/pyjom/pyjom/models/yolov5/' # this is strange. must be a hack in the localModelDir\nmodel = torch.hub.load(localModelDir, 'yolov5s',source=\"local\")  # or yolov5m, yolov5l, yolov5x, custom\n# Images\nimg = '/media/root/help/pyjom/samples/image/miku_on_green.png'  # or file, Path, PIL, OpenCV, numpy, list\n# Inference\nresults = model(img)\n# Results\n# results.print() # or .show(),\nresults.save()\n# print(type(results),dir(results))\n# breakpoint()\nimport cv2\nimage = cv2.imread(\"runs/detect/exp3/miku_on_green.jpg\")\ncv2.imshow(\"NONE\",image)\n# results.print()  # or .show(),\n# hold it.\n# image 1/1: 720x1280 1 bird # what the fuck is a bird?\n# os.system(\"pause\")\n# input()\n# this shit has been detected but not in the right category.",
        "type": "code",
        "location": "/tests/mmd_human_dance_pose/test_detection_yolo.py:1-32"
    },
    "3561": {
        "file_id": 432,
        "content": "Importing necessary libraries and setting proxy environments to ensure proper model loading. Loading the YOLOv5 model from a local directory, and performing inference on an image file. Saving and displaying results. Some confusion regarding the 'bird' detection category.",
        "type": "comment"
    },
    "3562": {
        "file_id": 433,
        "content": "/tests/modify_package.sh",
        "type": "filepath"
    },
    "3563": {
        "file_id": 433,
        "content": "This script searches for Python files (.py), then replaces specific module imports (\"from modules\", \"from main\", etc.) with their new corresponding pyjom paths using sed command.",
        "type": "summary"
    },
    "3564": {
        "file_id": 433,
        "content": "find | grep -E \".py\\$\" | xargs -iabc sed -i \"s/from modules/from pyjom.modules/g\" abc\nfind | grep -E \".py\\$\" | xargs -iabc sed -i \"s/from main/from pyjom.main/g\" abc \nfind | grep -E \".py\\$\" | xargs -iabc sed -i \"s/from commons/from pyjom.commons/g\" abc\nfind | grep -E \".py\\$\" | xargs -iabc sed -i \"s/from config/from pyjom.config/g\" abc\nfind | grep -E \".py\\$\" | xargs -iabc sed -i \"s/from medialang/from pyjom.medialang/g\" abc\nfind | grep -E \".py\\$\" | xargs -iabc sed -i \"s/from primitives/from pyjom.primitives/g\" abc",
        "type": "code",
        "location": "/pyjom/modify_package.sh:1-6"
    },
    "3565": {
        "file_id": 433,
        "content": "This script searches for Python files (.py), then replaces specific module imports (\"from modules\", \"from main\", etc.) with their new corresponding pyjom paths using sed command.",
        "type": "comment"
    },
    "3566": {
        "file_id": 434,
        "content": "/tests/motion_vector_estimation/mpegflow/init.sh",
        "type": "filepath"
    },
    "3567": {
        "file_id": 434,
        "content": "Downloading 'mpegflow' and 'vis' from the 1.0 release of vadimkantorov/mpegflow repository.",
        "type": "summary"
    },
    "3568": {
        "file_id": 434,
        "content": "curl -L -O https://github.com/vadimkantorov/mpegflow/releases/download/1.0/mpegflow\ncurl -L -O https://github.com/vadimkantorov/mpegflow/releases/download/1.0/vis",
        "type": "code",
        "location": "/tests/motion_vector_estimation/mpegflow/init.sh:1-2"
    },
    "3569": {
        "file_id": 434,
        "content": "Downloading 'mpegflow' and 'vis' from the 1.0 release of vadimkantorov/mpegflow repository.",
        "type": "comment"
    },
    "3570": {
        "file_id": 435,
        "content": "/tests/motion_vector_estimation/mpegflow/test.sh",
        "type": "filepath"
    },
    "3571": {
        "file_id": 435,
        "content": "The code sets the VIDEO variable to a specific video file path, runs the mpegflow command on that file and redirects output to output.txt, but the .so file is fake so it doesn't work well. The code also provides an alternative method using Docker or downloading a real .so file from the web, creating an examples/vis_dump directory, and piping the mpegflow command's output into ./vis with the video file path.",
        "type": "summary"
    },
    "3572": {
        "file_id": 435,
        "content": "VIDEO=\"/root/Desktop/works/pyjom/samples/video/cute_cat_gif.mp4\"\n# ./mpegflow $VIDEO > output.txt\n# it does not help because the .so file is fake. you need a real one.\n# you may download it from web, or just use docker\n# mkdir -p examples/vis_dump && ./mpegflow $VIDEO | ./vis $VIDEO examples/vis_dump\n# maybe this shit is not good at all...",
        "type": "code",
        "location": "/tests/motion_vector_estimation/mpegflow/test.sh:1-10"
    },
    "3573": {
        "file_id": 435,
        "content": "The code sets the VIDEO variable to a specific video file path, runs the mpegflow command on that file and redirects output to output.txt, but the .so file is fake so it doesn't work well. The code also provides an alternative method using Docker or downloading a real .so file from the web, creating an examples/vis_dump directory, and piping the mpegflow command's output into ./vis with the video file path.",
        "type": "comment"
    },
    "3574": {
        "file_id": 436,
        "content": "/tests/motion_vector_estimation/optical_flow_colored_blocks_convolution.py",
        "type": "filepath"
    },
    "3575": {
        "file_id": 436,
        "content": "The code initializes motion vector estimation, filters horizontal movement, improves accuracy using various techniques, processes motion vectors from coordinates, visualizes motion with OpenCV, creates bounding boxes, and handles further options. The code plots multiple sets of data onto a graph, iterating through lists using nested for loops, creating separate plots if desired, and then displays the graph.",
        "type": "summary"
    },
    "3576": {
        "file_id": 436,
        "content": "###################################################\n# aim to create optical flow here, with directions and convolution\n###################################################\n# it contains subpixel motion vectors. fucking hell\n# source = \"/root/Desktop/works/pyjom/samples/video/dog_with_text.mp4\"\n# change source?\n# gif containers does not have motion vectors.\n# source = \"/root/Desktop/works/pyjom/samples/video/cat_invalid_eye_rolling.gif\"\n# source = \"/root/Desktop/works/pyjom/samples/video/kitty_flash_15fps.gif\"\n# without mestimate\n# source = \"/root/Desktop/works/pyjom/samples/video/cat_invalid_eye_rolling_without_mestimate.mp4\"\n# source = \"/root/Desktop/works/pyjom/samples/video/kitty_flash_15fps_without_mestimate.mp4\"\n# with mestimate\n# source = \"/root/Desktop/works/pyjom/samples/video/cat_invalid_eye_rolling_with_mestimate.mp4\"\n# source = \"/root/Desktop/works/pyjom/samples/video/kitty_flash_15fps_with_mestimate.mp4\"\n# source = \"/root/Desktop/works/pyjom/samples/video/nearly_duplicate_frames_detection_30fps.mp4\"",
        "type": "code",
        "location": "/tests/motion_vector_estimation/optical_flow_colored_blocks_convolution.py:1-22"
    },
    "3577": {
        "file_id": 436,
        "content": "This code aims to create optical flow with motion vectors and convolution, using video files as input. The source file changes depending on the specific test case (with or without mestimate, different videos).",
        "type": "comment"
    },
    "3578": {
        "file_id": 436,
        "content": "source = \"/root/Desktop/works/pyjom/samples/video/cute_cat_gif.mp4\"\nfrom lazero.utils.importers import cv2_custom_build_init\n# from sniffio import current_async_library\ncv2_custom_build_init()\nfrom mvextractor.videocap import VideoCap\nfrom caer.video.frames_and_fps import count_frames, get_res\nimport cv2\nframesCount = count_frames(source)\nres = get_res(source)  # (width, height)\nprint(\"RES: %s\" % str(res))\nres_x, res_y = res\nframe_common_divisor = min(res_x, res_y)\nimport math\ndef cartesianDistance(d2vector):\n    try:\n        x, y = d2vector\n        return math.sqrt(x**2 + y**2)\n    except:\n        print('item unpackable.', d2vector)\n        return 0\ndef XYWHToDiagonal(x, y, w, h):\n    return (x, y), (x + w, y + h)\n# 如果整除16那么就在这个范围里面 如果不整除范围就要扩大 扩大到相应的16的倍数\ndef get16Value(res_x):\n    rem_x = res_x % 16\n    val = res_x // 16\n    if rem_x != 0:\n        val += 1\n    return val\nx_16val = get16Value(res_x)\ny_16val = get16Value(res_y)\nmotion_render_frame = (x_16val * 16, y_16val * 16)\ntotal_block_weights = x_16val * y_16val * 2 * 2",
        "type": "code",
        "location": "/tests/motion_vector_estimation/optical_flow_colored_blocks_convolution.py:24-70"
    },
    "3579": {
        "file_id": 436,
        "content": "This code initializes necessary libraries and imports, gets the resolution of a video source, calculates the frame count, and sets up variables for motion vector estimation. The functions cartesianDistance and XYWHToDiagonal are defined for spatial calculations, and get16Value is used to ensure the resolution is a multiple of 16 for the motion vector estimation process. The total number of block weights is calculated based on the video's resolution.",
        "type": "comment"
    },
    "3580": {
        "file_id": 436,
        "content": "cap = VideoCap()\ncap.open(source)  # wtf is going on here?\n# if there is nothing we will breakup\n# visualize, show_picture = True, True\nvisualize, show_picture = False, False\n# so there can only be one such macroblock\ndef checkMacroBlock(value):\n    for mod in [16, 8]:\n        modValue = value % mod\n        if modValue == mod / 2:\n            return mod\n    # if not satisfied, we are shit.\nfrom functools import lru_cache\n@lru_cache(maxsize=4)\ndef getModXModYFromBlockCenterCoordinates(blockCenterCoordinates):\n    block_x, block_y = blockCenterCoordinates\n    mod_x, mod_y = checkMacroBlock(block_x), checkMacroBlock(block_y)\n    if mod_x is not None and mod_y is not None:\n        return mod_x, mod_y\n    else:\n        print(\"block center coordinates\", blockCenterCoordinates)\n        print(\"WTF IS GOING ON WITH THE BLOCK CENTER\")\n        breakpoint()\n        return 0, 0\ndef getRectangleXYWHFromBlockCenterCoordinates(blockCenterCoordinates):\n    block_x, block_y = blockCenterCoordinates\n    mod_x, mod_y = getModXModYFromBlockCenterCoordinates(blockCenterCoordinates)",
        "type": "code",
        "location": "/tests/motion_vector_estimation/optical_flow_colored_blocks_convolution.py:72-106"
    },
    "3581": {
        "file_id": 436,
        "content": "The code initializes a VideoCap object and opens a specified source. It then defines two functions: `checkMacroBlock` to determine the macroblock size based on given values, and `getModXModYFromBlockCenterCoordinates` to get the modX and modY from block center coordinates using `checkMacroBlock`. The code also includes error handling in case of unexpected block center coordinates.",
        "type": "comment"
    },
    "3582": {
        "file_id": 436,
        "content": "    mod_x_half, mod_y_half = mod_x / 2, mod_y / 2\n    x, y, w, h = block_x - mod_x_half, block_y - mod_y_half, mod_x, mod_y\n    return tuple([int(elem) for elem in [x, y, w, h]])\ndef getBlockWeightFromBlockCenterCoordinates(blockCenterCoordinates):\n    mod_x, mod_y = getModXModYFromBlockCenterCoordinates(blockCenterCoordinates)\n    weights = mod_x * mod_y / 8 / 8\n    return weights\nimport progressbar\nimport numpy as np\n# max_dst_x, max_dst_y = 0,0\ndef averageMotionVectors(motion_vector_list):\n    if len(motion_vector_list) == 0:\n        average_tuple = (0, 0)\n    if len(motion_vector_list) > 1:\n        marray = np.array(motion_vector_list)\n        # print(\"MAKING AVERAGE:\")\n        # print(marray)\n        average = np.average(marray, axis=0)\n        # breakpoint()\n        average_tuple = tuple(average)\n    else:\n        average_tuple = tuple(motion_vector_list[0])\n    return average_tuple\nmotion_area_ratio_array = []\n# average_weighted_motion_vector_array = []\n# average_global_weighted_motion_vector_array = []\naverage_weighted_motion_vector_cartesian_array = []",
        "type": "code",
        "location": "/tests/motion_vector_estimation/optical_flow_colored_blocks_convolution.py:107-142"
    },
    "3583": {
        "file_id": 436,
        "content": "Function `getBlockWeightFromBlockCenterCoordinates` calculates the weight of a block based on its center coordinates.\nThe `averageMotionVectors` function calculates the average motion vector from a list of motion vectors.\n`motion_area_ratio_array` is used to store area ratios for blocks, which will be used in calculations later.",
        "type": "comment"
    },
    "3584": {
        "file_id": 436,
        "content": "average_global_weighted_motion_vector_cartesian_array = []\naverage_weighted_motion_vectors_filtered_cartesian_distance_array = []\naverage_global_weighted_motion_vectors_filtered_cartesian_distance_array = []\nfor _ in progressbar.progressbar(range(framesCount)):\n    success, frame, motion_vectors, frame_type, timestamp = cap.read()\n    height, width, channels = frame.shape\n    # breakpoint()\n    if success:\n        # what is the content of this motion vector?\n        # print(motion_vectors)\n        # import pandas as pd\n        # df = pd.DataFrame(motion_vectors)\n        # df = pd.DataFrame(motion_vectors,index=['source_index','unk0','unk1','src_x','src_y','dst_x','dst_y','motion_x','motion_y','motion_scale'])\n        # breakpoint()\n        # print()\n        # print(\"_____________________________\")\n        condition = motion_vectors[:, 0] < 0\n        # print(condition)\n        # print(condition.shape)\n        # breakpoint()\n        motion_vectors_simplified = motion_vectors[condition, :][:, [0, 5, 6, 7, 8, 9]]",
        "type": "code",
        "location": "/tests/motion_vector_estimation/optical_flow_colored_blocks_convolution.py:143-164"
    },
    "3585": {
        "file_id": 436,
        "content": "This code calculates the motion vectors from video frames and filters them based on a condition. The condition checks if the x-component of the motion vector is less than 0, which may indicate horizontal movement. The code then selects specific columns (x, y coordinates, and scale) from the motion vectors that meet this condition for further processing.",
        "type": "comment"
    },
    "3586": {
        "file_id": 436,
        "content": "        motion_vectors_scale = motion_vectors_simplified[:, [5]]\n        motion_vectors_scale_inversed = 1 / motion_vectors_scale\n        motion_vectors_with_scale = motion_vectors_simplified[:, [3, 4]]\n        motion_vectors_scale_inversed_stacked = np.hstack(\n            [motion_vectors_scale_inversed] * 2\n        )\n        motion_vectors_restored = (\n            motion_vectors_scale_inversed_stacked * motion_vectors_with_scale\n        )  # just element wise?\n        # print('STACKED:', motion_vectors_scale_inversed_stacked.shape)\n        # print(\"WITH SCALE:\", motion_vectors_with_scale.shape)\n        # print(\"RESTORED:\",motion_vectors_restored.shape)\n        # print(motion_vectors_simplified.shape)\n        # print(motion_vectors_scale.shape)\n        # breakpoint()\n        motion_vectors_dest_coords_restored = np.hstack(\n            [motion_vectors_simplified[:, [1, 2]], motion_vectors_restored]\n        )\n        # motion_vectors_simplified = motion_vectors[:,[0,5,6,7,8]]\n        # motion_vectors_simplified_unique = np.unique(motion_vectors_simplified, axis=0)",
        "type": "code",
        "location": "/tests/motion_vector_estimation/optical_flow_colored_blocks_convolution.py:165-184"
    },
    "3587": {
        "file_id": 436,
        "content": "This code segment is involved in optical flow calculation. It performs scaling, inverse scaling, and stacking of motion vectors to restore the original motion vector array. The code then concatenates the destination coordinates with restored motion vectors. This process helps in improving the accuracy of motion vector estimation.",
        "type": "comment"
    },
    "3588": {
        "file_id": 436,
        "content": "        # print(motion_vectors_simplified_unique.shape, motion_vectors.shape)\n        # breakpoint()\n        motion_vectors_dict = {}\n        for mv in motion_vectors_dest_coords_restored:\n            # drop duplicates first!\n            (\n                dst_x,  # corresponding macro block.\n                dst_y,  # for destination only\n                motion_x,\n                motion_y,\n                # motion_scale,  # don't know what the fuck is wrong with the motion scale\n            ) = mv.tolist()\n            # say we just want source_index <0, aka mv compared to previous frame\n            # try:\n            #     assert motion_x / motion_scale == src_x - dst_x\n            #     assert motion_y / motion_scale == src_y - dst_y\n            # except:\n            #     print(src_x, dst_x, motion_x, motion_scale)\n            #     print(src_y, dst_y, motion_y, motion_scale)\n            #     print(\"*\" * 20)\n            # it will be inaccurate if we abandon this subpixel precision.\n            # if source_index >= 0:",
        "type": "code",
        "location": "/tests/motion_vector_estimation/optical_flow_colored_blocks_convolution.py:185-206"
    },
    "3589": {
        "file_id": 436,
        "content": "This code segment is extracting and processing motion vectors from a set of coordinates. It is checking for duplicates, performing calculations with source and destination coordinates, and possibly handling inaccuracies caused by subpixel precision. The code seems to be part of a larger process, as it includes debugging statements and references to variables that are not explicitly defined within the provided segment.",
        "type": "comment"
    },
    "3590": {
        "file_id": 436,
        "content": "            #     continue\n            # if dst_x>max_dst_x:\n            #     max_dst_x = dst_x\n            # if dst_y>max_dst_y:\n            #     max_dst_y = dst_y\n            destCoord = (dst_x, dst_y)\n            motion_vector = (motion_x, motion_y)\n            # print(destCoord)\n            # breakpoint()\n            if motion_vector == (0, 0):\n                # print(\"zero motion vector detected. skipping\")\n                # breakpoint()\n                continue\n            # print('destination coords:',destCoord)\n            # print('motion vector:',motion_vector)\n            motion_vectors_dict.update(\n                {destCoord: motion_vectors_dict.get(destCoord, []) + [motion_vector]}\n            )\n            # you know, different frame sources may lead to different results.\n            # these vectors could overlap. which one you want to keep? the smaller ones or the bigger ones?\n            # if destCoord in destCoords:\n            #     print(\"SKIPPING DUPLICATE DESTCOORD:\", destCoord)\n            #     print(\"PREVIOUS MV\",prevMV)",
        "type": "code",
        "location": "/tests/motion_vector_estimation/optical_flow_colored_blocks_convolution.py:207-230"
    },
    "3591": {
        "file_id": 436,
        "content": "This code iterates over motion vectors and updates a dictionary with the destination coordinates and corresponding motion vectors. It skips zero vectors and handles duplicate destinations, but doesn't specify which motion vector to keep in case of overlapping coordinates.",
        "type": "comment"
    },
    "3592": {
        "file_id": 436,
        "content": "            #     print(\"CURRENT MV\", mv)\n            #     continue\n            # else:\n            #     destCoords.add(destCoord)\n            # prevMV = mv\n            # try:\n            #     # src_x, src_y may not apply the same rule.\n            #     # assert src_x % 16 == 8\n            #     # assert src_y % 16 == 8\n            #     assert checkMacroBlock(dst_x) is not None\n            #     assert checkMacroBlock(dst_y) is not None\n            #     # assert dst_x<=res_x # dst_x can go beyond the res_x\n            #     # assert dst_y<=res_y\n            #     # so all rules applied.\n            # except:\n            #     # print('source',src_x, src_y)\n            #     print(\"res\", res_x, res_y)\n            #     print('destionation',dst_x, dst_y)\n            #     print('motion',motion_x, motion_y)\n            #     print(\"scale\",motion_scale)\n        motion_vectors_dict_averaged = {\n            key: averageMotionVectors(motion_vectors_dict[key])\n            for key in motion_vectors_dict.keys()\n        }",
        "type": "code",
        "location": "/tests/motion_vector_estimation/optical_flow_colored_blocks_convolution.py:231-254"
    },
    "3593": {
        "file_id": 436,
        "content": "This code is filtering and averaging motion vectors for macroblocks within a certain range. It checks if the source coordinates follow a specific rule, asserts that valid macroblock check functions are not None, and ensures the destination coordinates do not exceed the resolution limits. If any of these conditions fail, it prints debug information and continues execution. Finally, it calculates the averaged motion vectors for each macroblock in the dictionary.",
        "type": "comment"
    },
    "3594": {
        "file_id": 436,
        "content": "        # assuming no duplicates?\n        weighted_motion_vectors = []\n        weights = []\n        rectangles = []\n        motion_vectors_filtered = []  # for getting data later?\n        for (\n            blockCenterCoordinates,\n            average_motion_vector,\n        ) in motion_vectors_dict_averaged.items():\n            if average_motion_vector == (0, 0):\n                continue\n                # wtf is this? why fucking zero?\n                # print('skipping zero average motion vector')\n                # print(\"destination coords\", key)\n                # print('average motion vector', average_motion_vector)\n            else:\n                m_x, m_y = average_motion_vector\n                motion_vectors_filtered.append(average_motion_vector)\n                rectangle_XYWH = getRectangleXYWHFromBlockCenterCoordinates(\n                    blockCenterCoordinates\n                )\n                rectangles.append(rectangle_XYWH)\n                blockWeight = getBlockWeightFromBlockCenterCoordinates(\n                    blockCenterCoordinates",
        "type": "code",
        "location": "/tests/motion_vector_estimation/optical_flow_colored_blocks_convolution.py:255-278"
    },
    "3595": {
        "file_id": 436,
        "content": "This code filters out motion vectors with an average of (0, 0) and stores the remaining vectors in a list. It also extracts relevant information from the blockCenterCoordinates and calculates the weight for each block. Rectangles are created using the getRectangleXYWHFromBlockCenterCoordinates function, and weights are obtained through getBlockWeightFromBlockCenterCoordinates. The motion_vectors_filtered list keeps track of filtered motion vectors for later use.",
        "type": "comment"
    },
    "3596": {
        "file_id": 436,
        "content": "                )\n                weights.append(blockWeight)\n                weighted_motion_vectors.append(\n                    (\n                        m_x * blockWeight / frame_common_divisor,\n                        m_y * blockWeight / frame_common_divisor,\n                    )\n                )\n        weighted_motion_vectors = np.array(weighted_motion_vectors)\n        sum_weighted_motion_vector = np.sum(weighted_motion_vectors, axis=0)\n        average_global_weighted_motion_vector = (\n            sum_weighted_motion_vector / total_block_weights\n        )\n        sum_weights = sum(weights)\n        average_weighted_motion_vector = sum_weighted_motion_vector / sum_weights\n        motion_area_ratio = sum_weights / total_block_weights\n        # print(motion_vectors.shape)\n        motion_vectors_filtered_cartesian_distance = [\n            cartesianDistance(vector) for vector in motion_vectors_filtered\n        ] + [\n            0\n        ]  # to avoid errors.\n        motion_vectors_filtered_cartesian_distance = np.array(",
        "type": "code",
        "location": "/tests/motion_vector_estimation/optical_flow_colored_blocks_convolution.py:279-301"
    },
    "3597": {
        "file_id": 436,
        "content": "This code calculates the average global weighted motion vector and average weighted motion vector, as well as the motion area ratio. It also filters and stores cartesian distances for each motion vector.",
        "type": "comment"
    },
    "3598": {
        "file_id": 436,
        "content": "            motion_vectors_filtered_cartesian_distance\n        )\n        cartesianWeights = weights + [0]\n        cartesianWeights = np.array(cartesianWeights)\n        cartesianWeightsSum = np.sum(cartesianWeights)\n        weighted_motion_vectors_filtered_cartesian_distance = (\n            motion_vectors_filtered_cartesian_distance * cartesianWeights\n        )\n        sum_weighted_motion_vectors_filtered_cartesian_distance = np.sum(\n            weighted_motion_vectors_filtered_cartesian_distance\n        )\n        # print(\"SUM\", sum_weighted_motion_vectors_filtered_cartesian_distance)\n        # breakpoint()\n        average_weighted_motion_vectors_filtered_cartesian_distance = (\n            sum_weighted_motion_vectors_filtered_cartesian_distance / cartesianWeightsSum\n        )\n        average_global_weighted_motion_vectors_filtered_cartesian_distance = (\n            sum_weighted_motion_vectors_filtered_cartesian_distance\n            / total_block_weights # this is a number, not array!\n        )\n        min_cartesian = min(motion_vectors_filtered_cartesian_distance)",
        "type": "code",
        "location": "/tests/motion_vector_estimation/optical_flow_colored_blocks_convolution.py:302-328"
    },
    "3599": {
        "file_id": 436,
        "content": "This code calculates weighted average motion vectors by multiplying the distance of each vector with its corresponding weight, summing them, and dividing by the total weight. The minimum cartesian distance is also found.",
        "type": "comment"
    }
}