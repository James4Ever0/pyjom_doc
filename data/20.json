{
    "2000": {
        "file_id": 196,
        "content": "    # to find best shit you need grouping.\n    a, b = slice_vocal[0]\n    length = b - a\n    d2_data.append([length, slice_vocal[1]])\n    d1_data.append([slice_vocal[1]])\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=2)\nkm = kmeans.fit(d1_data)\nlabels = km.labels_\nlabel_indexs = {i: labels[i] for i in range(len(labels))}\n# print(label_index)\nnew_labels = []\nmergeTimeGap = 0.5\nlb_new = 0\nlast_elem = None\nfor index, data in enumerate(timed_vocal_slices):\n    # data = timed_vocal_slices\n    [start, end], std = data\n    label = label_indexs[index]\n    if last_elem == None:\n        last_elem = [[start, end], label]\n    else:\n        [[last_start, last_end], last_label] = last_elem\n        if start - last_end < mergeTimeGap and last_label == label:\n            pass\n            # last_elem = [[start,end],label]\n        else:\n            lb_new += 1\n        last_elem = [[start, end], label]\n    new_labels.append(lb_new)\n    print(\"DATA:\", data, \"LABEL:\", label, \"NEW_LABEL:\", lb_new)",
        "type": "code",
        "location": "/tests/audio_volume_meter/test_volume_meter.py:124-157"
    },
    "2001": {
        "file_id": 196,
        "content": "This code is grouping vocal segments based on their start and end timestamps. It uses KMeans clustering from sklearn to assign labels to each segment, then merges adjacent segments with the same label if they are less than a certain time gap apart. The new_labels list stores the updated labels for each segment.",
        "type": "comment"
    },
    "2002": {
        "file_id": 197,
        "content": "/tests/basic_pitch_multi_midi_conversion/test.sh",
        "type": "filepath"
    },
    "2003": {
        "file_id": 197,
        "content": "Creates a new folder called \"output_path\", then uses the 'basic-pitch' command to convert MIDI files from \"/media/root/help/pyjom/tests/bilibili_practices/bilibili_tarot/some_bgm.mp3\" into audio format, saving them in the newly created folder.",
        "type": "summary"
    },
    "2004": {
        "file_id": 197,
        "content": "mkdir output_path\nbasic-pitch --sonify-midi output_path /media/root/help/pyjom/tests/bilibili_practices/bilibili_tarot/some_bgm.mp3",
        "type": "code",
        "location": "/tests/basic_pitch_multi_midi_conversion/test.sh:1-2"
    },
    "2005": {
        "file_id": 197,
        "content": "Creates a new folder called \"output_path\", then uses the 'basic-pitch' command to convert MIDI files from \"/media/root/help/pyjom/tests/bilibili_practices/bilibili_tarot/some_bgm.mp3\" into audio format, saving them in the newly created folder.",
        "type": "comment"
    },
    "2006": {
        "file_id": 198,
        "content": "/tests/bezier_paddlehub_dogcat_detector_serving/client.py",
        "type": "filepath"
    },
    "2007": {
        "file_id": 198,
        "content": "The code reads an image file from a specific location, changes the working directory for importing necessary libraries, initializes a client and server object for detecting dog/cat images using PaddleHub's ResNet50 model, reads the test image using OpenCV, performs detection on the image with the client object, and finally prints the result.",
        "type": "summary"
    },
    "2008": {
        "file_id": 198,
        "content": "test_image = \"/root/Desktop/works/pyjom/samples/image/dog_with_text.jpg\"\nfrom server import changeDirForImport\nchangeDirForImport()\nfrom pyjom.imagetoolbox import bezierPaddleHubResnet50ImageDogCatDetectorClient,bezierPaddleHubResnet50ImageDogCatDetectorServerChecker\nimport cv2\ntest_image = cv2.imread(test_image)\nbezierPaddleHubResnet50ImageDogCatDetectorServerChecker()\nresult = bezierPaddleHubResnet50ImageDogCatDetectorClient(test_image)\nprint(\"RESULT?\",result)",
        "type": "code",
        "location": "/tests/bezier_paddlehub_dogcat_detector_serving/client.py:1-10"
    },
    "2009": {
        "file_id": 198,
        "content": "The code reads an image file from a specific location, changes the working directory for importing necessary libraries, initializes a client and server object for detecting dog/cat images using PaddleHub's ResNet50 model, reads the test image using OpenCV, performs detection on the image with the client object, and finally prints the result.",
        "type": "comment"
    },
    "2010": {
        "file_id": 199,
        "content": "/tests/bezier_paddlehub_dogcat_detector_serving/server.py",
        "type": "filepath"
    },
    "2011": {
        "file_id": 199,
        "content": "This code changes the directory, appends current path to sys.path, and imports specific configurations and classes for a Bezier PaddleHub ResNet50 Image DogCatDetectorServer in pyjom project.",
        "type": "summary"
    },
    "2012": {
        "file_id": 199,
        "content": "import sys\nimport os\ndef changeDirForImport():\n    os.chdir(\"/root/Desktop/works/pyjom\")\n    sys.path.append(\".\")\nif __name__ == '__main__':\n    changeDirForImport()\n    from pyjom.config.shared import pyjom_config\n    pyjom_config['BEZIER_PADDLE_RESNET50_IMAGE_DOG_CAT_DETECTOR_SERVER_INSTANCE']=True\n    from pyjom.imagetoolbox import bezierPaddleHubResnet50ImageDogCatDetectorServer\n    bezierPaddleHubResnet50ImageDogCatDetectorServer()",
        "type": "code",
        "location": "/tests/bezier_paddlehub_dogcat_detector_serving/server.py:1-13"
    },
    "2013": {
        "file_id": 199,
        "content": "This code changes the directory, appends current path to sys.path, and imports specific configurations and classes for a Bezier PaddleHub ResNet50 Image DogCatDetectorServer in pyjom project.",
        "type": "comment"
    },
    "2014": {
        "file_id": 200,
        "content": "/tests/bilibili_login_get_credential_view_data/dump_favourite_list.py",
        "type": "filepath"
    },
    "2015": {
        "file_id": 200,
        "content": "This code loads Bilibili API credentials, fetches user information and favorite lists, processes media data, utilizes TinyDB, and interacts with bilibili_api module. It iterates through elements, extracts bvid, title, updates desc as intro, searches for existing records, and upserts data if not present or loop breaks due to no more elements.",
        "type": "summary"
    },
    "2016": {
        "file_id": 200,
        "content": "from bilibili_api import favorite_list\n# that favourite list is public. i just want that.\n# dedeuserid = \"397424026\"\n# how to?\nfrom bilibili_api.user import get_self_info\nfrom bilibili_api import sync, Credential\n# how to load credential from our stored things?\n# from bilibili_api import user\nfrom lazero.search.api import getHomeDirectory\nimport os\nimport tinydb\nhome = getHomeDirectory()\ndbPath = os.path.join(home, \".bilibili_api.json\")\nimport tinydb\ndb = tinydb.TinyDB(dbPath)\ndbFavList = tinydb.TinyDB(\"bilibiliFavouriteList.json\")\nUser = tinydb.Query()\ndedeuserid = \"397424026\"  # pass it before you do shit!\ndataList = db.search(User.dedeuserid == dedeuserid)  # this will never change i suppose?\nif len(dataList) == 1:\n    data = dataList[0].copy()\n    print(\"try to login credential fetched from db:\", data)\n    oldName = data.pop(\"name\")\n    credential = Credential(**data)\n    from bilibili_api import sync\n    name = sync(get_self_info(credential))[\"name\"]\n    if oldName != name:\n        data[\"name\"] = name\n        db.upsert(data, User.dedeuserid == dedeuserid)",
        "type": "code",
        "location": "/tests/bilibili_login_get_credential_view_data/dump_favourite_list.py:1-34"
    },
    "2017": {
        "file_id": 200,
        "content": "This code aims to load the Bilibili API credentials from stored data and retrieve the user's information using a provided dedeuserid. It utilizes TinyDB for database operations, fetches the home directory, and interacts with the bilibili_api module. If a credential is found in the database, it will update the \"name\" field if necessary and print the retrieved credential information.",
        "type": "comment"
    },
    "2018": {
        "file_id": 200,
        "content": "    print(\"login successful:\", name)\n    # now you have it.\n    result = sync(\n        favorite_list.get_video_favorite_list(int(dedeuserid), None, credential)\n    )\n    print(result)  # None? wtf?\n    favLists = result[\"list\"]\n    for favList in favLists:\n        listId = favList[\"id\"]  # integer.\n        listName = favList[\"title\"]\n        print(\"processing favList:\", listName)\n        page = 0\n        while True:\n            import time\n            time.sleep(3)\n            page += 1\n            print(\"processing page:\", page)\n            result = sync(\n                favorite_list.get_video_favorite_list_content(\n                    listId, page=page, credential=credential\n                )\n            )\n            # import pprint\n            # pprint.pprint(result)\n            has_more = result[\"has_more\"]\n            # print(\"__________result__________\")\n            medias = result[\"medias\"]\n            if type(medias) != list or len(medias) == 0:\n                break\n            breakFlag = False\n            for elem in medias:",
        "type": "code",
        "location": "/tests/bilibili_login_get_credential_view_data/dump_favourite_list.py:35-66"
    },
    "2019": {
        "file_id": 200,
        "content": "Code is fetching user's favorite lists from Bilibili and processing each list's contents page by page. It checks for more content using \"has_more\" flag, fetches media data from the server, and breaks the loop when no more content is available or if the media data type is incorrect.",
        "type": "comment"
    },
    "2020": {
        "file_id": 200,
        "content": "                # print('ELEM:',elem)\n                # breakpoint()\n                # it has description.\n                videoData = {key: elem[key] for key in [\"bvid\", \"title\"]}\n                # here we call 'desc' as 'intro.\n                videoData.update({\"desc\": elem[\"intro\"]})\n                searchResult= dbFavList.search(User.bvid == videoData[\"bvid\"])\n                if len(searchResult) != 0:\n                    breakFlag=True\n                dbFavList.upsert(videoData, User.bvid == videoData[\"bvid\"])\n            if not has_more or breakFlag:\n                break",
        "type": "code",
        "location": "/tests/bilibili_login_get_credential_view_data/dump_favourite_list.py:67-78"
    },
    "2021": {
        "file_id": 200,
        "content": "This code iterates through elements, extracts bvid and title, updates with intro as desc, searches for existing records, upserts data if not already present or if the loop breaks due to no more elements.",
        "type": "comment"
    },
    "2022": {
        "file_id": 201,
        "content": "/tests/bilibili_login_get_credential_view_data/dump_view_history.py",
        "type": "filepath"
    },
    "2023": {
        "file_id": 201,
        "content": "The code fetches credentials from a local database, updates the user's name if necessary, and processes bilibili video history pages in increments of 100 per page, checking for duplicates and stopping upon completion or no more duplicates found.",
        "type": "summary"
    },
    "2024": {
        "file_id": 201,
        "content": "# how to?\nfrom bilibili_api.user import get_self_info\nfrom bilibili_api import Credential\n# how to load credential from our stored things?\nfrom bilibili_api import user\nfrom lazero.search.api import getHomeDirectory\nimport os\nimport tinydb\nhome = getHomeDirectory()\ndbPath = os.path.join(home, \".bilibili_api.json\")\nimport tinydb\ndb = tinydb.TinyDB(dbPath)\nUser = tinydb.Query()\ndedeuserid = \"397424026\"  # pass it before you do shit!\ndataList = db.search(User.dedeuserid == dedeuserid)  # this will never change i suppose?\nif len(dataList) == 1:\n    data = dataList[0].copy()\n    print(\"try to login credential fetched from db:\", data)\n    oldName = data.pop(\"name\")\n    credential = Credential(**data)\n    from bilibili_api import sync\n    name = sync(get_self_info(credential))[\"name\"]\n    if oldName != name:\n        data[\"name\"] = name\n        db.upsert(data, User.dedeuserid == dedeuserid)\n    print(\"login successful:\", name)\n    # now continue.\n    # how many pages you want? infinite?\n    import time\n    page_num = 0\n    dbHistory = tinydb.TinyDB(\"bilibiliHistory.json\")",
        "type": "code",
        "location": "/tests/bilibili_login_get_credential_view_data/dump_view_history.py:1-36"
    },
    "2025": {
        "file_id": 201,
        "content": "Code fetches credential from local database for a specific bilibili user, checks if the name is up-to-date, and updates it if necessary. Then, it continues with further processing while also keeping track of bilibili history in another database file.",
        "type": "comment"
    },
    "2026": {
        "file_id": 201,
        "content": "    while True:\n        time.sleep(3)\n        page_num += 1  # starts with 1\n        print(\"now processing page:\", page_num)\n        result = sync(\n            user.get_self_history(\n                page_num=page_num, per_page_item=100, credential=credential\n            )\n        )\n        # import pprint\n        # pprint.pprint(result)\n        if type(result) != list or len(result) == 0:\n            break\n        breakFlag=False\n        for elem in result:\n            # it has description.\n            videoData = {key: elem[key] for key in [\"bvid\", \"desc\", \"title\"]}\n            searchResult= dbHistory.search(User.bvid == videoData[\"bvid\"])\n            if len(searchResult) != 0:\n                breakFlag=True\n            dbHistory.upsert(videoData, User.bvid == videoData[\"bvid\"])\n        if breakFlag:\n            break",
        "type": "code",
        "location": "/tests/bilibili_login_get_credential_view_data/dump_view_history.py:37-59"
    },
    "2027": {
        "file_id": 201,
        "content": "This code is processing video history pages from a user's account. It fetches data in increments of 100 per page, checks for duplicates before storing the video details, and stops when there are no more pages or duplicate entries found.",
        "type": "comment"
    },
    "2028": {
        "file_id": 202,
        "content": "/tests/bilibili_login_get_credential_view_data/test.py",
        "type": "filepath"
    },
    "2029": {
        "file_id": 202,
        "content": "This code allows users to choose between password and SMS login methods, with additional functionality for database storage and geetest validation. It performs a login, retrieves user data, updates the database, and asks about atomic insert in tinydb.",
        "type": "summary"
    },
    "2030": {
        "file_id": 202,
        "content": "from bilibili_api.login import (\n    login_with_password,\n    login_with_sms,\n    send_sms,\n    PhoneNumber,\n    Check,\n)\nfrom bilibili_api.user import get_self_info\nfrom bilibili_api import settings\nfrom bilibili_api import sync, Credential\n# mode = int(input(\"\"\"请选择登录方式：\n# 1. 密码登录\n# 2. 验证码登录\n# 请输入 1/2\n# \"\"\"))\nmode = 2\ncredential = None\n# 关闭自动打开 geetest 验证窗口\nsettings.geetest_auto_open = False\nif mode == 1:\n    # 密码登录\n    username = input(\"请输入手机号/邮箱：\")\n    password = input(\"请输入密码：\")\n    print(\"正在登录。\")\n    c = login_with_password(username, password)\n    if isinstance(c, Check):\n        # 还需验证\n        phone = input(\"需要验证。请输入手机号：\")\n        c.set_phone(PhoneNumber(phone, country=\"+86\"))  # 默认设置地区为中国大陆\n        c.send_code()\n        print(\"已发送验证码。\")\n        code = input(\"请输入验证码：\")\n        credential = c.login(code)\n        print(\"登录成功！\")\n    else:\n        credential = c\nelif mode == 2:\n    # 验证码登录\n    phone = input(\"请输入手机号：\")\n    print(\"正在登录。\")\n    send_sms(PhoneNumber(phone, country=\"+86\"))  # 默认设置地区为中国大陆\n    code = input(\"请输入验证码：\")",
        "type": "code",
        "location": "/tests/bilibili_login_get_credential_view_data/test.py:1-46"
    },
    "2031": {
        "file_id": 202,
        "content": "This code allows the user to choose between two login methods: password or SMS verification. If the user chooses password login, they input their credentials and are logged in immediately if valid. If the user chooses SMS login, they first need to enter their phone number and receive an SMS code. After entering the code, they're logged in. The code also has a setting to disable automatic opening of geetest validation window.",
        "type": "comment"
    },
    "2032": {
        "file_id": 202,
        "content": "    c = login_with_sms(PhoneNumber(phone, country=\"+86\"), code)\n    credential = c\n    print(\"登录成功\")\nelse:\n    print(\"请输入 1/2 ！\")\n    exit()\nfrom lazero.search.api import getHomeDirectory\nimport os\nhome = getHomeDirectory()\ndbPath = os.path.join(home, \".bilibili_api.json\")\nimport tinydb\ndb = tinydb.TinyDB(dbPath)\nif credential != None:\n    name = sync(get_self_info(credential))[\"name\"]\n    print(f\"欢迎，{name}!\")\n    buvid3 = credential.buvid3\n    bili_jct = credential.bili_jct\n    sessdata = credential.sessdata\n    dedeuserid = credential.dedeuserid  # this is userid, better use this instead?\n    User = tinydb.Query()\n    # assume that we are here to fetch valid credentials.\n    db.upsert(\n        {\n            \"name\": name,\n            \"dedeuserid\": dedeuserid,\n            \"bili_jct\": bili_jct,\n            \"buvid3\": buvid3,\n            \"sessdata\": sessdata,\n        },\n        User.dedeuserid == dedeuserid,\n    )\n    # how to perform atomic insert in tinydb?\n    # breakpoint()",
        "type": "code",
        "location": "/tests/bilibili_login_get_credential_view_data/test.py:47-82"
    },
    "2033": {
        "file_id": 202,
        "content": "This code performs a login with SMS and stores the credentials in a database. It first checks if the login was successful, then retrieves the name, buvid3, bili_jct, sessdata, and dedeuserid from the credentials. The code updates the database with this information using an upsert operation, ensuring that the dedeuserid is unique. Finally, it asks how to perform atomic insert in tinydb.",
        "type": "comment"
    },
    "2034": {
        "file_id": 203,
        "content": "/tests/bilibili_login_get_credential_view_data/test_login_fail.py",
        "type": "filepath"
    },
    "2035": {
        "file_id": 203,
        "content": "This code retrieves user credentials, logs in using session data, and updates the name if it changed; attempts logging in with expired data to check for failure.",
        "type": "summary"
    },
    "2036": {
        "file_id": 203,
        "content": "from bilibili_api.user import get_self_info\nfrom bilibili_api import Credential\n# how to load credential from our stored things?\nfrom lazero.search.api import getHomeDirectory\nimport os\nimport tinydb\nhome = getHomeDirectory()\ndbPath = os.path.join(home, \".bilibili_api.json\")\nimport tinydb\ndb = tinydb.TinyDB(dbPath)\nUser = tinydb.Query()\ndedeuserid = \"397424026\" # pass it before you do shit!\ndataList = db.search(User.dedeuserid == dedeuserid) # this will never change i suppose?\nif len(dataList) == 1:\n    data = dataList[0].copy()\n    print('try to login credential fetched from db:', data)\n    oldName = data.pop('name')\n    credential = Credential(**{'dedeuserid': dedeuserid,'sessdata':'fakeSessionData'})\n    from bilibili_api import sync\n    name = sync(get_self_info(credential))['name']\n    # 'GetCookieReq.Session' Error:Field validation for 'Session' failed on the 'gte' tag。\n    # don't know how. maybe this works?\n    # if oldName !=name:\n    #     data['name']=name\n    #     db.upsert(data, User.dedeuserid == dedeuserid)",
        "type": "code",
        "location": "/tests/bilibili_login_get_credential_view_data/test_login_fail.py:1-27"
    },
    "2037": {
        "file_id": 203,
        "content": "This code retrieves a user's credential from the database, attempts to log in using the provided session data, and updates the name if it changed. If the name has not changed after logging in, it does not update the database.",
        "type": "comment"
    },
    "2038": {
        "file_id": 203,
        "content": "    # will never succeed.\n    # don't know using some expired sessdata will get what?\n    # maybe will still fail?\n    print('login successful:', name)",
        "type": "code",
        "location": "/tests/bilibili_login_get_credential_view_data/test_login_fail.py:28-31"
    },
    "2039": {
        "file_id": 203,
        "content": "This code block attempts to log in using expired session data, expecting the login to fail. It prints a message indicating whether the login was successful or not.",
        "type": "comment"
    },
    "2040": {
        "file_id": 204,
        "content": "/tests/bilibili_login_get_credential_view_data/test_login_successful.py",
        "type": "filepath"
    },
    "2041": {
        "file_id": 204,
        "content": "The code retrieves user credentials from a local database and uses them to log in to Bilibili API. It checks if the user exists, updates the name if necessary, and prints the login status.",
        "type": "summary"
    },
    "2042": {
        "file_id": 204,
        "content": "from bilibili_api.user import get_self_info\nfrom bilibili_api import Credential\n# how to load credential from our stored things?\nfrom lazero.search.api import getHomeDirectory\nimport os\nimport tinydb\nhome = getHomeDirectory()\ndbPath = os.path.join(home, \".bilibili_api.json\")\nimport tinydb\ndb = tinydb.TinyDB(dbPath)\nUser = tinydb.Query()\ndedeuserid = \"397424026\"  # pass it before you do shit!\ndataList = db.search(User.dedeuserid == dedeuserid)  # this will never change i suppose?\nif len(dataList) == 1:\n    data = dataList[0].copy()\n    print(\"try to login credential fetched from db:\", data)\n    oldName = data.pop(\"name\")\n    credential = Credential(**data)\n    from bilibili_api import sync\n    name = sync(get_self_info(credential))[\"name\"]\n    if oldName != name:\n        data[\"name\"] = name\n        db.upsert(data, User.dedeuserid == dedeuserid)\n    print(\"login successful:\", name)",
        "type": "code",
        "location": "/tests/bilibili_login_get_credential_view_data/test_login_successful.py:1-29"
    },
    "2043": {
        "file_id": 204,
        "content": "The code retrieves user credentials from a local database and uses them to log in to Bilibili API. It checks if the user exists, updates the name if necessary, and prints the login status.",
        "type": "comment"
    },
    "2044": {
        "file_id": 205,
        "content": "/tests/bilibili_login_get_credential_view_data/tinydb_test.py",
        "type": "filepath"
    },
    "2045": {
        "file_id": 205,
        "content": "This code imports the tinydb library and sets a database location. It creates a TinyDB object at that location, which serves as a lightweight NoSQL document database. The code defines a User query using the tinydb.Query() function and performs an upsert operation on the database, where it either updates or inserts a document based on the provided condition (User.ghi == 123). Note that there is also a commented-out section for updating the database without an insertion operation.",
        "type": "summary"
    },
    "2046": {
        "file_id": 205,
        "content": "import tinydb\ndbLocation = \"test_credential.json\"\ndb = tinydb.TinyDB(dbLocation)\n# table = db.table('mytable')\nUser = tinydb.Query()\ndb.upsert({\"abc\": \"def\", \"ghi\": 123}, User.ghi == 123)  # please specify a condition!\n# db.update({'abc': 'def', 'ghi': 123}) # no insert here!",
        "type": "code",
        "location": "/tests/bilibili_login_get_credential_view_data/tinydb_test.py:1-8"
    },
    "2047": {
        "file_id": 205,
        "content": "This code imports the tinydb library and sets a database location. It creates a TinyDB object at that location, which serves as a lightweight NoSQL document database. The code defines a User query using the tinydb.Query() function and performs an upsert operation on the database, where it either updates or inserts a document based on the provided condition (User.ghi == 123). Note that there is also a commented-out section for updating the database without an insertion operation.",
        "type": "comment"
    },
    "2048": {
        "file_id": 206,
        "content": "/tests/bilibili_practices/bilibili_dollar/fetch_related_content.py",
        "type": "filepath"
    },
    "2049": {
        "file_id": 206,
        "content": "The code imports the \"VideosSearch\" class from the \"youtube-search-python\" package and uses it to search for videos related to drawing realistic US Dollars. It fetches the first 10 results, then prints each video's title, ID, author name, channel ID, and view count.",
        "type": "summary"
    },
    "2050": {
        "file_id": 206,
        "content": "#!pip3 install youtube-search-python\nfrom youtubesearchpython import VideosSearch\n# videosSearch = VideosSearch('画人民币', limit = 10)\nvideosSearch = VideosSearch('Draw realistic US Dollar', limit = 10)\n# videosSearch = VideosSearch('NoCopyrightSounds', limit = 2)\n# print(videosSearch.result())\ndata = videosSearch.result()\nfor elem in data[\"result\"]:\n    title = elem[\"title\"]\n    videoId = elem[\"id\"]\n    contentType = elem[\"type\"]\n    authorName = elem[\"channel\"][\"name\"]\n    channelId = elem[\"channel\"][\"id\"]\n    viewCount = elem[\"viewCount\"][\"text\"]\n    print(\"title\",title)\n    print(\"videoId\",videoId)\n    print(\"author\",authorName)\n    print(\"channel ID\",channelId)\n    print(\"viewCount\",viewCount)\n    print(\"_______________________________________\")",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_dollar/fetch_related_content.py:1-23"
    },
    "2051": {
        "file_id": 206,
        "content": "The code imports the \"VideosSearch\" class from the \"youtube-search-python\" package and uses it to search for videos related to drawing realistic US Dollars. It fetches the first 10 results, then prints each video's title, ID, author name, channel ID, and view count.",
        "type": "comment"
    },
    "2052": {
        "file_id": 207,
        "content": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/commons.py",
        "type": "filepath"
    },
    "2053": {
        "file_id": 207,
        "content": "This code defines `jsonWalk` and `jsonLocate` functions that recursively traverse JSON objects, handling dictionaries, lists, tuples, and raising exceptions for non-JSON types. It also updates json's dictionary with new \"walk\" and \"locate\" functions.",
        "type": "summary"
    },
    "2054": {
        "file_id": 207,
        "content": "import json\ndef jsonWalk(jsonObj,location=[]):\n    # this is not tuple. better convert it first?\n    # mlocation = copy.deepcopy(location)\n    if type(jsonObj) == dict:\n        for key in jsonObj:\n            content = jsonObj[key]\n            if type(content) not in [dict,list,tuple]: \n                yield location+[key], content\n            else:\n                # you really ok with this?\n                for mkey, mcontent in jsonWalk(content,location+[key]):\n                    yield mkey, mcontent\n    elif type(jsonObj) in [list,tuple]:\n        for key,content in enumerate(jsonObj):\n        # content = jsonObj[key]\n            if type(content) not in [dict,list,tuple]:\n                yield location+[key], content\n            else:\n                for mkey, mcontent in jsonWalk(content,location+[key]):\n                    yield mkey, mcontent\n    else:\n        raise Exception(\"Not a JSON compatible object: {}\".format(type(jsonObj)))\ndef jsonLocate(jsonObj,location=[]):\n    # print(\"object:\",jsonObj)\n    # print(\"location:\",location)",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/commons.py:1-29"
    },
    "2055": {
        "file_id": 207,
        "content": "This code defines two functions, `jsonWalk` and `jsonLocate`, which recursively traverse a JSON object and yield the location and value of each item. It handles dictionaries, lists, and tuples while raising an exception for non-JSON compatible types.",
        "type": "comment"
    },
    "2056": {
        "file_id": 207,
        "content": "    if location!=[]:\n        return jsonLocate(jsonObj[location[0]],location[1:])\n    return jsonObj\njson.__dict__.update({\"walk\":jsonWalk,\"locate\":jsonLocate})\ndef list_startswith(a,b):\n    value = 0\n    if len(a) < len(b): return False\n    for i,v in enumerate(b):\n        v0 = a[i]\n        if v == v0:\n            value +=1\n    return value == len(b)\ndef list_endswith(a,b):\n    value = 0\n    if len(a) < len(b): return False\n    c = a[-len(b):]\n    for i,v in enumerate(b):\n        v0 = c[i]\n        if v == v0:\n            value +=1\n    return value == len(b)\n# list.__dict__.update({\"startswith\": list_startswith,\"endswith\": list_endswith})",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/commons.py:30-57"
    },
    "2057": {
        "file_id": 207,
        "content": "The code contains functions for checking if a list starts or ends with another list, but they are not added to the list class. It also updates json's dictionary with \"walk\" and \"locate\" functions.",
        "type": "comment"
    },
    "2058": {
        "file_id": 208,
        "content": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/create_output.sh",
        "type": "filepath"
    },
    "2059": {
        "file_id": 208,
        "content": "This code utilizes FFmpeg to merge webm video with subtitle files, trimming and styling as needed. It provides links for similar tasks, and seeks PlayResX, PlayResY, and ssa subtitle coordinates.",
        "type": "summary"
    },
    "2060": {
        "file_id": 208,
        "content": "ffmpeg -y -vsync 0 -hwaccel_output_format cuda -i \"Scientists Discovered a Bubble Around Our Solar System! [At7ORzmAaT4].webm\"  -vf \"subtitles=zh_translated.srt:force_style='MarginV=60',subtitles=en_.srt:force_style='Fontsize=10,PrimaryColour=&H00FFFF00,Alignment=6,MarginV=228'\" scientists_bubbles.mp4\n# ffmpeg -y -vsync 0 -hwaccel_output_format cuda -i \"Scientists Discovered a Bubble Around Our Solar System! [At7ORzmAaT4].webm\" -ss 00:00:07 -to 00:01:00  -vf \"subtitles=zh_translated.srt:force_style='MarginV=60',subtitles=en_.srt:force_style='Fontsize=10,PrimaryColour=&H00FFFF00,Alignment=6,MarginV=228'\" scientists_bubbles.mp4\n# https://www.zhihu.com/question/20779091\n# https://www.jianshu.com/p/cfdbfdc6d3a7\n# https://fileformats.fandom.com/wiki/SubStation_Alpha#Style_overrides\n# PlayResX: 384\n# PlayResY: 288\n# 384×288是标准的4：3画面分辨率之一。ssa字幕里的坐标（字幕的位置）即根据这2个数值的范围来定义。\n# ffmpeg -y -vsync 0 -hwaccel_output_format cuda -i \"Scientists Discovered a Bubble Around Our Solar System! [At7ORzmAaT4].webm\" -ss",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/create_output.sh:1-9"
    },
    "2061": {
        "file_id": 208,
        "content": "The code uses FFmpeg to combine a webm video with two subtitle files, creating an mp4 output. It also trims the video for a specific duration and applies style overrides for subtitles. The provided links are for reference material on similar tasks. The final part of the code seeks information about PlayResX and PlayResY, along with ssa subtitle coordinates.",
        "type": "comment"
    },
    "2062": {
        "file_id": 208,
        "content": " 00:00:07 -to 00:01:00  -vf \"subtitles=zh_translated.srt:force_style='MarginV=0',subtitles=en_.srt\" scientists_bubbles.mp4",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/create_output.sh:9-9"
    },
    "2063": {
        "file_id": 208,
        "content": "Applying subtitles to a video.",
        "type": "comment"
    },
    "2064": {
        "file_id": 209,
        "content": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/download_when_complete.py",
        "type": "filepath"
    },
    "2065": {
        "file_id": 209,
        "content": "The code is using the subprocess module to periodically check the status of a Kaggle kernel. If the status is \"running\" or \"complete\", it executes a final command and sets a lock file. It continues checking until the status is one of the valid ones or an unknown status occurs, in which case it breaks the loop.",
        "type": "summary"
    },
    "2066": {
        "file_id": 209,
        "content": "import parse\nimport subprocess\nimport time\nimport os\n# import pathlib\ndownload_lock = \".kaggle_downloaded\"\nif os.path.exists(download_lock):\n    print(\"already fetched content.\")\nwait_duration = 60\nformatx = '{a} has status \"{b}\"'\nvalid_status = [\"running\",\"complete\"]\nfinal_command = \"kaggle kernels output jessysisca/test-of-yt-dlp2\"\ncmd = \"kaggle kernels status jessysisca/test-of-yt-dlp2\"\nwhile True:\n    output = subprocess.check_output(cmd.split(\" \"))\n    output = output.decode('utf-8')\n    output = output.replace('\\n',\"\").strip()\n    result = parse.parse(formatx,output)\n    rb = result['b']\n    print(\"STATUS:\",rb)\n    if rb in valid_status:\n        if rb == \"complete\":\n            print(\"DOWNLOADING OUTPUT\")\n            os.system(final_command)\n            os.system(\"touch {}\".format(download_lock))\n            break\n        else:\n            time.sleep(wait_duration)\n    else:\n        print(\"UNKNOWN STATUS. ERROR.\")\n        break",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/download_when_complete.py:1-40"
    },
    "2067": {
        "file_id": 209,
        "content": "The code is using the subprocess module to periodically check the status of a Kaggle kernel. If the status is \"running\" or \"complete\", it executes a final command and sets a lock file. It continues checking until the status is one of the valid ones or an unknown status occurs, in which case it breaks the loop.",
        "type": "comment"
    },
    "2068": {
        "file_id": 210,
        "content": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/get_ytInitialData.py",
        "type": "filepath"
    },
    "2069": {
        "file_id": 210,
        "content": "This code uses BeautifulSoup and JavaScript libraries to extract HTML data, processes it into a JSON object with view count and video length updates.",
        "type": "summary"
    },
    "2070": {
        "file_id": 210,
        "content": "target = \"curl_dump_youtube.html\"\nfrom bs4 import BeautifulSoup\n# this is m.youtube.com/watch?v={videoId}\n# import esprima\nimport js2py\nsoup = open(target,\"r\",encoding=\"utf-8\").read()\nsoup = BeautifulSoup(soup,features=\"lxml\")\nscripts = soup.find_all(\"script\")\njsfunc = lambda x: \"function f9x() { \"+x+ \"  \\n return ytInitialData;}\"\njsfunc2 = lambda x: \"function f9x() { \"+x+ \"  \\n return ytInitialPlayerResponse;}\"\n# breakpoint()\nfrom commons import *\ndata = None\ndata2 = None\nfor script in scripts:\n    content = script.string\n    if content is not None:\n        if \"var ytInitialPlayerResponse = {\" in content:\n            print(\"HAS DATA\") # only one.\n            # script_obj = esprima.parse(content)\n            script_obj = jsfunc2(content)\n            # print(script_obj)\n            obj = js2py.eval_js(script_obj)\n            # print(obj)\n            data2 = obj() # need a json walker, from pyjom.\n            # breakpoint()\n    # print(content)\nfor script in scripts:\n    content = script.string\n    if content is not None:",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/get_ytInitialData.py:1-40"
    },
    "2071": {
        "file_id": 210,
        "content": "This code retrieves HTML from a specific target file, parses it using BeautifulSoup, and searches for scripts containing \"ytInitialData\" or \"ytInitialPlayerResponse\". It then uses JavaScript conversion libraries to extract the data from these scripts as Python objects. The data is stored in variables 'data' and 'data2', respectively.",
        "type": "comment"
    },
    "2072": {
        "file_id": 210,
        "content": "        if \"var ytInitialData = {\" in content:\n            print(\"HAS DATA\") # only one.\n            # script_obj = esprima.parse(content)\n            script_obj = jsfunc(content)\n            # print(script_obj)\n            obj = js2py.eval_js(script_obj)\n            # print(obj)\n            data = obj() # need a json walker, from pyjom.\n            # breakpoint()\n    # print(content)\n    # print(\"================================\")\n#     # breakpoint()\ndata_dict =  data.to_dict()\ndata2_dict =  data2.to_dict()\n# print(type(data))\n# breakpoint()\ntarget1 = [\"viewCountText\",\"lengthText\",\"publishedTimeText\"]\ntargets = [\"videoId\", \"simpleText\"]\ninits = ['contents', 'twoColumnWatchNextResults', 'secondaryResults', 'secondaryResults', 'results']\n# inits2 = ['contents', 'twoColumnWatchNextResults', 'secondaryResults', 'secondaryResults', 'results']\nends2 = {\"title\":['compactVideoRenderer', 'title', 'simpleText'],\"viewCountText\": ['compactVideoRenderer', 'viewCountText', 'simpleText'],\"publishTime\":['compactVideoRe",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/get_ytInitialData.py:41-67"
    },
    "2073": {
        "file_id": 210,
        "content": "This code checks if the content contains \"var ytInitialData = {\" and then parses it using jsfunc, converts to Python object with js2py, extracts data, converts it to dictionaries, and defines some target variables.",
        "type": "comment"
    },
    "2074": {
        "file_id": 210,
        "content": "nderer', 'publishedTimeText', 'simpleText'],\"lengthText\":['compactVideoRenderer', 'lengthText', 'simpleText'],\"videoId\":['compactVideoRenderer', 'videoId']}\nvideoDetails = data2_dict[\"videoDetails\"]\nvideoDetails = {k:videoDetails[k] for k in [\"viewCount\",\"author\",\"keywords\",\"channelId\",\"shortDescription\",\"lengthSeconds\",\"videoId\",\"title\"]}\n# \"https://i.ytimg.com/vi_webp/{videoId}/maxresdefault.webp # default cover.\nvideoDicts = {}\nfor key, content in json.walk(data_dict):\n    # print(key)\n    final_key = key[-1]\n    if final_key in targets:\n        if list_startswith(key,inits):\n            for k in ends2.keys():\n                v = ends2[k]\n                if list_endswith(key,v):\n                    valueType = k\n                    value = content\n                    valueIndex = key[len(inits)]\n                    if valueIndex not in videoDicts.keys():\n                        videoDicts[valueIndex] = {}\n                    # print(valueIndex,valueType,value)\n                    videoDicts[valueIndex].update({valueType:value})",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/get_ytInitialData.py:67-88"
    },
    "2075": {
        "file_id": 210,
        "content": "This code appears to extract specific data from a JSON object, specifically looking for keys that match certain endings and initials. The extracted data is then stored in a dictionary called \"videoDicts\" with the index as the key and the type and value of the data as the values. The purpose seems to be extracting specific information from the given JSON data, potentially for further use or processing.",
        "type": "comment"
    },
    "2076": {
        "file_id": 210,
        "content": "                    break\n        # print(key)  # i want to know the views of these.\n    # breakpoint()\ndef getViewCount(vc): return vc.replace(\",\",\"\").split(\" \")[0]\ndef getLengthSeconds(lt):\n    lt0 = lt.split(\":\")\n    assert len(lt0) <=5 # no more than week please?\n    dicIndex = {0:1,1:60,2:60*60,3:60*60*24,4:60*60*24*7}\n    seconds = 0\n    for i,v in enumerate(reversed(lt0)):\n        vn = int(v)\n        vs = vn*dicIndex[i]\n        seconds += vs\n    return str(seconds)\nfor k in videoDicts.keys():\n    v = videoDicts[k]\n    viewCount = getViewCount(v[\"viewCountText\"])\n    v.update({\"viewCount\":viewCount})\n    lengthSeconds = getLengthSeconds(v[\"lengthText\"])\n    v.update({\"lengthSeconds\":lengthSeconds})\n    print(v)\n    # for k0 in ends2.keys():\n    #     assert k0 in v.keys()\nprint(videoDetails)",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/get_ytInitialData.py:89-116"
    },
    "2077": {
        "file_id": 210,
        "content": "This code iterates over the 'videoDicts' dictionary, extracting and updating the view count and video length (in seconds) for each video. The extracted information is stored as values in the dictionary with keys \"viewCount\" and \"lengthSeconds\". Finally, it prints the updated 'videoDicts' dictionary and the 'videoDetails'.",
        "type": "comment"
    },
    "2078": {
        "file_id": 211,
        "content": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/init.sh",
        "type": "filepath"
    },
    "2079": {
        "file_id": 211,
        "content": "This script initializes a Kaggle kernel, checks its status, and sets proxy environment variables to download at maximum speed.",
        "type": "summary"
    },
    "2080": {
        "file_id": 211,
        "content": "# kaggle kernels init # we have it do not fuck up again\n# code/jessysisca/some-yt-stuff \n# kaggle kernels push\nkaggle kernels status jessysisca/test-of-yt-dlp2\n# jessysisca/some-yt-stuff has status \"complete\"\n# root@alpharetta ~/android_connect_scrcpy_patch# \n# kaggle kernels status jessysisca/test-of-yt-dlp\n# jessysisca/test-of-yt-dlp has status \"running\"\n# after it is done, we pull back all shit.\n# skip all proxies.\n# export http_proxy=\"\"\n# export https_proxy=\"\"\n# kaggle kernels output jessysisca/test-of-yt-dlp2 # what is the freaking speed?\n# not too slow.",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/init.sh:1-14"
    },
    "2081": {
        "file_id": 211,
        "content": "This script initializes a Kaggle kernel, checks its status, and sets proxy environment variables to download at maximum speed.",
        "type": "comment"
    },
    "2082": {
        "file_id": 212,
        "content": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/test.py",
        "type": "filepath"
    },
    "2083": {
        "file_id": 212,
        "content": "Code installs yt-dlp and downloads subtitles from a YouTube video, then converts them to SRT format. Optionally, it also enables sponsorblock-mark for highlighting ad breaks in the output.",
        "type": "summary"
    },
    "2084": {
        "file_id": 212,
        "content": "import os\ncommands = [\"pip3 install yt-dlp\",'yt-dlp --write-subs --convert-subtitles srt  \"https://m.youtube.com/watch?v=At7ORzmAaT4\"']\n# commands = [\"pip3 install yt-dlp\",'yt-dlp --write-subs --convert-subtitles srt --sponsorblock-mark poi_highlight \"https://m.youtube.com/watch?v=At7ORzmAaT4\"']\n# this will mark the highlights.\nfor c in commands:\n    os.system(c)",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/test.py:1-8"
    },
    "2085": {
        "file_id": 212,
        "content": "Code installs yt-dlp and downloads subtitles from a YouTube video, then converts them to SRT format. Optionally, it also enables sponsorblock-mark for highlighting ad breaks in the output.",
        "type": "comment"
    },
    "2086": {
        "file_id": 213,
        "content": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/test2.py",
        "type": "filepath"
    },
    "2087": {
        "file_id": 213,
        "content": "The code imports the os module and defines two commands - one to install yt-dlp using pip3, another to download subtitles from a YouTube video with yt-dlp. It then iterates over each command in the list and runs them using os.system(). This will result in yt-dlp being installed and the subtitles being downloaded for the specified YouTube video.",
        "type": "summary"
    },
    "2088": {
        "file_id": 213,
        "content": "import os\ncommands = [\"pip3 install yt-dlp\",'yt-dlp --write-subs --convert-subtitles srt \"https://m.youtube.com/watch?v=At7ORzmAaT4\"'] # get recommendation this time.\n# we will still get many videoId from curl.\nfor c in commands:\n    os.system(c)",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/test2.py:1-8"
    },
    "2089": {
        "file_id": 213,
        "content": "The code imports the os module and defines two commands - one to install yt-dlp using pip3, another to download subtitles from a YouTube video with yt-dlp. It then iterates over each command in the list and runs them using os.system(). This will result in yt-dlp being installed and the subtitles being downloaded for the specified YouTube video.",
        "type": "comment"
    },
    "2090": {
        "file_id": 214,
        "content": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/translate_srt.py",
        "type": "filepath"
    },
    "2091": {
        "file_id": 214,
        "content": "Code reads an SRT file, translates each line of the content using a web translator, wraps the translated lines to meet a certain character limit, and then saves the results in a new SRT file. The process involves parsing the input SRT file using the \"srt\" library, translating text with \"web_translator\", and modifying the line wrapping for better readability.",
        "type": "summary"
    },
    "2092": {
        "file_id": 214,
        "content": "src = \"en_.srt\"\nfinal_srt = \"zh_translated.srt\"\nimport srt\nwrap_limit = 20\nsource_srt = open(src, \"r\",encoding=\"utf-8\").read()\nssrt = srt.parse(source_srt)\nfrom web_translator import translator\nimport math\ndef wrapLine(line):\n    lines = [line[x*wrap_limit:(x+1)*wrap_limit] for x in range(math.ceil(len(line)/wrap_limit))]\n    return \"\\n\".join(lines)\ndef fixline(line):\n    notEndings = [\"。\",\"，\"]\n    for x in notEndings:\n        if line.endswith(x): return line[:-1]\n    return line\nnew_ssrt = []\nfor line in ssrt:\n    # print(line)\n    start = line.start\n    end = line.end # timedelta.\n    content = line.content\n    index = line.index\n    unwrapped_content = content.replace(\"\\n\",\" \")\n    result = translator(unwrapped_content)\n    result = fixline(result)\n    print(result)\n    line.content = result\n    new_ssrt.append(line)\n    # wrapped = wrapLine(result)\n    # print(wrapped)\n    # print(start, end, content, index)\nfinal_content = srt.compose(new_ssrt)\nwith open(final_srt,\"w+\",encoding=\"utf-8\") as f:\n    f.write(final_content)",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_video_translate/translate_srt.py:1-45"
    },
    "2093": {
        "file_id": 214,
        "content": "Code reads an SRT file, translates each line of the content using a web translator, wraps the translated lines to meet a certain character limit, and then saves the results in a new SRT file. The process involves parsing the input SRT file using the \"srt\" library, translating text with \"web_translator\", and modifying the line wrapping for better readability.",
        "type": "comment"
    },
    "2094": {
        "file_id": 215,
        "content": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/web_translator.py",
        "type": "filepath"
    },
    "2095": {
        "file_id": 215,
        "content": "The code defines a translator function that randomly selects from multiple translation services to convert English text to either \"zh\" or \"zh-CHS\". It uses the \"translators\" module and imports random for selecting the translation service and language. The code also allows for different combinations of translation services to be tested by uncommenting specific lines in the mtranslators list. If an error occurs during translation, it prints the exception stack trace using traceback.",
        "type": "summary"
    },
    "2096": {
        "file_id": 215,
        "content": "import translators as ts\n# translator = \n# mtranslators = [ts.sogou] #this is pure shit.\n# mtranslators = [ts.baidu,ts.sogou]\n# mtranslators = [ts.baidu,ts.sogou,ts.iciba]\nmtranslators = [ts.youdao,ts.baidu,ts.alibaba] # no yandex, tencent, sogou.\n# mtranslators = [ts.baidu,ts.iciba]\nimport random\ndef translator(text):\n    randomLang = [\"zh\",\"zh-CHS\"]\n    from_language = \"en\"\n    # lang = random.choice(randomLang)\n    while True:\n        t = random.choice(mtranslators)\n        # print(type(translator))\n        for rl in randomLang:\n            try:\n                result = t(text,from_language=from_language,to_language=rl)\n                # if len(result) < 3:\n                #     print(t)\n                #     breakpoint()\n                return result\n            except:\n                import traceback\n                traceback.print_exc()",
        "type": "code",
        "location": "/tests/bilibili_practices/bilibili_science_subtitle_with_cn_voice/web_translator.py:1-27"
    },
    "2097": {
        "file_id": 215,
        "content": "The code defines a translator function that randomly selects from multiple translation services to convert English text to either \"zh\" or \"zh-CHS\". It uses the \"translators\" module and imports random for selecting the translation service and language. The code also allows for different combinations of translation services to be tested by uncommenting specific lines in the mtranslators list. If an error occurs during translation, it prints the exception stack trace using traceback.",
        "type": "comment"
    },
    "2098": {
        "file_id": 216,
        "content": "/tests/bilibili_practices/bilibili_tarot/all_typography.py",
        "type": "filepath"
    },
    "2099": {
        "file_id": 216,
        "content": "This code generates typography for a video and stores it in a specific format, using functions `gen_typography_part1`, `gen_typography_part2`, and `kill_script()`. It imports modules for creating files, executing scripts, and generating intermediate videos.",
        "type": "summary"
    }
}