{
    "2600": {
        "file_id": 276,
        "content": "/tests/anime_highlight_cuts/theme_collector/anime_video_frame_cropper_labeller.py",
        "type": "filepath"
    },
    "2601": {
        "file_id": 276,
        "content": "The code reads video frames, selects the region of interest (ROI), and writes data to a CSV file for each frame in the list. It handles default values if ROI is not found and releases resources upon completion.",
        "type": "summary"
    },
    "2602": {
        "file_id": 276,
        "content": "# check if is the video we want and extract data or discard.\n# maybe you want some challange, so you can make one, right?\n# videos = [\n#     \"286760784_part1-00001.mp4\",\n#     \"329297394_part1-00001.mp4\",\n#     \"541755429_part1-00001.mp4\",\n#     \"842224692_part1-00001.mp4\",\n# ]\nimport os\n# videos = [fpath for fpath in os.listdir(\".\") if fpath.endswith(\".mp4\")]\nvideos = [\"480138800_part1.mp4\"] # mine video, classic!\n# we create dataset here.\n# use some short cuts for progression.\nframe_step = 10\nimport cv2\nimport progressbar\nfrom pynput.keyboard import Listener\nlastKey = [\"not_c\"]\ndef on_press(key):\n    lastKey[0] = \"not_c\"\n    try:\n        # print(\"alphanumeric key {0} pressed\".format(key.char))\n        if key.char in [\"c\", \"C\"]:\n            lastKey[0] = \"c\"\n    except AttributeError:\n        # print(\"special key {0} pressed\".format(key))\n        ...\ndef on_release(key):\n    # print(\"{0} released\".format(key))\n    ...\nlistener = Listener(on_press=on_press, on_release=on_release)\nlistener.start()\n# with listener:\n#     listener.join()",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anime_video_frame_cropper_labeller.py:1-48"
    },
    "2603": {
        "file_id": 276,
        "content": "This code checks if the video file matches the desired format, creates a dataset, and uses shortcuts for progression. It also listens for keyboard input to determine when to stop running.",
        "type": "comment"
    },
    "2604": {
        "file_id": 276,
        "content": "# how do you arrange such data?\nfields = [\"filename\", \"frame_index\", \"x\", \"y\", \"w\", \"h\"]\nimport csv\nfor index, video in enumerate(videos):\n    with open(f'{video.split(\".\")[0]}.csv', \"w+\") as csvfile:\n        csvwriter = csv.writer(csvfile)\n        csvwriter.writerow(fields)\n        print(\"reading video:\", index)\n        roi = None\n        cap = cv2.VideoCapture(video)\n        for vindex in progressbar.progressbar(\n            range(0, int(cap.get(cv2.CAP_PROP_FRAME_COUNT)), frame_step)\n        ):\n            cap.set(cv2.CAP_PROP_POS_FRAMES, vindex)\n            succ, image = cap.read()\n            if succ:\n                roi_new = cv2.selectROI(\"roi\", image)\n                # key=cv2.waitKey(0)\n                print(\"roi_new:\", roi_new)\n                print(\"last key:\", lastKey[0])\n                # print()\n                # print('keycode:',key)\n                if roi_new == (0, 0, 0, 0):\n                    if lastKey[0] == \"c\":\n                        # this is cancelled. roi will be nothing!\n                        roi = None",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anime_video_frame_cropper_labeller.py:50-77"
    },
    "2605": {
        "file_id": 276,
        "content": "This code reads a video and allows the user to select a region of interest (ROI) from each frame. It then writes the frame index, x, y, width, and height of the ROI in a CSV file for each frame of the video. The process is repeated for each video in the list.",
        "type": "comment"
    },
    "2606": {
        "file_id": 276,
        "content": "                else:\n                    roi = roi_new\n                print(\"roi:\", roi)\n                for i in range(frame_step):\n                    roi_index = vindex + i\n                    data = [video, roi_index]\n                    if roi == None:\n                        data += [0, 0, 0, 0]\n                    else:\n                        data += list(roi)\n                    csvwriter.writerow(data)\n        cap.release()",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anime_video_frame_cropper_labeller.py:78-89"
    },
    "2607": {
        "file_id": 276,
        "content": "This code reads video frames, determines the region of interest (ROI), and writes data to a CSV file. If the ROI is not found, it adds default values. The loop iterates through each frame step, updating the ROI index and writing the data. Finally, it releases the video capture resource.",
        "type": "comment"
    },
    "2608": {
        "file_id": 277,
        "content": "/tests/anime_highlight_cuts/theme_collector/anime_video_downloader.py",
        "type": "filepath"
    },
    "2609": {
        "file_id": 277,
        "content": "Code uses yt-dlp to download Bilibili videos and handles errors. Snippet lists current directory files, checks filenames against \"expectedNamePrefix\", and prints \"TARGET FOUND!\" if a match is found.",
        "type": "summary"
    },
    "2610": {
        "file_id": 277,
        "content": "# we name downloaded video using some agreements.\nimport os\n# yt-dlp --skip-download -j https://www.bilibili.com/video/BV1e54y1y7qy\n# i guess it is because we are using proxies.\n# no? what the heck?\n# remapped /opt/homebrew/bin/yt-dlp from homebrew's (dependency of mpv) to /Users/jamesbrown/Library/Python/3.8/bin/yt-dlp. really annoying when trying to update (will install python 3.11 (heck!))\n# version outdated. fuck man.\n# yt-dlp --download-sections \"*0:00:03-0:01:00\" --playlist-items \"1\" https://www.bilibili.com/video/BV1Fs411k7e9\nvideoIDs = [\n    \"BV1e54y1y7qy\",  # 842224692_part1-00001\n    \"BV1Qf4y197bt\",  # great challange, 286760784\n    \"BV1bi4y1g7Gd\",  # watermark, full screen, 541755429\n    \"BV1PA411n7N6\",  # shit jumping around, 329297394\n]\nvideoID = videoIDs[3]\nfrom bv2av import bv_av_conversion\nvideoIDAlternative = bv_av_conversion(videoID)\nimport re\nif videoIDAlternative is None: # not av or bv. shit happened!\n    raise Exception(\"Possible shit happening when parsing bilibili video id:\", videoID)",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anime_video_downloader.py:1-26"
    },
    "2611": {
        "file_id": 277,
        "content": "This code downloads videos from Bilibili using yt-dlp and converts the video ID to a valid format. It handles potential errors by raising exceptions if the conversion fails or if an alternative conversion is required. The code also mentions some issues related to the yt-dlp version, outdated dependencies, and updating Python.",
        "type": "comment"
    },
    "2612": {
        "file_id": 277,
        "content": "else:\n    if videoIDAlternative.startswith(\"av\"):\n        videoAVID, videoBVID = videoIDAlternative, videoID\n    else:\n        videoBVID, videoAVID = videoIDAlternative, videoID\nprint(videoAVID, type(videoAVID))\nvideoAID = re.findall(r\"\\d+\", videoAVID)[0]\nurl = f\"https://www.bilibili.com/video/{videoBVID}\"  # only one single page.\n# 290 seconds.\n# section example:\n# 0:05:00-0:06:30\n# import time\n# secondsToHHMMSS = lambda seconds:time.strftime('%H:%M:%S', time.gmtime(seconds))\n# some formats are not working. fuck.\nplaylistIndex = \"1\"\n# start = secondsToHHMMSS(100)\n# end = secondsToHHMMSS(150)\n# print('TIMESPAN:',start, end)\nnameFormat = \"%(id)s-%(autonumber)s.%(ext)s\"\ncmd = f'yt-dlp --playlist-items \"{playlistIndex}\" -o \"{nameFormat}\" \"{url}\"'\n# cmd=f'yt-dlp --download-sections \"*{start}-{end}\" --playlist-items \"{playlistIndex}\" -o \"{nameFormat}\"  \"{url}\"'\nos.system(cmd)\nautonumber = \"1\".zfill(5)\nexpectedNamePrefix = f\"{videoAID}_part{playlistIndex}-{autonumber}\"\nprint(\"expected filename prefix:\", expectedNamePrefix)",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anime_video_downloader.py:27-59"
    },
    "2613": {
        "file_id": 277,
        "content": "Code snippet downloads videos from Bilibili using yt-dlp and saves them as parts with specified video IDs. It converts video IDs to the expected filename prefix and executes the command to download the videos.",
        "type": "comment"
    },
    "2614": {
        "file_id": 277,
        "content": "files = os.listdir(\".\")\nfor fname in files:\n    if fname.startswith(expectedNamePrefix):\n        print(\"TARGET FOUND!\")\n        print(\"FILENAME:\", fname)",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anime_video_downloader.py:60-65"
    },
    "2615": {
        "file_id": 277,
        "content": "This code snippet lists all files in the current directory and checks if any filename starts with the given \"expectedNamePrefix\". If a match is found, it prints \"TARGET FOUND!\" along with the filename.",
        "type": "comment"
    },
    "2616": {
        "file_id": 278,
        "content": "/tests/anime_highlight_cuts/theme_collector/anime_compilation_video_metadata.py",
        "type": "filepath"
    },
    "2617": {
        "file_id": 278,
        "content": "This Python script utilizes yt-dlp and Bilibili API to retrieve bilibili video metadata, unique identifiers, and related info. Error handling is needed for missing tags.",
        "type": "summary"
    },
    "2618": {
        "file_id": 278,
        "content": "# get video metadata first. we may filter unwanted videos by metadata.\n# let's just view here:\n# https://github.com/SocialSisterYi/bilibili-API-collect\n# i found new format of video shortlink:\n# https://b23.tv/BV1zW4y1p7RT\n# https://b23.tv/<bvid>\nvideoLinks = [\n    \"https://www.bilibili.com/video/BV1e54y1y7qy\",  # 女攻男受 emm\n    \"https://www.bilibili.com/video/BV1P441197oV\",  # in which you shall never find anything interesting. no related video.\n    \"https://www.bilibili.com/video/BV1Fs411k7e9\", # multiple chapters, you shall not find this interesting.\n    \"https://www.bilibili.com/video/av5842509\" # aid version of video link.\n]\n# import fake_useragent\n# ua = fake_useragent.UserAgent()\nimport re\nfrom pymaybe import maybe\nimport requests\nfrom urllib.parse import urlencode\ndef extractBVID(chars:str):\n    bvid = maybe(re.findall(r\"/(BV[a-zA-Z0-9]+)\",chars))[0]\n    return bvid\ndef extractAID(chars:str):\n    aid = maybe(re.findall(r\"/av([0-9]+)\",chars))[0]\n    return aid\n## remember the video is always scrapable via av id.",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anime_compilation_video_metadata.py:1-31"
    },
    "2619": {
        "file_id": 278,
        "content": "This code retrieves video metadata from bilibili, a Chinese video hosting platform. It uses various video link formats and extracts unique identifiers (BVID or AID) to obtain metadata for further filtering unwanted videos. The code also imports relevant libraries and defines two functions to extract BVID and AID from the video links.",
        "type": "comment"
    },
    "2620": {
        "file_id": 278,
        "content": "## av5842509\n# https://api.bilibili.com/x/web-interface/view?aid=<AID>\n# https://api.bilibili.com/x/web-interface/view?bvid=<BVID>\n# videoDownloadPath = \"\"\n# shit!\n# why i need to download whole damn video? i need to cut it into bite-sized video!\n# for some video there's no possibility to determine the source.\n# let's see the video metadata.\n# import os\n# os.system(f'yt-dlp --dump-metadata --output metadata.json \"{videoLinks[0]}\"') # working?\n# bullshit. we shall get the video metadata first.\nurl = \"https://api.bilibili.com/x/web-interface/view\"\ntags_url = \"https://api.bilibili.com/x/tag/archive/tags\"\nrelated_url = \"https://api.bilibili.com/x/web-interface/archive/related\"\nfor videoLink in videoLinks:\n    bvid = extractBVID(videoLink)\n    if bvid:\n        params = {\"bvid\": bvid}\n    else:\n        aid = extractAID(videoLink)\n        if aid:\n            params = {\"aid\": aid}\n        else:\n            print(\"no valid bilibili video id found.\")\n            print(\"skipping video link:\", videoLink)\n            continue",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anime_compilation_video_metadata.py:32-66"
    },
    "2621": {
        "file_id": 278,
        "content": "The code is trying to collect metadata for Bilibili videos using APIs and may download the video if needed. It first checks if there is a valid BVID or AID, then retrieves the video's metadata and possibly related tags. However, it encounters issues with determining the source and currently has a workaround using yt-dlp to get metadata but notes that this method isn't working properly.",
        "type": "comment"
    },
    "2622": {
        "file_id": 278,
        "content": "    # print(\"PARAMS?\",params)\n    # shit.\n    r = requests.get(f\"{url}?{urlencode(params)}\") # why? what the fuck?\n    r_tags = requests.get(f\"{tags_url}?{urlencode(params)}\")\n    # r = requests.get(url,data=params,headers={\"User-Agent\":ua.random})\n    r_related = requests.get(f'{related_url}?{urlencode(params)}')\n    # r = requests.get(\"https://api.bilibili.com/x/web-interface/view?bvid=BV1e54y1y7qy\")\n    r.raise_for_status()\n    r_tags.raise_for_status()\n    r_related.raise_for_status()\n    # \"need_jump_bv\":false\n    # bvid only?\n    response_json = r.json()\n    response_tags_json = r_tags.json()\n    response_related_json = r_related.json()\n    # it must be json.\n    import rich\n    # rich.print(response_json)\n    assert response_json['code'] == 0\n    assert response_tags_json['code'] == 0\n    assert response_related_json['code'] == 0\n    data = response_json['data']\n    tags_data = response_tags_json['data']\n    related_data = response_related_json['data']\n    ## parsing video stats.\n    title = data['title']",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anime_compilation_video_metadata.py:68-97"
    },
    "2623": {
        "file_id": 278,
        "content": "This code retrieves video metadata from Bilibili API using Python's `requests` library. It makes three separate requests for the video, tags, and related videos data. The responses are then parsed to extract relevant information such as video title, and the JSON responses are validated to ensure a successful response with status code 0.",
        "type": "comment"
    },
    "2624": {
        "file_id": 278,
        "content": "    pic = data['pic']\n    tid,tname = data['tid'],data['tname']\n    # 27, \"综合\"\n    # 253, \"动漫杂谈\"\n    dynamic = data['dynamic'] # we can copy that.\n    desc = data['desc']\n    owner_mid = data['owner']['mid']\n    state = data['state']\n    assert state == 0 # make sure this video is downloadable.\n    stat =  data['stat']\n    view  = stat['view']\n    reply = stat['reply']\n    danmaku = stat['danmaku']\n    favorite = stat['favorite']\n    coin  = stat['coin']\n    share = stat['share']\n    like  = stat['like']\n    pages = data['pages']\n    page_count = len(pages) # data['videos']\n    for page in pages:\n        page_index = page['page']\n        page_name = page['part']\n        page_dimension = page['dimension']\n        page_width, page_height, page_rotate = page_dimension['width'], page_dimension['height'], page_dimension['rotate']\n        page_duration = page['duration']\n    # subtitle = data['subtitle']\n    # let's just skip.\n    ## parsing tags info.\n    for tag in tags_data:\n        tag_id = tag['tag_id']\n        tag_name = tag['tag_name']",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anime_compilation_video_metadata.py:98-135"
    },
    "2625": {
        "file_id": 278,
        "content": "This code is fetching data from an API and extracting various information such as video ID, title, thumbnail URLs, description, owner's mid, video statistics (views, replies, danmaku, favorites, coins, shares, likes), and page dimensions. It also skips parsing subtitle info and processes tags data. The code checks if the state is 0 to ensure the video can be downloaded.",
        "type": "comment"
    },
    "2626": {
        "file_id": 278,
        "content": "        tag_used = tag['count']['use']\n        tag_attention = tag['count']['atten']\n        # introduction of tag.\n        tag_content = tag['content']\n        tag_short_content = tag['short_content']\n    ## extract related video info.\n    related_video_counts = len(related_data)\n    for related_video in related_data:\n        related_aid = related_video['aid']\n        related_bvid = related_video['bvid']\n        related_tid = related_video['tid']\n        related_tname = related_video['tname']\n        related_pic = related_video['pic']\n        related_title = related_video['title']\n        related_page_count = related_video['videos'] # make sure this is 1?\n        related_desc = related_video['desc']\n        related_state = related_video['state']\n        if related_state != 0: continue\n        related_duration = related_video['duration']\n        related_owner_mid = related_video['owner']['mid']\n        related_stat = related_video['stat']\n        related_dynamic = related_video['dynamic']\n        # well, we've got non-standard dimensions.",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anime_compilation_video_metadata.py:136-160"
    },
    "2627": {
        "file_id": 278,
        "content": "This code section is gathering data related to a video, including tag information, count of times the tags were used or caught attention, and details about related videos. It checks if the related state is not 0 before proceeding to gather more information like duration, owner's mid, statistics, etc.",
        "type": "comment"
    },
    "2628": {
        "file_id": 278,
        "content": "        related_dimension = related_video['dimension']\n        # no tag here? you might want more!\n    breakpoint()",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anime_compilation_video_metadata.py:161-163"
    },
    "2629": {
        "file_id": 278,
        "content": "Checking video dimension and no tag found, further processing or error handling might be required.",
        "type": "comment"
    },
    "2630": {
        "file_id": 279,
        "content": "/tests/anime_highlight_cuts/theme_collector/anilist_to_anidb.py",
        "type": "filepath"
    },
    "2631": {
        "file_id": 279,
        "content": "The code is fetching anime information from Anilist using the AnilistPython API and storing anilist_ids for specific anime. It then prints the anime details, including name_romaji and name_english, and separates them with a horizontal line. The code also mentions a potential step to search for the same anime in anidb but it is not implemented in this snippet.",
        "type": "summary"
    },
    "2632": {
        "file_id": 279,
        "content": "anilist_ids = [\n    112788,  # 海边的异邦人\n    14813,  # Yahari Ore no Seishun Love Come wa Machigatteiru.\n]\n# first let's get name.\nfrom AnilistPython import Anilist\nanilist = Anilist()\nfor anilist_id in anilist_ids:\n    anime = anilist.get_anime_with_id(anilist_id)\n    # what about alias?\n    print(anime)\n    print(\"=\" * 20)\n    romaji = anime.get(\"name_romaji\", None)\n    english = anime.get(\"name_english\", None)\n    # genres = anime.get(\"genres\", []) # not so important. we don't have understanding.\n    # and you will search again.\n    # what is this manual select?\n    # anime2 = anilist.get_anime(romaji) # shit?\n    # print(anime2) # it will just be the same. no shit.\n    # print(\"=\" * 20)\n    # well let's search in anidb. get different names.",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anilist_to_anidb.py:1-25"
    },
    "2633": {
        "file_id": 279,
        "content": "The code is fetching anime information from Anilist using the AnilistPython API and storing anilist_ids for specific anime. It then prints the anime details, including name_romaji and name_english, and separates them with a horizontal line. The code also mentions a potential step to search for the same anime in anidb but it is not implemented in this snippet.",
        "type": "comment"
    },
    "2634": {
        "file_id": 280,
        "content": "/tests/anime_highlight_cuts/theme_collector/anidb_search_parse.py",
        "type": "filepath"
    },
    "2635": {
        "file_id": 280,
        "content": "This code searches AniDB for anime using a specified query and fake user agent, extracting title and link from the resulting HTML table. It then uses pandas to convert the table data into a DataFrame, retrieves video data as dictionaries, and prints keys of each dictionary.",
        "type": "summary"
    },
    "2636": {
        "file_id": 280,
        "content": "url = \"https://anidb.net/anime/\"\n# query = \"Yahari Ore no Seishun Lovecome wa Machigatte Iru.\"\nquery = \"Yahari Ore no Seishun Love Come wa Machigatteiru.\"  # this will guide you to something different.\nparams = {\"adb.search\": query, \"do.update\": \"Search\", \"noalias\": 1}\nimport pandas\nimport requests\nimport fake_useragent\nua = fake_useragent.UserAgent()\nr = requests.get(\n    url, params=params, headers={\"User-Agent\": ua.random}\n)  # beautiful. really?\nstatus_code = r.status_code\nprint(\"STATUS CODE?\", status_code)\nassert status_code == 200\ntext = r.text\nfrom bs4 import BeautifulSoup\nsoup = BeautifulSoup(text, \"html.parser\")\n# print(soup) # forbidden? wtf?\n# breakpoint()\nimport pandas\n# table = soup.find('table')\ntable = soup.find(\"table\", attrs={\"class\": \"animelist\"})\nif not table:\n    print(\"table not found.\")\n    # you may want to change user agent.\n    breakpoint()\n    # or it is just a page jump. directly to your anime.\nelse:\n    table_str = str(table)\n    # ['No', 'Image', 'Title', 'Award', 'Type', 'Eps', 'Rating', 'Average', 'Reviews', 'User', 'Aired', 'Ended']",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anidb_search_parse.py:1-38"
    },
    "2637": {
        "file_id": 280,
        "content": "This code is searching for anime on AniDB using the specified query. It makes a GET request with the query and fake user agent to ensure an accurate search result. The code checks if a table containing the search results is found, and if not, it may suggest changing the user agent or the page could be a page jump directly to the anime. The code uses BeautifulSoup to parse the HTML content of the response.",
        "type": "comment"
    },
    "2638": {
        "file_id": 280,
        "content": "    # where is the damn link?\n    for title in table.find_all(\"td\", attrs={\"data-label\": \"Title\"}):\n        title_ref = table.find(\"a\")\n        title_text = title_ref.text\n        title_link = title_ref[\"href\"]\n        print(f\"[{title_link}] - {title_text}\")\n    data = pandas.read_html(table_str)[0]  # must be the first table.\n    # now you have it. sorted?\n    # print(data)\n    # breakpoint()\n    for index, videoDataFrame in data.iterrows():\n        videoData = videoDataFrame.to_dict()\n        print(videoData.keys())\n        # Main Title?\n        breakpoint()\n        # title = videoData['Title']\n        # # where's the damn link? we don't need such thing.\n        # aired, ended = videoData['Aired'], videoData['Ended']\n        # print(f'[{index}] - {title}')",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anidb_search_parse.py:39-57"
    },
    "2639": {
        "file_id": 280,
        "content": "The code is searching for a specific table on an anime website, extracting the title and link from each row. It then reads the HTML table into a pandas DataFrame, iterates over the rows to obtain the video data as a dictionary, and finally prints the keys of each video's data dictionary.",
        "type": "comment"
    },
    "2640": {
        "file_id": 281,
        "content": "/tests/anime_highlight_cuts/theme_collector/anidb_anime_parse.py",
        "type": "filepath"
    },
    "2641": {
        "file_id": 281,
        "content": "Code imports libraries and functions, uses BeautifulSoup to parse AniDB webpage for specific elements, handles potential null values with 'maybe' function, and reads data into a DataFrame using pandas.",
        "type": "summary"
    },
    "2642": {
        "file_id": 281,
        "content": "# -*- parsing: pep505 -*-\n# import pep505\n# pep505.activate()\n# shit?\nurl = \"https://anidb.net/anime/9310\"\n# from pymonad.maybe import Nothing, Just\n# https://github.com/acaos/python-pep505\nfrom pymaybe import maybe\n# def checkNothing(value):\n#     if value in [None, 0, -1, [], {}, ()]:\n#         return Nothing\n#     return Just(value)\nimport requests\nimport fake_useragent\nua = fake_useragent.UserAgent()\n# r = requests.get(url, headers={\"User-Agent\": ua.random})\n# r.raise_for_status()\n# # assert r.status_code == 200\n# text = r.text\n# with open(\"anidb_info.html\", \"w+\") as f:\n#     f.write(text)\nwith open(\"anidb_info.html\", \"r\") as f:\n    text = f.read()\nfrom bs4 import BeautifulSoup\nsoup = BeautifulSoup(text, \"html.parser\")\n# must be non-empty.\nsimilarAnime = soup.find(attrs={\"id\": \"similaranime\"})\nindirectRelated = soup.find(attrs={\"id\": \"relations_indirect\"})\ndirectRelated = soup.find(attrs={\"id\": \"relations_direct\"})  # it could be none.\ntables = soup.find_all(\"table\")  # shit.\n# null safety?\n# pep 505:\n# https://peps.python.org/pep-0505/",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anidb_anime_parse.py:1-43"
    },
    "2643": {
        "file_id": 281,
        "content": "The code is importing necessary libraries and functions, parsing a webpage's HTML using BeautifulSoup, and finding specific elements on the page. It appears to be scraping data from AniDB for similar or related anime information. The use of 'maybe' might indicate null safety measures are being implemented, possibly for handling potential None values in the data.",
        "type": "comment"
    },
    "2644": {
        "file_id": 281,
        "content": "# videoInfo = checkNothing(soup.find(\"div\", attrs={\"class\": [\"pane\", \"info\"]})).maybe(\n#     Nothing, lambda x: x.find(\"table\")\n# )\nvideoInfo = maybe(soup.find(\"div\", attrs={\"class\": [\"pane\", \"info\"]})).find(\"table\")\n# if videoInfo:\n# videoInfo = videoInfo.find('table')\n# videoTitles = checkNothing(soup.find(\"div\", attrs={\"class\": [\"pane\", \"titles\"]})).maybe(\n#     Nothing, lambda x: x.find(\"table\")\n# )\nvideoTitles = maybe(soup.find(\"div\", attrs={\"class\": [\"pane\", \"titles\"]})).find(\"table\")\n# if videoTitles:\n# videoTitles = videoTitles.find('table')\n# i think monad is good.\n# import pandas\n# SAData = pandas.read_html(similarAnime)\n# print(SAData)\nbreakpoint()",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/anidb_anime_parse.py:45-67"
    },
    "2645": {
        "file_id": 281,
        "content": "Code snippet is parsing HTML using BeautifulSoup to find specific elements (videoInfo and videoTitles) from a webpage. It uses maybe() function for handling potential missing or null values, and it imports pandas library to potentially read HTML data into a DataFrame.",
        "type": "comment"
    },
    "2646": {
        "file_id": 282,
        "content": "/tests/anime_highlight_cuts/bittorrent_downloader/webtorrent_streaming_test_cut_partial_download.mjs",
        "type": "filepath"
    },
    "2647": {
        "file_id": 282,
        "content": "The code downloads videos using Webtorrent, handles temporary directories and exceptions but has string concatenation issues. It suggests Unix domain sockets for performance improvement, uses FFmpeg to download segments, handles progress/errors and terminates upon torrent completion, though unpipe is unused and readstream may show progress issues.",
        "type": "summary"
    },
    "2648": {
        "file_id": 282,
        "content": "// webtorrent@^1.5.8\n// version mismatch?\n// nope. check how webtorrent-cli works. your code sucks.\n// now: 2.0.1\n// you make countdowns. you use managed temporary directories. you use port within range.\n// you might want a single, unified server instance. in that case you will manage resources within server, which could be error prone?\nvar torrentPath=\"/Users/jamesbrown/Downloads/anime_download/[Kamigami&VCB-Studio] Yahari Ore no Seishun Lovecome wa Machigatte Iru. [Ma10p_1080p].torrent\"\nvar selectedFilePath=\"[Kamigami&VCB-Studio] Yahari Ore no Seishun Lovecome wa Machigatte Iru. [Ma10p_1080p]/SPs/[Kamigami&VCB-Studio] Yahari Ore no Seishun Lovecome wa Machigatte Iru. [CM01][Ma10p_1080p][x265_flac].mkv\" // this is the goddamnly short mkv.\n// var selectedFilePath=\"[Kamigami&VCB-Studio] Yahari Ore no Seishun Lovecome wa Machigatte Iru. [Ma10p_1080p]/[Kamigami&VCB-Studio] Yahari Ore no Seishun Lovecome wa Machigatte Iru. [OVA][Ma10p_1080p][x265_flac].mkv\" // this is long\n// require_esm = require('esm')(module)",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/webtorrent_streaming_test_cut_partial_download.mjs:2-18"
    },
    "2649": {
        "file_id": 282,
        "content": "This code sets the torrent path and selected file path for a video download using Webtorrent. It uses managed temporary directories and considers using a single server instance, which could potentially manage resources within the server and lead to error-prone situations.",
        "type": "comment"
    },
    "2650": {
        "file_id": 282,
        "content": "// const{WebTorrent} = require_esm('webtorrent').default\n// console.log('IMPORT PATH?',process.env.NODE_PATH)\n// this system sucks. it does not support string concatenation.\n// maybe you can execute command to symlink global node_modules automatically? nope in javascript but in shell script, or it will not run as expected, since the import statements are running before anything would. \nimport ffmpeg from 'fluent-ffmpeg'\nimport fs from 'fs'\n// try {\nfs.rmdirSync('./[Kamigami&VCB-Studio] Yahari Ore no Seishun Lovecome wa Machigatte Iru. [Ma10p_1080p]',{recursive: true})\n// maybe we shall not catch this exception? handle it yourself!\n// }\n// catch(e) { // you can omit the (e)\n//     // console.log(\"GIVEN DIRECTORY DOES NOT EXIST\")\n//     // it will execute even if the directory does not exist.\n//     console.log(\"UNKNOWN ERROR WHILE REMOVING DIRECTORY:\")\n//     console.log(e)\n// }\n// fuck it. let's symlink the NODE_PATH to here.\n// https://github.com/nodejs/node/issues/38687\n// https://nodejs.org/api/esm.html#esm_no_node_path",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/webtorrent_streaming_test_cut_partial_download.mjs:19-41"
    },
    "2651": {
        "file_id": 282,
        "content": "This code attempts to import `WebTorrent` and `fluent-ffmpeg`, remove a directory, and symlink the NODE_PATH to the current location. It seems to be encountering issues with the system not supporting string concatenation in imports and handling exceptions.",
        "type": "comment"
    },
    "2652": {
        "file_id": 282,
        "content": "// https://nodejs.org/api/esm.html\n// no template string available. shit.\n// import { Readable } from 'stream'\nimport WebTorrent from 'webtorrent'\n// // const WebTorrent = await import('webtorrent')\nconsole.log(\"WEBTORRENT OBJECT?\",WebTorrent)\nconst client=new WebTorrent({dht: true}) // nothing reading out. guess this is fucked.\n// please cache files under some KNOWN directories. otherwise, i will be fucked.\nconst serverPort=8970\nconst instance=client.createServer()\ninstance.server.listen(serverPort) // not random port? not zero? \nconst config={}\n// https://github.com/webtorrent/webtorrent/blob/master/docs/api.md#clientaddtorrentid-opts-function-ontorrent-torrent-\nconfig.path=process.cwd() // download to current directory?\n// pass different temp directory name for different torrents to prevent name clash? but what about the streaming URL?\n// default=`/tmp/webtorrent/`\n// now i fucking got you!\n// add trackers?\n// config.announce=[\"\"]\nclient.add(torrentPath,config,(torrent) => {\n    var selectedFile=torrent.files.find(file => {",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/webtorrent_streaming_test_cut_partial_download.mjs:42-72"
    },
    "2653": {
        "file_id": 282,
        "content": "Code imports WebTorrent, creates a new client with DHT enabled, starts a server on port 8970, adds a torrent from the specified path using the default configuration, and searches for the desired file in the torrent's files.",
        "type": "comment"
    },
    "2654": {
        "file_id": 282,
        "content": "        // console.log(\"FILENAME?\", file.name)\n        // it will only select the first file matching the criterion.\n        // return file.name.endsWith('.mkv')\n        return file.path==selectedFilePath\n    })\n    // console.log(\"SELECTED FILE?\")\n    // console.log(selectedFile)\n    // exit here?\n    // process.exit()\n    // now pass to fluent-ffmpeg.\n    // https://github.com/leeroybrun/webtorrent-transcode\n    setInterval(() => {console.log(\"SPEED?\",client.downloadSpeed)},2000) // why speed is zero now? wtf? are you finished?\n    // *******************READSTREAM RELATED*******************\n    // https://github.com/webtorrent/webtorrent/issues/2464\n    // const stream = Readable.from(selectedFile) // are you sure?\n    // this sucks. pipe is not seekable. consider something else? (like unix domain socket)\n    // var stream=selectedFile.createReadStream() // not working! fuck.\n    // // // var stream = fs.createReadStream(\"/Users/jamesbrown/Downloads/anime_download/[Sakurato] Onii-chan wa Oshimai! [01][AVC-8bit 1080p AAC][CHT].mp4\")",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/webtorrent_streaming_test_cut_partial_download.mjs:73-95"
    },
    "2655": {
        "file_id": 282,
        "content": "The code is filtering files based on their name or path to match a predetermined file. It then logs the download speed periodically and attempts to create a readable stream from the selected file. The comments indicate frustration with non-working solutions, suggesting alternative approaches like Unix domain sockets or other methods for better performance.",
        "type": "comment"
    },
    "2656": {
        "file_id": 282,
        "content": "    // stream.unpipe=(nodeStream) => { } //doing nothing?\n    // stream.on('error',function(err) {\n    //     console.log('STREAM ERROR?',err);\n    //     // just ignore it?\n    // })\n    // console.log(\"STREAM?\",stream)\n    // while(true) {\n    //     var buffer=stream.read(200)\n    //     console.log(\"READING:\",buffer)\n    // }\n    // var reading=false\n    // stream.on('readable',function() {\n    //     if(!reading) {\n    //         reading=true\n    //         console.log(\"STREAM READABLE\")\n    //         ffmpeg(stream).ffprobe((err,data) => {\n    //             if(err) {\n    //                 console.log(\"FFPROBE ERROR:\",err)\n    //             } else {\n    //                 console.log(\"FFPROBE METADATA:\",data)\n    //             }\n    //             process.exit()\n    //         })\n    //     }\n    // })\n    // duration is fake.\n    // ffmpeg(stream).ffprobe((err,data) => {\n    //     if(err) {\n    //         console.log(\"FFPROBE ERROR:\",err)\n    //     } else {\n    //         console.log(\"FFPROBE METADATA:\",data)",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/webtorrent_streaming_test_cut_partial_download.mjs:96-130"
    },
    "2657": {
        "file_id": 282,
        "content": "This code appears to be attempting to read a stream using ffmpeg and retrieve metadata. It handles potential errors, but the unpipe function seems unused, and it might be designed for testing purposes or handling partial downloads. The while loop for continuous reading may not be functional as well.",
        "type": "comment"
    },
    "2658": {
        "file_id": 282,
        "content": "    //     }\n    //     // process.exit()\n    // })\n    // ffmpeg(stream).seekInput('0:10').duration(\"0:15\").on('progress',function(progress) {\n    //     // why not showing progress?\n    //     console.log('FFmpeg Processing: '+progress.percent+'% done');\n    // }).on('end',() => {\n    //     console.log(\"FFMPEG EXECUTION COMPLETE?\")\n    //     // let's rerun.\n    //     // instance.close()\n    //     client.destroy()\n    //     process.exit()\n    //     // the time range simply does not exist.\n    // }).outputOptions(['-c copy','-y']).output('output.mkv').run() // still not working?\n    // *******************READSTREAM RELATED*******************\n    // how about let's use url?\n    // how to urlencode?\n    // var urlSuffix = encodeURIComponent(selectedFilePath)\n    var fileRequestUrl=`http://localhost:${serverPort}`+selectedFile.streamURL\n    // console.log(\"STREAMING URL?\",fileRequestUrl)\n    // http://localhost:8970/webtorrent/421d78cadb5e1bb4fc1fec9dc2d6680e810c13c2/%5BKamigami&VCB-Studio%5D%20Yahari%",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/webtorrent_streaming_test_cut_partial_download.mjs:131-158"
    },
    "2659": {
        "file_id": 282,
        "content": "This code snippet attempts to download a video file, process it using FFmpeg and stream it over Webtorrent. It encodes the streaming URL for the video and logs progress during the FFmpeg processing. The code may have issues with the FFmpeg processing not showing progress and potential problems in the readstream implementation.",
        "type": "comment"
    },
    "2660": {
        "file_id": 282,
        "content": "20Ore%20no%20Seishun%20Lovecome%20wa%20Machigatte%20Iru.%20%5BMa10p_1080p%5D/SPs/%5BKamigami&VCB-Studio%5D%20Yahari%20Ore%20no%20Seishun%20Lovecome%20wa%20Machigatte%20Iru.%20%5BCM01%5D%5BMa10p_1080p%5D%5Bx265_flac%5D.mkv\n    //shit?\n    // ffmpeg(fileRequestUrl).ffprobe((err,data) => {\n    //     if(err) {\n    //         console.log(\"FFPROBE ERROR:\",err)\n    //     } else {\n    //         console.log(\"FFPROBE METADATA:\",data)\n    //         var duration=data.format.duration\n    //         console.log(\"VIDEO DURATION?\",duration)\n    //         // you'd better read this. you fuck!\n    //         // i ask for 10 secs.\n    //         // output still contains metadata. but do we have subtitles?\n    //         // seeking is not so accurate but in minutes? easy.\n    //         // for file under 1 minute, please do not seek ok? (seek locally?)\n    //         // do not seek for segments that are too short. seek larger segments!\n    ffmpeg(fileRequestUrl).seekInput('0:10').duration(\"0:15\").on('progress',function(progress) {",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/webtorrent_streaming_test_cut_partial_download.mjs:158-176"
    },
    "2661": {
        "file_id": 282,
        "content": "This code uses FFmpeg to seek and download a video segment from the given URL. It seeks to 10 seconds, sets the duration to 15 seconds, and handles progress updates.",
        "type": "comment"
    },
    "2662": {
        "file_id": 282,
        "content": "        console.log('FFmpeg Processing: '+progress.percent+'% done');\n    }).on('end',() => {\n        console.log(\"FFMPEG EXECUTION COMPLETE?\")\n        // let's rerun.\n        instance.close()\n        client.destroy()\n        process.exit()\n        // the time range simply does not exist.\n    }).outputOptions(['-c copy',\n        '-y']).output('output.mkv').run()\n    // not top-level function or async function. fuck.\n})",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/webtorrent_streaming_test_cut_partial_download.mjs:177-188"
    },
    "2663": {
        "file_id": 282,
        "content": "The code is closing the FFmpeg instance and destroying the client after a torrent download completes. It also logs progress updates during the download process and ends the program execution upon completion.",
        "type": "comment"
    },
    "2664": {
        "file_id": 283,
        "content": "/tests/anime_highlight_cuts/bittorrent_downloader/torrent_analyzer.py",
        "type": "filepath"
    },
    "2665": {
        "file_id": 283,
        "content": "The code snippet imports libraries, defines paths and analyzes a torrent file using torrent_parser. It prints the data, checks for multiple files, stores their names and lengths (if applicable), formats size, prints file details, writes filenames to JSON, and prepares the file for further processing.",
        "type": "summary"
    },
    "2666": {
        "file_id": 283,
        "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport os\n# single file.\n# torrent_path = \"[桜都字幕組] 不當哥哥了！ _ Onii-chan wa Oshimai! [01][1080p][繁體內嵌].torrent\"\ntorrent_path = \"[Kamigami&VCB-Studio] Yahari Ore no Seishun Lovecome wa Machigatte Iru. [Ma10p_1080p].torrent\"\nbasepath = \"/Users/jamesbrown/Downloads/anime_download\"\ntorrent_path = os.path.join(basepath, torrent_path)\n# analyze this torrent file.\nimport torrent_parser as tp\ndata = tp.parse_torrent_file(torrent_path)\nimport rich\nrich.print(data)\n# will be complete name later?\nsingle_file = not('files' in data['info'].keys())\n# data['info']['name'] \n# length will be total length?\n# data['info']['length']\n# breakpoint()\n# does it preserve the order?\n# import humanize\n# well.\nfnames=[]\nimport json\nfrom humanfriendly import format_size\nif not single_file:\n    for index, fileInfo in enumerate(data['info']['files']):\n        aria2c_index = index+1\n        length = fileInfo['length']\n        path = fileInfo['path'] # multiple strings in a list\n        joined_path = \"/\".join(path)",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/torrent_analyzer.py:1-41"
    },
    "2667": {
        "file_id": 283,
        "content": "Code snippet imports necessary libraries, defines a torrent file path and basepath for downloads, joins the paths, analyzes the torrent file using torrent_parser, prints the parsed data, checks if the torrent contains multiple files or not, stores the name and length of each file (if applicable), converts file paths to single string format, and finally prepares the file for further processing.",
        "type": "comment"
    },
    "2668": {
        "file_id": 283,
        "content": "        filesize_human_readable = format_size(length)\n        print(f\"[{aria2c_index}] ** [{filesize_human_readable}] ** {path[-1]}\")\n        # the index is right.\n        fnames.append(path[-1])\n        print(f\"FULLPATH: {joined_path}\")\nwith open(\"test_filenames.json\",'w+') as f:\n    f.write(json.dumps(fnames))",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/torrent_analyzer.py:42-49"
    },
    "2669": {
        "file_id": 283,
        "content": "This code snippet formats the file size in human-readable format and prints it along with the aria2c index, file name, and full path. It then stores the filenames in a list and writes them to a JSON file named \"test_filenames.json\".",
        "type": "comment"
    },
    "2670": {
        "file_id": 284,
        "content": "/tests/anime_highlight_cuts/bittorrent_downloader/subtitle_extractor.py",
        "type": "filepath"
    },
    "2671": {
        "file_id": 284,
        "content": "This code references three different tools for extracting subtitles from a video file: mkvextract, ffmpeg, and optical character recognition (OCR). It suggests using the appropriate tool based on the source being processed, with the assumption that it's easier to extract subtitles from fixed locations in Bangumi videos.",
        "type": "summary"
    },
    "2672": {
        "file_id": 284,
        "content": "# use mkvextract:\n# https://github.com/jorti/extract-subs/blob/master/extract-subs.py\n# use ffmpeg:\n# https://github.com/fdenivac/ffextract-subtitles/blob/master/ffextract-subtitles.py\n# use ocr to extract subtitles. since this is bangumi, it is easy to extract from fixed location.",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/subtitle_extractor.py:1-7"
    },
    "2673": {
        "file_id": 284,
        "content": "This code references three different tools for extracting subtitles from a video file: mkvextract, ffmpeg, and optical character recognition (OCR). It suggests using the appropriate tool based on the source being processed, with the assumption that it's easier to extract subtitles from fixed locations in Bangumi videos.",
        "type": "comment"
    },
    "2674": {
        "file_id": 285,
        "content": "/tests/anime_highlight_cuts/bittorrent_downloader/nyaa_torrent_file_list.py",
        "type": "filepath"
    },
    "2675": {
        "file_id": 285,
        "content": "This code fetches data from the Nyaa.si website using requests library, parses it using NyaaPy's utils and torrent modules, and prints the parsed JSON data and the corresponding data class object.",
        "type": "summary"
    },
    "2676": {
        "file_id": 285,
        "content": "url = \"https://nyaa.si/view/1627038\"\nimport requests\nfrom NyaaPy import utils, torrent\nr = requests.get(url)\nSITE = utils.TorrentSite.NYAASI\njson_data = utils.parse_single(request_text=r.text, site=SITE)\ndata_class = torrent.json_to_class(json_data)\nimport rich\n# json_data['seeders']\n# json_data['title']\n# json_data['files']\nrich.print(json_data)\nprint()\nprint(\"_\"*20)\nprint()\nrich.print(data_class)\nbreakpoint()",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/nyaa_torrent_file_list.py:1-25"
    },
    "2677": {
        "file_id": 285,
        "content": "This code fetches data from the Nyaa.si website using requests library, parses it using NyaaPy's utils and torrent modules, and prints the parsed JSON data and the corresponding data class object.",
        "type": "comment"
    },
    "2678": {
        "file_id": 286,
        "content": "/tests/anime_highlight_cuts/bittorrent_downloader/nyaa_api_connector.py",
        "type": "filepath"
    },
    "2679": {
        "file_id": 286,
        "content": "The Python script uses requests and BeautifulSoup to search the Nyaa torrent site for anime with 7+ seeders, retrieves results, stores in \"output.html\", and checks if more pages exist using a template and NyaaPy library for torrent handling.",
        "type": "summary"
    },
    "2680": {
        "file_id": 286,
        "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport requests\nurl = \"https://nyaa.si\" # change this to mirror sites.\nMIN_SEEDERS=7 # must be greater than this.\nquery = \"oniichan wa oshimai! 01\"\nsort_term = \"seeders\"\nanime_categories = {\n    \"Anime\": \"1_0\",\n    \"Anime - Anime Music Video\": \"1_1\",\n    \"Anime - English-translated\": \"1_2\",\n    \"Anime - Non-English-translated\": \"1_3\",\n    \"Anime - Raw\": \"1_4\",\n}\ncategory_code = anime_categories[\"Anime\"]  # anime\npage = 1  # start page: 1\nend_of_page = False\n# better not to use rss version since it will not sort terms.\nparams = dict(f=0, c=category_code, q=query, s=sort_term, o=\"desc\", p=page)\n# better parse it yourself first huh?\n# r = requests.get(url, params=params)\n# assert r.code == 200\n# text = r.text\nwith open(\"output.html\", \"r\") as f:\n    text = f.read()\nfrom bs4 import BeautifulSoup\n# with open(\"output.html\",'w+') as f:\n#    f.write(text)\nsoup = BeautifulSoup(text, \"html.parser\")\n# breakpoint()\nimport parse\ntemplate = \"Displaying results {start:d}-{end:d} out of {total:d} results.\"",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/nyaa_api_connector.py:1-48"
    },
    "2681": {
        "file_id": 286,
        "content": "The code is a Python script that uses the requests library to make an API request to the Nyaa torrent site. It searches for a specific anime with 7 or more seeders, retrieves the results, and stores them in a file named \"output.html\". The BeautifulSoup library is used to parse the HTML response, and the parse module seems to be utilized for further processing.",
        "type": "comment"
    },
    "2682": {
        "file_id": 286,
        "content": "banner = soup.find(\"div\", class_=\"pagination-page-info\").text\npagination_info = banner.split(\"\\n\")[0]\npagination_info_result = parse.parse(template, pagination_info)\nif pagination_info_result:\n    if pagination_info_result[\"total\"] == pagination_info_result[\"end\"]:\n        print(\"Reached end of page.\")\n        end_of_page = True\nfrom NyaaPy import utils\nSITE = utils.TorrentSite.NYAASI\njson_info = utils.parse_nyaa(request_text=text, limit=None, site=SITE)\nimport rich\nrich.print(json_info)\n# breakpoint()\nfor videoInfo in json_info:\n    seeders = int(videoInfo['seeders'])\n    seeders_enough = seeders>=MIN_SEEDERS\n    print('seeders?',seeders)\n    print(\"seeders enough?\", seeders_enough)\n    # videoInfo['id'] -> \"https://nyaa.si/view/{}\"\n# you can also download torrent file for only file info.",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/nyaa_api_connector.py:50-77"
    },
    "2683": {
        "file_id": 286,
        "content": "The code retrieves the banner from a webpage, extracts pagination information, and checks if it has reached the end of the page. It then parses the response using a template and determines if there are enough seeders for each video info. The code prints the number of seeders and whether they are enough based on a minimum seeders threshold. The code uses the NyaaPy library for site-specific torrent handling.",
        "type": "comment"
    },
    "2684": {
        "file_id": 287,
        "content": "/tests/anime_highlight_cuts/bittorrent_downloader/name_resolution_parsing_chapter_recognition.py",
        "type": "filepath"
    },
    "2685": {
        "file_id": 287,
        "content": "The code utilizes ffmpeg to extract subtitles, sets anime series constants, filters series names, and reads filenames from a JSON. It checks for bangume names, identifies episode index location, compares with expected position, and prints the episode index or displays \"EPISODE?\" if not recognized.",
        "type": "summary"
    },
    "2686": {
        "file_id": 287,
        "content": "subtitle_types = [\"ass\", \"srt\"]\nvideo_types = [\n    \"mkv\",\n    \"mov\",\n    \"mp4\",\n    \"flv\",\n    \"avi\",\n    \"ogv\",\n    \"webm\",\n    \"ts\",\n    \"wmv\",\n    \"webm\",\n    \"m4v\",\n    \"3gp\",\n]\n# use ffmpeg for subtitle extraction?\nfiletypes = {\"subtitle\": subtitle_types, \"video\": video_types}\nBangumi_Name = \"Yahari Ore no Seishun Lovecome wa Machigatte Iru.\".strip()\nepisodeIndex = 3\nchinese_simplified_sub_types = [\"chs\", \"简体\", \"简日\"]\nchinese_traditional_sub_types = [\"繁日\", \"繁体\", \"繁體\", \"cht\"]\nimport json\n# replace non-alphanumeric charcters.\nepisode_formatter = lambda episode_index: str(episode_index).zfill(2)\nimport re\n# also replace all double spaces.\ndef double_space_replacer(chars: str):\n    if \"  \" in chars:\n        chars = chars.replace(\"  \", \" \")\n        return double_space_replacer(chars)\n    else:\n        return chars\nalphanumeric_filter = lambda chars: double_space_replacer(\n    re.sub(r\"[^a-z0-9]\", \" \", chars)\n)\nbangume_name_lower_alphanumeric = alphanumeric_filter(Bangumi_Name.lower())\nwith open(\"test_filenames.json\", \"r\") as f:",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/name_resolution_parsing_chapter_recognition.py:1-46"
    },
    "2687": {
        "file_id": 287,
        "content": "This code defines file types for subtitles and videos, uses ffmpeg for subtitle extraction, defines constants related to a specific anime series, applies an alphanumeric filter to the anime name, and reads filenames from a JSON file.",
        "type": "comment"
    },
    "2688": {
        "file_id": 287,
        "content": "    fnames = json.loads(f.read())\nfor fname in fnames:\n    fname_lower = fname.lower()\n    fname_lower_alphanumeric = alphanumeric_filter(fname_lower)\n    file_extension = fname_lower.split(\".\")[-1]\n    current_file_type = \"unknown\"\n    for filetype, file_extensions in filetypes.items():\n        if file_extension in file_extensions:\n            current_file_type = filetype\n            break\n    print(f\"<{current_file_type}> {fname}\")\n    print(fname_lower_alphanumeric)\n    substring_location_start = fname_lower_alphanumeric.find(\n        bangume_name_lower_alphanumeric\n    )\n    if substring_location_start!=-1:\n        substring_location_end = substring_location_start + len(\n        bangume_name_lower_alphanumeric\n    )\n        assert fname_lower_alphanumeric[substring_location_start: substring_location_end] == bangume_name_lower_alphanumeric\n        episodeIndexLocation = fname_lower_alphanumeric.find(f\" {episode_formatter(episodeIndex)} \")\n        if episodeIndexLocation!=-1:\n            if episodeIndexLocation+1>=substring_location_end:",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/name_resolution_parsing_chapter_recognition.py:47-71"
    },
    "2689": {
        "file_id": 287,
        "content": "Reading file names from a JSON, filtering, and determining their types. Checking if the bangume name substring is present in the filename. Identifying the episode index location and comparing it with the expected position.",
        "type": "comment"
    },
    "2690": {
        "file_id": 287,
        "content": "                print(\"EPISODE?\") # this is the index we want\n                print(episodeIndex)",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/name_resolution_parsing_chapter_recognition.py:72-73"
    },
    "2691": {
        "file_id": 287,
        "content": "Code snippet checks the episode index and prints it. If the desired index is not recognized, it displays \"EPISODE?\" for clarification.",
        "type": "comment"
    },
    "2692": {
        "file_id": 288,
        "content": "/tests/anime_highlight_cuts/bittorrent_downloader/name_fuzzy.py",
        "type": "filepath"
    },
    "2693": {
        "file_id": 288,
        "content": "This code initializes two empty lists, 'filenames' and 'bangumi_names'. 'bangumi_names' contains two string values representing anime titles.",
        "type": "summary"
    },
    "2694": {
        "file_id": 288,
        "content": "filenames = []\nbangumi_names= [\"Yahari Ore no Seishun Lovecome wa Machigatte Iru.\",\"Yahari Ore no Seishun Love Come wa Machigatteiru.\"]",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/name_fuzzy.py:1-3"
    },
    "2695": {
        "file_id": 288,
        "content": "This code initializes two empty lists, 'filenames' and 'bangumi_names'. 'bangumi_names' contains two string values representing anime titles.",
        "type": "comment"
    },
    "2696": {
        "file_id": 289,
        "content": "/tests/anime_highlight_cuts/bittorrent_downloader/make_node_symlink.sh",
        "type": "filepath"
    },
    "2697": {
        "file_id": 289,
        "content": "This script creates a symbolic link named \"node_modules\" pointing to the $NODE_PATH, presumably to resolve or fix an issue with file locations.",
        "type": "summary"
    },
    "2698": {
        "file_id": 289,
        "content": "ln -s $NODE_PATH node_modules # to fix shit.",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/bittorrent_downloader/make_node_symlink.sh:1-1"
    },
    "2699": {
        "file_id": 289,
        "content": "This script creates a symbolic link named \"node_modules\" pointing to the $NODE_PATH, presumably to resolve or fix an issue with file locations.",
        "type": "comment"
    }
}