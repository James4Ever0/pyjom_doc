{
    "2600": {
        "file_id": 282,
        "content": "            \"duration\": audio_duration,\n            \"layers\": [\n                {\n                    \"type\": \"image-overlay\",\n                    \"path\": cat_image,\n                    \"position\": \"center\",\n                    \"width\": 1,\n                    \"height\": 1,\n                },\n                {\n                    # \"type\": \"title-background\",\n                    \"type\": \"title\",\n                    \"text\": title,\n                    # \"background\": \"#000000\",\n                    \"fontPath\": fontPath,\n                    \"textColor\": \"#FFFFFF\",\n                },\n                {\"type\": \"audio\", \"path\": audio_path},  # order matters!\n            ],\n        },\n        {\n            # \"transition\": \"fade\",  # or we just use random?\n            \"duration\": video_duration,\n            \"layers\": [\n                {\"type\": \"video\", \"path\": video_path},  # order is important.\n                {\n                    \"type\": \"image-overlay\",\n                    \"path\": up_image_path,\n                    \"position\": \"top-left\",",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py:58-86"
    },
    "2601": {
        "file_id": 282,
        "content": "This code is creating a video with a cat image overlay, title text, and an audio track. The order of layers is important, and the audio path comes first. The video is then transitioned with a fade effect and combined with another video file, along with an optional top-left image overlay.",
        "type": "comment"
    },
    "2602": {
        "file_id": 282,
        "content": "                    \"width\": up_image_width,  # float numbers.\n                    \"height\": up_image_height,\n                },\n            ],\n        },\n        {\"duration\": 0.5, \"layers\": [{\"type\": \"fill-color\", \"color\": \"#000000\"}]},\n    ],\n}\nfrom lazero.filesystem.io import writeJsonObjectToFile\nwriteJsonObjectToFile(template_name, editlyJson)\nimport subprocess\n# use xvfb you SOB\ncommand = [\n    \"xvfb-run\",\n    \"editly\",\n    template_name,\n]  # no need to specify --out outputPath here\nsubprocess.run(command)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py:87-108"
    },
    "2603": {
        "file_id": 282,
        "content": "Code writes a JSON object for Editly video template, saves it to file, and runs the Editly software using subprocess with xvfb.",
        "type": "comment"
    },
    "2604": {
        "file_id": 283,
        "content": "/tests/bilibili_video_recommendation_server/sample_video/tts.py",
        "type": "filepath"
    },
    "2605": {
        "file_id": 283,
        "content": "This Python script converts text to speech using argparse, argues SSML input, and connects to Microsoft Cognitive Services TTS endpoint. It also handles time fixes, timestamps, and async WebSocket communication with potential API key authentication, runs on an asyncio event loop, and writes audio responses to a file.",
        "type": "summary"
    },
    "2606": {
        "file_id": 283,
        "content": "# 来源 https://github.com/OS984/DiscordBotBackend/blob/3b06b8be39e4dbc07722b0afefeee4c18c136102/NeuralTTS.py\n# A completely innocent attempt to borrow proprietary Microsoft technology for a much better TTS experience\nimport requests\nimport websockets\nimport asyncio\nfrom datetime import datetime\nimport time\nimport re\nimport uuid\nimport argparse\n'''命令行参数解析'''\ndef parseArgs():\n    parser = argparse.ArgumentParser(description='text2speech')\n    parser.add_argument('--input', dest='input', help='SSML(语音合成标记语言)的路径', type=str, required=True)\n    parser.add_argument('--output', dest='output', help='保存mp3文件的路径', type=str, required=False)\n    args = parser.parse_args()\n    return args\n# Fix the time to match Americanisms\ndef hr_cr(hr):\n    corrected = (hr - 1) % 24\n    return str(corrected)\n# Add zeros in the right places i.e 22:1:5 -> 22:01:05\ndef fr(input_string):\n    corr = ''\n    i = 2 - len(input_string)\n    while (i > 0):\n        corr += '0'\n        i -= 1\n    return corr + input_string\n# Generate X-Timestamp all correctly formatted",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:1-35"
    },
    "2607": {
        "file_id": 283,
        "content": "This code is a Python file that utilizes the `argparse` library to parse command-line arguments. The purpose of this script seems to be text-to-speech conversion, where it accepts an SSML (Speech Synthesis Markup Language) input file and outputs an MP3 audio file. It also includes functions for fixing time formats to match American conventions and generating formatted timestamps.",
        "type": "comment"
    },
    "2608": {
        "file_id": 283,
        "content": "def getXTime():\n    now = datetime.now()\n    return fr(str(now.year)) + '-' + fr(str(now.month)) + '-' + fr(str(now.day)) + 'T' + fr(hr_cr(int(now.hour))) + ':' + fr(str(now.minute)) + ':' + fr(str(now.second)) + '.' + str(now.microsecond)[:3] + 'Z'\n# Async function for actually communicating with the websocket\nasync def transferMsTTSData(SSML_text, outputPath):\n    # endpoint1 = \"https://azure.microsoft.com/en-gb/services/cognitive-services/text-to-speech/\"\n    # r = requests.get(endpoint1)\n    # main_web_content = r.text\n    # # They hid the Auth key assignment for the websocket in the main body of the webpage....\n    # token_expr = re.compile('token: \\\"(.*?)\\\"', re.DOTALL)\n    # Auth_Token = re.findall(token_expr, main_web_content)[0]\n    # req_id = str('%032x' % random.getrandbits(128)).upper()\n    # req_id is generated by uuid.\n    req_id = uuid.uuid4().hex.upper()\n    print(req_id)\n    # wss://eastus.api.speech.microsoft.com/cognitiveservices/websocket/v1?TrafficType=AzureDemo&Authorization=bearer%20undefined&X-ConnectionId=577D1E595EEB45979BA26C056A519073",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:36-52"
    },
    "2609": {
        "file_id": 283,
        "content": "This code defines two functions: `getXTime` and `transferMsTTSData`. The `getXTime` function returns the current date and time in a specific format. The `transferMsTTSData` function is an asynchronous function responsible for communicating with a WebSocket endpoint, potentially using an API key to authenticate the request. It generates a unique ID (req_id) and prints it before potentially making the WebSocket connection.",
        "type": "comment"
    },
    "2610": {
        "file_id": 283,
        "content": "    # endpoint2 = \"wss://eastus.tts.speech.microsoft.com/cognitiveservices/websocket/v1?Authorization=\" + \\\n    #     Auth_Token + \"&X-ConnectionId=\" + req_id\n    # 目前该接口没有认证可能很快失效\n    endpoint2 = f\"wss://eastus.api.speech.microsoft.com/cognitiveservices/websocket/v1?TrafficType=AzureDemo&Authorization=bearer%20undefined&X-ConnectionId={req_id}\"\n    async with websockets.connect(endpoint2) as websocket:\n        payload_1 = '{\"context\":{\"system\":{\"name\":\"SpeechSDK\",\"version\":\"1.12.1-rc.1\",\"build\":\"JavaScript\",\"lang\":\"JavaScript\",\"os\":{\"platform\":\"Browser/Linux x86_64\",\"name\":\"Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\",\"version\":\"5.0 (X11)\"}}}}'\n        message_1 = 'Path : speech.config\\r\\nX-RequestId: ' + req_id + '\\r\\nX-Timestamp: ' + \\\n            getXTime() + '\\r\\nContent-Type: application/json\\r\\n\\r\\n' + payload_1\n        await websocket.send(message_1)\n        payload_2 = '{\"synthesis\":{\"audio\":{\"metadataOptions\":{\"sentenceBoundaryEnabled\":false,\"wordBoundaryEnabled\":false},\"outputFormat\":\"audio-16khz-32kbitrate-mono-mp3\"}}}'",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:53-63"
    },
    "2611": {
        "file_id": 283,
        "content": "This code connects to the Microsoft Cognitive Services TTS (Text-to-Speech) websocket endpoint, sends two payloads for speech synthesis, and sets various headers such as Authorization, X-ConnectionId, Content-Type, etc. The current authentication may expire soon, so a new temporary endpoint is used instead of the original one.",
        "type": "comment"
    },
    "2612": {
        "file_id": 283,
        "content": "        message_2 = 'Path : synthesis.context\\r\\nX-RequestId: ' + req_id + '\\r\\nX-Timestamp: ' + \\\n            getXTime() + '\\r\\nContent-Type: application/json\\r\\n\\r\\n' + payload_2\n        await websocket.send(message_2)\n        # payload_3 = '<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xmlns:emo=\"http://www.w3.org/2009/10/emotionml\" version=\"1.0\" xml:lang=\"en-US\"><voice name=\"' + voice + '\"><mstts:express-as style=\"General\"><prosody rate=\"'+spd+'%\" pitch=\"'+ptc+'%\">'+ msg_content +'</prosody></mstts:express-as></voice></speak>'\n        payload_3 = SSML_text\n        message_3 = 'Path: ssml\\r\\nX-RequestId: ' + req_id + '\\r\\nX-Timestamp: ' + \\\n            getXTime() + '\\r\\nContent-Type: application/ssml+xml\\r\\n\\r\\n' + payload_3\n        await websocket.send(message_3)\n        # Checks for close connection message\n        end_resp_pat = re.compile('Path:turn.end')\n        audio_stream = b''\n        while(True):\n            response = await websocket.recv()",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:64-78"
    },
    "2613": {
        "file_id": 283,
        "content": "Sends text to TTS service for synthesis and awaits response. Stores the SSML XML for audio customization. Sends SSML XML payload for final audio output generation. Continuously receives response from websocket until 'turn.end' path detected, storing data in audio_stream variable.",
        "type": "comment"
    },
    "2614": {
        "file_id": 283,
        "content": "            print('receiving...')\n            # Make sure the message isn't telling us to stop\n            if (re.search(end_resp_pat, str(response)) == None):\n                # Check if our response is text data or the audio bytes\n                if type(response) == type(bytes()):\n                    # Extract binary data\n                    try:\n                        needle = b'Path:audio\\r\\n'\n                        start_ind = response.find(needle) + len(needle)\n                        audio_stream += response[start_ind:]\n                    except:\n                        pass\n            else:\n                break\n        with open(f'{outputPath}.mp3', 'wb') as audio_out:\n            audio_out.write(audio_stream)\nasync def mainSeq(SSML_text, outputPath):\n    await transferMsTTSData(SSML_text, outputPath)\ndef get_SSML(path):\n    with open(path,'r',encoding='utf-8') as f:\n        return f.read()\nif __name__ == \"__main__\":\n    args = parseArgs()\n    SSML_text = get_SSML(args.input)\n    output_path = args.output if args.output else 'output_'+ str(int(time.time()*1000))",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:79-107"
    },
    "2615": {
        "file_id": 283,
        "content": "This code snippet is a part of a TTS (Text-to-Speech) server implementation. It receives an audio response from the server, checks if it's text or binary data, and writes the audio to a file. The `mainSeq` function initiates the transfer process by calling `transferMsTTSData` function with SSML text and output path. The `get_SSML` function reads SSML text from input file. The code is run as a main program after parsing command-line arguments using `parseArgs()`.",
        "type": "comment"
    },
    "2616": {
        "file_id": 283,
        "content": "    asyncio.get_event_loop().run_until_complete(mainSeq(SSML_text, output_path))\n    print('completed')\n    # python tts.py --input SSML.xml\n    # python tts.py --input SSML.xml --output 保存文件名",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:108-111"
    },
    "2617": {
        "file_id": 283,
        "content": "This code calls the `mainSeq` function with SSML text and output path, using asyncio event loop to run until completion. It prints \"completed\" upon execution. The two command examples show how to input an SSML file and optionally specify an output filename.",
        "type": "comment"
    },
    "2618": {
        "file_id": 284,
        "content": "/tests/bilibili_video_recommendation_server/send_image_botoy.py",
        "type": "filepath"
    },
    "2619": {
        "file_id": 284,
        "content": "This code uses Botoy library to send images/videos on QQ, defines specific objectives, and sends messages with action.sendFriendPic method while also allowing accompanying text with action.sendFriendText method.",
        "type": "summary"
    },
    "2620": {
        "file_id": 284,
        "content": "# test to broadcast all these things.\n# this method might fail to behave correctly.\n# maybe we need to upload the image and get url? no thanks?\n# we use jpg instead? must use cv2.\n# 暂时用不到转发消息的功能\nfrom botoy import Action\nqq = 917521610\nport = 8784\naction = Action(qq=qq, port=port, host=\"127.0.0.1\")\nuser = 1281727431\nimport base64\nobjective = \"send_image\"\nif objective == 'send_video_ad':\n    link = \"https://b23.tv/DPn1G4p\"\n    title_text = \"真·朋克！揭秘《赛博朋克2077》屏幕之外的魔幻换弹操作\"\n    content = \"观看视频:\\n{}\\n{}\".format(link, title_text)\n    picture_path = \"ad_2_standalone_cover.png\"\n    with open(picture_path, \"rb\") as img_file:\n        b64_string = base64.b64encode(img_file.read())\n    # print(b64_string)\n    result = action.sendFriendPic(user=user, picBase64Buf=b64_string.decode(\"utf-8\"))\n    print(result)\n    action.sendFriendText(user=user, content=content)\n    # send separately.\n    # result = action.sendFriendPic(user=user, picBase64Buf=b64_string.decode('utf-8'),content = content)\nelif objective == 'send_image':\n    # picture_path = \"ad_2.png\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/send_image_botoy.py:1-35"
    },
    "2621": {
        "file_id": 284,
        "content": "The code uses the Botoy library to send images or videos as messages on QQ. It requires the user to define specific objectives like 'send_video_ad' and 'send_image'. The code reads the image file, encodes it into base64, and sends it as a message using the action.sendFriendPic method. Additionally, it can also send accompanying text messages with the action.sendFriendText method.",
        "type": "comment"
    },
    "2622": {
        "file_id": 284,
        "content": "    # picture_path = \"ebegging_setu_transparent.png\"\n    picture_path = \"image_with_text_8.png\"\n    with open(picture_path, \"rb\") as img_file:\n        b64_string = base64.b64encode(img_file.read())\n    # print(b64_string)\n    result = action.sendFriendPic(\n        user=user, picBase64Buf=b64_string.decode(\"utf-8\")\n    )  # better without content.",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/send_image_botoy.py:36-43"
    },
    "2623": {
        "file_id": 284,
        "content": "This code opens a local image file, reads its contents in binary format, encodes the binary data to base64 string representation, and then sends it as a friend picture using the \"sendFriendPic\" function of the \"action\" module.",
        "type": "comment"
    },
    "2624": {
        "file_id": 285,
        "content": "/tests/bilibili_video_recommendation_server/send_image_gif.py",
        "type": "filepath"
    },
    "2625": {
        "file_id": 285,
        "content": "The code is testing to broadcast a picture or gif using the botoy library. The action may fail, so it might be necessary to upload the gif instead of scanning the code within it. It reads the file, encodes it in base64, and sends it as a group message with the provided content.",
        "type": "summary"
    },
    "2626": {
        "file_id": 285,
        "content": "# test to broadcast all these things.\n# this method might fail to behave correctly.\n# maybe we need to upload the\nfrom botoy import Action\nqq = 917521610\nport = 8784\naction = Action(qq=qq, port=port, host=\"127.0.0.1\")\n# user = 1281727431\ngroup = 543780931\nlink = \"https://b23.tv/DPn1G4p\"\ntitle_text = \"真·朋克！揭秘《赛博朋克2077》屏幕之外的魔幻换弹操作\"\ncontent = \"观看视频:\\n{}\\n{}\".format(link, title_text)\nimport base64\n# picture_path = \"qrcode.gif\"\npicture_path = \"anime_masked_overlay.gif\" # how to crop this thing?\n# where is the gif? my god?\n# there is no way to scan the code in the gif. better send the link instead.\nwith open(picture_path, \"rb\") as img_file:\n    b64_string = base64.b64encode(img_file.read())\n# print(b64_string)\nresult = action.sendGroupPic(group=group, picBase64Buf=b64_string.decode(\"utf-8\"), content=content)\nprint(result)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/send_image_gif.py:1-29"
    },
    "2627": {
        "file_id": 285,
        "content": "The code is testing to broadcast a picture or gif using the botoy library. The action may fail, so it might be necessary to upload the gif instead of scanning the code within it. It reads the file, encodes it in base64, and sends it as a group message with the provided content.",
        "type": "comment"
    },
    "2628": {
        "file_id": 286,
        "content": "/tests/bilibili_video_recommendation_server/send_payment_urls.py",
        "type": "filepath"
    },
    "2629": {
        "file_id": 286,
        "content": "This code sends group message with payment URLs using the bilibili video recommendation server. It uses requests module to send POST request to specified URL with a JSON payload containing group ID and message (payment URLs) as data. The response is printed in JSON format. There seems to be an issue with sending JSON, needing further investigation.",
        "type": "summary"
    },
    "2630": {
        "file_id": 286,
        "content": "baseUrl = \"http://0.0.0.0:5700\"\ngroup = 543780931\nimport requests\nurl = baseUrl + \"/send_group_msg\"\npayment_urls = [\n    \"https://qr.alipay.com/tsx10243tdewwaxrvullge8\",\n    \"wxp://f2f0V92qUQI0aBO5PXtWezujxMm-C1KFub6qCi1Obt3cn1KjZqDPqoWKn8ICCcwdt8zU\",\n]\nmessage = \"\\n\".join(payment_urls)\ndata = {\"group_id\": group, \"message\": message, \"auto_escape\": False}\nr = requests.post(url, data=data)\nprint(r.json())\n# cannot send json. wtf?\n# 请参考 go-cqhttp 端输出",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/send_payment_urls.py:1-17"
    },
    "2631": {
        "file_id": 286,
        "content": "This code sends group message with payment URLs using the bilibili video recommendation server. It uses requests module to send POST request to specified URL with a JSON payload containing group ID and message (payment URLs) as data. The response is printed in JSON format. There seems to be an issue with sending JSON, needing further investigation.",
        "type": "comment"
    },
    "2632": {
        "file_id": 287,
        "content": "/tests/bilibili_video_recommendation_server/send_video.py",
        "type": "filepath"
    },
    "2633": {
        "file_id": 287,
        "content": "This code sends a video file to a specific group chat using the CQHTTP API. The video is obtained from a local path, and the code constructs the necessary request data and URL before sending a POST request to the CQHTTP server. It then prints the JSON response received from the server.",
        "type": "summary"
    },
    "2634": {
        "file_id": 287,
        "content": "# botoy can only repost video.\n# repostVideo2Group\t转发视频到群聊\n# repostVideo2Friend\t转发视频给好友\n# getVideoURL\t获取短视频链接\n# cqhttp can post video.\n# https://docs.go-cqhttp.org/cqcode/#%E7%9F%AD%E8%A7%86%E9%A2%91\nbaseUrl = \"http://0.0.0.0:5700\"\ngroup = 543780931\nimport requests\nurl = baseUrl + \"/send_group_msg\"\nimport os\n# video_path = \"big_breast_video.mp4\"\n# video_path = \"sample_video/sample_video.mp4\" # this video have some problem. needs intro and outro. need to show some metadata on the way.\nvideo_path = \"sample_video/output.mp4\" # the 'moderated' video\nvideo_abspath = os.path.abspath(video_path)\ncontent = \"file://\"+video_abspath\nmessage = \"[CQ:video,file={}]\".format(content)\ndata = {\"group_id\": group, \"message\": message, \"auto_escape\": False}\nr = requests.post(url, data=data)\nprint(r.json())\n# cannot send json. wtf?\n# 请参考 go-cqhttp 端输出",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/send_video.py:1-28"
    },
    "2635": {
        "file_id": 287,
        "content": "This code sends a video file to a specific group chat using the CQHTTP API. The video is obtained from a local path, and the code constructs the necessary request data and URL before sending a POST request to the CQHTTP server. It then prints the JSON response received from the server.",
        "type": "comment"
    },
    "2636": {
        "file_id": 288,
        "content": "/tests/bilibili_video_recommendation_server/stroke_path.py",
        "type": "filepath"
    },
    "2637": {
        "file_id": 288,
        "content": "Creates a 200x200 image with a rounded rectangle path, applies solid green paint to stroke it with a 3px width, and saves the result as 'stroke_round_rect.png' but with transparent background.",
        "type": "summary"
    },
    "2638": {
        "file_id": 288,
        "content": "import pixie\nimage = pixie.Image(200,200)\npath = pixie.Path()\npath.rounded_rect(20,20,100,100,25,25,25,25)\npaint = pixie.Paint(pixie.SOLID_PAINT)\npaint.color = pixie.Color(0,1,0,1)\nimage.stroke_path(path, paint=paint, stroke_width=3)\nimage.write_file('stroke_round_rect.png')\n# stroke on a transparent background. well shit.",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/stroke_path.py:1-14"
    },
    "2639": {
        "file_id": 288,
        "content": "Creates a 200x200 image with a rounded rectangle path, applies solid green paint to stroke it with a 3px width, and saves the result as 'stroke_round_rect.png' but with transparent background.",
        "type": "comment"
    },
    "2640": {
        "file_id": 289,
        "content": "/tests/bilibili_video_recommendation_server/test.py",
        "type": "filepath"
    },
    "2641": {
        "file_id": 289,
        "content": "This code defines functions for a Bilibili recommendation server, performs preprocessing and searches, uses bm25 method, includes debugging breakpoints, and tests the `checkPublishedVideo` function with different video states.",
        "type": "summary"
    },
    "2642": {
        "file_id": 289,
        "content": "import sys\nsys.path.append(\"/root/Desktop/works/pyjom/\")\nfrom pyjom.platforms.bilibili.database import (\n    bilibiliRecommendationServer,\n    bootstrap,\n    textPreprocessing,\n    searchUserVideos,\n    registerUserVideo,\n    searchAndRegisterVideos,\n)\n# you should recommend by label instead of by name. but whatever.\nif __name__ == \"__main__\":\n    # objective = 'test'\n    import argparse\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-o\", \"--objective\", type=str, default=\"server\")\n    parsed_args = parser.parse_args()\n    objective = parsed_args.objective\n    # can't specify port here.\n    # python3 -m uvicorn --port 7341 test:app\n    if objective == \"server\":\n        bilibiliRecommendationServer()\n    elif objective == \"test\":\n        bootstrap()\n        test = \"searchVideos\"\n        # test = \"searchUserVideos\"\n        # test = \"textPreprocessing\"\n        # test = 'registerMyVideo'\n        if test == \"textPreprocessing\":\n            text = \"猫  咪  钢  琴  家 searchUserVideos have a nice day 新闻联播,动物圈,汪星人,喵星人\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/test.py:1-33"
    },
    "2643": {
        "file_id": 289,
        "content": "This code is importing necessary modules and defining functions for a Bilibili recommendation server. It includes the functions bilibiliRecommendationServer, bootstrap, textPreprocessing, searchUserVideos, registerUserVideo, and searchAndRegisterVideos. The script can be run as a server or for testing purposes using the argument \"-o\" or \"--objective\". However, the port cannot be specified within the script.",
        "type": "comment"
    },
    "2644": {
        "file_id": 289,
        "content": "            result = textPreprocessing(\n                text\n            )  # shall you do the same to your search query.\n            print(\"RESULT:\", result)\n        elif test == \"searchUserVideos\":\n            query = \"猫\"\n            # for v in searchUserVideos(query):\n            for v in searchUserVideos(query, method=\"bm25\"):\n                # print(\"fetched value:\", v)\n                breakpoint()\n        elif test == \"registerMyVideo\":\n            bvid = \"BV1fR4y1w7BL\"  # that's surely yours.\n            dedeuserid = \"397424026\"\n            registerUserVideo(bvid, dedeuserid)\n        elif test == \"searchVideos\":\n            query = \"cod19\"  # recent hot videos.\n            for v in searchAndRegisterVideos(query):\n                print(v)  # warning: title containing markup language.\n                breakpoint()\n            # you want to select video after search?\n            # no keywords? are you kidding?\n            # results = getMyVideos()\n            # print(results)\n            # video_bvid_invisible = \"BV1pd4y1y7cu\"  # too fucking fast. i can't see shit.",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/test.py:34-57"
    },
    "2645": {
        "file_id": 289,
        "content": "The code performs text preprocessing and searches for user videos, registers a video, and searches for recent hot videos. It uses the bm25 method for searching, and the text is processed before querying. The code includes breakpoints for debugging.",
        "type": "comment"
    },
    "2646": {
        "file_id": 289,
        "content": "            # # some hard rule on this? like being invisible for how long we will disable video source for good?\n            # video_bvid_abnormal = \"BV1x84y1B7Nb\"\n            # video_bvid_visible = \"BV1Fs411k7e9\"  # 老戴的视频\n            # # 啊叻？视频不见了？\n            # checkPublishedVideo(video_bvid_invisible)\n            # checkPublishedVideo(video_bvid_visible)\n            # checkPublishedVideo(video_bvid_abnormal)\n            # 视频撞车了 需要原创视频哦",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/test.py:58-65"
    },
    "2647": {
        "file_id": 289,
        "content": "This code snippet seems to be testing the `checkPublishedVideo` function by passing different video BVIDs, including one that is supposedly invisible, one visible, and one with an abnormal state. The purpose of this test might be to ensure the function can handle various scenarios correctly and identify if a video has disappeared or changed its original state.",
        "type": "comment"
    },
    "2648": {
        "file_id": 290,
        "content": "/tests/bilibili_video_recommendation_server/test.sh",
        "type": "filepath"
    },
    "2649": {
        "file_id": 290,
        "content": "This code is running a Python script named \"test.py\" using the Python 3 interpreter. The script is likely being executed as part of a test or validation process for the \"bilibili_video_recommendation_server\" project.",
        "type": "summary"
    },
    "2650": {
        "file_id": 290,
        "content": "python3 test.py ",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/test.sh:1-1"
    },
    "2651": {
        "file_id": 290,
        "content": "This code is running a Python script named \"test.py\" using the Python 3 interpreter. The script is likely being executed as part of a test or validation process for the \"bilibili_video_recommendation_server\" project.",
        "type": "comment"
    },
    "2652": {
        "file_id": 291,
        "content": "/tests/bilibili_video_recommendation_server/test_fastapi.sh",
        "type": "filepath"
    },
    "2653": {
        "file_id": 291,
        "content": "The code sends a HTTP GET request to the localhost server running on port 7341 and checks the response.",
        "type": "summary"
    },
    "2654": {
        "file_id": 291,
        "content": "echo 'checking server hello'\ncurl http://localhost:7341",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/test_fastapi.sh:1-2"
    },
    "2655": {
        "file_id": 291,
        "content": "The code sends a HTTP GET request to the localhost server running on port 7341 and checks the response.",
        "type": "comment"
    },
    "2656": {
        "file_id": 292,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/new_xml.py",
        "type": "filepath"
    },
    "2657": {
        "file_id": 292,
        "content": "This code extracts content from a dictionary representing an XML message, assigns it to a variable, and prints it, possibly for debugging or validation purposes.",
        "type": "summary"
    },
    "2658": {
        "file_id": 292,
        "content": "contentDictString = {\"Content\":\"\\u003c?xml version='1.0' encoding='UTF-8' standalone='yes'?\\u003e\\u003cmsg templateID=\\\"123\\\" url=\\\"https://b23.tv/uHML5mi?share_medium=android\\u0026amp;share_source=qq\\u0026amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA\\u0026amp;ts=1666023406285\\\" serviceID=\\\"1\\\" action=\\\"web\\\" actionData=\\\"\\\" a_actionData=\\\"\\\" i_actionData=\\\"\\\" brief=\\\"[QQ小程序]哔哩哔哩\\\" flag=\\\"0\\\"\\u003e\\u003citem layout=\\\"2\\\"\\u003e\\u003cpicture cover=\\\"http://pubminishare-30161.picsz.qpic.cn/c099bdd6-9e61-43d9-b82f-c9d5354ace68\\\"/\\u003e\\u003ctitle\\u003e哔哩哔哩\\u003c/title\\u003e\\u003csummary\\u003e【AI动画】妮露PV动画 风转换【NovelAI】\\u003c/summary\\u003e\\u003c/item\\u003e\\u003csource url=\\\"https://b23.tv/uHML5mi?share_medium=android\\u0026amp;share_source=qq\\u0026amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA\\u0026amp;ts=1666023406285\\\" icon=\\\"http://miniapp.gtimg.cn/public/appicon/432b76be3a548fc128acaa6c1ec90131_200.jpg\\\" name=\\\"哔哩哔哩\\\" appid=\\\"0\\\" action=\\\"web\\\" actionData=\\\"\\\" a_actionData=\\\"tencent0://\\\" i_actionData=\\\"\\\"/\\u003e\\u003c/msg\\u003e\"}",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/new_xml.py:1-1"
    },
    "2659": {
        "file_id": 292,
        "content": "This code contains a dictionary named \"contentDictString\" that represents an XML message with information about a video recommendation from Bilibili, including the template ID, URL, service ID, action, action data, i_actionData, brief, layout, picture, title, summary, source URL, icon, name, appid, and more.",
        "type": "comment"
    },
    "2660": {
        "file_id": 292,
        "content": "contentDict = contentDictString\ncontent = contentDict['Content']\nprint(content)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/new_xml.py:3-6"
    },
    "2661": {
        "file_id": 292,
        "content": "Content from the string is being assigned to the dictionary variable 'contentDict'. The 'Content' key in this dictionary is then extracted and stored in the variable 'content', which is finally printed. This code appears to print the content of a certain element in a file, potentially for debugging or validation purposes.",
        "type": "comment"
    },
    "2662": {
        "file_id": 293,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_bilibili_json.py",
        "type": "filepath"
    },
    "2663": {
        "file_id": 293,
        "content": "The code presents a JSON structure with app details and metadata for a QQ mini-app, and replaces spaces with \"&#44\" potentially for formatting or data manipulation before sending to QQ.",
        "type": "summary"
    },
    "2664": {
        "file_id": 293,
        "content": "content=\"\"\"{\"app\":\"com.tencent.miniapp_01\"&#44;\"desc\":\"哔哩哔哩\"&#44;\"view\":\"view_8C8E89B49BE609866298ADDFF2DBABA4\"&#44;\"ver\":\"1.0.0.19\"&#44;\"prompt\":\"&#91;QQ小程序&#93;哔哩哔哩\"&#44;\"meta\":{\"detail_1\":{\"appType\":0&#44;\"appid\":\"1109937557\"&#44;\"desc\":\"Appium 手机 App 自动化 + Python\"&#44;\"gamePoints\":\"\"&#44;\"gamePointsUrl\":\"\"&#44;\"host\":{\"nick\":\"Yukio\"&#44;\"uin\":1281727431}&#44;\"icon\":\"https:\\/\\/open.gtimg.cn\\/open\\/app_icon\\/00\\/95\\/17\\/76\\/100951776_100_m.png?t=1659061321\"&#44;\"preview\":\"pubminishare-30161.picsz.qpic.cn\\/a0b8d306-5b6d-4b27-9539-021a2adcc264\"&#44;\"qqdocurl\":\"https:\\/\\/b23.tv\\/4hWdtET?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1665924308147\"&#44;\"scene\":1036&#44;\"shareTemplateData\":{}&#44;\"shareTemplateId\":\"8C8E89B49BE609866298ADDFF2DBABA4\"&#44;\"showLittleTail\":\"\"&#44;\"title\":\"哔哩哔哩\"&#44;\"url\":\"m.q.qq.com\\/a\\/s\\/ea6d34b58a6a6209cd5088c436a254de\"}}&#44;\"config\":{\"autoSize\":0&#44;\"ctime\":1665924338&#44;\"forward\":1&#44;\"height\":0&#44;\"token\":\"a2458ec4231b7b8204c717f3a955a9fc\"&#44;\"type\":\"normal\"&#44;\"width\":0}}\"\"\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_bilibili_json.py:1-1"
    },
    "2665": {
        "file_id": 293,
        "content": "This code represents a JSON structure containing various app details and metadata. It includes information such as app name, version, icon URL, description, and share template data for a QQ mini-app with the app ID \"1109937557\" and nickname \"Yukio\".",
        "type": "comment"
    },
    "2666": {
        "file_id": 293,
        "content": "# i can see that all spaces have been replaced by &#44.",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_bilibili_json.py:2-2"
    },
    "2667": {
        "file_id": 293,
        "content": "This code snippet is replacing all spaces in the input with \"&#44\" which could be used for formatting or data manipulation purposes before sending it to QQ.",
        "type": "comment"
    },
    "2668": {
        "file_id": 294,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_xml_message.py",
        "type": "filepath"
    },
    "2669": {
        "file_id": 294,
        "content": "The given code uses the xmltodict library to parse an XML message containing Bilibili video sharing information, then prints its details. The \"print_xml_message\" function handles exceptions during parsing and printing.",
        "type": "summary"
    },
    "2670": {
        "file_id": 294,
        "content": "# arc_share\nxml_msg='{\"Content\":\"\\\\u003c?xml version=\\'1.0\\' encoding=\\'UTF-8\\' standalone=\\'yes\\'?\\\\u003e\\\\u003cmsg templateID=\\\\\"123\\\\\" url=\\\\\"https://b23.tv/5K7qh7K?share_medium=android\\\\u0026amp;share_source=qq\\\\u0026amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A\\\\u0026amp;ts=1657521142233\\\\\" serviceID=\\\\\"1\\\\\" action=\\\\\"web\\\\\" actionData=\\\\\"\\\\\" a_actionData=\\\\\"\\\\\" i_actionData=\\\\\"\\\\\" brief=\\\\\"[QQ小程序]哔哩哔哩\\\\\" flag=\\\\\"0\\\\\"\\\\u003e\\\\u003citem layout=\\\\\"2\\\\\"\\\\u003e\\\\u003cpicture cover=\\\\\"http://pubminishare-30161.picsz.qpic.cn/d4ad36fa-833e-4018-b994-a2da810f2d54\\\\\"/\\\\u003e\\\\u003ctitle\\\\u003e哔哩哔哩\\\\u003c/title\\\\u003e\\\\u003csummary\\\\u003e【C语言】《带你学C带你飞》\\\\u003c/summary\\\\u003e\\\\u003c/item\\\\u003e\\\\u003csource url=\\\\\"https://b23.tv/5K7qh7K?share_medium=android\\\\u0026amp;share_source=qq\\\\u0026amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A\\\\u0026amp;ts=1657521142233\\\\\" icon=\\\\\"https://open.gtimg.cn/open/app_icon/00/95/17/76/100951776_100_m.png?t=1657091104\\\\\" name=\\\\\"哔哩哔哩\\\\\" appid=\\\\\"0\\\\\" action=\\",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_xml_message.py:1-2"
    },
    "2671": {
        "file_id": 294,
        "content": "This code represents an XML message with various attributes and data for sharing a Bilibili video on QQ. It contains the template ID, URL to share the video, service ID, action type and data, brief description of the shared content, and more specific details about the item being shared, such as its cover image and title.",
        "type": "comment"
    },
    "2672": {
        "file_id": 294,
        "content": "\\\"web\\\\\" actionData=\\\\\"\\\\\" a_actionData=\\\\\"tencent0://\\\\\" i_actionData=\\\\\"\\\\\"/\\\\u003e\\\\u003c/msg\\\\u003e\"}'\ncontentDict = eval(xml_msg)\ncontent = contentDict['Content']\nprint(content) # let's understand this shit.\n\"\"\"\n<?xml version='1.0' encoding='UTF-8' standalone='yes'?><msg templateID=\"123\" url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" serviceID=\"1\" action=\"web\" actionData=\"\" a_actionData=\"\" i_actionData=\"\" brief=\"[QQ小程序]哔哩哔哩\" flag=\"0\"><item layout=\"2\"><picture cover=\"http://pubminishare-30161.picsz.qpic.cn/d4ad36fa-833e-4018-b994-a2da810f2d54\"/><title>哔哩哔哩</title><summary>【C语言】《带你学C带你飞》</summary></item><source url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" icon=\"https://open.gtimg.cn/open/app_icon/00/95/17/76/100951776_100_m.png?t=1657091104\" name=\"哔哩哔哩\" appid=\"0\" action=\"web\" actionData=\"\" a_actionData=\"tencent0://\" i_actionData=\"\"/></msg>",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_xml_message.py:2-9"
    },
    "2673": {
        "file_id": 294,
        "content": "This code is parsing an XML message, specifically for QQ share, extracting the content and printing it. The message contains information about a video recommendation from Bilibili, including title, summary, URL, and more.",
        "type": "comment"
    },
    "2674": {
        "file_id": 294,
        "content": "\"\"\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_xml_message.py:11-11"
    },
    "2675": {
        "file_id": 294,
        "content": "The code defines a function called \"print_xml_message\" that takes in an XML message and prints it. It uses the xmltodict library to parse the XML message into a Python dictionary format, then iterates over each element in the dictionary and prints its text content. The code also handles any potential exceptions that may occur during parsing or printing of the XML message.",
        "type": "comment"
    },
    "2676": {
        "file_id": 295,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py",
        "type": "filepath"
    },
    "2677": {
        "file_id": 295,
        "content": "The code utilizes go-cqhttp and Requests library to send XML-formatted rich media messages, targeting group chats with audio and QQ Music items, requiring a group ID. It allows Python users to send messages containing JSON or XML data to a web URL with dynamic content.",
        "type": "summary"
    },
    "2678": {
        "file_id": 295,
        "content": "baseUrl = \"http://0.0.0.0:5700\"\n# try to send xml to group.\n# 私聊可以发xml 但是群聊不行 群聊只能发加密好验证好的json\n# cover = \"http://pubminishare-30161.picsz.qpic.cn/d4ad36fa-833e-4018-b994-a2da810f2d54\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes'?><msg templateID=\"123\" url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" serviceID=\"1\" action=\"web\" actionData=\"\" a_actionData=\"\" i_actionData=\"\" brief=\"[QQ小程序]哔哩哔哩\" flag=\"0\"><item layout=\"2\"><picture cover=\"{}\"/><title>哔哩哔哩</title><summary>【C语言】《带你学C带你飞》</summary></item><source url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" icon=\"https://open.gtimg.cn/open/app_icon/00/95/17/76/100951776_100_m.png?t=1657091104\" name=\"哔哩哔哩\" appid=\"0\" action=\"web\" actionData=\"\" a_actionData=\"tencent0://\" i_actionData=\"\"/></msg>\"\"\".format(\n# cover)\ngroup = 543780931\nimport requests\nurl = baseUrl + \"/send_group_msg\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:1-12"
    },
    "2679": {
        "file_id": 295,
        "content": "The code attempts to send an XML message to a group chat using the GOCQHTTP API. The message contains a template with a cover image, title, and summary, promoting a video from Bilibili. The message can only be sent in group chats and not private chats. It uses the base URL \"http://0.0.0.0:5700\" and requires the group ID as input for sending the XML message.",
        "type": "comment"
    },
    "2680": {
        "file_id": 295,
        "content": "# message = 'test'\n# content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?><msg serviceID=\"2\" templateID=\"1\" action=\"web\" brief=\"\" sourceMsgId=\"0\" url=\"https://qm.qq.com/cgi-bin/qm/qr?k=wyw10nH14NxBzBmM2DZK_bj9y9yX-IJL\" flag=\"0\" adverSign=\"0\" multiMsgFlag=\"0\"><item layout=\"2\"><audio cover=\"https://python3student.github.io/img/avatar.jpg\" src=\"https://music.163.com/song/media/outer/url?id=449818326.mp3\" /><title>鹿 be free</title><summary>『作者』神奇</summary></item><source name=\"神奇永远的神！\" icon=\"https://python3student.github.io/img/avatar.jpg\" url=\"https://python3student.github.io/img/avatar.jpg\" action=\"app\" a_actionData=\"com.netease.cloudmusic\" i_actionData=\"tencent100495085://\" appid=\"100495085\" /></msg>\"\"\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes' ?><msg serviceID=\"2\" templateID=\"1\" action=\"web\" brief=\"&#91;分享&#93; 十年\" sourceMsgId=\"0\" url=\"https://i.y.qq.com/v8/playsong.html?_wv=1&amp;songid=4830342&amp;souce=qqshare&amp;source=qqshare&amp;ADTAG=qqsh",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:13-15"
    },
    "2681": {
        "file_id": 295,
        "content": "This code is setting a message and content for an XML-formatted message to be sent using the gocqhttp package. The message includes an image, audio, and links to a music source and app ID. It will be used for sending a rich media message with QQ Gocqhttp.",
        "type": "comment"
    },
    "2682": {
        "file_id": 295,
        "content": "are\" flag=\"0\" adverSign=\"0\" multiMsgFlag=\"0\" ><item layout=\"2\"><audio cover=\"http://imgcache.qq.com/music/photo/album_500/26/500_albumpic_89526_0.jpg\" src=\"http://ws.stream.qqmusic.qq.com/C400003mAan70zUy5O.m4a?guid=1535153710&amp;vkey=D5315B8C0603653592AD4879A8A3742177F59D582A7A86546E24DD7F282C3ACF81526C76E293E57EA1E42CF19881C561275D919233333ADE&amp;uin=&amp;fromtag=3\" /><title>十年</title><summary>陈奕迅</summary></item><source name=\"QQ音乐\" icon=\"https://i.gtimg.cn/open/app_icon/01/07/98/56/1101079856_100_m.png\" url=\"http://web.p.qq.com/qqmpmobile/aio/app.html?id=1101079856\" action=\"app\"  a_actionData=\"com.tencent.qqmusic\" i_actionData=\"tencent1101079856://\" appid=\"1101079856\" /></msg>\"\"\"\n# content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><msg serviceID=\"1\" templateID=\"1\" action=\"\" brief=\"QQ红包\" sourceMsgId=\"0\" flag=\"8\" adverSign=\"0\" multiMsgFlag=\"0\"><item layout=\"6\"><title color=\"#EE00EE\" style=\"4\">阿深真帅</title><summary color=\"#9A32CD\">是不是很无语</summary><picture cover=\"http:",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:15-16"
    },
    "2683": {
        "file_id": 295,
        "content": "This code is creating an XML string for a QQ goCQHttp message, featuring an audio track and an item from QQ Music. It includes the audio source, title, summary, and source information. The message has a service ID of 1, template ID of 1, and a flag value of 8.",
        "type": "comment"
    },
    "2684": {
        "file_id": 295,
        "content": "//t1.hddhhn.com/uploads/tu/20150507/20405-eBE9jO.jpg\" action=\"web\" url=\"http://url.cn/5g4eOiY\" w=\"0\" h=\"0\"/></item></msg>\"\"\"\n# message = \"[CQ:xml,data={}]\".format(content) # xml thing.\n# content=\"\"\"{\"app\":\"com.tencent.miniapp_01\"&#44;\"desc\":\"哔哩哔哩\"&#44;\"view\":\"view_8C8E89B49BE609866298ADDFF2DBABA4\"&#44;\"ver\":\"1.0.0.19\"&#44;\"prompt\":\"&#91;QQ小程序&#93;哔哩哔哩\"&#44;\"meta\":{\"detail_1\":{\"appType\":0&#44;\"appid\":\"1109937557\"&#44;\"desc\":\"Appium 手机 App 自动化 + Python\"&#44;\"gamePoints\":\"\"&#44;\"gamePointsUrl\":\"\"&#44;\"host\":{\"nick\":\"Yukio\"&#44;\"uin\":1281727431}&#44;\"icon\":\"https:\\/\\/open.gtimg.cn\\/open\\/app_icon\\/00\\/95\\/17\\/76\\/100951776_100_m.png?t=1659061321\"&#44;\"preview\":\"pubminishare-30161.picsz.qpic.cn\\/a0b8d306-5b6d-4b27-9539-021a2adcc264\"&#44;\"qqdocurl\":\"https:\\/\\/b23.tv\\/4hWdtET?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1665924308147\"&#44;\"scene\":1036&#44;\"shareTemplateData\":{}&#44;\"shareTemplateId\":\"8C8E89B49BE609866298ADDFF2DBABA4\"&#44;\"showLi",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:16-18"
    },
    "2685": {
        "file_id": 295,
        "content": "This code is formatting a JSON message with app details, prompt, and other information. It will be used in QQ gocqhttp post XML function.",
        "type": "comment"
    },
    "2686": {
        "file_id": 295,
        "content": "ttleTail\":\"\"&#44;\"title\":\"哔哩哔哩\"&#44;\"url\":\"m.q.qq.com\\/a\\/s\\/ea6d34b58a6a6209cd5088c436a254de\"}}&#44;\"config\":{\"autoSize\":0&#44;\"ctime\":1665924338&#44;\"forward\":1&#44;\"height\":0&#44;\"token\":\"a2458ec4231b7b8204c717f3a955a9fc\"&#44;\"type\":\"normal\"&#44;\"width\":0}}\"\"\"\ncontent = \"\"\"{\"app\":\"com.tencent.structmsg\"&#44;\"desc\":\"新闻\"&#44;\"view\":\"news\"&#44;\"ver\":\"0.0.0.1\"&#44;\"prompt\":\"&#91;分享&#93;哔哩哔哩\"&#44;\"meta\":{\"news\":{\"action\":\"\"&#44;\"android_pkg_name\":\"\"&#44;\"app_type\":1&#44;\"appid\":100951776&#44;\"ctime\":1666081902&#44;\"desc\":\"外国博主英文讲解：二十大为什么如此重要？\"&#44;\"jumpUrl\":\"https:\\/\\/b23.tv\\/B64KMQq?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1666081860133\"&#44;\"preview\":\"https:\\/\\/pic.ugcimg.cn\\/58a74c8432a80e7e2de612e6e53e37f3\\/jpg1\"&#44;\"source_icon\":\"https:\\/\\/open.gtimg.cn\\/open\\/app_icon\\/00\\/95\\/17\\/76\\/100951776_100_m.png?t=1659061321\"&#44;\"source_url\":\"\"&#44;\"tag\":\"哔哩哔哩\"&#44;\"title\":\"哔哩哔哩\"&#44;\"uin\":1281727431}}&#44;\"config\":{\"ctime\":1666081902&#44;\"forward\":true&#44;\"token\":\"d7cc3a93e7c3a9acd1c8662157e3e5fb\"&#44;\"type\":\"normal\"}}\"\"\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:18-19"
    },
    "2687": {
        "file_id": 295,
        "content": "This code contains two JSON strings representing messages in a chat application. The first message is from QQ and includes title, URL, and config details, while the second message is for sharing news on bilibili and has app, desc, view, ver, prompt, meta (with news info), config details, and more. Both messages contain timestamps, tokens, and forward options.",
        "type": "comment"
    },
    "2688": {
        "file_id": 295,
        "content": "# content = \"\"\"{\"app\":\"com.tencent.structmsg\"&#44;\"desc\":\"音乐\"&#44;\"view\":\"music\"&#44;\"ver\":\"0.0.0.1\"&#44;\"prompt\":\"\"&#44;\"meta\":{}}\"\"\"\n# content = (\n    # \"\"\"{\"app\":\"com.tencent.structmsg\",\"desc\":\"\",\"view\":\"singleImg\",\"ver\":\"0.0.0.1\",\"prompt\":\"邪少QQXML论坛\",\"appID\":\"\",\"sourceName\":\"\",\"actionData\":\"\",\"actionData_A\":\"\",\"sourceUrl\":\"\",\"meta\":{\"singleImg\":{\"mainImage\":\"https://gchat.qpic.cn/gchatpic_new/3020005669/916530575-2949639428-6E45D21EADE33511C565E25AB432AB59/0?term=2\",\"mainUrl\":\"\"}},\"text\":\"\",\"extraApps\":[],\"sourceAd\":\"\",\"config\":{\"forward\":1}}\"\"\".replace(\n#         \"&\", \"&amp;\"\n#     )\n#     .replace(\",\", \"&#44;\")\n#     .replace(\"[\", \"&#91;\")\n#     .replace(\"]\", \"&#93;\")\n# )\n# the token is likely to be some checksum, md5 or something. some aes/rsa?\nmessage = \"[CQ:json,data={}]\".format(content)  # json thing.\n# message = \"[CQ:tts,text=嘤嘤嘤]\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes' ?><msg serviceID=\"2\" templateID=\"1\" action=\"web\" brief=\"&#91;分享&#93; 十年\" sourceMsgId=\"0\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:20-34"
    },
    "2689": {
        "file_id": 295,
        "content": "This code is likely related to a messaging application and involves sending messages containing XML or JSON data, possibly for a chat bot or communication tool. It includes functions for formatting the message content and converting it into CQ:json or CQ:tts formats. The content of the messages seems to be dynamic and can contain various types of data like app information, descriptions, images, and text prompts.",
        "type": "comment"
    },
    "2690": {
        "file_id": 295,
        "content": " url=\"http://music.163.com/m/song/409650368\" flag=\"0\" adverSign=\"0\" multiMsgFlag=\"0\" ><item layout=\"2\"><audio cover=\"http://p2.music.126.net/g-Qgb9ibk9Wp_0HWra0xQQ==/16636710440565853.jpg?param=90y90\" src=\"https://music.163.com/song/media/outer/url?id=409650368.mp3\" /><title>十年</title><summary>黄梦之</summary></item><source name=\"网易云音乐\" icon=\"https://pic.rmb.bdstatic.com/911423bee2bef937975b29b265d737b3.png\" url=\"http://web.p.qq.com/qqmpmobile/aio/app.html?id=1101079856\" action=\"app\" a_actionData=\"com.netease.cloudmusic\" i_actionData=\"tencent100495085://\" appid=\"100495085\" /></msg>\"\"\"\n# message = '[CQ:xml,data={}]'.format(content)\ndata = {\"group_id\": group, \"message\": message, \"auto_escape\": False}\nr = requests.post(url, data=data)\nprint(r.json())\n# cannot send json. wtf?\n# 请参考 go-cqhttp 端输出",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:34-40"
    },
    "2691": {
        "file_id": 295,
        "content": "The code is constructing an XML message and sending it to a web URL using the Requests library in Python. It uses go-cqhttp for communication, and the code includes a group ID and a message formatted as XML data. The response from the server is printed in JSON format.",
        "type": "comment"
    },
    "2692": {
        "file_id": 296,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/run_bilibili_qq_share_xml.sh",
        "type": "filepath"
    },
    "2693": {
        "file_id": 296,
        "content": "This code sets up a MitM proxy in Socks5 mode, listens on port 8050, and logs websocket activity for bilibili QQ share feature.",
        "type": "summary"
    },
    "2694": {
        "file_id": 296,
        "content": "mitmproxy --mode socks5 --listen-port 8050 -w bilibili_qq_xml_share.log --set stream_websocket=true\n# tv.danmaku.bili",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/run_bilibili_qq_share_xml.sh:1-3"
    },
    "2695": {
        "file_id": 296,
        "content": "This code sets up a MitM proxy in Socks5 mode, listens on port 8050, and logs websocket activity for bilibili QQ share feature.",
        "type": "comment"
    },
    "2696": {
        "file_id": 297,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/run_qq_capture.sh",
        "type": "filepath"
    },
    "2697": {
        "file_id": 297,
        "content": "This code sets up a man-in-the-middle (MITM) proxy using MitmProxy, listening on port 8050 and logging all captured traffic to 'qq.log'. It also enables WebSocket stream processing for the 'tv.danmaku.bili' application.",
        "type": "summary"
    },
    "2698": {
        "file_id": 297,
        "content": "mitmproxy --mode socks5 --listen-port 8050 -w qq.log --set stream_websocket=true\n# tv.danmaku.bili",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/run_qq_capture.sh:1-3"
    },
    "2699": {
        "file_id": 297,
        "content": "This code sets up a man-in-the-middle (MITM) proxy using MitmProxy, listening on port 8050 and logging all captured traffic to 'qq.log'. It also enables WebSocket stream processing for the 'tv.danmaku.bili' application.",
        "type": "comment"
    }
}