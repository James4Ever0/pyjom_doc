{
    "1900": {
        "file_id": 186,
        "content": "/tests/test_weibo_pets.py",
        "type": "filepath"
    },
    "1901": {
        "file_id": 186,
        "content": "This code imports necessary modules, initializes a WeiboPetsReviewer object with specific parameters and then runs its main function to perform an automated review of Weibo Pets data.",
        "type": "summary"
    },
    "1902": {
        "file_id": 186,
        "content": "from test_commons import *\nfrom pyjom.primitives import *  # this is capitalized.\ntemplate_names = [\"subtitle_detector.mdl.j2\"]\nautoArgs = {\"subtitle_detector\": {\"timestep\": 0.2}}\nwbRev = WeiboPetsReviewer(\n    auto=True,\n    semiauto=False,\n    dummy_auto=False,\n    args=autoArgs,\n    template_names=template_names,\n)\n# wbRev.main(skip_review=True) # to test feedback.\nwbRev.main()",
        "type": "code",
        "location": "/tests/test_weibo_pets.py:1-15"
    },
    "1903": {
        "file_id": 186,
        "content": "This code imports necessary modules, initializes a WeiboPetsReviewer object with specific parameters and then runs its main function to perform an automated review of Weibo Pets data.",
        "type": "comment"
    },
    "1904": {
        "file_id": 187,
        "content": "/tests/unittest_video_sampler.py",
        "type": "filepath"
    },
    "1905": {
        "file_id": 187,
        "content": "The code imports necessary modules, defines the video path and parameters for sampling frames, and initializes an image set using the getVideoFrameSampler function. It then prints the image set and its type without actually executing it due to the presence of a commented out \"breakpoint()\" call.",
        "type": "summary"
    },
    "1906": {
        "file_id": 187,
        "content": "from test_commons import *\nfrom pyjom.videotoolbox import getVideoFrameSampler\nvideoPath = \"/root/Desktop/works/pyjom/samples/video/LkS8UkiLL.mp4\"\nimageSet = getVideoFrameSampler(videoPath, 0, 5, 60)\n# print(imageSet)\n# print(type(imageSet))\n# # breakpoint()",
        "type": "code",
        "location": "/tests/unittest_video_sampler.py:1-9"
    },
    "1907": {
        "file_id": 187,
        "content": "The code imports necessary modules, defines the video path and parameters for sampling frames, and initializes an image set using the getVideoFrameSampler function. It then prints the image set and its type without actually executing it due to the presence of a commented out \"breakpoint()\" call.",
        "type": "comment"
    },
    "1908": {
        "file_id": 188,
        "content": "/tests/unittest_ocr_filter_large_area_of_text.py",
        "type": "filepath"
    },
    "1909": {
        "file_id": 188,
        "content": "This code sets up libraries and variables for processing image or video files, detects text within frames using EasyOCRReader, calculates text area percentage, draws rectangles, and displays the result.",
        "type": "summary"
    },
    "1910": {
        "file_id": 188,
        "content": "from test_commons import *\n# import pytesseract\n# from pytesseract import Output\nfrom lazero.utils.importers import cv2_custom_build_init\ncv2_custom_build_init()\nimport cv2\n# img = cv2.imread('image.jpg')\nfrom pyjom.videotoolbox import getVideoFrameIteratorWithFPS\ndetectionList = []\nfrom pyjom.imagetoolbox import getEasyOCRReader, LRTBToDiagonal\nreader = getEasyOCRReader((\"en\",))\nimport numpy as np\ntest_subject = \"image\"\nif test_subject == \"video\":\n    videoPath = \"/root/Desktop/works/pyjom/samples/video/dog_with_large_text.gif\"\n    iterator = getVideoFrameIteratorWithFPS(videoPath, start=-1, end=-1, fps=10)\nelif test_subject == \"image\":\n    imagePath = \"/root/Desktop/works/pyjom/samples/image/dog_saturday_night.bmp\"\n    iterator = [cv2.imread(imagePath)]\nelse:\n    raise Exception(\"unknown test_subject:\", test_subject)\n# threshold: {'max':0.3}\nfor frame in iterator:\n    height, width = frame.shape[:2]\n    img = np.zeros((height, width, 3))\n    detection, recognition = reader.detect(frame)  # not very sure.\n    if detection == [[]]:",
        "type": "code",
        "location": "/tests/unittest_ocr_filter_large_area_of_text.py:1-37"
    },
    "1911": {
        "file_id": 188,
        "content": "Code imports necessary libraries and sets up variables for working with an image or video file. It initializes OpenCV, EasyOCRReader, and numpy, then determines the test subject (image or video) to be used. The code creates an iterator based on the test subject and sets a threshold for detection. It loops through each frame in the iterator, creating a blank image, and detects text within the frame using EasyOCRReader.",
        "type": "comment"
    },
    "1912": {
        "file_id": 188,
        "content": "        diagonalRects = []\n    else:\n        diagonalRects = [LRTBToDiagonal(x) for x in detection[0]]\n    for x1, y1, x2, y2 in diagonalRects:\n        w, h = x2 - x1, y2 - y1\n        x, y = x1, y1\n        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), -1)\n    # calculate the portion of the text area.\n    textArea = np.sum(img)\n    textAreaRatio = (textArea / 255) / (width * height)\n    print(\"text area: {:.2f} %\".format(textAreaRatio))\n    cv2.imshow(\"img\", img)\n    cv2.waitKey(0)",
        "type": "code",
        "location": "/tests/unittest_ocr_filter_large_area_of_text.py:38-50"
    },
    "1913": {
        "file_id": 188,
        "content": "This code calculates the text area percentage of an image and displays it. It first determines diagonal rectangles from detection data, then draws rectangles around the detected text areas using OpenCV's rectangle function. The total text area is calculated by summing pixel values in the image, which is then normalized to a percentage of the image's total area. Finally, the image with drawn rectangles and text area ratio is displayed.",
        "type": "comment"
    },
    "1914": {
        "file_id": 189,
        "content": "/tests/unittest_lazero_external_downloader.py",
        "type": "filepath"
    },
    "1915": {
        "file_id": 189,
        "content": "This code downloads a file from a given URL and saves it to a specified path. It checks if the file already exists at the target location, and if so, deletes it before initiating the download. The success or failure of the download is reported using print statement.",
        "type": "summary"
    },
    "1916": {
        "file_id": 189,
        "content": "from lazero.network.downloader import download\nurl = \"https://media3.giphy.com/media/wTrXRamYhQzsY/giphy.gif?cid=dda24d502m79hkss38jzsxteewhs4e3ocd3iqext2285a3cq&rid=giphy.gif&ct=g\"\npath = \"/dev/shm/medialang/test.gif\"\nimport os\nif os.path.exists(path):\n    os.remove(path)\nreport = download(url, path)\nprint(\"download success?\", report)",
        "type": "code",
        "location": "/tests/unittest_lazero_external_downloader.py:1-14"
    },
    "1917": {
        "file_id": 189,
        "content": "This code downloads a file from a given URL and saves it to a specified path. It checks if the file already exists at the target location, and if so, deletes it before initiating the download. The success or failure of the download is reported using print statement.",
        "type": "comment"
    },
    "1918": {
        "file_id": 190,
        "content": "/tests/unittest_mathlib_ranges_continual.py",
        "type": "filepath"
    },
    "1919": {
        "file_id": 190,
        "content": "This code imports necessary modules and defines input data. It then uses different functions to get results and prints them, with some additional operations like range extraction and rendering. The code seems to be focused on merging ranges of data using a specific library (mathlib) and performing certain operations with the merged data.",
        "type": "summary"
    },
    "1920": {
        "file_id": 190,
        "content": "from test_commons import *\nfrom pyjom.mathlib import *\ninputList = [[(0, 1), (1, 1.1), (2, 3)], [(0.5, 1.5), (1.6, 2.5)]]\nmRangesDict = {\"sample_%s\" % num: inputList[num] for num in range(len(inputList))}\nresult_0 = getContinualNonSympyMergeResult(inputList)\nprint(result_0)\nprint(\"_\" * 20)\n# want to build a language?\nresult_1 = getContinualMappedNonSympyMergeResult(mRangesDict, concatSymbol=\"|\")\nprint(result_1)\nprint(\"_\" * 20)\nresult_2 = getContinualMappedNonSympyMergeResult(\n    mRangesDict, concatSymbol=\"|\", noEmpty=False\n)\nprint(result_2)\nprint(\"_\" * 20)\nstart, end = -1, 4\nresult_3 = getContinualMappedNonSympyMergeResultWithRangedEmpty(\n    mRangesDict, start, end, concatSymbol=\"|\"\n)\nprint(result_3)\nprint(\"_\" * 20)\nrenderList = mergedRangesToSequential(result_3)\nfor renderCommandString, commandTimeSpan in renderList:\n    print(renderCommandString, commandTimeSpan)\nprint(\"_\" * 20)\nfinalCatsMapped = getContinualMappedNonSympyMergeResult({})\nprint(finalCatsMapped)",
        "type": "code",
        "location": "/tests/unittest_mathlib_ranges_continual.py:1-36"
    },
    "1921": {
        "file_id": 190,
        "content": "This code imports necessary modules and defines input data. It then uses different functions to get results and prints them, with some additional operations like range extraction and rendering. The code seems to be focused on merging ranges of data using a specific library (mathlib) and performing certain operations with the merged data.",
        "type": "comment"
    },
    "1922": {
        "file_id": 191,
        "content": "/tests/unittest_musictoolbox_netease_music_lyric.py",
        "type": "filepath"
    },
    "1923": {
        "file_id": 191,
        "content": "This code tests the functionality of getting music and lyrics using NeteaseMusic API from the pyjom library. It checks for similarity in keywords and prints the result, but encounters an issue when no lyrics are found. It then plans to test a specific music ID for lyrics retrieval and shows preparedness in case it fails.",
        "type": "summary"
    },
    "1924": {
        "file_id": 191,
        "content": "from test_commons import *\nfrom pyjom.musictoolbox import neteaseMusic\nNMClient = neteaseMusic()\n# import random\nquery = \"linkin park numb\"\nfor sim in [False, True]:\n    result = NMClient.getMusicAndLyricWithKeywords(query, similar=sim, debug=True)\n    print(\"similar?\", sim)\n    # no lyrics! wtf??\n    breakpoint()\n# now let's test something surely will get lyrics.\n# music_id = 497572729\n# lyric_string = NMClient.getMusicLyricFromNetease(music_id)\n# print(\"LYRIC STRING:\",lyric_string)\n# in case we don't get the lyric, you should be prepared.\n# it works.",
        "type": "code",
        "location": "/tests/unittest_musictoolbox_netease_music_lyric.py:1-17"
    },
    "1925": {
        "file_id": 191,
        "content": "This code tests the functionality of getting music and lyrics using NeteaseMusic API from the pyjom library. It checks for similarity in keywords and prints the result, but encounters an issue when no lyrics are found. It then plans to test a specific music ID for lyrics retrieval and shows preparedness in case it fails.",
        "type": "comment"
    },
    "1926": {
        "file_id": 192,
        "content": "/tests/unittest_ffmpeg_delogo_parser.py",
        "type": "filepath"
    },
    "1927": {
        "file_id": 192,
        "content": "This code defines a delogoParser function to parse command strings and processes video streams using the \"delogo\" filter. It checks parameter validity, removes logos from videos, and handles errors for debugging purposes.",
        "type": "summary"
    },
    "1928": {
        "file_id": 192,
        "content": "import parse\nfrom pyjom.videotoolbox import getVideoWidthHeight\nfrom test_commons import *\nimport ffmpeg\ncommandString = \"delogo_0_671_360_6|delogo_144_662_6_4|delogo_355_661_5_7|delogo_117_661_7_5|delogo_68_661_18_5|delogo_182_658_165_9|delogo_252_492_3_1|delogo_214_492_1_2|delogo_200_492_3_1|delogo_74_492_2_1|delogo_170_490_6_4|delogo_145_490_9_4|delogo_129_490_12_4|delogo_107_490_4_3|delogo_91_487_8_6|delogo_72_485_4_3|delogo_147_484_4_3|delogo_178_483_11_11|delogo_219_480_1_1|delogo_53_480_6_2|delogo_268_478_1_1|delogo_164_478_8_4|delogo_128_477_8_4|delogo_295_475_1_1|delogo_105_475_10_4|delogo_61_474_5_4|delogo_274_472_3_2|delogo_196_470_5_2|delogo_209_469_1_1|delogo_143_469_8_5|delogo_75_467_26_6|delogo_0_33_360_25|delogo_0_24_360_6\"\nvideoPath = \"/root/Desktop/works/pyjom/samples/video/LkS8UkiLL.mp4\"\noutputPath = \"/dev/shm/output.mp4\"\ndef delogoParser(command):\n    return parse.parse(\"delogo_{x:d}_{y:d}_{w:d}_{h:d}\", command)\nwidth, height = getVideoWidthHeight(videoPath)\ndef delogoFilter(stream, commandParams):",
        "type": "code",
        "location": "/tests/unittest_ffmpeg_delogo_parser.py:1-20"
    },
    "1929": {
        "file_id": 192,
        "content": "This code defines a delogoParser function that parses a command string into a formatted format using regular expression. It also includes the getVideoWidthHeight function to retrieve the video width and height from a given path, and a delogoFilter function to process video streams with a given command parameter. The commandString contains a list of delogo positions, and the script will process a video at the specified output path.",
        "type": "comment"
    },
    "1930": {
        "file_id": 192,
        "content": "    return stream.filter(\n        \"delogo\",\n        x=commandParams[\"x\"],\n        y=commandParams[\"y\"],\n        w=commandParams[\"w\"],\n        h=commandParams[\"h\"],\n    )\n# minArea = 20\ndef checkXYWH(XYWH, canvas, minArea=20):\n    x, y, w, h = XYWH\n    width, height = canvas\n    if x >= width - 1 or y >= height - 1:\n        return False, None\n    if x == 0:\n        x = 1\n    if y == 0:\n        y = 1\n    if x + w >= width:\n        w = width - x - 1\n        if w <= 2:\n            return False, None\n    if y + h >= height:\n        h = height - y - 1\n        if h <= 2:\n            return False, None\n    if w * h <= minArea:\n        return False, None\n    return True, (x, y, w, h)\nfor command in commandString.split(\"|\"):\n    try:\n        stream = ffmpeg.input(videoPath, ss=0, to=5).video\n        commandArguments = delogoParser(command)\n        x = commandArguments[\"x\"]\n        y = commandArguments[\"y\"]\n        w = commandArguments[\"w\"]\n        h = commandArguments[\"h\"]\n        status, XYWH = checkXYWH((x, y, w, h), (width, height))",
        "type": "code",
        "location": "/tests/unittest_ffmpeg_delogo_parser.py:21-64"
    },
    "1931": {
        "file_id": 192,
        "content": "This code snippet is a part of a larger program that involves video editing using the FFmpeg library. It filters a video stream with the \"delogo\" filter, taking command parameters for x, y, w, and h. Then, it checks if these parameters are valid by calling the checkXYWH function, which returns True or False depending on the input's validity. Finally, it loops through each command in the commandString, splitting them into smaller commands for video editing operations.",
        "type": "comment"
    },
    "1932": {
        "file_id": 192,
        "content": "        if not status:\n            continue\n        x, y, w, h = XYWH\n        commandArguments = {\"x\": x, \"y\": y, \"w\": w, \"h\": h}\n        stream = delogoFilter(stream, commandArguments)\n        ffmpeg.output(stream, outputPath).run(overwrite_output=True)\n    except:\n        import traceback\n        traceback.print_exc()\n        print(\"WIDTH:\", width, \"HEIGHT:\", height)\n        maxX, maxY = (\n            commandArguments[\"x\"] + commandArguments[\"w\"],\n            commandArguments[\"y\"] + commandArguments[\"h\"],\n        )\n        print(\"MAX X:\", maxX, \"MAX Y:\", maxY)\n        print(\"ERROR!\", commandArguments)\n        breakpoint()",
        "type": "code",
        "location": "/tests/unittest_ffmpeg_delogo_parser.py:65-83"
    },
    "1933": {
        "file_id": 192,
        "content": "This code is implementing a delogo filter, which takes input video and removes the logo from it. It checks if the filter was successfully applied, then extracts the position and dimensions of the logo to apply the delogo filter. If any error occurs during this process, it prints out information for debugging and stops the execution.",
        "type": "comment"
    },
    "1934": {
        "file_id": 193,
        "content": "/tests/unittest_get_subtid_name_and_majortid_name.py",
        "type": "filepath"
    },
    "1935": {
        "file_id": 193,
        "content": "The function `getMajorMinorTopicMappings` retrieves major and minor topic IDs and names, storing them in the `majorMinorMappings` dictionary. The code uses this function to get the associated topics for a given tid, formats them into tags, and prints the result along with the tid for topic ID 1.",
        "type": "summary"
    },
    "1936": {
        "file_id": 193,
        "content": "from bilibili_api import search\nBSP = search.bilibiliSearchParams\ndef getMajorMinorTopicMappings(debug: bool = False):\n    majorMinorMappings = {}\n    for key, value in BSP.all.tids.__dict__.items():\n        try:\n            major_tid = value.tid\n            if debug:\n                print(\"MAJOR\", key, major_tid)\n            content = {\"major\": {\"tid\": major_tid, \"name\": key}}\n            majorMinorMappings.update(\n                {major_tid: content, key: content, str(major_tid): content}\n            )\n            for subkey, subvalue in value.__dict__.items():\n                if subkey != \"tid\" and type(subvalue) == int:\n                    if debug:\n                        print(\"MINOR\", subkey, subvalue)\n                    content = {\n                        \"major\": {\"tid\": major_tid, \"name\": key},\n                        \"minor\": {\"tid\": subvalue, \"name\": subkey},\n                    }\n                    majorMinorMappings.update(\n                        {subvalue: content, subkey: content, str(subvalue): content}",
        "type": "code",
        "location": "/tests/unittest_get_subtid_name_and_majortid_name.py:1-26"
    },
    "1937": {
        "file_id": 193,
        "content": "This function `getMajorMinorTopicMappings` retrieves major and minor topic IDs and names from `BSP.all.tids` dictionary, storing them in `majorMinorMappings` dictionary for further use. It also prints the major and minor topics if debug mode is enabled.",
        "type": "comment"
    },
    "1938": {
        "file_id": 193,
        "content": "                    )\n        except:\n            pass\n    return majorMinorMappings\ndef getTagStringFromTid(tid):\n    majorMinorTopicMappings = getMajorMinorTopicMappings()\n    topic = majorMinorTopicMappings.get(tid, None)\n    tags = []\n    if topic:\n        majorTopic = topic.get(\"major\", {}).get(\"name\", None)\n        minorTopic = topic.get(\"minor\", {}).get(\"name\", None)\n        if majorTopic:\n            tags.append(majorTopic)\n            if minorTopic:\n                tags.append(minorTopic)\n    return \",\".join(tags)\ntid = 1\ntagString = getTagStringFromTid(tid)\nprint(tid, tagString)",
        "type": "code",
        "location": "/tests/unittest_get_subtid_name_and_majortid_name.py:27-49"
    },
    "1939": {
        "file_id": 193,
        "content": "This code retrieves the major and minor topics associated with a given topic ID (tid) using the getMajorMinorTopicMappings() function. It then formats these topics into a comma-separated string of tags. If there are both a major and minor topic, they are concatenated in that order, else if only one exists, it is printed alone. Finally, the tid and associated tagString are printed to the console for the given topic ID 1.",
        "type": "comment"
    },
    "1940": {
        "file_id": 194,
        "content": "/tests/unittest_ffmpeg_cropdetect_from_image_parse_log.py",
        "type": "filepath"
    },
    "1941": {
        "file_id": 194,
        "content": "This code uses ffmpeg and OpenCV to detect cropped areas, calculates the cropped area ratio, and decides whether to crop the image based on a threshold. The result depends on the specified threshold value.",
        "type": "summary"
    },
    "1942": {
        "file_id": 194,
        "content": "import ffmpeg\nfrom lazero.utils.importers import cv2_custom_build_init\ncv2_custom_build_init()\n# mediaPath = \"/root/Desktop/works/pyjom/samples/image/dog_blue_sky_split_line.png\"\nmediaPath = \"/root/Desktop/works/pyjom/samples/image/dog_with_black_borders.png\"  # use the image with black background.\n# ffmpeg -loop 1 -i /root/Desktop/works/pyjom/samples/image/dog_blue_sky_split_line.png -t 15 -vf cropdetect -f null -\nimport cv2\nimage = cv2.imread(mediaPath)\nheight, width = image.shape[:2]\ntotal_area = height * width\nareaThreshold = 0\nstdout, stderr = (\n    ffmpeg.input(mediaPath, loop=1, t=15)\n    .filter(\"cropdetect\")\n    .output(\"null\", f=\"null\")\n    .run(capture_stdout=True, capture_stderr=True)\n)\nstdout_decoded = stdout.decode(\"utf-8\")\nstderr_decoded = stderr.decode(\"utf-8\")\n# nothing here.\n# for line in stdout_decoded.split(\"\\n\"):\n#     print(line)\n# breakpoint()\nimport parse\ncropped_area_threshold = 0.1\ncommon_crops = []\nfor line in stderr_decoded.split(\"\\n\"):\n    line = line.replace(\"\\n\", \"\").strip()\n    for",
        "type": "code",
        "location": "/tests/unittest_ffmpeg_cropdetect_from_image_parse_log.py:1-40"
    },
    "1943": {
        "file_id": 194,
        "content": "The code imports necessary libraries and initializes them, sets the media path to an image with a black background, runs ffmpeg on the image with a cropdetect filter, decodes the output and errors, iterates over the stderr output lines to extract cropped areas, and defines a variable for common_crops.",
        "type": "comment"
    },
    "1944": {
        "file_id": 194,
        "content": "matString = \"[{}] x1:{x1:d} x2:{x2:d} y1:{y1:d} y2:{y2:d} w:{w:d} h:{h:d} x:{x:d} y:{y:d} pts:{pts:g} t:{t:g} crop={}:{}:{}:{}\"\n    # print(line)\n    result = parse.parse(formatString, line)\n    if result is not None:\n        # print(result)\n        cropString = \"{}_{}_{}_{}\".format(\n            *[result[key] for key in [\"w\", \"h\", \"x\", \"y\"]]\n        )\n        # print(cropString)\n        # breakpoint()\n        common_crops.append(cropString)\n    # [Parsed_cropdetect_0 @ 0x56246a16cbc0] x1:360 x2:823 y1:0 y2:657 w:464 h:656 x:360 y:2 pts:3 t:0.120000 crop=464:656:360:2\n    # this crop usually will never change. but let's count?\narea = 0\nx, x1, y, y1 = 0, width, 0, height\nif len(common_crops) > 0:\n    common_crops_count_tuple_list = [\n        (cropString, common_crops.count(cropString)) for cropString in set(common_crops)\n    ]\n    common_crops_count_tuple_list.sort(key=lambda x: -x[1])\n    selected_crop_string = common_crops_count_tuple_list[0][0]\n    result = parse.parse(\"{w:d}_{h:d}_{x:d}_{y:d}\", selected_crop_string)",
        "type": "code",
        "location": "/tests/unittest_ffmpeg_cropdetect_from_image_parse_log.py:40-62"
    },
    "1945": {
        "file_id": 194,
        "content": "Code parses a log line, extracts crop information and stores it in common_crops list. It then counts the occurrence of each unique crop string and selects the most frequent one (selected_crop_string). Finally, it parses the selected_crop_string to get the crop dimensions (w, h, x, y) and assigns them to their respective variables.",
        "type": "comment"
    },
    "1946": {
        "file_id": 194,
        "content": "    w, h, x, y = [result[key] for key in [\"w\", \"h\", \"x\", \"y\"]]\n    x1, y1 = min(x + w, width), min(y + h, height)\n    if x < x1 and y < y1:\n        # allow to calculate the area.\n        area = (x1 - x) * (y1 - y)\ncropped_area_ratio = 1 - (area / total_area)  # 0.5652352766414517\n# use 0.1 as threshold?\nprint(\"CROPPED AREA RATIO:\", cropped_area_ratio)\nif cropped_area_ratio > cropped_area_threshold:\n    print(\"we need to crop this. no further processing needed\")\n    image_black_cropped = image[y:y1, x:x1]\n    cv2.imshow(\"CROPPED IMAGE\", image_black_cropped)\n    cv2.waitKey(0)\nelse:\n    print(\"image no need to crop black borders. further processing needed\")",
        "type": "code",
        "location": "/tests/unittest_ffmpeg_cropdetect_from_image_parse_log.py:63-78"
    },
    "1947": {
        "file_id": 194,
        "content": "This code calculates the cropped area ratio of an image and decides whether to crop it or not based on a threshold. If the ratio is greater than the threshold, it crops the image using OpenCV and displays the cropped image. Otherwise, it proceeds with further processing. The result depends on the specified threshold value.",
        "type": "comment"
    },
    "1948": {
        "file_id": 195,
        "content": "/tests/unittest_houghline_dog_blur_detection.py",
        "type": "filepath"
    },
    "1949": {
        "file_id": 195,
        "content": "The code imports libraries, reads an image, applies blur detection and edge detection, displays edges with lines based on Hough line detection using OpenCV, waits for a key press to close the window.",
        "type": "summary"
    },
    "1950": {
        "file_id": 195,
        "content": "from lazero.utils.importers import cv2_custom_build_init\ncv2_custom_build_init()\nimport cv2\nimport numpy as np\n# command used for reading an image from the disk, cv2.imread function is used\nimagePath = \"/root/Desktop/works/pyjom/samples/image/dog_blue_sky_split_line.png\"\n# cannot find image without dark/black boundaries.\n# use blur detection, both for blur area removal and motion blur detection for key frame sampling/filtering\n# tool for finding non-blur based black borders:\n# ffmpeg -loop 1 -i /root/Desktop/works/pyjom/samples/image/dog_blue_sky_split_line.png -t 15 -vf cropdetect -f null -\n# maybe you can change the seconds to something shorter.\nimg1 = cv2.imread(imagePath)\n# gray1 = cv2.cvtColor(img1,cv2.COLOR_BGR2GRAY)\n# edges1 = cv2.Canny(gray1,50,150,apertureSize=3)\n# blurred = cv2.GaussianBlur(img1, (5, 5), 0)\nblurred = cv2.bilateralFilter(img1, 15, 75, 75)\nedges1 = cv2.Canny(blurred, 20, 210, apertureSize=3)\ncv2.imshow(\"EDGE\", edges1)\ncv2.waitKey(0)\nlines1 = cv2.HoughLines(edges1, 1, np.pi / 180, 200)  # wtf?",
        "type": "code",
        "location": "/tests/unittest_houghline_dog_blur_detection.py:1-28"
    },
    "1951": {
        "file_id": 195,
        "content": "The code imports necessary libraries, reads an image from disk, applies blur detection using bilateral filtering to remove blur and detect motion blur, converts the image to grayscale, detects edges using Canny edge detection, displays the edges, applies HoughLines to find lines in the image, and then waits for a key press to close the window.",
        "type": "comment"
    },
    "1952": {
        "file_id": 195,
        "content": "for rho, theta in lines1[0]:\n    a = np.cos(theta)\n    b = np.sin(theta)\n    x = a * rho\n    y = b * rho\n    x_1 = int(x + 1000 * (-b))\n    y_1 = int(y + 1000 * (a))\n    x_2 = int(x - 1000 * (-b))\n    y_2 = int(y - 1000 * (a))\n    cv2.line(img1, (x_1, y_1), (x_2, y_2), (0, 0, 255), 2)\n# Creation of a GUI window in order to display the image on the screen\ncv2.imshow(\"line detection\", img1)\n# cv2.waitKey method used for holding the window on screen\ncv2.waitKey(0)\ncv2.destroyAllWindows()",
        "type": "code",
        "location": "/tests/unittest_houghline_dog_blur_detection.py:29-43"
    },
    "1953": {
        "file_id": 195,
        "content": "This code generates lines on an image based on Hough line detection. It iterates over the lines, calculates the coordinates of endpoints, and draws lines using OpenCV. The GUI window displays the image with the drawn lines, holds it open for any key press (cv2.waitKey), then destroys all windows upon closing.",
        "type": "comment"
    },
    "1954": {
        "file_id": 196,
        "content": "/tests/unittest_ffmpeg_args.py",
        "type": "filepath"
    },
    "1955": {
        "file_id": 196,
        "content": "The code processes video files using FFmpeg for tasks like cropping and scaling, with a specific command to map and filter video/audio streams. This is part of a larger script that uses the subprocess module.",
        "type": "summary"
    },
    "1956": {
        "file_id": 196,
        "content": "command_original = [\n    \"ffmpeg\",\n    \"-y\",\n    \"-ss\",\n    \"0\",\n    \"-to\",\n    \"59.3942553191489\",\n    \"-i\",\n    \"/root/Desktop/works/pyjom/samples/video/LiGlReJ4i.mp4\",\n    \"-ss\",\n    \"59.3942553191489\",\n    \"-to\",\n    \"62.0340000000000\",\n    \"-i\",\n    \"/root/Desktop/works/pyjom/samples/video/LiGlReJ4i.mp4\",\n    \"-ss\",\n    \"0\",\n    \"-to\",\n    \"62.034\",\n    \"-i\",\n    \"/root/Desktop/works/pyjom/samples/video/LiGlReJ4i.mp4\",\n    \"-filter_complex\",\n    \"[0:v]crop=h=1099:w=717:x=1:y=72[s0];[s0]pad=color=black:height=max(ih\\\\, ceil(iw*max(1080/1920\\\\, ih/iw))):width=max(iw\\\\, ceil(ih*max(1920/1080\\\\, iw/ih))):x=floor((max(iw\\\\, ceil(ih*max(1920/1080\\\\, iw/ih)))-iw)/2):y=floor((max(ih\\\\, ceil(iw*max(1080/1920\\\\, ih/iw)))-ih)/2)[s1];[s1]scale=1920:1080[s2];[s2]scale=ceil((iw*0.15555555555555556)/4)*4:ceil((ih*0.15555555555555556)/4)*4[s3];[1:v]pad=color=black:height=max(ih\\\\, ceil(iw*max(1080/1920\\\\, ih/iw))):width=max(iw\\\\, ceil(ih*max(1920/1080\\\\, iw/ih))):x=floor((max(iw\\\\, ceil(ih*max(1920/1080\\\\, iw/ih)))-iw",
        "type": "code",
        "location": "/tests/unittest_ffmpeg_args.py:1-23"
    },
    "1957": {
        "file_id": 196,
        "content": "This code uses FFmpeg to split a video file into segments, applies various filters and transformations to the segments, and finally scales and pads them before saving the final output.",
        "type": "comment"
    },
    "1958": {
        "file_id": 196,
        "content": ")/2):y=floor((max(ih\\\\, ceil(iw*max(1080/1920\\\\, ih/iw)))-ih)/2)[s4];[s4]scale=1920:1080[s5];[s5]scale=ceil((iw*0.15555555555555556)/4)*4:ceil((ih*0.15555555555555556)/4)*4[s6];[s3][s6]concat=n=2[s7]\",\n    \"-map\",\n    \"[s7]\",\n    \"-map\",\n    \"2:a\",\n    \"/dev/shm/2c6b1466-6186-41dd-9ce3-2f757c082c5a.mp4\",\n]\ncommand2 = [\n    \"ffmpeg\",\n    \"-y\",\n    \"-ss\",\n    \"0\",\n    \"-to\",\n    \"59.3942553191489\",\n    \"-i\",\n    \"/root/Desktop/works/pyjom/samples/video/LiGlReJ4i.mp4\",\n    \"-ss\",\n    \"0\",\n    \"-to\",\n    \"62.034\",\n    \"-i\",\n    \"/root/Desktop/works/pyjom/samples/video/LiGlReJ4i.mp4\",\n    \"-filter_complex\",\n    \"[0:v]crop=h=1099:w=717:x=1:y=72[s0];[s0]pad=color=black:height=max(ih\\\\, ceil(iw*max(1080/1920\\\\, ih/iw))):width=max(iw\\\\, ceil(ih*max(1920/1080\\\\, iw/ih))):x=floor((max(iw\\\\, ceil(ih*max(1920/1080\\\\, iw/ih)))-iw)/2):y=floor((max(ih\\\\, ceil(iw*max(1080/1920\\\\, ih/iw)))-ih)/2)[s1];[s1]scale=1920:1080[s2];[s2]scale=ceil((iw*0.15555555555555556)/4)*4:ceil((ih*0.15555555555555556)/4)*4[s3]\",\n    \"-map\",\n    \"[s3]\",",
        "type": "code",
        "location": "/tests/unittest_ffmpeg_args.py:23-48"
    },
    "1959": {
        "file_id": 196,
        "content": "The code is constructing a command for the ffmpeg tool to process and concatenate multiple video inputs. It applies filters such as cropping, padding, scaling, and extracts specific parts of videos before concatenating them into a single output video file. The resulting command is being stored in `command1` and `command2`.",
        "type": "comment"
    },
    "1960": {
        "file_id": 196,
        "content": "    \"-map\",\n    \"1:a\",\n    \"/dev/shm/2c6b1466-6186-41dd-9ce3-2f757c082c5a.mp4\",\n]\ncommand3 = [\n    \"ffmpeg\",\n    \"-y\",\n    \"-ss\",\n    \"59.3942553191489\",\n    \"-to\",\n    \"62.0340000000000\",\n    \"-i\",\n    \"/root/Desktop/works/pyjom/samples/video/LiGlReJ4i.mp4\",\n    \"-ss\",\n    \"0\",\n    \"-to\",\n    \"62.034\",\n    \"-i\",\n    \"/root/Desktop/works/pyjom/samples/video/LiGlReJ4i.mp4\",\n    \"-filter_complex\",\n    \"[0:v]pad=color=black:height=max(ih\\\\, ceil(iw*max(1080/1920\\\\, ih/iw))):width=max(iw\\\\, ceil(ih*max(1920/1080\\\\, iw/ih))):x=floor((max(iw\\\\, ceil(ih*max(1920/1080\\\\, iw/ih)))-iw)/2):y=floor((max(ih\\\\, ceil(iw*max(1080/1920\\\\, ih/iw)))-ih)/2)[s4];[s4]scale=1920:1080[s5];[s5]scale=ceil((iw*0.15555555555555556)/4)*4:ceil((ih*0.15555555555555556)/4)*4[s6]\",\n    \"-map\",\n    \"[s6]\",\n    \"-map\",\n    \"1:a\",\n    \"/dev/shm/2c6b1466-6186-41dd-9ce3-2f757c082c5a.mp4\",\n]\ncommandImprovised = command_original = [\n    \"ffmpeg\",\n    \"-y\",\n    \"-ss\",\n    \"0\",\n    \"-to\",\n    \"59.3942553191489\",\n    \"-i\",\n    \"/root/Desktop/works/pyjom/samples/video/LiGlReJ4i.mp4\",",
        "type": "code",
        "location": "/tests/unittest_ffmpeg_args.py:49-84"
    },
    "1961": {
        "file_id": 196,
        "content": "This code is using FFmpeg command line arguments to perform operations on video files. It's mapping streams, applying filters for scaling and padding, setting start/end times, and specifying output file paths. The code is likely involved in video processing or manipulation tasks.",
        "type": "comment"
    },
    "1962": {
        "file_id": 196,
        "content": "    \"-ss\",\n    \"59.3942553191489\",\n    \"-to\",\n    \"62.0340000000000\",\n    \"-i\",\n    \"/root/Desktop/works/pyjom/samples/video/LiGlReJ4i.mp4\",\n    \"-ss\",\n    \"0\",\n    \"-to\",\n    \"62.034\",\n    \"-i\",\n    \"/root/Desktop/works/pyjom/samples/video/LiGlReJ4i.mp4\",\n    \"-filter_complex\",\n    \"[0:v]crop=h=1099:w=717:x=1:y=72[s0];[s0]pad=color=black:height=max(ih\\\\, ceil(iw*max(1080/1920\\\\, ih/iw))):width=max(iw\\\\, ceil(ih*max(1920/1080\\\\, iw/ih))):x=floor((max(iw\\\\, ceil(ih*max(1920/1080\\\\, iw/ih)))-iw)/2):y=floor((max(ih\\\\, ceil(iw*max(1080/1920\\\\, ih/iw)))-ih)/2)[s1];[s1]scale=1920:1080[s2];[s2]scale=ceil((iw*0.15555555555555556)/4)*4:ceil((ih*0.15555555555555556)/4)*4,setsar=1[s3];[1:v]pad=color=black:height=max(ih\\\\, ceil(iw*max(1080/1920\\\\, ih/iw))):width=max(iw\\\\, ceil(ih*max(1920/1080\\\\, iw/ih))):x=floor((max(iw\\\\, ceil(ih*max(1920/1080\\\\, iw/ih)))-iw)/2):y=floor((max(ih\\\\, ceil(iw*max(1080/1920\\\\, ih/iw)))-ih)/2)[s4];[s4]scale=1920:1080[s5];[s5]scale=ceil((iw*0.15555555555555556)/4)*4:ceil((ih*0.15555555555555556)/4)*4,setsar=1[s6];[s3][s6]concat=n=2[s7]\",",
        "type": "code",
        "location": "/tests/unittest_ffmpeg_args.py:85-98"
    },
    "1963": {
        "file_id": 196,
        "content": "This code is using FFmpeg to crop, scale, and concatenate video streams. It first specifies start and end times for the input video file \"/root/Desktop/works/pyjom/samples/video/LiGlReJ4i.mp4\", then applies a series of filters including cropping, padding, scaling, and setting aspect ratio. Finally, it concatenates the resulting streams for output.",
        "type": "comment"
    },
    "1964": {
        "file_id": 196,
        "content": "    \"-map\",\n    \"[s7]\",\n    \"-map\",\n    \"2:a\",\n    \"/dev/shm/2c6b1466-6186-41dd-9ce3-2f757c082c5a.mp4\",\n]\nimport subprocess\nsubprocess.run(commandImprovised)",
        "type": "code",
        "location": "/tests/unittest_ffmpeg_args.py:99-107"
    },
    "1965": {
        "file_id": 196,
        "content": "This code chunk is part of a larger script that uses the subprocess module to run an FFmpeg command. The command maps video stream from input file \"[s7]\" and audio stream from track 2 to output \"/dev/shm/2c6b1466-6186-41dd-9ce3-2f757c082c5a.mp4\".",
        "type": "comment"
    },
    "1966": {
        "file_id": 197,
        "content": "/tests/unittest_ffmpegVideoPreProductionFilter.py",
        "type": "filepath"
    },
    "1967": {
        "file_id": 197,
        "content": "This code imports necessary modules, checks ffmpeg, and utilizes MediaInfo for duration. It uses UUID to generate a unique cache file name. The code tests text detection in videos using ffmpeg filters, iterating through videoPaths and applying the filter on each video, while handling false positives and potential None output.",
        "type": "summary"
    },
    "1968": {
        "file_id": 197,
        "content": "from test_commons import *\nfrom pyjom.medialang.processors.dotProcessor import ffmpegVideoPreProductionFilter\nimport tempfile\n# import MediaInfo\nvideoPaths = {\n    \"text\": \"/root/Desktop/works/pyjom/samples/video/dog_with_text.mp4\",\n    \"logo\": \"/root/Desktop/works/pyjom/samples/video/LkS8UkiLL.mp4\",\n    # \"pip\":\"/root/Desktop/works/pyjom/samples/video/LiGlReJ4i.mp4\", # najie\n    \"pip\": \"/root/Desktop/works/pyjom/samples/video/LiEIfnsvn.mp4\",  # double pip\n    # 'complete':\"/root/Desktop/works/pyjom/samples/video/dog_with_text.mp4\"\n}\ntempDir = \"/dev/shm/medialang\"  # anyway we just want something else...\ntest_ffmpeg = True\ntest_text_detector = False\ndef getVideoDuration(filePath):\n    from MediaInfo import MediaInfo\n    info = MediaInfo(filename=videoPath)\n    infoData = info.getInfo()\n    # print(infoData)\n    # breakpoint()\n    defaultWidth = infoData[\"videoWidth\"]\n    defaultHeight = infoData[\"videoHeight\"]\n    # print(infoData)\n    # print(infoData.keys())\n    # breakpoint()\n    start = 0\n    end = float(infoData[\"videoDuration\"])",
        "type": "code",
        "location": "/tests/unittest_ffmpegVideoPreProductionFilter.py:1-34"
    },
    "1969": {
        "file_id": 197,
        "content": "The code imports necessary modules, defines video paths and temporary directory locations, tests ffmpeg functionality, and retrieves the duration of a video using MediaInfo library.",
        "type": "comment"
    },
    "1970": {
        "file_id": 197,
        "content": "    return end\ntestSubject = \"complete\"\nwith tempfile.TemporaryDirectory(prefix=tempDir) as allocatedTmpDir:\n    print(\"Allocated tmpDir:\", allocatedTmpDir)\n    if testSubject == \"logo\":\n        videoPath = videoPaths[\"logo\"]\n        filters = [\"logoRemoval\"]  # how the fuck?\n    elif testSubject == \"text\":\n        videoPath = videoPaths[\"text\"]\n        filters = [\"textRemoval\"]\n    elif testSubject == \"pip\":\n        videoPath = videoPaths[\"pip\"]\n        filters = [\"pipCrop\"]\n    elif testSubject == \"complete\":\n        # videoPath = videoPaths['complete']\n        # filters = ['pipCrop','textRemoval']\n        filters = [\"pipCrop\", \"textRemoval\", \"logoRemoval\"]\n    else:\n        raise Exception(\"Unknown testSubject: %s\" % testSubject)\n    # videoFileName = os.path.basename(videoPath)\n    # # we use the full video here? to check if this shit really works?\n    # # videoFile = os.path.join(allocatedTmpDir,videoFileName)\n    import uuid\n    cacheId = str(uuid.uuid4())\n    fileExtension = \"mp4\"\n    cacheFileName = \".\".join([cacheId, fileExtension])",
        "type": "code",
        "location": "/tests/unittest_ffmpegVideoPreProductionFilter.py:35-64"
    },
    "1971": {
        "file_id": 197,
        "content": "Sets temporary directory, determines filter type based on testSubject, and generates a unique cache file name using UUID.",
        "type": "comment"
    },
    "1972": {
        "file_id": 197,
        "content": "    cachePath = os.path.join(allocatedTmpDir, cacheFileName)\n    # if testSubject == 'pip':\n    #     start=5\n    #     end=10\n    if test_text_detector:\n        from pyjom.medialang.processors.dotProcessor import detectTextRegionOverTime\n        for key, videoPath in videoPaths.items():\n            if testSubject != \"complete\":\n                if key != testSubject:\n                    continue\n            print(\"TESTING: %s\" % key)\n            start = 0\n            end = getVideoDuration(videoPath)\n            # regions = detectTextRegionOverTime(videoPath, start, end)\n            regions = detectTextRegionOverTime(\n                videoPath, 10, 20\n            )  # now we change the start and end.\n            for key, item in regions.items():\n                # could be empty here.\n                print(\"KEY:\", key)\n                print(\"ITEM:\", item)\n            # how to merge continual shits?\n        # pretty much None currently.\n        breakpoint()\n    if test_ffmpeg:\n        # the logoRemoval filter may make the video unwatchable if too many false positive areas were found.",
        "type": "code",
        "location": "/tests/unittest_ffmpegVideoPreProductionFilter.py:65-97"
    },
    "1973": {
        "file_id": 197,
        "content": "This code snippet is testing text detection in videos and ffmpeg filter functionality. It loops through videoPaths, detects text regions over time using `detectTextRegionOverTime` function, and prints the key and item for each detected region. It also handles None output for ffmpeg tests, and mentions potential false positive issues with the logoRemoval filter.",
        "type": "comment"
    },
    "1974": {
        "file_id": 197,
        "content": "        for key, videoPath in videoPaths.items():\n            if testSubject != \"complete\":\n                if key != testSubject:\n                    continue\n            print(\"TESTING: %s\" % key)\n            start = 0\n            end = getVideoDuration(videoPath)\n            output = ffmpegVideoPreProductionFilter(\n                videoPath,\n                cachePath=cachePath,\n                start=start,\n                end=end,\n                filters=filters,\n                preview=True,\n            )  # resolution? make it sufficiently low!\n            print(\"ffmpeg pre production filter processing done.\")\n            print(\"output location:\", output)\n            breakpoint()",
        "type": "code",
        "location": "/tests/unittest_ffmpegVideoPreProductionFilter.py:98-117"
    },
    "1975": {
        "file_id": 197,
        "content": "The code iterates through videoPaths and tests the filter on each video. If testSubject is not \"complete\", it skips the iteration unless the key matches the testSubject. It then applies the ffmpegVideoPreProductionFilter to the video, prints the output location, and breaks the loop.",
        "type": "comment"
    },
    "1976": {
        "file_id": 198,
        "content": "/tests/unittest_full_text_search_peewee_sqlite.py",
        "type": "filepath"
    },
    "1977": {
        "file_id": 198,
        "content": "The code imports modules and sets up a SQLite database for full-text search. It defines a model class, populates the table with data, adds/updates a video, searches \"python world\" using BM25 algorithm, limits results to 2, and prints each result. Debugging breakpoints are included.",
        "type": "summary"
    },
    "1978": {
        "file_id": 198,
        "content": "from peewee import *\nfrom playhouse.sqlite_ext import SqliteExtDatabase, FTSModel, SearchField, RowIDField\ndb_path = \"test_fulltext_search.db\"\ndb = SqliteExtDatabase(\n    db_path, pragmas={\"journal_mode\": \"wal\", \"cache_size\": -1024 * 64}\n)\nclass BilibiliVideoIndex(FTSModel):\n    rowid = RowIDField()  # this does not support\n    title = SearchField()\n    content = SearchField()\n    class Meta:\n        database = None  # that's good.\n        options = {\"tokenize\": \"porter\"}  # you need manually separate some\ndb.create_tables([BilibiliVideoIndex])\nimport uuid\nrandomContent = lambda: str(uuid.uuid4())\nobject, flag = BilibiliVideoIndex.get_and_update_or_create(\n    rowid=1, title=randomContent(), content=randomContent(), _unique_keys=[\"rowid\"]\n)\nBilibiliVideoIndex.get_and_update_or_create(\n    rowid=2,\n    title=\"hello world\",\n    content=\"learn python the hard way\",\n    _unique_keys=[\"rowid\"],\n)\nBilibiliVideoIndex.get_and_update_or_create(\n    rowid=3,\n    title=\"hello world\",\n    content=\"learn python the hard way\",\n    _unique_keys=[\"rowid\"],",
        "type": "code",
        "location": "/tests/unittest_full_text_search_peewee_sqlite.py:1-42"
    },
    "1979": {
        "file_id": 198,
        "content": "This code imports necessary modules and sets up a SQLite database with full-text search capabilities. It defines a model class, BilibiliVideoIndex, and creates its corresponding table in the database. Using the get_and_update_or_create method, it populates the table with data for three records, ensuring uniqueness based on the rowid field.",
        "type": "comment"
    },
    "1980": {
        "file_id": 198,
        "content": ")\nBilibiliVideoIndex.get_and_update_or_create(\n    rowid=4,\n    title=\"hello world\",\n    content=\"learn python the hard way\",\n    _unique_keys=[\"rowid\"],\n)\nprint(object)\nprint(flag)\nprint(object.rowid, object.title, object.content)\n# don't know what magic is inside. whatever.\n# updated. my lord.\n# now search for it.\nterm = \"python world\"\nresults = BilibiliVideoIndex.search_bm25(term).limit(2)  # just how many?\n# breakpoint()\n# it does have the limit.\n# it is ordered.\nfor result in results:\n    print(\"RESULT\", result)\n    breakpoint()",
        "type": "code",
        "location": "/tests/unittest_full_text_search_peewee_sqlite.py:43-68"
    },
    "1981": {
        "file_id": 198,
        "content": "Code adds a video to BilibiliVideoIndex, updates it, and searches for \"python world\" using BM25 algorithm. Limits search results to 2, then prints each result. Breakpoints inserted for debugging.",
        "type": "comment"
    },
    "1982": {
        "file_id": 199,
        "content": "/tests/unittest_sqlalchemy_1.3_alternative_wrapper_peewee.py",
        "type": "filepath"
    },
    "1983": {
        "file_id": 199,
        "content": "The code initializes a Peewee SQLite database, defines models, performs CRUD operations, checks Bilibili videos, and handles non-existent usernames. It skips error handling for exceptions.",
        "type": "summary"
    },
    "1984": {
        "file_id": 199,
        "content": "# now we try to create and persist a database.\n# do not delete it. we will check again.\n# the data we put into are some timestamps.\n# some peewee by the same guy who developed some database.\n# https://github.com/coleifer/peewee\n# 1.3.24 original sqlalchemy version, for our dearly chatterbot.\n# currently: 1.4.42\n# warning! might be incompatible.\nfrom peewee import *\n# some patch on /usr/local/lib/python3.9/dist-packages/peewee.py:3142\n# is it just a single file? no other files?\n# @property\n# def Model(self): # this is interesting. does it work as expected?\n#     class BaseModel(Model):\n#         class Meta:\n#             database = self\n#     return BaseModel\ndb = SqliteDatabase(\"my_database.db\")  # this database exists in local filesystem.\nclass User(db.Model):\n    username = CharField(unique=True)\n    # what about let's modify this shit?\nclass Account(db.Model):\n    # charlie_account.user_id to get username?\n    user = ForeignKeyField(User)  # what is this??\n    # if you don't set field, the user_id will be the default User.id",
        "type": "code",
        "location": "/tests/unittest_sqlalchemy_1.3_alternative_wrapper_peewee.py:1-39"
    },
    "1985": {
        "file_id": 199,
        "content": "This code sets up a Peewee SQLite database named \"my_database.db\" and defines two models: User and Account. The User model has a unique username field, while the Account model references the User model through a ForeignKeyField.",
        "type": "comment"
    },
    "1986": {
        "file_id": 199,
        "content": "    # user = ForeignKeyField(User, field=User.username) # what is this??\n    password = (\n        CharField()\n    )  # you need to create a new table. do not modify this in place.\n    # maybe you want tinydb or something else.\n# User.bind(db) # this can dynamically change the database. maybe.\nclass User2(Model):  # what is this model for? empty?\n    username = CharField(unique=True)\nimport datetime\nclass BilibiliVideo(db.Model):\n    bvid = CharField(unique=True)\n    visible = BooleanField()\n    last_check = DateTimeField(\n        default=datetime.datetime.now\n    )  # this is default callable. will be managed as expected\n    # poster = ForeignKeyField(User) # is it my account anyway?\n# db.connect()\n# if using context manager, it will auto connect. no need to do shit.\n# are you sure you want to comment out the db.connect?\n# actually no need to connect this. it will auto connect.\ndb.create_tables(\n    [User, Account, BilibiliVideo]\n)  # it is the same damn database. but shit has happened already.\n# it is the foreign key reference.",
        "type": "code",
        "location": "/tests/unittest_sqlalchemy_1.3_alternative_wrapper_peewee.py:40-71"
    },
    "1987": {
        "file_id": 199,
        "content": "Code snippet is for creating tables and defining fields in a Peewee database. User2 seems empty, ForeignKeyField references are used, and db.connect() can be omitted with context manager.",
        "type": "comment"
    },
    "1988": {
        "file_id": 199,
        "content": "# charlie = User.create(username='charlie') # fail the unique check. will raise exception.\ncharlie, flag = User.get_or_create(username=\"charlie\")  # will work without exception.\n# print(charlie)\n# breakpoint()\n# why we can pass a function instead of the object?\n# last_check = datetime.datetime.now()\nvideo_record, flag = BilibiliVideo.get_or_create(bvid=\"BV123\", visible=False)\n# print(video_record) # it will be good.\n# breakpoint()\nnext_check_time = datetime.datetime.now() - datetime.timedelta(\n    minutes=20\n)  # every 20 minutes check these things.\n# but for those which are already recognized as visible, we may not want to check these video till we select/search them. this is to reserve bandwidth.\nprint(\"NEXT CHECK TIME:\", next_check_time)\nresults_0 = BilibiliVideo.select().where(\n    BilibiliVideo.last_check < datetime.datetime.now()\n)  # needs to check\nresults_1 = BilibiliVideo.select().where(\n    BilibiliVideo.last_check > datetime.datetime.now()\n)  # no need to check\nprint(results_0)\nprint(results_1)  # these are just raw sql statements. have't executed yet.",
        "type": "code",
        "location": "/tests/unittest_sqlalchemy_1.3_alternative_wrapper_peewee.py:73-102"
    },
    "1989": {
        "file_id": 199,
        "content": "This code uses the `get_or_create` method to create or retrieve a User object with a specific username. It also retrieves a BilibiliVideo object based on a BVID, checks the last check time for videos, and selects videos that need to be checked or those that don't need to be checked. The results are printed for reference.",
        "type": "comment"
    },
    "1990": {
        "file_id": 199,
        "content": "breakpoint()\n# warning: our table name is lowercased. may cause trouble.\n# but many sql statements are lower cased. case insensitive. at least my data are not case insensitive.\ncharlie_account, flag = Account.get_or_create(\n    user=charlie, password=\"abcd\"\n)  # this is not unique. warning!\nprint(charlie_account)\n# breakpoint()\n# charlie = User.update(username='michael') # no insertion?\n# use get_or_create here.\nmichael = User.get_or_create(username=\"michael\")\n# (data, flag)\ndata = User.get()  # this can only get one such instance?\n# get one single instance, aka: first.\n# print(data)\n# breakpoint()\nselection = User.select()  # still iterable?\n# breakpoint()\n# let's bind some database.\n# User2.bind(db)\n# if i don't bind the database what would happen?\n# error!\n# you need create such table first.\n# User2.create_table()\ndb.create_tables([User2])\nUser2.get_or_create(username=\"abcdef\")\nprint([x for x in User2.select()])\nusername = \"nonexistant\"\n# try:\nanswer = User2.get_or_none(User2.username == username)  # still raise exception huh?",
        "type": "code",
        "location": "/tests/unittest_sqlalchemy_1.3_alternative_wrapper_peewee.py:103-139"
    },
    "1991": {
        "file_id": 199,
        "content": "This code defines a Peewee model for a User class and performs CRUD operations like getting, creating, updating, and deleting users. It also demonstrates binding the database and creating tables. The code uses try-except to handle nonexistent usernames and raises an exception if no record is found.",
        "type": "comment"
    },
    "1992": {
        "file_id": 199,
        "content": "print(\"ANSWER:\", answer)  # great this is simpler.\nif answer is None:\n    print(\"username does not exist:\", username)\n# except Exception as e:\n#     # print('exception type:', type(e))\n#     print('username does not exist:', username)\n#     # exception type: <class '__main__.User2DoesNotExist'>",
        "type": "code",
        "location": "/tests/unittest_sqlalchemy_1.3_alternative_wrapper_peewee.py:140-146"
    },
    "1993": {
        "file_id": 199,
        "content": "This code is printing an answer and checking if it's None. If the answer is None, it prints that the username does not exist. It skips error handling for exceptions.",
        "type": "comment"
    },
    "1994": {
        "file_id": 200,
        "content": "/tests/unittest_nsfw_video_score.py",
        "type": "filepath"
    },
    "1995": {
        "file_id": 200,
        "content": "The code utilizes a trained model to detect NSFW content in videos and images, ensuring compliance by posting non-sexual content through an API. It stores classification probabilities and handles exceptions for unknown test_flags. However, only GIFs can be posted currently with caution about picture stretching.",
        "type": "summary"
    },
    "1996": {
        "file_id": 200,
        "content": "# we take max for the concerned ones, and take mean for the unconcerned ones.\nfrom test_commons import *\nimport requests\nfrom lazero.network.checker import waitForServerUp\nfrom pyjom.videotoolbox import getVideoFrameIteratorWithFPS\nfrom typing import Literal\ngateway = \"http://localhost:8511/\"\nfrom pyjom.mathlib import superMean, superMax\nfrom lazero.utils.importers import cv2_custom_build_init\ncv2_custom_build_init()\nimport cv2\n# suggest you not to use this shit.\n# import math\nfrom pyjom.imagetoolbox import resizeImageWithPadding, scanImageWithWindowSizeAutoResize\nfrom lazero.filesystem import tmpdir, tmpfile\ntmpdirPath = \"/dev/shm/medialang/nsfw\"\nimport uuid\nwaitForServerUp(8511, \"nsfw nodejs server\")\nimport os\ntest_flag = \"nsfw_video\"\n# test_flag = \"nsfw_image\"\n# test_flag = \"scanning\"\n# test_flag = \"paddinging\"\nsource = \"/root/Desktop/works/pyjom/samples/video/cute_cat_gif.gif\"\nimport numpy as np\ndef processNSFWServerImageReply(reply):\n    mDict = {}\n    for elem in reply:\n        className, probability = elem[\"className\"], elem[\"probability\"]",
        "type": "code",
        "location": "/tests/unittest_nsfw_video_score.py:1-44"
    },
    "1997": {
        "file_id": 200,
        "content": "The code imports necessary libraries, initializes certain functions and variables, and defines the processNSFWServerImageReply function which processes image classification reply from the server. It is for testing NSFW detection in videos or images, with options to test different aspects such as scanning, padding, etc. Note that it may not be recommended to use some parts of the code.",
        "type": "comment"
    },
    "1998": {
        "file_id": 200,
        "content": "        mDict.update({className: probability})\n    return mDict\ndef processNSFWReportArray(\n    NSFWReportArray,\n    average_classes=[\"Neutral\"],\n    get_max_classes=[\"Drawing\", \"Porn\", \"Sexy\", \"Hentai\"],\n):\n    assert set(average_classes).intersection(set(get_max_classes)) == set()\n    NSFWReport = {}\n    for element in NSFWReportArray:\n        for key in element.keys():\n            NSFWReport[key] = NSFWReport.get(key, []) + [element[key]]\n    for average_class in average_classes:\n        NSFWReport[average_class] = superMean(NSFWReport.get(average_class, [0]))\n    for get_max_class in get_max_classes:\n        NSFWReport[get_max_class] = superMax(NSFWReport.get(get_max_class, [0]))\n    return NSFWReport\nfrom pyjom.commons import checkMinMaxDict\n# you can reuse this, really.\ndef NSFWFilter(\n    NSFWReport,\n    filter_dict={\n        \"Neutral\": {\"min\": 0.5},\n        \"Sexy\": {\"max\": 0.5},\n        \"Porn\": {\"max\": 0.5},\n        \"Hentai\": {\"max\": 0.5},\n        \"Drawing\": {\"max\": 0.5},\n    },\n    debug=False,\n):\n    for key in filter_dict:",
        "type": "code",
        "location": "/tests/unittest_nsfw_video_score.py:45-80"
    },
    "1999": {
        "file_id": 200,
        "content": "This code processes an NSFW report array and returns a filtered dictionary. It updates the dictionary with class names as keys and their corresponding probabilities. Then, it calculates the average and maximum scores for certain classes. Lastly, it applies filters to the resulting dictionary based on specified minimum or maximum threshold values for each class.",
        "type": "comment"
    }
}