{
    "3900": {
        "file_id": 476,
        "content": "SERVER_PORT=5463\nif __name__ == '__main__':\n    # from pydantic import BaseModel\n    # import numpy as np\n    import numpy_serializer\n    # from typing import Union\n    # class Image(BaseModel):\n    #     image:Union[str,bytes]\n    from fastapi import FastAPI, Body\n    app = FastAPI()\n    @app.post(\"/\")\n    def receiveImage(image:bytes=Body(default=None),\n        isBytes:bool =False,\n    encoding:str='utf-8', debug:bool=False):\n        # return book\n        # print('image type:',type(image))\n        # print(image)\n        import urllib.parse\n        image = image.removeprefix(b'image=') # fuck man.\n        image = urllib.parse.unquote_to_bytes(image)\n        if debug:\n            print(\"isBytes:\",isBytes)\n        if not isBytes:\n            image = image.decode(encoding) #fuck?\n            # read image from path, url\n        else:\n            image = numpy_serializer.from_bytes(image)\n        if debug:\n            print('shape?',image.shape)\n            print('image?',image)\n        return \"good\"\n    import uvicorn\n ",
        "type": "code",
        "location": "/tests/post_numpy_array/server.py:2-39"
    },
    "3901": {
        "file_id": 476,
        "content": "This code is setting up a FastAPI server on port 5463. It defines an endpoint at the root (\"/\") that receives an image either in bytes or as a string, and returns \"good\" as a response. The image data can be decoded from bytes using numpy_serializer or read from a file or URL if it's received as a string.",
        "type": "comment"
    },
    "3902": {
        "file_id": 476,
        "content": "   # checking: https://9to5answer.com/python-how-to-use-fastapi-and-uvicorn-run-without-blocking-the-thread\n    def run(host='0.0.0.0',port=SERVER_PORT): \n        \"\"\"\n        This function to run configured uvicorn server.\n        \"\"\"\n        uvicorn.run(app=app, host=host, port=port)\n    run()",
        "type": "code",
        "location": "/tests/post_numpy_array/server.py:39-46"
    },
    "3903": {
        "file_id": 476,
        "content": "This function runs a configured Uvicorn server non-blocking, allowing concurrent tasks.",
        "type": "comment"
    },
    "3904": {
        "file_id": 477,
        "content": "/tests/pyidm_yd_dlp_download_manager_multithread/test.py",
        "type": "filepath"
    },
    "3905": {
        "file_id": 477,
        "content": "Code checks the value of 'option' variable and performs different download tasks based on its value. If option is 1, it uses yt_dlp library to download a video file. If option is 2, it uses pySmartDL library to download a GIF file. If option is 3, it uses firedm library for the same purpose. After each download task, it prints the status and downloaded file path.",
        "type": "summary"
    },
    "3906": {
        "file_id": 477,
        "content": "url = \"https://media3.giphy.com/media/wTrXRamYhQzsY/giphy.gif?cid=dda24d502m79hkss38jzsxteewhs4e3ocd3iqext2285a3cq&rid=giphy.gif&ct=g\"\n# url = \"https://media3.giphy.com/media/J9asIpW5apX7cjT2oh/giphy.gif\"\noption = 3\nif option == 1:\n    import yt_dlp\n    # import pyidm\n    path = \"./randomName.mp4\"\n    x = yt_dlp.YoutubeDL({\"outtmpl\":path,'format':'[ext=mp4]'})\n    y = x.download([url])\n    breakpoint()\nelif option == 2:\n    from pySmartDL import SmartDL\n    dest = \"./test.gif\"\n    obj = SmartDL(url, dest, threads=20)\n    obj.start()\n    # [*] 0.23 Mb / 0.37 Mb @ 88.00Kb/s [##########--------] [60%, 2s left]\n    print('DOWNLOAD FINISHED')\n    path = obj.get_dest()\n    print(\"DOWNLOADED AT:\", path)\nelif option == 3:\n    from firedm import FireDM\n    args = [\"-o\",\"./test.gif\", url]\n    settings = FireDM.pars_args(args)\n    urls = settings.pop('url')\n    controller = FireDM.Controller(view_class=FireDM.CmdView, custom_settings=settings)\n    controller.run()\n    controller.cmdline_download(urls, **settings)\n    print('FireDM download complete')",
        "type": "code",
        "location": "/tests/pyidm_yd_dlp_download_manager_multithread/test.py:1-31"
    },
    "3907": {
        "file_id": 477,
        "content": "Code checks the value of 'option' variable and performs different download tasks based on its value. If option is 1, it uses yt_dlp library to download a video file. If option is 2, it uses pySmartDL library to download a GIF file. If option is 3, it uses firedm library for the same purpose. After each download task, it prints the status and downloaded file path.",
        "type": "comment"
    },
    "3908": {
        "file_id": 478,
        "content": "/tests/qq_go_cqhttp/build.sh",
        "type": "filepath"
    },
    "3909": {
        "file_id": 478,
        "content": "This code navigates to the \"go-cqhttp\" directory and compiles it using the Go language's 'build' command.",
        "type": "summary"
    },
    "3910": {
        "file_id": 478,
        "content": "cd go-cqhttp\ngo build",
        "type": "code",
        "location": "/tests/qq_go_cqhttp/build.sh:1-2"
    },
    "3911": {
        "file_id": 478,
        "content": "This code navigates to the \"go-cqhttp\" directory and compiles it using the Go language's 'build' command.",
        "type": "comment"
    },
    "3912": {
        "file_id": 479,
        "content": "/tests/qq_go_cqhttp/launch.sh",
        "type": "filepath"
    },
    "3913": {
        "file_id": 479,
        "content": "The code changes the directory to \"go-cqhttp\" and executes the \"go-cqhttp\" script, which likely starts the CQHTTP bot.",
        "type": "summary"
    },
    "3914": {
        "file_id": 479,
        "content": "cd go-cqhttp\n./go-cqhttp",
        "type": "code",
        "location": "/tests/qq_go_cqhttp/launch.sh:1-2"
    },
    "3915": {
        "file_id": 479,
        "content": "The code changes the directory to \"go-cqhttp\" and executes the \"go-cqhttp\" script, which likely starts the CQHTTP bot.",
        "type": "comment"
    },
    "3916": {
        "file_id": 480,
        "content": "/tests/qq_go_cqhttp/tests/download_group_files.py",
        "type": "filepath"
    },
    "3917": {
        "file_id": 480,
        "content": "The code connects to a local server, retrieves status, and handles errors. It provides functions for downloading QQ group files and directories using different APIs, handling subfolders recursively, and checking for existing files. The `group_file_wholesale_downloader` function is used to download group files to a specific path, running in a loop for each group ID with optional retry and sleep mechanisms.",
        "type": "summary"
    },
    "3918": {
        "file_id": 480,
        "content": "import pathlib\nimport os\nimport requests\n# again 0.0.0.0 not avaliable. must be localhost.\nbaseurl = \"http://localhost:5700/\"\n# go-cqhttp client does not support adding friends, searching groups or something! test if we can login opqbot and this shit at the same time!\n# it is working but unable to know if it is going to kill me.\nimport time\ndef check_connection():\n    while True:\n        try:\n            response = requests.get(baseurl+\"get_status\", timeout=5)\n            response_json = response.json()\n            print(\"GO_CQHTTP STATUS:\", response_json)\n            data_json = response_json[\"data\"]\n            assert data_json[\"online\"] == True\n            print(\"connection ok\")\n            break\n        except:\n            import traceback\n            traceback.print_exc()\n            print(\"Connection error.\")\n            time.sleep(3)\ndef get_url(api):\n    assert not api.startswith(\"/\")\n    return baseurl+api\ndef ensure_dir(download_path):\n    if not os.path.exists(download_path):\n        os.mkdir(download_path)",
        "type": "code",
        "location": "/tests/qq_go_cqhttp/tests/download_group_files.py:1-34"
    },
    "3919": {
        "file_id": 480,
        "content": "This code checks the connection to a local server, retrieves and prints the status, handles errors by retrying, and provides a function for generating full URLs. It seems related to testing or managing a program that interacts with CQHTTP, a third-party service.",
        "type": "comment"
    },
    "3920": {
        "file_id": 480,
        "content": "# api = \"get_group_file_system_info\"\ndef get_group_file(group_id, file_id, busid):\n    api = \"get_group_file_url\"\n    url = get_url(api)\n    params = {\"group_id\": group_id, \"file_id\": file_id, \"busid\": busid}\n    r = requests.get(url, params=params)\n    # print(r.content)\n    content = r.json()\n    data = content[\"data\"]\n    if data!=None:\n        download_url = data[\"url\"]\n        print(\"DOWNLOAD URL:\", download_url)\n        return download_url\ndef try_pass(function):\n    try:\n        function()\n    except:\n        pass\ndef downloader(url, filepath, skip_exist=True):\n    lock = filepath+\".lock\"\n    # check lock related operations.\n    if os.path.exists(lock):\n        try_pass(lambda: os.remove(lock))\n        try_pass(lambda: os.remove(filepath))\n    # do skip if flag \"skip_exists\" is set.\n    if skip_exist:\n        if os.path.exists(filepath):\n            return  # no overwritting existing files.\n    # download command\n    cmd = 'curl -L -o \"{}\" \"{}\"'.format(filepath, url)\n    # download main logic\n    # touch lock first.",
        "type": "code",
        "location": "/tests/qq_go_cqhttp/tests/download_group_files.py:36-77"
    },
    "3921": {
        "file_id": 480,
        "content": "This code defines a function for getting group file URLs, downloading files using curl, and includes optional checks for existing files and locking mechanisms.",
        "type": "comment"
    },
    "3922": {
        "file_id": 480,
        "content": "    pathlib.Path(lock).touch()\n    os.system(cmd)\n    try_pass(lambda: os.remove(lock))\ndef recursive_get_qq_group_files(api, group_id, basepath=None, folder_id=None, download_path=\"qq_group_file_download\"):\n    ensure_dir(download_path)\n    if basepath is None:\n        basepath = os.path.join(download_path, str(group_id))\n    ensure_dir(basepath)\n    if api == \"get_group_root_files\":\n        params = {\"group_id\": group_id}  # integer for group id\n    elif api == \"get_group_files_by_folder\":\n        # integer for group id\n        params = {\"group_id\": group_id, \"folder_id\": folder_id}\n    else:\n        raise Exception(\"Unknown recursive_get_qq_group_files api\", api)\n    url = get_url(api)\n    r = requests.get(url, params=params)\n# r = requests.get(url)\n    content = r.json()\n    # print(content)\n    # breakpoint()\n    data = content[\"data\"]\n    base_files = data[\"files\"]\n    base_folders = data[\"folders\"]  # may walk recursively.\n    base_files = [] if base_files == None else base_files\n    base_folders = [] if base_folders == None else base_folders",
        "type": "code",
        "location": "/tests/qq_go_cqhttp/tests/download_group_files.py:78-109"
    },
    "3923": {
        "file_id": 480,
        "content": "Creates a directory for group files based on the group ID, downloads QQ group files recursively and handles different APIs.",
        "type": "comment"
    },
    "3924": {
        "file_id": 480,
        "content": "    # print(base_files)\n    for bfile in base_files:\n        file_id = bfile[\"file_id\"]  # prefixed with /, no need to check?\n        # any expired files present? may cause download errors?\n        file_name = bfile[\"file_name\"]\n        busid = bfile[\"busid\"]\n        download_url = get_group_file(group_id, file_id, busid)\n        if download_url == None: continue\n        filepath = os.path.join(basepath, file_name)\n        print(\"FILEPATH:\", filepath)\n        yield download_url, filepath\n        # download those base files!\n    for bfolder in base_folders:\n        # we have group_id though.\n        folder_id = bfolder[\"folder_id\"]\n        folder_name = bfolder[\"folder_name\"]\n        new_basepath = os.path.join(basepath, folder_name)\n        for download_url, filepath in recursive_get_qq_group_files(\"get_group_files_by_folder\", group_id, basepath=new_basepath, folder_id=folder_id):\n            yield download_url, filepath\n        # all the same logic.\n        # now do recursive folder search.\n    # how to download these shits? curl?",
        "type": "code",
        "location": "/tests/qq_go_cqhttp/tests/download_group_files.py:111-134"
    },
    "3925": {
        "file_id": 480,
        "content": "This code downloads group files and folders from QQ group. It first retrieves base files by iterating through the base_files list, using get_group_file to obtain the download URL for each file and storing it in the filepath. Then, it recursively downloads files within specified folders using recursive_get_qq_group_files function. This code uses os.path.join to construct file paths and continues if a download URL is None.",
        "type": "comment"
    },
    "3926": {
        "file_id": 480,
        "content": "def group_file_wholesale_downloader(group_id, download_path=\"qq_group_file_download\", skip_exist=True):\n    for download_url, filepath in recursive_get_qq_group_files(\"get_group_root_files\", group_id, download_path=download_path):\n        downloader(download_url, filepath, skip_exist=skip_exist)\n# group_id = 927825838 # more files but no base_files.\n# group_id = 537384511 # less files but have base_files\n# make it dynamic!\ndownload_path = \"/root/Desktop/works/pyjom/tests/wechat_bots/msimg32.dll_wechat_hook_webapi/official_qq_group_files\"\ngroup_ids = [927825838, 537384511] # i know i am in these groups.\n#  import time\ncheck_connection() # failsafe or not?\nfor group_id in group_ids:\n    #  while True:\n        #  try:\n    group_file_wholesale_downloader(group_id, download_path=download_path, skip_exist=True)\n    #  break\n        #  except: time.sleep(10) # auto retry.\n        # there is no need for any failsafes. maybe we are outside the groups.\n# already downloaded. waiting for updates?",
        "type": "code",
        "location": "/tests/qq_go_cqhttp/tests/download_group_files.py:137-159"
    },
    "3927": {
        "file_id": 480,
        "content": "The code defines a function `group_file_wholesale_downloader` that downloads QQ group files for specified group IDs to a specific path. It uses recursive calls to `recursive_get_qq_group_files` and `downloader` functions. The provided example group IDs (927825838, 537384511) are used with the download path \"/root/Desktop/works/pyjom/tests/wechat_bots/msimg32.dll_wechat_hook_webapi/official_qq_group_files\". The code runs this function in a loop for each group ID, potentially with retry and sleep mechanisms if needed.",
        "type": "comment"
    },
    "3928": {
        "file_id": 481,
        "content": "/tests/qq_share_autojs/account_management.sh",
        "type": "filepath"
    },
    "3929": {
        "file_id": 481,
        "content": "The code is starting the \"com.tencent.mobileqq.activity.AccountManageActivity\" activity, which likely pertains to account management in a mobile application named MobileQQ.",
        "type": "summary"
    },
    "3930": {
        "file_id": 481,
        "content": "am start  com.tencent.mobileqq.activity.AccountManageActivity",
        "type": "code",
        "location": "/tests/qq_share_autojs/account_management.sh:1-1"
    },
    "3931": {
        "file_id": 481,
        "content": "The code is starting the \"com.tencent.mobileqq.activity.AccountManageActivity\" activity, which likely pertains to account management in a mobile application named MobileQQ.",
        "type": "comment"
    },
    "3932": {
        "file_id": 482,
        "content": "/tests/qq_share_autojs/adb_autox_launch.sh",
        "type": "filepath"
    },
    "3933": {
        "file_id": 482,
        "content": "This code is using the 'adb' command to launch the 'ShortcutActivity' in AutoJS v6 on a specific device (192.168.10.3:5555). It starts an activity and passes an intent action with the path to the 'qq_share_auto.js' script as an extra parameter.",
        "type": "summary"
    },
    "3934": {
        "file_id": 482,
        "content": "adb -s 192.168.10.3:5555 shell am start -n org.autojs.autoxjs.v6/org.autojs.autojs.external.shortcut.ShortcutActivity -a android.intent.action.MAIN -e path \"/storage/emulated/0/脚本/qq_share_auto.js\"",
        "type": "code",
        "location": "/tests/qq_share_autojs/adb_autox_launch.sh:1-1"
    },
    "3935": {
        "file_id": 482,
        "content": "This code is using the 'adb' command to launch the 'ShortcutActivity' in AutoJS v6 on a specific device (192.168.10.3:5555). It starts an activity and passes an intent action with the path to the 'qq_share_auto.js' script as an extra parameter.",
        "type": "comment"
    },
    "3936": {
        "file_id": 483,
        "content": "/tests/qq_share_autojs/adb_check_lock.sh",
        "type": "filepath"
    },
    "3937": {
        "file_id": 483,
        "content": "This script checks if the phone is locked or unlocked by running \"adb -s 192.168.10.3:5555 shell dumpsys window | grep mDreamingLockscreen=false\" and then executes \"bash adb_unlock.sh\" if locked, otherwise exits. The check is performed in an infinite loop using a \"while true\" statement.",
        "type": "summary"
    },
    "3938": {
        "file_id": 483,
        "content": "function checkScreen {\n  adb -s 192.168.10.3:5555 shell dumpsys window | grep mDreamingLockscreen=false\n  if [[ $? -eq 1 ]]; then\n    echo \"phone locked\"\n    bash adb_unlock.sh\n    sleep 2\n  else\n    echo \"phone unlocked\"\n    exit\n  fi\n}\nwhile true\ndo\n  checkScreen\ndone",
        "type": "code",
        "location": "/tests/qq_share_autojs/adb_check_lock.sh:1-16"
    },
    "3939": {
        "file_id": 483,
        "content": "This script checks if the phone is locked or unlocked by running \"adb -s 192.168.10.3:5555 shell dumpsys window | grep mDreamingLockscreen=false\" and then executes \"bash adb_unlock.sh\" if locked, otherwise exits. The check is performed in an infinite loop using a \"while true\" statement.",
        "type": "comment"
    },
    "3940": {
        "file_id": 484,
        "content": "/tests/qq_share_autojs/adb_unlock.sh",
        "type": "filepath"
    },
    "3941": {
        "file_id": 484,
        "content": "This code uses ADB to simulate touch events on an Android device. It performs a power button press, a swipe gesture, enters text, and presses the back key.",
        "type": "summary"
    },
    "3942": {
        "file_id": 484,
        "content": "adb -s 192.168.10.3:5555 shell input keyevent 26\nadb -s 192.168.10.3:5555 shell input swipe 500 500 500 0\nadb -s 192.168.10.3:5555 shell input text \"Bumper\\&Mountains\"\nadb -s 192.168.10.3:5555 shell input keyevent 66",
        "type": "code",
        "location": "/tests/qq_share_autojs/adb_unlock.sh:1-4"
    },
    "3943": {
        "file_id": 484,
        "content": "This code uses ADB to simulate touch events on an Android device. It performs a power button press, a swipe gesture, enters text, and presses the back key.",
        "type": "comment"
    },
    "3944": {
        "file_id": 485,
        "content": "/tests/qq_share_autojs/appium_test.py",
        "type": "filepath"
    },
    "3945": {
        "file_id": 485,
        "content": "Code sets up Appium test for Android device using the uiautomator2 automation, launches com.android.settings app, searches for \"Battery\" and clicks it, then quits the driver if open.",
        "type": "summary"
    },
    "3946": {
        "file_id": 485,
        "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom appium import webdriver\nfrom appium.webdriver.common.appiumby import AppiumBy\ncapabilities = dict(\n    platformName='Android',\n    automationName='uiautomator2',\n    deviceName='Android',\n    appPackage='com.android.settings',\n    appActivity='.Settings',\n    language='en',\n    locale='US',\n    noSign=True\n)\nappium_server_url = 'http://localhost:4723'\ndriver = webdriver.Remote(appium_server_url, capabilities)\nel = driver.find_element(by=AppiumBy.XPATH, value='//*[@text=\"Battery\"]')\nel.click()\nif driver:\n    driver.quit()",
        "type": "code",
        "location": "/tests/qq_share_autojs/appium_test.py:1-27"
    },
    "3947": {
        "file_id": 485,
        "content": "Code sets up Appium test for Android device using the uiautomator2 automation, launches com.android.settings app, searches for \"Battery\" and clicks it, then quits the driver if open.",
        "type": "comment"
    },
    "3948": {
        "file_id": 486,
        "content": "/tests/qq_share_autojs/appium_unlock_phone.py",
        "type": "filepath"
    },
    "3949": {
        "file_id": 486,
        "content": "The code sets up an Appium test for unlocking an Android phone without requiring the device password. It initializes capabilities, connects to the appium server, checks if the screen is locked, and uses a bash script to unlock it.",
        "type": "summary"
    },
    "3950": {
        "file_id": 486,
        "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom appium import webdriver\nfrom appium.webdriver.common.appiumby import AppiumBy\ncapabilities = dict(\n    platformName='Android',\n    automationName='uiautomator2',\n    deviceName='Android',\n    appPackage='com.android.settings',\n    appActivity='.Settings',\n    language='en',\n    locale='US',\n    noSign=True,\n    skipUnlock=True\n    # it tries to clear my password.\n)\nappium_server_url = 'http://localhost:4723'\ndriver = webdriver.Remote(appium_server_url, capabilities)\nprint('is screen ready?')\nwhile True:\n    try:\n        locked = driver.is_locked()\n        print('locked?', locked)\n        if not locked:\n            break\n        import os\n        if locked:\n            os.system(\"bash adb_unlock.sh\")\n            print(\"UNLOCKED\")\n    except:\n        pass\n# unlocking the phone will disconnect adb sessions\nif driver:\n    driver.quit()",
        "type": "code",
        "location": "/tests/qq_share_autojs/appium_unlock_phone.py:1-42"
    },
    "3951": {
        "file_id": 486,
        "content": "The code sets up an Appium test for unlocking an Android phone without requiring the device password. It initializes capabilities, connects to the appium server, checks if the screen is locked, and uses a bash script to unlock it.",
        "type": "comment"
    },
    "3952": {
        "file_id": 487,
        "content": "/tests/qq_share_autojs/autojs_scripts/qq_account_switch.js",
        "type": "filepath"
    },
    "3953": {
        "file_id": 487,
        "content": "This code starts the \"com.tencent.mobileqq\" application, specifically the AccountManageActivity, which allows switching between different QQ accounts.",
        "type": "summary"
    },
    "3954": {
        "file_id": 487,
        "content": "app.startActivity({\n    root:true,\n        action: \"View\",\n        packageName:\"com.tencent.mobileqq\",\n        className: \"com.tencent.mobileqq.activity.AccountManageActivity\"\n    });",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/qq_account_switch.js:1-6"
    },
    "3955": {
        "file_id": 487,
        "content": "This code starts the \"com.tencent.mobileqq\" application, specifically the AccountManageActivity, which allows switching between different QQ accounts.",
        "type": "comment"
    },
    "3956": {
        "file_id": 488,
        "content": "/tests/qq_share_autojs/autojs_scripts/qq_share_auto.js",
        "type": "filepath"
    },
    "3957": {
        "file_id": 488,
        "content": "This script performs activities for QQ Share, searches \"卷王培训基地\", clicks the contact number, attempts to find and click \"发送\" while waiting for \"返回哔哩哔哩\", then removes 'flag' file using AutoJS.",
        "type": "summary"
    },
    "3958": {
        "file_id": 488,
        "content": "auto();\nvar cmd = \"am start -S -n com.tencent.mobileqq/com.tencent.mobileqq.activity.JumpActivity -a android.intent.action.VIEW -d 'mqqapi://share/to_fri?src_type=app&version=1&file_type=news&file_data=L3N0b3JhZ2UvZW11bGF0ZWQvMC9QaWN0dXJlcy9zaGFyZS9jYXQuZ2lm&file_uri=ZmlsZTovLy9zdG9yYWdlL2VtdWxhdGVkLzAvUGljdHVyZXMvc2hhcmUvY2F0LmdpZg%3D%3D&title=5ZOU5ZOp5ZOU5ZOp&description=5Za15Za15Za1&share_id=100951776&url=aHR0cHM6Ly9iMjMudHYvdUhNTDVtaQ%3D%3D&app_name=5ZOU5ZOp5ZOU5ZOp&req_type=Nw%3D%3D&mini_program_appid=MTEwOTkzNzU1Nw%3D%3D&mini_program_path=cGFnZXMvdmlkZW8vdmlkZW8%2FYnZpZD1CVjF6ZDR5MTE3V0Y%3D&mini_program_type=Mw%3D%3D&cflag=MA%3D%3D&third_sd=dHJ1ZQ%3D%3D' -e pkg_name tv.danmaku.bili\";\nshell(cmd,true);\nwaitForActivity(\"com.tencent.mobileqq.activity.ForwardRecentActivity\");\nwhile(!click(\"搜索\"));\nsetText(\"卷王培训基地\");\nwhile(!click(\"543780931\"));\nwhile(true){\nvar send =text(\"发送\").findOne(1000);\nif (send !=null){send.click();}\n// will be null.\nvar ret=text(\"返回哔哩哔哩\").findOne(1000);\nif (ret != null){ret.click();break;}",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/qq_share_auto.js:1-21"
    },
    "3959": {
        "file_id": 488,
        "content": "The script starts an activity for QQ Share, sets text, and waits for a specific activity to launch. It then clicks on \"搜索\", enters the search term \"卷王培训基地\", clicks on the contact number \"543780931\", and repeatedly tries to find the \"发送\" button while waiting for the \"返回哔哩哔哩\" button to appear before finally clicking it and breaking the loop.",
        "type": "comment"
    },
    "3960": {
        "file_id": 488,
        "content": "}\nshell(\"rm /storage/emulated/0/flag\")",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/qq_share_auto.js:22-24"
    },
    "3961": {
        "file_id": 488,
        "content": "Removes the 'flag' file from storage using AutoJS script.",
        "type": "comment"
    },
    "3962": {
        "file_id": 489,
        "content": "/tests/qq_share_autojs/autojs_scripts/show_toast.js",
        "type": "filepath"
    },
    "3963": {
        "file_id": 489,
        "content": "This code displays a toast notification with the message \"hello\" in the autojs_scripts directory.",
        "type": "summary"
    },
    "3964": {
        "file_id": 489,
        "content": "toast(\"hello\");",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/show_toast.js:1-1"
    },
    "3965": {
        "file_id": 489,
        "content": "This code displays a toast notification with the message \"hello\" in the autojs_scripts directory.",
        "type": "comment"
    },
    "3966": {
        "file_id": 490,
        "content": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js",
        "type": "filepath"
    },
    "3967": {
        "file_id": 490,
        "content": "This code reduces music volume, opens Taobao app with custom URL, handles session ID and video player settings using item ID, GG search request, and referer origin, while waiting for prompts and handling expired ones by polling, clicking \"I know\" button, setting specific text, searching for \"猫猫\", and managing volume settings.",
        "type": "summary"
    },
    "3968": {
        "file_id": 490,
        "content": "package=\"com.taobao.taobao\";\nactivity=\"com.taobao.search.searchdoor.SearchDoorActivity\";\n//activity=\"com.taobao.search.searchdoor.MultipleSearchDoorActivity\";\nvar vol=device.getMusicVolume()\ndevice.setMusicVolume(0)\n// mute the thing please?\napp.startActivity({action:\"View\",\npackageName:package,className:activity,\nroot:true,\n//category:[\"com.taobao.intent.category.search.MULTI_SEARCHDOOR\"],\ndata:\"http://s.m.taobao.com/...\",})\n // not launching 淘宝逛逛\n /*\n 2221:2022-11-02 13:02:20.328 | startActivity { calling=com.taobao.taobao:-1--1, rc=10159-1987, iTS=false, requestCode=-1, startFlags=0, target=com.taobao.taobao/com.taobao.search.searchdoor.SearchDoorActivity<true>, intent=Intent { act=android.intent.action.VIEW dat=http://s.m.taobao.com/... pkg=com.taobao.taobao cmp=com.taobao.taobao/com.taobao.search.searchdoor.SearchDoorActivity (has extras) }, extras={ NAV_START_ACTIVITY_TIME:(java.lang.Long)1667365340316, ad_type:(java.lang.String)1.0, NAV_TO_URL_START_TIME:(java.lang.Long)1667365340268, referr",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js:1-19"
    },
    "3969": {
        "file_id": 490,
        "content": "The code sets the music volume to 0 and then launches the Taobao app's search function by starting the specified activity with a specific URL. The intent action is VIEW, and it targets com.taobao.taobao/com.taobao.search.searchdoor.SearchDoorActivity.",
        "type": "comment"
    },
    "3970": {
        "file_id": 490,
        "content": "er:(java.lang.String)http://market.m.taobao.com/app/tb-source-app/video-fullpage/pages/index2?wh_weex=false&wx_navbar_transparent=true&wx_navbar_hidden=true&id=380201806724&bizParameters=%7B%22itemIds%22%3A%22681366994883%22%2C%22contentId%22%3A%22380201806724%22%2C%22videoId%22%3A%22380201806724%22%7D&videoUrl=http%3A%2F%2Fcloud.video.taobao.com%2Fplay%2Fu%2F2208882892036%2Fp%2F1%2Fe%2F6%2Ft%2F1%2F380201806724.mp4&type=cainixihuansy&source=cainixihuansy&business_spm=a211r6.cjvideo&hideAccountInfo=false&extParams=%7B%2288_bucket%22%3A%220%22%7D&scm=1007.10088.311498.0&spm=a2141.1.guessitemtab_1.5&pvid=b9ca1499-6a25-4913-9b4a-a2c703576f45&utparam=%7B%22x_sid%22%3A%2252aa36213ede47006361f9b21dbc602d%22%2C%22card_subtype%22%3A%22xgc%22%2C%22up_pvid%22%3A%22f88bbfa6-c859-44a5-94bb-e0599c889e5a%22%2C%22x_sid_cpm%22%3A%22be353521ca7fc7006361f9b20c542845%22%2C%22x_object_type%22%3A%22VIDEO_916%22%2C%22x_ad_bucketid_cpm%22%3A%2212676854%2C17296858%22%2C%22hybrid_score%22%3A0.303358%2C%22x_biz%",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js:19-19"
    },
    "3971": {
        "file_id": 490,
        "content": "This code appears to be a URL for a Taobao video page, containing various parameters and identifiers for tracking and customization purposes.",
        "type": "comment"
    },
    "3972": {
        "file_id": 490,
        "content": "22%3A%22VIDEO_916%22%2C%22sessionid%22%3A%22b9ca1499-6a25-4913-9b4a-a2c703576f45%22%2C%22tpp_buckets%22%3A%22%7E9%7EU2wG6g9N1IaCq1M7J1Ia11K6A2Tg4x4I02E6nIfMi-u9KM9NveH1FhPjhxK7AniKCnO3mIO8Kj2dCQ6NhoMCwioGO1X6ddGN2W5qOUcWe41W2PePv31PMlSe11O2XcVr31EA5_s41zO2NubdRr-Z851Q1I7Li2dFU4S93dGSkxl5dU2TcFf7dBN8Cf8d_2ImFqbdY2A1JvbdM1U1P3cdX1y4IlcdZ1L6w9ddyCN9ddBN9AeedJL7Htgd_2Qpx2jdCW2QgjdzC4w2kdDJ8B6ldF%7EwpwFaf9z%7EZb7wWs29B%7EJhwQ4f9-B22y65-1Gp2BfmB2%7EGdwGfh9O1K52Nj5GSg2RplCB4V3mIN61FhfdIGcW041AEuHshdEDn1Lj7dFY5y98dB1O4H29dz-hw3cdPL1MqbdDVj1V4mdZ2C1WfkdFEp-4mdOF1IemdU%7EXk1wC0d9G%7EPi3wJh59wNeUo1Xp%7Ezv1wYcn5wEt7Uv2dD2C7Li3dGqKuQp7dU4zk1AcedZ4W7W0idRp%7EWecwFq49HPt8Dv9dNZ82U8gdKNqS6kdQWIbkdYU4VskdQ%7EFt4wG8g9A%22%2C%22miniapphc_score%22%3A0.0%2C%22x_summary_trackInfo%22%3A%22380569870474---380569870474-new_vp_4_3-new_vp_4_3%22%2C%22pvid%22%3A%22b9ca1499-6a25-4913-9b4a-a2c703576f45%22%2C%22evo_buckets%22%3A%22evo263227_118977%23275047_321220%23286254_324141%23337973_477247evo%22%2C%22auction_sco",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js:19-19"
    },
    "3973": {
        "file_id": 490,
        "content": "The code seems to be related to tracking information, session ID, and possibly video player settings for a specific platform or application.",
        "type": "comment"
    },
    "3974": {
        "file_id": 490,
        "content": "re%22%3A0.0%2C%22scm%22%3A%221007.10088.311498.428654_37338_4631_438253_439584_428623_446528_434662_23752_438956_34262_433641_443307_25137_36851_22642_38173_25152_431777_445505_440772_438225_439515_37791_36729_1862_34124_26810_438089_445972_429366_447685_15345_10206_438387_19172_18035_439601%22%2C%22glc%22%3A%221%22%2C%22guessModelVersion%22%3A%2220211016%22%2C%22mtx_c%22%3A380201806724%2C%22matrix_score%22%3A0.0%2C%22miniapp_score%22%3A0.0%2C%22card_type%22%3A%22xgc%22%2C%22x_item_ids%22%3A%22681366994883%22%2C%22author_id%22%3A%222208882892036%22%2C%22guess_buckets%22%3A%226595_11513_11609_12894_13440_17348_19178_21337_21230_20634_22262%22%2C%22x_sytab%22%3A%221001%22%2C%22x_object_id%22%3A380201806724%7D&itemid=681366994883&item_id=681366994883&noDynamicRec=1&newItemList=1&utabtest=aliabtest184572_25123, URL_REFERER_ORIGIN:(java.lang.String)//s.m.taobao.com/h5entry?g_channelSrp=videointeract&g_tab=tbexperience&g_pfilter=daren&g_closeModues=tab&closeExpSubTab=true&g_csearchdoor_spm=a",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js:19-19"
    },
    "3975": {
        "file_id": 490,
        "content": "Code contains various parameters for a Taobao GG search request, including scm, glc, guessModelVersion, mtx_c, matrix_score, miniapp_score, card_type, x_item_ids, author_id, guess_buckets, x_sytab, and x_object_id. The item ID is 681366994883. It also includes parameters for noDynamicRec, newItemList, and utabtest, and the URL referer origin is s.m.taobao.com/h5entry.",
        "type": "comment"
    },
    "3976": {
        "file_id": 490,
        "content": "310p.14955560&spm=a310p.13800399&launchMode=android_new_task&g_closeExpSubTab=true, WEEX_NAV_PROCESSOR_TIME:(java.lang.Long)1667365340292 } }.../xintent/logs #\n */\n waitForPackage(package);\n //跳转之后可能出现过期的提示\n //可能需要轮询\n for (var i=0;i<5;i++){//triple check?\n while (true){\n     sleep(200);\n  var succ=click(\"我知道了\");\n  if (succ){break;}\n if (currentActivity() ==activity)break;\n }\n }\n mytext=\"【淘宝】https://m.tb.cn/h.UfbOyIi?sm=26a80a?tk=XjXUd0OFtMN CZ0001 「这就是：我预判了你的预判吗」点击链接直接打开\"\n setText(mytext)\n //淘宝直接输入到搜索框里面 然后用这个进入视频搜索界面\n while(!click(\"搜索\"));\nwaitForActivity(\"com.taobao.android.interactive.timeline.VideoListActivity2\")\nid(\"imgSearch\").findOne().click()\nwaitForActivity(\"com.taobao.search.searchdoor.MultipleSearchDoorActivity\")\nsetText(\"猫猫\")\n//Text(\"猫猫\")\nwhile(!click(\"搜索\"));\n//可能出现搜索失败的情况 请注意\ndevice.setMusicVolume(vol)",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js:19-54"
    },
    "3977": {
        "file_id": 490,
        "content": "Code snippet is performing actions in a Taobao app. It waits for the package, handles expired prompts by polling, clicks \"I know\" button, sets a specific text and searches for \"猫猫\". It ensures volume settings by setting music volume and possibly handles search failure scenarios.",
        "type": "comment"
    },
    "3978": {
        "file_id": 491,
        "content": "/tests/qq_share_autojs/autojs_scripts/wesee_search.js",
        "type": "filepath"
    },
    "3979": {
        "file_id": 491,
        "content": "This code initiates the WeSee app, starts the GlobalSearchActivity, and inputs the search term \"猫猫\" before triggering a search with KEYCODE_ENTER.",
        "type": "summary"
    },
    "3980": {
        "file_id": 491,
        "content": "pkg=\"com.tencent.weishi\"\nact=\"com.tencent.oscar.module.discovery.ui.GlobalSearchActivity\"\napp.startActivity({root:true,\npackageName:pkg,className:act,\naction:\"View\"})\nwaitForActivity(act)\nsetText(\"猫猫\")\nKeyCode(\"KEYCODE_ENTER\")",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/wesee_search.js:1-12"
    },
    "3981": {
        "file_id": 491,
        "content": "This code initiates the WeSee app, starts the GlobalSearchActivity, and inputs the search term \"猫猫\" before triggering a search with KEYCODE_ENTER.",
        "type": "comment"
    },
    "3982": {
        "file_id": 492,
        "content": "/tests/qq_share_autojs/launch_autojs.sh",
        "type": "filepath"
    },
    "3983": {
        "file_id": 492,
        "content": "This code uses the am start command to launch the ShortcutActivity in AutoJS, passing the path of a JavaScript file (\"/storage/emulated/0/脚本/show_toast.js\") as an argument. This could be used for executing a specific AutoJS script on the device.",
        "type": "summary"
    },
    "3984": {
        "file_id": 492,
        "content": "am start -n org.autojs.autoxjs.v6/org.autojs.autojs.external.shortcut.ShortcutActivity -a android.intent.action.MAIN -e path \"/storage/emulated/0/脚本/show_toast.js\"\n#am start -n org.autojs.autoxjs.v6/org.autojs.autojs.external.shortcut.ShortcutActivity -a android.intent.action.MAIN -e path \"/storage/emulated/0/脚本/qq_share_auto.js\"",
        "type": "code",
        "location": "/tests/qq_share_autojs/launch_autojs.sh:1-2"
    },
    "3985": {
        "file_id": 492,
        "content": "This code uses the am start command to launch the ShortcutActivity in AutoJS, passing the path of a JavaScript file (\"/storage/emulated/0/脚本/show_toast.js\") as an argument. This could be used for executing a specific AutoJS script on the device.",
        "type": "comment"
    },
    "3986": {
        "file_id": 493,
        "content": "/tests/qq_share_autojs/parse_qq_url.py",
        "type": "filepath"
    },
    "3987": {
        "file_id": 493,
        "content": "The code parses a QQ share URL, handles base64 encoding and decoding, stores values in a new dictionary for sharing, encodes URL parameters, prints them, opens the link using os.system().",
        "type": "summary"
    },
    "3988": {
        "file_id": 493,
        "content": "url = \"mqqapi://share/to_fri?src_type=app&version=1&file_type=news&file_data=L3N0b3JhZ2UvZW11bGF0ZWQvMC9QaWN0dXJlcy9zaGFyZS8xMjcyMDY0MzU0&file_uri=Y29udGVudDovL3R2LmRhbm1ha3UuYmlsaS5maWxlcHJvdmlkZXIvb3BlbnNka19leHRlcm5hbC9zaGFyZTJxcV90ZW1wNDIwOTU0OTNhYjhlZGRhZmYzMWQ1Y2ZjYWYzZjE3MDQuanBn&title=5ZOU5ZOp5ZOU5ZOp&description=5aSn5Z6L5pS/6K6654mH772c5paw5pe25Luj562U5Y23&share_id=100951776&url=aHR0cHM6Ly9iMjMudHYvdGRKZGd6WT9zaGFyZV9tZWRpdW09YW5kcm9pZCZzaGFyZV9zb3VyY2U9cXEmYmJpZD1YWTFCQjcyMUIxRjk3MzQ4REJERTQyOTdGRTFCNEFCRTI2QkFBJnRzPTE2NjcyNzU0ODI4MTY=&app_name=5ZOU5ZOp5ZOU5ZOp&req_type=Nw==&mini_program_appid=MTEwOTkzNzU1Nw==&mini_program_path=cGFnZXMvdmlkZW8vdmlkZW8/YnZpZD1CVjFuZTQxMUw3aHkmc2hhcmVfc291cmNlPXFxX3VnYyZ1bmlxdWVfaz10ZEpkZ3pZ&mini_program_type=Mw==&cflag=MA==&third_sd=dHJ1ZQ==\"\nfrom urllib.parse import urlparse, parse_qs\nparse_result=urlparse(url)\n#print(parse_result)\n#breakpoint()\n#\n#params=['count', 'encode', 'fragment', 'geturl', 'hostname', 'index', 'netloc', 'params', 'password', 'path', 'port', 'query', 'scheme', 'username']",
        "type": "code",
        "location": "/tests/qq_share_autojs/parse_qq_url.py:1-9"
    },
    "3989": {
        "file_id": 493,
        "content": "This code is parsing a URL using urllib.parse, extracting its components and possibly preparing for further processing. The URL appears to be related to QQ share and contains various parameters including app name, file data, description, etc.",
        "type": "comment"
    },
    "3990": {
        "file_id": 493,
        "content": "#for k in params:\n#    print(\"key:\",k,\"value:\",eval(\"parse_result.{}\".format(k)))\n#[scheme]://[netloc/hostname]/[path]?[query]\ndict_result=parse_qs(parse_result.query)\nnon_b64vals=[\"share_id\",\"src_type\",\"version\",\"file_type\"]\nimport base64\ndef dec_b64(v):\n    if type(v) == str:\n        v = v.encode()\n    v=base64.b64decode(v)\n    v=v.decode()\n    return v\ndef enc_b64(v):\n    if type(v) == str:\n        v = v.encode()\n    v=base64.b64encode(v)\n    v=v.decode()\n    return v\nnew_q={}\nmypic=\"/storage/emulated/0/Pictures/share/cat.gif\"\nmyuri='file://{}'.format(mypic)\nshortlink=\"uHML5mi\"\nbvid=\"BV1zd4y117WF\"\nfor k,v in dict_result.items():\n    v=v[0]\n    if k == \"file_data\":\n        v=enc_b64(mypic)\n    elif k == \"file_uri\":\n        v=enc_b64(myuri)\n    elif k == \"share_id\":\n        v=100951776\n    elif k == \"url\":\n        v=\"https://b23.tv/\"+shortlink\n        v=enc_b64(v)\n    elif k == \"mini_program_path\":\n        v=enc_b64(\"pages/video/video?bvid=\"+bvid)\n    elif k == \"description\":\n        v=enc_b64(\"喵喵喵\")\n    new_q.update({k:v})",
        "type": "code",
        "location": "/tests/qq_share_autojs/parse_qq_url.py:10-55"
    },
    "3991": {
        "file_id": 493,
        "content": "The code is parsing a QQ share URL, decoding and encoding specific values using base64, and storing them in a new dictionary. It also includes hardcoded values such as file path, shortlink, and bvid. The purpose seems to be related to sharing files or links within the QQ platform.",
        "type": "comment"
    },
    "3992": {
        "file_id": 493,
        "content": "    #for printing purpose\n    if k not in non_b64vals:\n        v=dec_b64(v)\n    print(k,\":\",v)\nfrom urllib.parse import urlencode\nnew_qs=urlencode(new_q)\nprint()\ntemplate=\"am start -n com.tencent.mobileqq/com.tencent.mobileqq.activity.JumpActivity -a android.intent.action.VIEW -d 'mqqapi://share/to_fri?{}' -e pkg_name tv.danmaku.bili\"\ncmd=template.format(new_qs)\nprint(cmd)\nimport os\nos.system(cmd)",
        "type": "code",
        "location": "/tests/qq_share_autojs/parse_qq_url.py:56-67"
    },
    "3993": {
        "file_id": 493,
        "content": "The code encodes URL parameters, prints them, and then executes a command to open a QQ share link in the mobile app. It converts base64 values if needed for printing, formats the command with URL parameters, and uses os.system() to execute the command.",
        "type": "comment"
    },
    "3994": {
        "file_id": 494,
        "content": "/tests/qq_share_autojs/test_qq_share.sh",
        "type": "filepath"
    },
    "3995": {
        "file_id": 494,
        "content": "This code launches the JumpActivity in the Tencent MobileQQ app, passing a complex URI with various data such as file type, file data, title, description, and URL to share. The shared content is related to Bilibili video recommendation server. It specifies the app name and package name (tv.danmaku.bili).",
        "type": "summary"
    },
    "3996": {
        "file_id": 494,
        "content": "am start -n com.tencent.mobileqq/com.tencent.mobileqq.activity.JumpActivity -a android.intent.action.VIEW -d 'mqqapi://share/to_fri?src_type=app&version=1&file_type=news&file_data=L3N0b3JhZ2UvZW11bGF0ZWQvMC9QaWN0dXJlcy9zaGFyZS8xMjcyMDY0MzU0&file_uri=Y29udGVudDovL3R2LmRhbm1ha3UuYmlsaS5maWxlcHJvdmlkZXIvb3BlbnNka19leHRlcm5hbC9zaGFyZTJxcV90ZW1wNDIwOTU0OTNhYjhlZGRhZmYzMWQ1Y2ZjYWYzZjE3MDQuanBn&title=5ZOU5ZOp5ZOU5ZOp&description=5aSn5Z6L5pS/6K6654mH772c5paw5pe25Luj562U5Y23&share_id=100951776&url=aHR0cHM6Ly9iMjMudHYvdGRKZGd6WT9zaGFyZV9tZWRpdW09YW5kcm9pZCZzaGFyZV9zb3VyY2U9cXEmYmJpZD1YWTFCQjcyMUIxRjk3MzQ4REJERTQyOTdGRTFCNEFCRTI2QkFBJnRzPTE2NjcyNzU0ODI4MTY=&app_name=5ZOU5ZOp5ZOU5ZOp&req_type=Nw==&mini_program_appid=MTEwOTkzNzU1Nw==&mini_program_path=cGFnZXMvdmlkZW8vdmlkZW8/YnZpZD1CVjFuZTQxMUw3aHkmc2hhcmVfc291cmNlPXFxX3VnYyZ1bmlxdWVfaz10ZEpkZ3pZ&mini_program_type=Mw==&cflag=MA==&third_sd=dHJ1ZQ==' -e pkg_name tv.danmaku.bili",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_launch_share.sh:1-1"
    },
    "3997": {
        "file_id": 494,
        "content": "This code launches the JumpActivity in the Tencent MobileQQ app, passing a complex URI with various data such as file type, file data, title, description, and URL to share. The shared content is related to Bilibili video recommendation server. It specifies the app name and package name (tv.danmaku.bili).",
        "type": "comment"
    },
    "3998": {
        "file_id": 495,
        "content": "/tests/qq_share_autojs/unlock_and_run_autox.sh",
        "type": "filepath"
    },
    "3999": {
        "file_id": 495,
        "content": "The script checks if the device is locked, runs Auto.js script, monitors the flag file for changes and loops until it completes or encounters an error.",
        "type": "summary"
    }
}