{
    "3800": {
        "file_id": 475,
        "content": "mitmproxy --mode socks5 --listen-port 8050 -w qq.log --set stream_websocket=true\n# tv.danmaku.bili",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/run_qq_capture.sh:1-3"
    },
    "3801": {
        "file_id": 475,
        "content": "This code sets up a man-in-the-middle (MITM) proxy using MitmProxy, listening on port 8050 and logging all captured traffic to 'qq.log'. It also enables WebSocket stream processing for the 'tv.danmaku.bili' application.",
        "type": "comment"
    },
    "3802": {
        "file_id": 476,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/run_bilibili_qq_share_xml.sh",
        "type": "filepath"
    },
    "3803": {
        "file_id": 476,
        "content": "This code sets up a MitM proxy in Socks5 mode, listens on port 8050, and logs websocket activity for bilibili QQ share feature.",
        "type": "summary"
    },
    "3804": {
        "file_id": 476,
        "content": "mitmproxy --mode socks5 --listen-port 8050 -w bilibili_qq_xml_share.log --set stream_websocket=true\n# tv.danmaku.bili",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/run_bilibili_qq_share_xml.sh:1-3"
    },
    "3805": {
        "file_id": 476,
        "content": "This code sets up a MitM proxy in Socks5 mode, listens on port 8050, and logs websocket activity for bilibili QQ share feature.",
        "type": "comment"
    },
    "3806": {
        "file_id": 477,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py",
        "type": "filepath"
    },
    "3807": {
        "file_id": 477,
        "content": "The code utilizes go-cqhttp and Requests library to send XML-formatted rich media messages, targeting group chats with audio and QQ Music items, requiring a group ID. It allows Python users to send messages containing JSON or XML data to a web URL with dynamic content.",
        "type": "summary"
    },
    "3808": {
        "file_id": 477,
        "content": "baseUrl = \"http://0.0.0.0:5700\"\n# try to send xml to group.\n# 私聊可以发xml 但是群聊不行 群聊只能发加密好验证好的json\n# cover = \"http://pubminishare-30161.picsz.qpic.cn/d4ad36fa-833e-4018-b994-a2da810f2d54\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes'?><msg templateID=\"123\" url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" serviceID=\"1\" action=\"web\" actionData=\"\" a_actionData=\"\" i_actionData=\"\" brief=\"[QQ小程序]哔哩哔哩\" flag=\"0\"><item layout=\"2\"><picture cover=\"{}\"/><title>哔哩哔哩</title><summary>【C语言】《带你学C带你飞》</summary></item><source url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" icon=\"https://open.gtimg.cn/open/app_icon/00/95/17/76/100951776_100_m.png?t=1657091104\" name=\"哔哩哔哩\" appid=\"0\" action=\"web\" actionData=\"\" a_actionData=\"tencent0://\" i_actionData=\"\"/></msg>\"\"\".format(\n# cover)\ngroup = 543780931\nimport requests\nurl = baseUrl + \"/send_group_msg\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:1-12"
    },
    "3809": {
        "file_id": 477,
        "content": "The code attempts to send an XML message to a group chat using the GOCQHTTP API. The message contains a template with a cover image, title, and summary, promoting a video from Bilibili. The message can only be sent in group chats and not private chats. It uses the base URL \"http://0.0.0.0:5700\" and requires the group ID as input for sending the XML message.",
        "type": "comment"
    },
    "3810": {
        "file_id": 477,
        "content": "# message = 'test'\n# content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?><msg serviceID=\"2\" templateID=\"1\" action=\"web\" brief=\"\" sourceMsgId=\"0\" url=\"https://qm.qq.com/cgi-bin/qm/qr?k=wyw10nH14NxBzBmM2DZK_bj9y9yX-IJL\" flag=\"0\" adverSign=\"0\" multiMsgFlag=\"0\"><item layout=\"2\"><audio cover=\"https://python3student.github.io/img/avatar.jpg\" src=\"https://music.163.com/song/media/outer/url?id=449818326.mp3\" /><title>鹿 be free</title><summary>『作者』神奇</summary></item><source name=\"神奇永远的神！\" icon=\"https://python3student.github.io/img/avatar.jpg\" url=\"https://python3student.github.io/img/avatar.jpg\" action=\"app\" a_actionData=\"com.netease.cloudmusic\" i_actionData=\"tencent100495085://\" appid=\"100495085\" /></msg>\"\"\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes' ?><msg serviceID=\"2\" templateID=\"1\" action=\"web\" brief=\"&#91;分享&#93; 十年\" sourceMsgId=\"0\" url=\"https://i.y.qq.com/v8/playsong.html?_wv=1&amp;songid=4830342&amp;souce=qqshare&amp;source=qqshare&amp;ADTAG=qqsh",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:13-15"
    },
    "3811": {
        "file_id": 477,
        "content": "This code is setting a message and content for an XML-formatted message to be sent using the gocqhttp package. The message includes an image, audio, and links to a music source and app ID. It will be used for sending a rich media message with QQ Gocqhttp.",
        "type": "comment"
    },
    "3812": {
        "file_id": 477,
        "content": "are\" flag=\"0\" adverSign=\"0\" multiMsgFlag=\"0\" ><item layout=\"2\"><audio cover=\"http://imgcache.qq.com/music/photo/album_500/26/500_albumpic_89526_0.jpg\" src=\"http://ws.stream.qqmusic.qq.com/C400003mAan70zUy5O.m4a?guid=1535153710&amp;vkey=D5315B8C0603653592AD4879A8A3742177F59D582A7A86546E24DD7F282C3ACF81526C76E293E57EA1E42CF19881C561275D919233333ADE&amp;uin=&amp;fromtag=3\" /><title>十年</title><summary>陈奕迅</summary></item><source name=\"QQ音乐\" icon=\"https://i.gtimg.cn/open/app_icon/01/07/98/56/1101079856_100_m.png\" url=\"http://web.p.qq.com/qqmpmobile/aio/app.html?id=1101079856\" action=\"app\"  a_actionData=\"com.tencent.qqmusic\" i_actionData=\"tencent1101079856://\" appid=\"1101079856\" /></msg>\"\"\"\n# content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><msg serviceID=\"1\" templateID=\"1\" action=\"\" brief=\"QQ红包\" sourceMsgId=\"0\" flag=\"8\" adverSign=\"0\" multiMsgFlag=\"0\"><item layout=\"6\"><title color=\"#EE00EE\" style=\"4\">阿深真帅</title><summary color=\"#9A32CD\">是不是很无语</summary><picture cover=\"http:",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:15-16"
    },
    "3813": {
        "file_id": 477,
        "content": "This code is creating an XML string for a QQ goCQHttp message, featuring an audio track and an item from QQ Music. It includes the audio source, title, summary, and source information. The message has a service ID of 1, template ID of 1, and a flag value of 8.",
        "type": "comment"
    },
    "3814": {
        "file_id": 477,
        "content": "//t1.hddhhn.com/uploads/tu/20150507/20405-eBE9jO.jpg\" action=\"web\" url=\"http://url.cn/5g4eOiY\" w=\"0\" h=\"0\"/></item></msg>\"\"\"\n# message = \"[CQ:xml,data={}]\".format(content) # xml thing.\n# content=\"\"\"{\"app\":\"com.tencent.miniapp_01\"&#44;\"desc\":\"哔哩哔哩\"&#44;\"view\":\"view_8C8E89B49BE609866298ADDFF2DBABA4\"&#44;\"ver\":\"1.0.0.19\"&#44;\"prompt\":\"&#91;QQ小程序&#93;哔哩哔哩\"&#44;\"meta\":{\"detail_1\":{\"appType\":0&#44;\"appid\":\"1109937557\"&#44;\"desc\":\"Appium 手机 App 自动化 + Python\"&#44;\"gamePoints\":\"\"&#44;\"gamePointsUrl\":\"\"&#44;\"host\":{\"nick\":\"Yukio\"&#44;\"uin\":1281727431}&#44;\"icon\":\"https:\\/\\/open.gtimg.cn\\/open\\/app_icon\\/00\\/95\\/17\\/76\\/100951776_100_m.png?t=1659061321\"&#44;\"preview\":\"pubminishare-30161.picsz.qpic.cn\\/a0b8d306-5b6d-4b27-9539-021a2adcc264\"&#44;\"qqdocurl\":\"https:\\/\\/b23.tv\\/4hWdtET?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1665924308147\"&#44;\"scene\":1036&#44;\"shareTemplateData\":{}&#44;\"shareTemplateId\":\"8C8E89B49BE609866298ADDFF2DBABA4\"&#44;\"showLi",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:16-18"
    },
    "3815": {
        "file_id": 477,
        "content": "This code is formatting a JSON message with app details, prompt, and other information. It will be used in QQ gocqhttp post XML function.",
        "type": "comment"
    },
    "3816": {
        "file_id": 477,
        "content": "ttleTail\":\"\"&#44;\"title\":\"哔哩哔哩\"&#44;\"url\":\"m.q.qq.com\\/a\\/s\\/ea6d34b58a6a6209cd5088c436a254de\"}}&#44;\"config\":{\"autoSize\":0&#44;\"ctime\":1665924338&#44;\"forward\":1&#44;\"height\":0&#44;\"token\":\"a2458ec4231b7b8204c717f3a955a9fc\"&#44;\"type\":\"normal\"&#44;\"width\":0}}\"\"\"\ncontent = \"\"\"{\"app\":\"com.tencent.structmsg\"&#44;\"desc\":\"新闻\"&#44;\"view\":\"news\"&#44;\"ver\":\"0.0.0.1\"&#44;\"prompt\":\"&#91;分享&#93;哔哩哔哩\"&#44;\"meta\":{\"news\":{\"action\":\"\"&#44;\"android_pkg_name\":\"\"&#44;\"app_type\":1&#44;\"appid\":100951776&#44;\"ctime\":1666081902&#44;\"desc\":\"外国博主英文讲解：二十大为什么如此重要？\"&#44;\"jumpUrl\":\"https:\\/\\/b23.tv\\/B64KMQq?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1666081860133\"&#44;\"preview\":\"https:\\/\\/pic.ugcimg.cn\\/58a74c8432a80e7e2de612e6e53e37f3\\/jpg1\"&#44;\"source_icon\":\"https:\\/\\/open.gtimg.cn\\/open\\/app_icon\\/00\\/95\\/17\\/76\\/100951776_100_m.png?t=1659061321\"&#44;\"source_url\":\"\"&#44;\"tag\":\"哔哩哔哩\"&#44;\"title\":\"哔哩哔哩\"&#44;\"uin\":1281727431}}&#44;\"config\":{\"ctime\":1666081902&#44;\"forward\":true&#44;\"token\":\"d7cc3a93e7c3a9acd1c8662157e3e5fb\"&#44;\"type\":\"normal\"}}\"\"\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:18-19"
    },
    "3817": {
        "file_id": 477,
        "content": "This code contains two JSON strings representing messages in a chat application. The first message is from QQ and includes title, URL, and config details, while the second message is for sharing news on bilibili and has app, desc, view, ver, prompt, meta (with news info), config details, and more. Both messages contain timestamps, tokens, and forward options.",
        "type": "comment"
    },
    "3818": {
        "file_id": 477,
        "content": "# content = \"\"\"{\"app\":\"com.tencent.structmsg\"&#44;\"desc\":\"音乐\"&#44;\"view\":\"music\"&#44;\"ver\":\"0.0.0.1\"&#44;\"prompt\":\"\"&#44;\"meta\":{}}\"\"\"\n# content = (\n    # \"\"\"{\"app\":\"com.tencent.structmsg\",\"desc\":\"\",\"view\":\"singleImg\",\"ver\":\"0.0.0.1\",\"prompt\":\"邪少QQXML论坛\",\"appID\":\"\",\"sourceName\":\"\",\"actionData\":\"\",\"actionData_A\":\"\",\"sourceUrl\":\"\",\"meta\":{\"singleImg\":{\"mainImage\":\"https://gchat.qpic.cn/gchatpic_new/3020005669/916530575-2949639428-6E45D21EADE33511C565E25AB432AB59/0?term=2\",\"mainUrl\":\"\"}},\"text\":\"\",\"extraApps\":[],\"sourceAd\":\"\",\"config\":{\"forward\":1}}\"\"\".replace(\n#         \"&\", \"&amp;\"\n#     )\n#     .replace(\",\", \"&#44;\")\n#     .replace(\"[\", \"&#91;\")\n#     .replace(\"]\", \"&#93;\")\n# )\n# the token is likely to be some checksum, md5 or something. some aes/rsa?\nmessage = \"[CQ:json,data={}]\".format(content)  # json thing.\n# message = \"[CQ:tts,text=嘤嘤嘤]\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes' ?><msg serviceID=\"2\" templateID=\"1\" action=\"web\" brief=\"&#91;分享&#93; 十年\" sourceMsgId=\"0\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:20-34"
    },
    "3819": {
        "file_id": 477,
        "content": "This code is likely related to a messaging application and involves sending messages containing XML or JSON data, possibly for a chat bot or communication tool. It includes functions for formatting the message content and converting it into CQ:json or CQ:tts formats. The content of the messages seems to be dynamic and can contain various types of data like app information, descriptions, images, and text prompts.",
        "type": "comment"
    },
    "3820": {
        "file_id": 477,
        "content": " url=\"http://music.163.com/m/song/409650368\" flag=\"0\" adverSign=\"0\" multiMsgFlag=\"0\" ><item layout=\"2\"><audio cover=\"http://p2.music.126.net/g-Qgb9ibk9Wp_0HWra0xQQ==/16636710440565853.jpg?param=90y90\" src=\"https://music.163.com/song/media/outer/url?id=409650368.mp3\" /><title>十年</title><summary>黄梦之</summary></item><source name=\"网易云音乐\" icon=\"https://pic.rmb.bdstatic.com/911423bee2bef937975b29b265d737b3.png\" url=\"http://web.p.qq.com/qqmpmobile/aio/app.html?id=1101079856\" action=\"app\" a_actionData=\"com.netease.cloudmusic\" i_actionData=\"tencent100495085://\" appid=\"100495085\" /></msg>\"\"\"\n# message = '[CQ:xml,data={}]'.format(content)\ndata = {\"group_id\": group, \"message\": message, \"auto_escape\": False}\nr = requests.post(url, data=data)\nprint(r.json())\n# cannot send json. wtf?\n# 请参考 go-cqhttp 端输出",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:34-40"
    },
    "3821": {
        "file_id": 477,
        "content": "The code is constructing an XML message and sending it to a web URL using the Requests library in Python. It uses go-cqhttp for communication, and the code includes a group ID and a message formatted as XML data. The response from the server is printed in JSON format.",
        "type": "comment"
    },
    "3822": {
        "file_id": 478,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_xml_message.py",
        "type": "filepath"
    },
    "3823": {
        "file_id": 478,
        "content": "The given code uses the xmltodict library to parse an XML message containing Bilibili video sharing information, then prints its details. The \"print_xml_message\" function handles exceptions during parsing and printing.",
        "type": "summary"
    },
    "3824": {
        "file_id": 478,
        "content": "# arc_share\nxml_msg='{\"Content\":\"\\\\u003c?xml version=\\'1.0\\' encoding=\\'UTF-8\\' standalone=\\'yes\\'?\\\\u003e\\\\u003cmsg templateID=\\\\\"123\\\\\" url=\\\\\"https://b23.tv/5K7qh7K?share_medium=android\\\\u0026amp;share_source=qq\\\\u0026amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A\\\\u0026amp;ts=1657521142233\\\\\" serviceID=\\\\\"1\\\\\" action=\\\\\"web\\\\\" actionData=\\\\\"\\\\\" a_actionData=\\\\\"\\\\\" i_actionData=\\\\\"\\\\\" brief=\\\\\"[QQ小程序]哔哩哔哩\\\\\" flag=\\\\\"0\\\\\"\\\\u003e\\\\u003citem layout=\\\\\"2\\\\\"\\\\u003e\\\\u003cpicture cover=\\\\\"http://pubminishare-30161.picsz.qpic.cn/d4ad36fa-833e-4018-b994-a2da810f2d54\\\\\"/\\\\u003e\\\\u003ctitle\\\\u003e哔哩哔哩\\\\u003c/title\\\\u003e\\\\u003csummary\\\\u003e【C语言】《带你学C带你飞》\\\\u003c/summary\\\\u003e\\\\u003c/item\\\\u003e\\\\u003csource url=\\\\\"https://b23.tv/5K7qh7K?share_medium=android\\\\u0026amp;share_source=qq\\\\u0026amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A\\\\u0026amp;ts=1657521142233\\\\\" icon=\\\\\"https://open.gtimg.cn/open/app_icon/00/95/17/76/100951776_100_m.png?t=1657091104\\\\\" name=\\\\\"哔哩哔哩\\\\\" appid=\\\\\"0\\\\\" action=\\",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_xml_message.py:1-2"
    },
    "3825": {
        "file_id": 478,
        "content": "This code represents an XML message with various attributes and data for sharing a Bilibili video on QQ. It contains the template ID, URL to share the video, service ID, action type and data, brief description of the shared content, and more specific details about the item being shared, such as its cover image and title.",
        "type": "comment"
    },
    "3826": {
        "file_id": 478,
        "content": "\\\"web\\\\\" actionData=\\\\\"\\\\\" a_actionData=\\\\\"tencent0://\\\\\" i_actionData=\\\\\"\\\\\"/\\\\u003e\\\\u003c/msg\\\\u003e\"}'\ncontentDict = eval(xml_msg)\ncontent = contentDict['Content']\nprint(content) # let's understand this shit.\n\"\"\"\n<?xml version='1.0' encoding='UTF-8' standalone='yes'?><msg templateID=\"123\" url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" serviceID=\"1\" action=\"web\" actionData=\"\" a_actionData=\"\" i_actionData=\"\" brief=\"[QQ小程序]哔哩哔哩\" flag=\"0\"><item layout=\"2\"><picture cover=\"http://pubminishare-30161.picsz.qpic.cn/d4ad36fa-833e-4018-b994-a2da810f2d54\"/><title>哔哩哔哩</title><summary>【C语言】《带你学C带你飞》</summary></item><source url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" icon=\"https://open.gtimg.cn/open/app_icon/00/95/17/76/100951776_100_m.png?t=1657091104\" name=\"哔哩哔哩\" appid=\"0\" action=\"web\" actionData=\"\" a_actionData=\"tencent0://\" i_actionData=\"\"/></msg>",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_xml_message.py:2-9"
    },
    "3827": {
        "file_id": 478,
        "content": "This code is parsing an XML message, specifically for QQ share, extracting the content and printing it. The message contains information about a video recommendation from Bilibili, including title, summary, URL, and more.",
        "type": "comment"
    },
    "3828": {
        "file_id": 478,
        "content": "\"\"\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_xml_message.py:11-11"
    },
    "3829": {
        "file_id": 478,
        "content": "The code defines a function called \"print_xml_message\" that takes in an XML message and prints it. It uses the xmltodict library to parse the XML message into a Python dictionary format, then iterates over each element in the dictionary and prints its text content. The code also handles any potential exceptions that may occur during parsing or printing of the XML message.",
        "type": "comment"
    },
    "3830": {
        "file_id": 479,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_bilibili_json.py",
        "type": "filepath"
    },
    "3831": {
        "file_id": 479,
        "content": "The code presents a JSON structure with app details and metadata for a QQ mini-app, and replaces spaces with \"&#44\" potentially for formatting or data manipulation before sending to QQ.",
        "type": "summary"
    },
    "3832": {
        "file_id": 479,
        "content": "content=\"\"\"{\"app\":\"com.tencent.miniapp_01\"&#44;\"desc\":\"哔哩哔哩\"&#44;\"view\":\"view_8C8E89B49BE609866298ADDFF2DBABA4\"&#44;\"ver\":\"1.0.0.19\"&#44;\"prompt\":\"&#91;QQ小程序&#93;哔哩哔哩\"&#44;\"meta\":{\"detail_1\":{\"appType\":0&#44;\"appid\":\"1109937557\"&#44;\"desc\":\"Appium 手机 App 自动化 + Python\"&#44;\"gamePoints\":\"\"&#44;\"gamePointsUrl\":\"\"&#44;\"host\":{\"nick\":\"Yukio\"&#44;\"uin\":1281727431}&#44;\"icon\":\"https:\\/\\/open.gtimg.cn\\/open\\/app_icon\\/00\\/95\\/17\\/76\\/100951776_100_m.png?t=1659061321\"&#44;\"preview\":\"pubminishare-30161.picsz.qpic.cn\\/a0b8d306-5b6d-4b27-9539-021a2adcc264\"&#44;\"qqdocurl\":\"https:\\/\\/b23.tv\\/4hWdtET?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1665924308147\"&#44;\"scene\":1036&#44;\"shareTemplateData\":{}&#44;\"shareTemplateId\":\"8C8E89B49BE609866298ADDFF2DBABA4\"&#44;\"showLittleTail\":\"\"&#44;\"title\":\"哔哩哔哩\"&#44;\"url\":\"m.q.qq.com\\/a\\/s\\/ea6d34b58a6a6209cd5088c436a254de\"}}&#44;\"config\":{\"autoSize\":0&#44;\"ctime\":1665924338&#44;\"forward\":1&#44;\"height\":0&#44;\"token\":\"a2458ec4231b7b8204c717f3a955a9fc\"&#44;\"type\":\"normal\"&#44;\"width\":0}}\"\"\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_bilibili_json.py:1-1"
    },
    "3833": {
        "file_id": 479,
        "content": "This code represents a JSON structure containing various app details and metadata. It includes information such as app name, version, icon URL, description, and share template data for a QQ mini-app with the app ID \"1109937557\" and nickname \"Yukio\".",
        "type": "comment"
    },
    "3834": {
        "file_id": 479,
        "content": "# i can see that all spaces have been replaced by &#44.",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_bilibili_json.py:2-2"
    },
    "3835": {
        "file_id": 479,
        "content": "This code snippet is replacing all spaces in the input with \"&#44\" which could be used for formatting or data manipulation purposes before sending it to QQ.",
        "type": "comment"
    },
    "3836": {
        "file_id": 480,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/new_xml.py",
        "type": "filepath"
    },
    "3837": {
        "file_id": 480,
        "content": "This code extracts content from a dictionary representing an XML message, assigns it to a variable, and prints it, possibly for debugging or validation purposes.",
        "type": "summary"
    },
    "3838": {
        "file_id": 480,
        "content": "contentDictString = {\"Content\":\"\\u003c?xml version='1.0' encoding='UTF-8' standalone='yes'?\\u003e\\u003cmsg templateID=\\\"123\\\" url=\\\"https://b23.tv/uHML5mi?share_medium=android\\u0026amp;share_source=qq\\u0026amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA\\u0026amp;ts=1666023406285\\\" serviceID=\\\"1\\\" action=\\\"web\\\" actionData=\\\"\\\" a_actionData=\\\"\\\" i_actionData=\\\"\\\" brief=\\\"[QQ小程序]哔哩哔哩\\\" flag=\\\"0\\\"\\u003e\\u003citem layout=\\\"2\\\"\\u003e\\u003cpicture cover=\\\"http://pubminishare-30161.picsz.qpic.cn/c099bdd6-9e61-43d9-b82f-c9d5354ace68\\\"/\\u003e\\u003ctitle\\u003e哔哩哔哩\\u003c/title\\u003e\\u003csummary\\u003e【AI动画】妮露PV动画 风转换【NovelAI】\\u003c/summary\\u003e\\u003c/item\\u003e\\u003csource url=\\\"https://b23.tv/uHML5mi?share_medium=android\\u0026amp;share_source=qq\\u0026amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA\\u0026amp;ts=1666023406285\\\" icon=\\\"http://miniapp.gtimg.cn/public/appicon/432b76be3a548fc128acaa6c1ec90131_200.jpg\\\" name=\\\"哔哩哔哩\\\" appid=\\\"0\\\" action=\\\"web\\\" actionData=\\\"\\\" a_actionData=\\\"tencent0://\\\" i_actionData=\\\"\\\"/\\u003e\\u003c/msg\\u003e\"}",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/new_xml.py:1-1"
    },
    "3839": {
        "file_id": 480,
        "content": "This code contains a dictionary named \"contentDictString\" that represents an XML message with information about a video recommendation from Bilibili, including the template ID, URL, service ID, action, action data, i_actionData, brief, layout, picture, title, summary, source URL, icon, name, appid, and more.",
        "type": "comment"
    },
    "3840": {
        "file_id": 480,
        "content": "contentDict = contentDictString\ncontent = contentDict['Content']\nprint(content)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/new_xml.py:3-6"
    },
    "3841": {
        "file_id": 480,
        "content": "Content from the string is being assigned to the dictionary variable 'contentDict'. The 'Content' key in this dictionary is then extracted and stored in the variable 'content', which is finally printed. This code appears to print the content of a certain element in a file, potentially for debugging or validation purposes.",
        "type": "comment"
    },
    "3842": {
        "file_id": 481,
        "content": "/tests/bilibili_video_recommendation_server/sample_video/tts.py",
        "type": "filepath"
    },
    "3843": {
        "file_id": 481,
        "content": "This Python script converts text to speech using argparse, argues SSML input, and connects to Microsoft Cognitive Services TTS endpoint. It also handles time fixes, timestamps, and async WebSocket communication with potential API key authentication, runs on an asyncio event loop, and writes audio responses to a file.",
        "type": "summary"
    },
    "3844": {
        "file_id": 481,
        "content": "# 来源 https://github.com/OS984/DiscordBotBackend/blob/3b06b8be39e4dbc07722b0afefeee4c18c136102/NeuralTTS.py\n# A completely innocent attempt to borrow proprietary Microsoft technology for a much better TTS experience\nimport requests\nimport websockets\nimport asyncio\nfrom datetime import datetime\nimport time\nimport re\nimport uuid\nimport argparse\n'''命令行参数解析'''\ndef parseArgs():\n    parser = argparse.ArgumentParser(description='text2speech')\n    parser.add_argument('--input', dest='input', help='SSML(语音合成标记语言)的路径', type=str, required=True)\n    parser.add_argument('--output', dest='output', help='保存mp3文件的路径', type=str, required=False)\n    args = parser.parse_args()\n    return args\n# Fix the time to match Americanisms\ndef hr_cr(hr):\n    corrected = (hr - 1) % 24\n    return str(corrected)\n# Add zeros in the right places i.e 22:1:5 -> 22:01:05\ndef fr(input_string):\n    corr = ''\n    i = 2 - len(input_string)\n    while (i > 0):\n        corr += '0'\n        i -= 1\n    return corr + input_string\n# Generate X-Timestamp all correctly formatted",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:1-35"
    },
    "3845": {
        "file_id": 481,
        "content": "This code is a Python file that utilizes the `argparse` library to parse command-line arguments. The purpose of this script seems to be text-to-speech conversion, where it accepts an SSML (Speech Synthesis Markup Language) input file and outputs an MP3 audio file. It also includes functions for fixing time formats to match American conventions and generating formatted timestamps.",
        "type": "comment"
    },
    "3846": {
        "file_id": 481,
        "content": "def getXTime():\n    now = datetime.now()\n    return fr(str(now.year)) + '-' + fr(str(now.month)) + '-' + fr(str(now.day)) + 'T' + fr(hr_cr(int(now.hour))) + ':' + fr(str(now.minute)) + ':' + fr(str(now.second)) + '.' + str(now.microsecond)[:3] + 'Z'\n# Async function for actually communicating with the websocket\nasync def transferMsTTSData(SSML_text, outputPath):\n    # endpoint1 = \"https://azure.microsoft.com/en-gb/services/cognitive-services/text-to-speech/\"\n    # r = requests.get(endpoint1)\n    # main_web_content = r.text\n    # # They hid the Auth key assignment for the websocket in the main body of the webpage....\n    # token_expr = re.compile('token: \\\"(.*?)\\\"', re.DOTALL)\n    # Auth_Token = re.findall(token_expr, main_web_content)[0]\n    # req_id = str('%032x' % random.getrandbits(128)).upper()\n    # req_id is generated by uuid.\n    req_id = uuid.uuid4().hex.upper()\n    print(req_id)\n    # wss://eastus.api.speech.microsoft.com/cognitiveservices/websocket/v1?TrafficType=AzureDemo&Authorization=bearer%20undefined&X-ConnectionId=577D1E595EEB45979BA26C056A519073",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:36-52"
    },
    "3847": {
        "file_id": 481,
        "content": "This code defines two functions: `getXTime` and `transferMsTTSData`. The `getXTime` function returns the current date and time in a specific format. The `transferMsTTSData` function is an asynchronous function responsible for communicating with a WebSocket endpoint, potentially using an API key to authenticate the request. It generates a unique ID (req_id) and prints it before potentially making the WebSocket connection.",
        "type": "comment"
    },
    "3848": {
        "file_id": 481,
        "content": "    # endpoint2 = \"wss://eastus.tts.speech.microsoft.com/cognitiveservices/websocket/v1?Authorization=\" + \\\n    #     Auth_Token + \"&X-ConnectionId=\" + req_id\n    # 目前该接口没有认证可能很快失效\n    endpoint2 = f\"wss://eastus.api.speech.microsoft.com/cognitiveservices/websocket/v1?TrafficType=AzureDemo&Authorization=bearer%20undefined&X-ConnectionId={req_id}\"\n    async with websockets.connect(endpoint2) as websocket:\n        payload_1 = '{\"context\":{\"system\":{\"name\":\"SpeechSDK\",\"version\":\"1.12.1-rc.1\",\"build\":\"JavaScript\",\"lang\":\"JavaScript\",\"os\":{\"platform\":\"Browser/Linux x86_64\",\"name\":\"Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\",\"version\":\"5.0 (X11)\"}}}}'\n        message_1 = 'Path : speech.config\\r\\nX-RequestId: ' + req_id + '\\r\\nX-Timestamp: ' + \\\n            getXTime() + '\\r\\nContent-Type: application/json\\r\\n\\r\\n' + payload_1\n        await websocket.send(message_1)\n        payload_2 = '{\"synthesis\":{\"audio\":{\"metadataOptions\":{\"sentenceBoundaryEnabled\":false,\"wordBoundaryEnabled\":false},\"outputFormat\":\"audio-16khz-32kbitrate-mono-mp3\"}}}'",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:53-63"
    },
    "3849": {
        "file_id": 481,
        "content": "This code connects to the Microsoft Cognitive Services TTS (Text-to-Speech) websocket endpoint, sends two payloads for speech synthesis, and sets various headers such as Authorization, X-ConnectionId, Content-Type, etc. The current authentication may expire soon, so a new temporary endpoint is used instead of the original one.",
        "type": "comment"
    },
    "3850": {
        "file_id": 481,
        "content": "        message_2 = 'Path : synthesis.context\\r\\nX-RequestId: ' + req_id + '\\r\\nX-Timestamp: ' + \\\n            getXTime() + '\\r\\nContent-Type: application/json\\r\\n\\r\\n' + payload_2\n        await websocket.send(message_2)\n        # payload_3 = '<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xmlns:emo=\"http://www.w3.org/2009/10/emotionml\" version=\"1.0\" xml:lang=\"en-US\"><voice name=\"' + voice + '\"><mstts:express-as style=\"General\"><prosody rate=\"'+spd+'%\" pitch=\"'+ptc+'%\">'+ msg_content +'</prosody></mstts:express-as></voice></speak>'\n        payload_3 = SSML_text\n        message_3 = 'Path: ssml\\r\\nX-RequestId: ' + req_id + '\\r\\nX-Timestamp: ' + \\\n            getXTime() + '\\r\\nContent-Type: application/ssml+xml\\r\\n\\r\\n' + payload_3\n        await websocket.send(message_3)\n        # Checks for close connection message\n        end_resp_pat = re.compile('Path:turn.end')\n        audio_stream = b''\n        while(True):\n            response = await websocket.recv()",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:64-78"
    },
    "3851": {
        "file_id": 481,
        "content": "Sends text to TTS service for synthesis and awaits response. Stores the SSML XML for audio customization. Sends SSML XML payload for final audio output generation. Continuously receives response from websocket until 'turn.end' path detected, storing data in audio_stream variable.",
        "type": "comment"
    },
    "3852": {
        "file_id": 481,
        "content": "            print('receiving...')\n            # Make sure the message isn't telling us to stop\n            if (re.search(end_resp_pat, str(response)) == None):\n                # Check if our response is text data or the audio bytes\n                if type(response) == type(bytes()):\n                    # Extract binary data\n                    try:\n                        needle = b'Path:audio\\r\\n'\n                        start_ind = response.find(needle) + len(needle)\n                        audio_stream += response[start_ind:]\n                    except:\n                        pass\n            else:\n                break\n        with open(f'{outputPath}.mp3', 'wb') as audio_out:\n            audio_out.write(audio_stream)\nasync def mainSeq(SSML_text, outputPath):\n    await transferMsTTSData(SSML_text, outputPath)\ndef get_SSML(path):\n    with open(path,'r',encoding='utf-8') as f:\n        return f.read()\nif __name__ == \"__main__\":\n    args = parseArgs()\n    SSML_text = get_SSML(args.input)\n    output_path = args.output if args.output else 'output_'+ str(int(time.time()*1000))",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:79-107"
    },
    "3853": {
        "file_id": 481,
        "content": "This code snippet is a part of a TTS (Text-to-Speech) server implementation. It receives an audio response from the server, checks if it's text or binary data, and writes the audio to a file. The `mainSeq` function initiates the transfer process by calling `transferMsTTSData` function with SSML text and output path. The `get_SSML` function reads SSML text from input file. The code is run as a main program after parsing command-line arguments using `parseArgs()`.",
        "type": "comment"
    },
    "3854": {
        "file_id": 481,
        "content": "    asyncio.get_event_loop().run_until_complete(mainSeq(SSML_text, output_path))\n    print('completed')\n    # python tts.py --input SSML.xml\n    # python tts.py --input SSML.xml --output 保存文件名",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:108-111"
    },
    "3855": {
        "file_id": 481,
        "content": "This code calls the `mainSeq` function with SSML text and output path, using asyncio event loop to run until completion. It prints \"completed\" upon execution. The two command examples show how to input an SSML file and optionally specify an output filename.",
        "type": "comment"
    },
    "3856": {
        "file_id": 482,
        "content": "/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py",
        "type": "filepath"
    },
    "3857": {
        "file_id": 482,
        "content": "This code sets up a video processing task with image overlay, fade transition, and audio, saving a JSON object for Editly template and running the software using xvfb in subprocess.",
        "type": "summary"
    },
    "3858": {
        "file_id": 482,
        "content": "# maybe this time you can burn uploader logo to the video\n# the title of the video, intro, outro.\nvideo_path = \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/sample_video/sample_video.mp4\"\nup_image_path = (\n    \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/up_image.jpg\"\n)\noutput_path = \"output.mp4\"\nfontPath = \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/wqy-microhei0.ttf\"\ncat_image = (\n    \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/cat_image.jpg\"\n)\ntitle = \"世上所有的小猫\\n\\n都是天使变的！\" # add newline, change it into another catchy title, as compliment.\naudio_path = \"output.mp3.mp3\"\naudio_duration = 3.31\ntemplate_name = \"template.json\"\nfrom caer.video.frames_and_fps import get_duration, get_res\nvideo_duration = get_duration(video_path)\nvideo_width, video_height = get_res(video_path)\n# we shall use editly to do this job shall we?\nmin_video_scalar = min(video_width, video_height)\nup_image_scalar = int(min_video_scalar * 0.2)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py:1-24"
    },
    "3859": {
        "file_id": 482,
        "content": "This code is setting up variables for video processing, such as the input video path, uploader logo path, output path, font path, and image path. It also includes a title, audio path, and template name. The code uses the get_duration() function to determine the video duration and get_res() to retrieve the video's width and height. Lastly, it calculates a minimum video scalar value for editing purposes using editly.",
        "type": "comment"
    },
    "3860": {
        "file_id": 482,
        "content": "up_image_width = up_image_scalar / video_width\nup_image_height = up_image_scalar / video_height\n# some parameters are using floating point numbers between 0 and 1\n# image overlay can be done in editly\n# no need to render that silly karaoke effects.\neditlyJson = {\n    \"outPath\": output_path,\n    \"width\": video_width,\n    \"height\": video_height,\n    \"fps\": 30,  # different from the default value.\n    \"fast\": True,  # just for preview. if not turning this on, will be too slow.\n    \"keepSourceAudio\": True,  # it does!\n    \"defaults\": {\n        \"transition\": {\n            \"duration\": 0.5,\n            \"name\": \"fade\",\n            \"audioOutCurve\": \"tri\",\n            \"audioInCurve\": \"tri\",\n        }\n    },\n    \"clips\": [\n        # {\n        #     \"duration\": 0.5,\n        #     \"layers\": [\n        #         # {\"type\": \"fill-color\", \"color\": \"#000000\"},\n        #         # {\"type\": \"detached-audio\", \"path\": audio_path}, # will make sure nothing visual presents.\n        #     ],\n        # },\n        # we disable this clip.\n        {",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py:25-57"
    },
    "3861": {
        "file_id": 482,
        "content": "This code sets up parameters for an editly job, which involves overlaying an image with specific dimensions and applying a fade transition effect. The video's audio will be kept, and the job is set to a fast preview mode.",
        "type": "comment"
    },
    "3862": {
        "file_id": 482,
        "content": "            \"duration\": audio_duration,\n            \"layers\": [\n                {\n                    \"type\": \"image-overlay\",\n                    \"path\": cat_image,\n                    \"position\": \"center\",\n                    \"width\": 1,\n                    \"height\": 1,\n                },\n                {\n                    # \"type\": \"title-background\",\n                    \"type\": \"title\",\n                    \"text\": title,\n                    # \"background\": \"#000000\",\n                    \"fontPath\": fontPath,\n                    \"textColor\": \"#FFFFFF\",\n                },\n                {\"type\": \"audio\", \"path\": audio_path},  # order matters!\n            ],\n        },\n        {\n            # \"transition\": \"fade\",  # or we just use random?\n            \"duration\": video_duration,\n            \"layers\": [\n                {\"type\": \"video\", \"path\": video_path},  # order is important.\n                {\n                    \"type\": \"image-overlay\",\n                    \"path\": up_image_path,\n                    \"position\": \"top-left\",",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py:58-86"
    },
    "3863": {
        "file_id": 482,
        "content": "This code is creating a video with a cat image overlay, title text, and an audio track. The order of layers is important, and the audio path comes first. The video is then transitioned with a fade effect and combined with another video file, along with an optional top-left image overlay.",
        "type": "comment"
    },
    "3864": {
        "file_id": 482,
        "content": "                    \"width\": up_image_width,  # float numbers.\n                    \"height\": up_image_height,\n                },\n            ],\n        },\n        {\"duration\": 0.5, \"layers\": [{\"type\": \"fill-color\", \"color\": \"#000000\"}]},\n    ],\n}\nfrom lazero.filesystem.io import writeJsonObjectToFile\nwriteJsonObjectToFile(template_name, editlyJson)\nimport subprocess\n# use xvfb you SOB\ncommand = [\n    \"xvfb-run\",\n    \"editly\",\n    template_name,\n]  # no need to specify --out outputPath here\nsubprocess.run(command)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py:87-108"
    },
    "3865": {
        "file_id": 482,
        "content": "Code writes a JSON object for Editly video template, saves it to file, and runs the Editly software using subprocess with xvfb.",
        "type": "comment"
    },
    "3866": {
        "file_id": 483,
        "content": "/tests/bilibili_search_api_modification_section_params_get_related_videos/testApi.py",
        "type": "filepath"
    },
    "3867": {
        "file_id": 483,
        "content": "The code imports functions from the \"bilibili_api\" module and performs actions related to video searching and retrieval on Bilibili platform, using bilibili_search_api module to search for videos and write results to JSON files.",
        "type": "summary"
    },
    "3868": {
        "file_id": 483,
        "content": "from bilibili_api import sync, search\nBSP = search.bilibiliSearchParams()\n# result = sync(\n#     search.search(\n#         keyword=\"汪汪\",\n#         params={\"tids\": BSP.all.tids.动物圈.tid, \"duration\": BSP.all.duration._10分钟以下},\n#         page=1\n#     )\n# )\n# print(result)\n# how to get suggested keyword?\n# suggested_keyword = sync(search.get_suggest_keywords(keyword = \"汪汪\"))\n# print(suggested_keyword)\n# you might want to split this.\n# this is not deterministic.\n# ['汪汪队立大功 第二季 中文配音', '汪汪队立大功', '汪汪队立大功神威狗狗', '汪汪队', '特别任务 汪汪队立大功 冒险湾的一天', '雀魂汪汪录', '汪汪公主biu', '汪汪来透剧', '汪汪在亚美尼亚', '汪汪队立大功 第一季 中文配音']\n# ['汪汪队立大功', '汪汪队', '汪汪队立大功 第一季 中文配音', '汪汪队立大功 第二季 中文配音', '汪汪录', '汪汪队立大功大电影', '汪汪队立大功中文', '汪汪队立大功神威狗狗', '汪汪汪', '汪汪队中文']\nimport json\n# result_str = json.dumps(result, ensure_ascii=False, indent=4)\n# with open(\"search_result_all.json\",'w+') as f:\n#     f.write(result_str)\n# get video info\nfrom bilibili_api import video\nbvid = \"BV1iw411Z7xt\"\nv = video.Video(bvid=bvid)\n# info=sync(v.get_info())\n# # print(info)\n# with open('video_info.json', 'w+') as f:",
        "type": "code",
        "location": "/tests/bilibili_search_api_modification_section_params_get_related_videos/testApi.py:1-38"
    },
    "3869": {
        "file_id": 483,
        "content": "This code imports functions from the \"bilibili_api\" module, initializes a search object, and attempts to perform various actions related to video searching and retrieval on Bilibili platform. It includes searching for videos using specified keywords and tags, getting suggested keywords, obtaining video information, and saving search results and video info as JSON files.",
        "type": "comment"
    },
    "3870": {
        "file_id": 483,
        "content": "#     f.write(json.dumps(info, indent=4, ensure_ascii=False))\n# -> pages to access all parted videos.\n# -> ugc_season to get maker collected seasons.\n# # video tags\n# able to get from search\n# related videos\n# related = sync(v.get_related())\n# with open('video_related.json', 'w+') as f:\n#     f.write(json.dumps(related, indent=4, ensure_ascii=False))\n# search video\nresult = sync(\n    search.search_by_type(\n        keyword=\"汪汪\",\n        params={\"tids\": BSP.all.tids.动物圈.tid, \"duration\": BSP.all.duration._10分钟以下},\n        page=1,\n        search_type=search.SearchObjectType.VIDEO,\n    )\n)\nwith open('search_by_type_result_video.json','w+') as f:\n    f.write(json.dumps(result, indent=4, ensure_ascii=False))\n# with open(\"search_result_all.json\", \"r\") as f:\n#     data = f.read()\n#     data = json.loads(data)",
        "type": "code",
        "location": "/tests/bilibili_search_api_modification_section_params_get_related_videos/testApi.py:39-68"
    },
    "3871": {
        "file_id": 483,
        "content": "This code is using the bilibili_search_api module to search for videos related to a specific keyword and writes the results to json files. The script first calls the get_related() function on each video, then writes the related videos to a 'video_related.json' file. Next, it searches for a specific type of video using the search_by_type() function and writes the result to 'search_by_type_result_video.json'. Additionally, there is commented code that suggests reading data from 'search_result_all.json', but this is not executed in this script.",
        "type": "comment"
    },
    "3872": {
        "file_id": 484,
        "content": "/tests/bilibili_search_api_modification_section_params_get_related_videos/test_search_section_pets.py",
        "type": "filepath"
    },
    "3873": {
        "file_id": 484,
        "content": "The code showcases Bilibili search query URLs with parameters for keyword, source, tid, order type, and duration filter, related to the video search API of Bilibili allowing content searches, modifications, and testing. It defines section categories and provides sorting options for bilibili search results with example URLs and API retrieval of related videos.",
        "type": "summary"
    },
    "3874": {
        "file_id": 484,
        "content": "# https://search.bilibili.com/all?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&tids=36\n# 综合排序\n# https://search.bilibili.com/all?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&tids=36&order=click\n# 最多点击\n# https://search.bilibili.com/all?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&tids=36&order=pubdate\n# 最新发布\n# https://search.bilibili.com/all?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&tids=36&order=dm\n# 最多弹幕\n# https://search.bilibili.com/all?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&tids=36&order=stow\n# 最多收藏\n# https://search.bilibili.com/all?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&tids=36&order=stow&duration=1\n# https://search.bilibili.com/all?keyword=%E",
        "type": "code",
        "location": "/tests/bilibili_search_api_modification_section_params_get_related_videos/test_search_section_pets.py:1-14"
    },
    "3875": {
        "file_id": 484,
        "content": "This code provides example URLs for Bilibili search queries, demonstrating different sorting options such as overall popularity, latest publication date, and number of comments or favorites. The URLs include various parameters like keyword, source, tid, and order type, along with an optional duration filter for favorite videos.",
        "type": "comment"
    },
    "3876": {
        "file_id": 484,
        "content": "9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&tids=36&order=stow&duration=2\n# https://search.bilibili.com/all?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&tids=36&order=stow&duration=3\n# https://search.bilibili.com/all?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&tids=36&order=stow&duration=4\n# https://search.bilibili.com/all?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&order=stow&duration=4&tids=1\n# https://search.bilibili.com/all?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&order=stow&duration=4&tids=24\n# https://search.bilibili.com/article?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&duration=4&tids=24&order=attention\n# https://search.bilibili.com/article?keyword=",
        "type": "code",
        "location": "/tests/bilibili_search_api_modification_section_params_get_related_videos/test_search_section_pets.py:14-25"
    },
    "3877": {
        "file_id": 484,
        "content": "This code appears to be a collection of example URLs containing various parameters for searching on Bilibili, likely related to their video search API. The parameters include specific keywords, duration, and article or all searches, as well as other potential options like order and tids. These are most likely used to test and modify the bilibili_search_api function in this codebase.",
        "type": "comment"
    },
    "3878": {
        "file_id": 484,
        "content": "%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&duration=4&tids=24&order=scores\n# https://search.bilibili.com/live?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&duration=4&tids=24\n# https://search.bilibili.com/live?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&duration=4&tids=24&search_type=live_user\n# https://search.bilibili.com/live?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&duration=4&tids=24&search_type=live_room\nclass bilibiliSearchParams:\n    class _path:\n        综合 = \"all\"\n        视频 = \"video\" # for now you only search for video, recommend it to qq. remember do not use message post by yourself. or maybe you can make a switch for that?\n        番剧 = \"bangumi\"\n        影视 = \"pgc\"\n        直播 = \"live\"\n        专栏 = \"article\"\n        话题 = \"topic\"\n        用户 = \"upuser\"\n    class all:\n        class order:",
        "type": "code",
        "location": "/tests/bilibili_search_api_modification_section_params_get_related_videos/test_search_section_pets.py:25-45"
    },
    "3879": {
        "file_id": 484,
        "content": "This code is part of the bilibiliSearchParams class, defining search parameters for different types of content on Bilibili. The available content types are \"all\", \"video\", \"bangumi\", \"pgc\", \"live\", \"article\", and \"topic\". The order parameter includes options like \"scores\" and can be used with the specified content type to refine the search results.",
        "type": "comment"
    },
    "3880": {
        "file_id": 484,
        "content": "            综合排序 = None\n            最多点击 = \"click\"\n            最新发布 = \"pubdate\"\n            最多弹幕 = \"dm\"\n            最多收藏 = \"stow\"\n        class duration:\n            全部时长 = None\n            _10分钟以下 = 1\n            _10_30分钟 = 2\n            _30_60分钟 = 3\n            _60分钟以上 = 4\n        class tids:\n            全部分区 = None\n            ########################\n            class 番剧:\n                tid = 13\n                连载动画 = 33\n                完结动画 = 32\n                资讯 = 51\n                官方延伸 = 152\n            class 国创:\n                tid = 167\n                国产动画 = 153\n                国产原创相关 = 168\n                布袋戏 = 169\n                动态漫·广播剧 = 195\n                资讯 = 170\n            class 动画:\n                tid = 1\n                MAD_AMV = 24\n                MMD_3D = 25\n                短片·手书·配音 = 47\n                手办·模玩 = 210\n                特摄 = 86\n                综合 = 27\n            class 游戏:\n                tid = 4\n                单机游戏 = 17\n                电子竞技 = 171\n                手机游戏 = 172\n                网络游戏 = 65",
        "type": "code",
        "location": "/tests/bilibili_search_api_modification_section_params_get_related_videos/test_search_section_pets.py:46-92"
    },
    "3881": {
        "file_id": 484,
        "content": "This code defines different video categories and their corresponding TID values for sorting and filtering purposes in a Bilibili search API modification function. The categories include anime, Chinese animation, games, and more.",
        "type": "comment"
    },
    "3882": {
        "file_id": 484,
        "content": "                桌游棋牌 = 173\n                GMV = 121\n                音游 = 136\n                Mugen = 19\n            class 鬼畜:\n                tid = 119\n                鬼畜调教 = 22\n                音MAD = 26\n                人力VOCALOID = 126\n                鬼畜剧场 = 216\n                教程演示 = 127\n            class 音乐:\n                tid = 3\n                原创音乐 = 28\n                翻唱 = 31\n                演奏 = 59\n                VOCALOID·UTAU = 30\n                音乐现场 = 29\n                MV = 193\n                乐评盘点 = 243\n                音乐教学 = 244\n                音乐综合 = 130\n            class 舞蹈:\n                tid = 129\n                宅舞 = 20\n                街舞 = 198\n                明星舞蹈 = 199\n                中国舞 = 200\n                舞蹈综合 = 154\n                舞蹈教程 = 156\n            class 影视:\n                tid = 181\n                影视杂谈 = 182\n                影视剪辑 = 183\n                小剧场 = 85\n                预告·资讯 = 184\n            class 娱乐:\n                tid = 5\n                综艺 = 71\n                娱乐杂谈 = 241\n                粉丝创作 = 242",
        "type": "code",
        "location": "/tests/bilibili_search_api_modification_section_params_get_related_videos/test_search_section_pets.py:93-138"
    },
    "3883": {
        "file_id": 484,
        "content": "This code defines several classes with different tags (173, 121, 136, 19, 119, 22, 26, 126, 216, 127, 3, 28, 31, 59, 30, 29, 193, 243, 244, 130, 129, 20, 198, 199, 200, 154, 156, 181, 182, 183, 85, 71, 241) for categorizing videos on Bilbili.",
        "type": "comment"
    },
    "3884": {
        "file_id": 484,
        "content": "                明星综合 = 137\n            class 知识:\n                tid = 36\n                科学科普 = 201\n                社科·法律·心理 = 124\n                人文历史 = 228\n                财经商业 = 207\n                校园学习 = 208\n                职业职场 = 209\n                设计·创意 = 229\n                野生技能协会 = 122\n            class 科技:\n                tid = 188\n                数码 = 95\n                软件应用 = 230\n                计算机技术 = 231\n                科工机械 = 232\n            class 资讯:\n                tid = 202\n                热点 = 203\n                环球 = 204\n                社会 = 205\n                综合 = 206\n            class 美食:\n                tid = 211\n                美食制作 = 76\n                美食侦探 = 212\n                美食测评 = 213\n                田园美食 = 214\n                美食记录 = 215\n            class 生活:\n                tid = 160\n                搞笑 = 138\n                出行 = 250\n                三农 = 251\n                家居房产 = 239\n                手工 = 161\n                绘画 = 162\n                日常 = 21\n            class 汽车:\n                tid = 223",
        "type": "code",
        "location": "/tests/bilibili_search_api_modification_section_params_get_related_videos/test_search_section_pets.py:139-185"
    },
    "3885": {
        "file_id": 484,
        "content": "This code defines various classes, each representing a different section category on Bilibili. Each class has a unique 'tid' and a brief description of the content it contains. These sections include knowledge, technology, news, food, life, and cars. The categories are used to retrieve related videos for a search query in the Bilibili API.",
        "type": "comment"
    },
    "3886": {
        "file_id": 484,
        "content": "                赛车 = 245\n                改装玩车 = 246\n                新能源车 = 246\n                房车 = 248\n                摩托车 = 240\n                购车攻略 = 227\n                汽车生活 = 176\n            class 时尚:\n                tid = 155\n                美妆护肤 = 157\n                仿妆cos = 252\n                穿搭 = 158\n                时尚潮流 = 159\n            class 运动:\n                tid = 234\n                篮球 = 235\n                足球 = 249\n                健身 = 164\n                竞技体育 = 236\n                运动文化 = 237\n                运动综合 = 238\n            class 动物圈:\n                tid = 217\n                喵星人 = 218\n                汪星人 = 219\n                大熊猫 = 220\n                野生动物 = 221\n                爬宠 = 222\n                动物综合 = 75\n            ########################\n    video = all\n    class article:\n        class order:\n            综合排序 = None\n            最多点击 = \"click\"\n            最新发布 = \"pubdate\"\n            最多喜欢 = \"attention\"\n            最多评论 = \"scores\"\n    class live:\n        class search_type:\n            全部 = None",
        "type": "code",
        "location": "/tests/bilibili_search_api_modification_section_params_get_related_videos/test_search_section_pets.py:186-233"
    },
    "3887": {
        "file_id": 484,
        "content": "The code contains different sections and their corresponding tags for a search API. It includes categories such as cars, fashion, sports, and animals with specific tag IDs and subcategories. The code also defines order options (like most popular or latest) and live search types (all or specified).",
        "type": "comment"
    },
    "3888": {
        "file_id": 484,
        "content": "            主播 = \"live_user\"\n            直播间 = \"live_room\"\n    class upuser:\n        class order:\n            默认排序 = None\n            粉丝数由高到低 = \"fans\"\n            Lv等级由高到低 = \"level\"\n        class order_sort:\n            正序 = None\n            倒序 = 1\n# https://search.bilibili.com/upuser?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&duration=4&tids=24&order=fans\n# https://search.bilibili.com/upuser?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&duration=4&tids=24&order=fans&order_sort=1\n# https://search.bilibili.com/upuser?keyword=%E9%A9%AC%E5%85%8B%E6%80%9D%E4%BD%A9%E6%81%A93&from_source=webtop_search&spm_id_from=333.1007&duration=4&tids=24&order=level\n# bilibiliSearchParams.order.最多弹幕\nprint(bilibiliSearchParams.video.tids)",
        "type": "code",
        "location": "/tests/bilibili_search_api_modification_section_params_get_related_videos/test_search_section_pets.py:234-253"
    },
    "3889": {
        "file_id": 484,
        "content": "This code defines a class \"upuser\" with an inner class \"order\", which contains different sorting options for bilibili search results. The outer class \"order_sort\" provides ascending and descending order options. The code also includes example URLs for different search parameters, and the last line prints the value of \"bilibiliSearchParams.video.tids\".",
        "type": "comment"
    },
    "3890": {
        "file_id": 485,
        "content": "/tests/bilibili_search_api_modification_section_params_get_related_videos/test_get_user_info_followers_dynamic.py",
        "type": "filepath"
    },
    "3891": {
        "file_id": 485,
        "content": "The code imports the \"user\" module from \"bilibil_api\", retrieves user information like followers and followings, but lacks implementation for top_followers. It extracts data using various methods, converts non-JSON serializable results to strings, stores in a dictionary, and dumps it into JSON format.",
        "type": "summary"
    },
    "3892": {
        "file_id": 485,
        "content": "from bilibili_api import user, sync\nu = user.User(660303135)\n# u.get_channel_list\n# data = sync(u.get_relation_info())\n# [\"follower\"]\n# {'mid': 660303135, 'following': 34, 'whisper': 0, 'black': 0, 'follower': 1158}\n# get followers less than 200 but view greater than 3000.\n# also get that damn publish date!\n# print(data)\n# print(data.keys())\n# print(dir(u))\n# you can also get followings to get the 'target video'\npotentialMethods = [\n    # \"credential\",#TypeError: 'Credential' object is not callable\n# error executing u.credential()\n    \"get_all_followings\",\n    \"get_article_list\",\n    \"get_articles\",\n    \"get_audios\",\n    # \"get_channel_list\",\n    # \"get_channel_videos_season\",#TypeError: get_channel_videos_season() missing 1 required positional argument: 'sid'\n# error executing u.get_channel_videos_season()\n# Traceback (most recent call last):\n    # \"get_channel_videos_series\", #TypeError: get_channel_videos_series() missing 1 required positional argument: 'sid'\n# error executing u.get_channel_videos_series()\n    # \"get_channels\",",
        "type": "code",
        "location": "/tests/bilibili_search_api_modification_section_params_get_related_videos/test_get_user_info_followers_dynamic.py:1-27"
    },
    "3893": {
        "file_id": 485,
        "content": "The code is importing the \"user\" module from \"bilibil_api\" and creating an instance of it. It then calls some methods to get user information, specifically focusing on followers and followings. The comments suggest further exploration of available functions and parameters for getting specific types of user data such as articles, audios, and videos. The code also encounters errors when trying to use certain methods without the required arguments.",
        "type": "comment"
    },
    "3894": {
        "file_id": 485,
        "content": "    \"get_cheese\",\n    \"get_dynamics\", # has offset parameter.\n    \"get_followers\", # key feature. we need this some how.\n    \"get_followings\",\n    \"get_live_info\",\n    \"get_overview_stat\",\n    \"get_relation_info\",\n    \"get_subscribed_bangumi\",\n    # \"get_uid\", # probabily not async. #    raise TypeError('An asyncio.Future, a coroutine or an awaitable is '\n# TypeError: An asyncio.Future, a coroutine or an awaitable is required\n# error executing u.get_uid()\n    # \"get_up_stat\", # bilibili_api.exceptions.CredentialNoBiliJctException.CredentialNoBiliJctException: Credential 类未提供 bili_jct。\n# error executing u.get_up_stat()\n    \"get_user_info\",\n    \"get_videos\",\n    # \"modify_relation\", # TypeError: modify_relation() missing 1 required positional argument: 'relation'\n# error executing u.modify_relation()\n##########################################\n# our most wanted feature, top_followers #\n##########################################\n    # \"top_followers\",# bilibili_api.exceptions.ResponseCodeException.ResponseCodeException: 接口返回错误代码：-101，信息：账号未登录。",
        "type": "code",
        "location": "/tests/bilibili_search_api_modification_section_params_get_related_videos/test_get_user_info_followers_dynamic.py:28-48"
    },
    "3895": {
        "file_id": 485,
        "content": "The code contains various functions for interacting with the Bilibili API, including methods to get user information, videos, dynamics, and more. Some functions are incomplete or require additional parameters. The most desired feature, top_followers, is not yet implemented due to an error.",
        "type": "comment"
    },
    "3896": {
        "file_id": 485,
        "content": "# error executing u.top_followers()\n]\n# breakpoint()\n# get_overview_stat()\nimport json\nmdata = {}\nimport progressbar\nfor key in progressbar.progressbar(potentialMethods):\n    command = \"u.{}()\".format(key)\n    try:\n        result = sync(eval(command))\n        # Object of type ChannelSeries is not JSON serializable\n        if type(result) not in [dict, list, tuple, int, float, str]:\n            print(type(result))\n            print('COMMAND:',key)\n            breakpoint()\n            result = str(result)\n        mdata.update({key:result})\n        import time\n        time.sleep(3)\n    except:\n        import traceback\n        traceback.print_exc()\n        print('error executing {}'.format(command))\nmString = json.dumps(mdata, indent=4, ensure_ascii=False)\nwith open('user_data_api.json','w+') as f:\n    f.write(mString)\nprint(\"DUMP COMPLETE\")",
        "type": "code",
        "location": "/tests/bilibili_search_api_modification_section_params_get_related_videos/test_get_user_info_followers_dynamic.py:49-78"
    },
    "3897": {
        "file_id": 485,
        "content": "The code is attempting to extract user data from the Bilibili platform API. It iterates through a list of potential methods, dynamically executes each method on an object 'u', and stores the results in a dictionary. If the result type is not JSON serializable (like ChannelSeries), it converts it to a string before storing. Finally, it dumps the data into a JSON file named \"user_data_api.json\" and prints \"DUMP COMPLETE\".",
        "type": "comment"
    },
    "3898": {
        "file_id": 486,
        "content": "/tests/bilibili_search_api_modification_section_params_get_related_videos/template.j2",
        "type": "filepath"
    },
    "3899": {
        "file_id": 486,
        "content": "This code defines a class with properties named after channel names, where the values are their respective channel TIDs. It also includes subchannels as additional properties, each with its own TID.",
        "type": "summary"
    }
}