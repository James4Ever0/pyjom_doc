{
    "0": {
        "file_id": 0,
        "content": "/README.md",
        "type": "filepath"
    },
    "1": {
        "file_id": 0,
        "content": "The code represents the README.md file for the \"pyjom\" project, an automated content generation tool for media. It provides installation and usage instructions, integration plans with AI models like ChatGPT, related notes, GitHub repo link, readthedocs documentation, and mentions chaotic architecture possibly to be organized in the future. The README also includes links for donating via WeChat or Alipay and displays the author's star history.",
        "type": "summary"
    },
    "2": {
        "file_id": 0,
        "content": "# pyjom\n<p align=\"center\">\n    <a href=\"https://github.com/James4Ever0/pyjom\"><img alt=\"pyjom\" src=\"https://visitor-badge.glitch.me/badge?page_id=James4Ever0.pyjom\"></a>\n    <a href=\"https://github.com/James4Ever0/pyjom\"><img alt=\"pyjom\" src=\"https://img.shields.io/github/stars/James4Ever0/pyjom.svg\"></a>\n    <a href=\"https://github.com/James4Ever0/pyjom/releases\"><img alt=\"pyjom\" src=\"https://img.shields.io/github/release/James4Ever0/pyjom.svg\"></a>\n</p>\n[English version](./README.en.md)\n<p align=\"center\">\n  <a href=\"https://pyjom.readthedocs.io/en/latest/\">\n    <img src=\"https://tse4-mm.cn.bing.net/th/id/OIP-C.g0coL4omeFEhXvTh5rxedAHaKZ?pid=ImgDet&rs=1\" alt=\"pyjom\">\n  </a>\n</p>\n## 介绍\n自动化的自媒体内容制造机 自动运维自媒体 无人值守创作直播 全平台可运行 做一个有思想的复读机 有金饭碗的ebegger\n计划将ChatGPT类模型接入本项目 构造提示词集合 流水线式工作 (可以创建以前利用传统程序难以做到的事情 比如编写剧本 追踪视频来源 提取还原URL 反馈学习等等)\n## 文档\nreadthedocs 编写中 [文档地址](https://pyjom.readthedocs.io/en/latest/)\n## 我的笔记\n[杂乱的笔记](https://github.com/James4Ever0/notes) 有可能对你理解本项目有帮助\n## 软件架构\n本工程非常的乱 如果你能跑通 祝贺你\n自己以前写过很多有关于自媒体自动化的程序 不知道放到什么地方去了 可以的话会进行整理",
        "type": "code",
        "location": "/README.md:1-35"
    },
    "3": {
        "file_id": 0,
        "content": "This code represents the README.md file of the \"pyjom\" project, which is an automated content generation tool for media. It includes links to the GitHub repository and readthedocs documentation, as well as a brief introduction, plan to integrate ChatGPT-like models, and information about related notes. The code also mentions that the project architecture is chaotic and suggests it might be organized in the future.",
        "type": "comment"
    },
    "4": {
        "file_id": 0,
        "content": "以前还有一些关于AGI的代码 量化交易相关的 感兴趣自行查看\n## 安装教程\n1. pull下来本仓库\n2. 安装linux系统\n3. 安装python3\n4. 一切随缘\n## 使用说明\n1. 随便翻看目录 阅读代码并运行\n2. 看看我的笔记\n3. 看看相关的项目\n## 参与贡献\n1. Fork 本仓库\n2. 本地运行\n3. 提交代码\n4. 新建 Pull Request\n## 特技\n本人擅长到处聊天然后寻找灵感 毕竟没有灵感就没有代码 没有笔记\n据说投喂可以加快开发者写文档的速度 还有几率收到私发的女装照哦\n如果你想捐款 就投喂我吧~\n<table border=\"0\">\n  <tr>\n    <th>微信投喂</th>\n    <th>支付宝投喂</th>\n  </tr>\n  <tr>\n    <td><img width=\"100\" height=\"100\" src=\"https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=wxp://f2f0V92qUQI0aBO5PXtWezujxMm-C1KFub6qCi1Obt3cn1KjZqDPqoWKn8ICCcwdt8zU\"></td>\n    <td><img width=\"100\" height=\"100\" src=\"https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=https://qr.alipay.com/tsx10243tdewwaxrvullge8\"></td>\n  </tr>\n</table>\n## Star History\n<img src=\"https://api.star-history.com/svg?repos=james4ever0/pyjom&Timeline\" style=\"filter: invert(100%);\"></img>",
        "type": "code",
        "location": "/README.md:37-81"
    },
    "5": {
        "file_id": 0,
        "content": "This code is a README file for a Python project. It provides instructions on how to install and use the software, as well as information about contributing to the project. Additionally, it includes links for donating via WeChat or Alipay and displays the author's star history.",
        "type": "comment"
    },
    "6": {
        "file_id": 1,
        "content": "/README.en.md",
        "type": "filepath"
    },
    "7": {
        "file_id": 1,
        "content": "The code is a README for the \"pyjom\" project, providing an overview, installation instructions, and details on its top-down approach to create a Python content producer. It also includes information on contributing and using Gitee features with dependencies and Star History API integration for visualization.",
        "type": "summary"
    },
    "8": {
        "file_id": 1,
        "content": "# pyjom\n<p align=\"center\">\n    <a href=\"https://github.com/James4Ever0/pyjom\"><img alt=\"pyjom\" src=\"https://visitor-badge.glitch.me/badge?page_id=James4Ever0.pyjom\"></a>\n    <a href=\"https://github.com/James4Ever0/pyjom\"><img alt=\"pyjom\" src=\"https://img.shields.io/github/stars/James4Ever0/pyjom.svg\"></a>\n    <a href=\"https://github.com/James4Ever0/pyjom/releases\"><img alt=\"pyjom\" src=\"https://img.shields.io/github/release/James4Ever0/pyjom.svg\"></a>\n</p>\n#### Description\njerk off machine in python, or in other words, \"we media machine\", \"fully automated content producer\", \"the repeater\", \"the feedback loop\", \"retribution\"\n#### Software Architecture\nbased on top-down approach, this time we do not initiate the whole project from details since doing so will lose the grip on the infrastructure.\nwe try to build toy projects, toy modules in different folders. the whole thing shall be installable on pypi, avaliable to post to official pypi.org. not necessarily running on actual data yet.\n#### Installation",
        "type": "code",
        "location": "/README.en.md:1-17"
    },
    "9": {
        "file_id": 1,
        "content": "This code is a README for the \"pyjom\" project. It provides an overview of what the project does, its software architecture, and installation instructions. The project focuses on creating a content producer using Python, with a top-down approach to build modular components.",
        "type": "comment"
    },
    "10": {
        "file_id": 1,
        "content": "1.  git clone this project.\n2.  pip3 install pyjom\n3.  config the pyjom properly with cookies, passwords and so on.\n#### Instructions\n1.  pyjom requires several dependencies, shall be avaliable on all platforms.\n2.  xxxx\n3.  xxxx\n#### Contribution\n1.  Fork the repository\n2.  Create Feat_xxx branch\n3.  Commit your code\n4.  Create Pull Request\n#### Gitee Feature\n1.  You can use Readme\\_XXX.md to support different languages, such as Readme\\_en.md, Readme\\_zh.md\n2.  Gitee blog [blog.gitee.com](https://blog.gitee.com)\n3.  Explore open source project [https://gitee.com/explore](https://gitee.com/explore)\n4.  The most valuable open source project [GVP](https://gitee.com/gvp)\n5.  The manual of Gitee [https://gitee.com/help](https://gitee.com/help)\n6.  The most popular members  [https://gitee.com/gitee-stars/](https://gitee.com/gitee-stars/)\n## Star History\n<img src=\"https://api.star-history.com/svg?repos=james4ever0/pyjom&Timeline\" style=\"filter: invert(100%);\"></img>",
        "type": "code",
        "location": "/README.en.md:19-49"
    },
    "11": {
        "file_id": 1,
        "content": "The code contains instructions for setting up the project, contributing to it, and information about Gitee features. It requires dependencies, and shows a star history visualization using the Star History API.",
        "type": "comment"
    },
    "12": {
        "file_id": 2,
        "content": "/tasks/README.md",
        "type": "filepath"
    },
    "13": {
        "file_id": 2,
        "content": "Code snippet describes the importance of having adequate actions for a project to avoid serious problems. It also mentions utilizing the entire project in practical ways, including the old AutoUP repo, to extract knowledge and data persistently.",
        "type": "summary"
    },
    "14": {
        "file_id": 2,
        "content": "Modules are good. Tests are good. In fact, everything could be good. But the shortage of actions will lead to serious problems.\nThis will make use of the entire project in every way, in practical manners, including the old AutoUP repo.\nThis will bring about the grit out of the project, running persistently to get practical knowledge/data.",
        "type": "code",
        "location": "/tasks/README.md:1-5"
    },
    "15": {
        "file_id": 2,
        "content": "Code snippet describes the importance of having adequate actions for a project to avoid serious problems. It also mentions utilizing the entire project in practical ways, including the old AutoUP repo, to extract knowledge and data persistently.",
        "type": "comment"
    },
    "16": {
        "file_id": 3,
        "content": "/tasks/qq/login_opq_arm64.sh",
        "type": "filepath"
    },
    "17": {
        "file_id": 3,
        "content": "This code appears to be for an ARM64 system, likely running a Linux distribution. It launches Firefox and navigates it to a QR code login endpoint (localhost:8780/v1/Login/GetQRcode). It suggests that removing credential files may be necessary for relogin, possibly supporting multi-logins.",
        "type": "summary"
    },
    "18": {
        "file_id": 3,
        "content": "# arm64\nfirefox http://localhost:8780/v1/Login/GetQRcode\n# if want to relogin must remove credential files. maybe it supports multi logins.",
        "type": "code",
        "location": "/tasks/qq/login_opq_arm64.sh:1-4"
    },
    "19": {
        "file_id": 3,
        "content": "This code appears to be for an ARM64 system, likely running a Linux distribution. It launches Firefox and navigates it to a QR code login endpoint (localhost:8780/v1/Login/GetQRcode). It suggests that removing credential files may be necessary for relogin, possibly supporting multi-logins.",
        "type": "comment"
    },
    "20": {
        "file_id": 4,
        "content": "/tasks/qq/login_opq_arm64_another_account.sh",
        "type": "filepath"
    },
    "21": {
        "file_id": 4,
        "content": "The code initiates the login process on an ARM64 platform using Firefox browser. It navigates to a specific URL (localhost:8784/v1/Login/GetQRcode) and may require removing credential files for relogin.",
        "type": "summary"
    },
    "22": {
        "file_id": 4,
        "content": "# arm64\nfirefox http://localhost:8784/v1/Login/GetQRcode\n# if want to relogin must remove credential files. maybe it supports multi logins.",
        "type": "code",
        "location": "/tasks/qq/login_opq_arm64_another_account.sh:1-4"
    },
    "23": {
        "file_id": 4,
        "content": "The code initiates the login process on an ARM64 platform using Firefox browser. It navigates to a specific URL (localhost:8784/v1/Login/GetQRcode) and may require removing credential files for relogin.",
        "type": "comment"
    },
    "24": {
        "file_id": 5,
        "content": "/tasks/qq/qq_red_packet_collect/test_qrcode_insert_replace.py",
        "type": "filepath"
    },
    "25": {
        "file_id": 5,
        "content": "This code imports a function to remove and insert QR codes, then tests it with two image inputs and a specific qrcode_path. It displays the output images in a window before exiting.",
        "type": "summary"
    },
    "26": {
        "file_id": 5,
        "content": "from ad_template_2_functional import removeAndInsertQRCode\nimport cv2\ndef test_main():\n    images = [\n        \"/root/Desktop/works/pyjom/samples/image/qrcode_test/no_qrcode.jpg\",\n        \"/root/Desktop/works/pyjom/samples/image/qrcode_test/with_qrcode.jpg\",\n    ]  # convert to compatible formats first.\n    qrcode_path = \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/ebegging_template.png\"\n    for img in images:\n        output = removeAndInsertQRCode(img, qrcode_path, None)\n        cv2.imshow(\"IMG\", output)\n        cv2.waitKey(0)\nif __name__ == \"__main__\":\n    test_main()",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/test_qrcode_insert_replace.py:1-20"
    },
    "27": {
        "file_id": 5,
        "content": "This code imports a function to remove and insert QR codes, then tests it with two image inputs and a specific qrcode_path. It displays the output images in a window before exiting.",
        "type": "comment"
    },
    "28": {
        "file_id": 6,
        "content": "/tasks/qq/qq_red_packet_collect/test_neo4j_creds.py",
        "type": "filepath"
    },
    "29": {
        "file_id": 6,
        "content": "This code tests Neo4j credentials by iterating through various usernames and passwords, attempting to connect and retrieve a single node result. It prints the retrieved result and the used credentials if successful, or catches any exceptions during the process.",
        "type": "summary"
    },
    "30": {
        "file_id": 6,
        "content": "from adtools import getNeo4jDriver\ndef test_login():\n    usernames = [\"kali\", \"user\", \"neo4j\", \"admin\", \"parrot\", \"\"]\n    passwords = [\"neo4j\", \"kali\", \"parrot\", \"admin\", \"password\", \"\"]\n    for u in usernames:\n        for p in passwords:\n            try:\n                driver = getNeo4jDriver(username=u, password=p, debug=False)\n                # print('RESPONSE?',r)\n                with driver.session() as session:\n                    result = session.run(\"MATCH (n) RETURN n LIMIT 1\")\n                    print(result.single())\n                    print(\"USING:\", u, p)\n            except:\n                pass\n                # import traceback\n                # traceback.print_exc()",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/test_neo4j_creds.py:1-19"
    },
    "31": {
        "file_id": 6,
        "content": "This code tests Neo4j credentials by iterating through various usernames and passwords, attempting to connect and retrieve a single node result. It prints the retrieved result and the used credentials if successful, or catches any exceptions during the process.",
        "type": "comment"
    },
    "32": {
        "file_id": 7,
        "content": "/tasks/qq/qq_red_packet_collect/test_make_dog_cat_connection.py",
        "type": "filepath"
    },
    "33": {
        "file_id": 7,
        "content": "This code imports a function from adtools to test making connections between cats and dogs. It defines three test functions: \"test_main\", \"test_delete\", and \"test_query\". The \"test_query\" function retrieves cat and dog ads. The main code block runs the \"test_query\" function if this script is run directly.",
        "type": "summary"
    },
    "34": {
        "file_id": 7,
        "content": "from adtools import makeCatOrDogConnections, getCatOrDogAd\ndef test_main():\n    makeCatOrDogConnections(\"123\", \"345\", \"cat\", debug=True)\ndef test_delete():\n    makeCatOrDogConnections(\"123\", \"345\", \"cat\", debug=True, delete=True)\ndef test_query():\n    response = getCatOrDogAd(\"cat\", debug=True)\n    response = getCatOrDogAd(\"dog\", debug=True)\nif __name__ == \"__main__\":\n    test_query()",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/test_make_dog_cat_connection.py:1-18"
    },
    "35": {
        "file_id": 7,
        "content": "This code imports a function from adtools to test making connections between cats and dogs. It defines three test functions: \"test_main\", \"test_delete\", and \"test_query\". The \"test_query\" function retrieves cat and dog ads. The main code block runs the \"test_query\" function if this script is run directly.",
        "type": "comment"
    },
    "36": {
        "file_id": 8,
        "content": "/tasks/qq/qq_red_packet_collect/test_get_all_my_videos.py",
        "type": "filepath"
    },
    "37": {
        "file_id": 8,
        "content": "Code makes a POST request to localhost on port 7341, endpoint \"searchUserVideos\", with an empty query and tid 0 for the latest video of own user. Uses requests library, prints data in JSON format using rich library.",
        "type": "summary"
    },
    "38": {
        "file_id": 8,
        "content": "import requests\nport, endpoint = 7341, \"searchUserVideos\"\npostData = {\"query\":\"\", \"tid\": 0, \"method\": \"online\"} # this is to get latest video of my own. fuck. better turned into registration based method.\n# postData = {'query':\"狗\", \"tid\":0, \"method\":\"bm25\"}\nr = requests.post(f\"http://localhost:{port}/{endpoint}\", json=postData)\ndata = r.json()\nprint(\"data\")\nimport rich\nrich.print(data)",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/test_get_all_my_videos.py:1-11"
    },
    "39": {
        "file_id": 8,
        "content": "Code makes a POST request to localhost on port 7341, endpoint \"searchUserVideos\", with an empty query and tid 0 for the latest video of own user. Uses requests library, prints data in JSON format using rich library.",
        "type": "comment"
    },
    "40": {
        "file_id": 9,
        "content": "/tasks/qq/qq_red_packet_collect/test_cat_dog_info_get.py",
        "type": "filepath"
    },
    "41": {
        "file_id": 9,
        "content": "The code imports the getCatOrDogAd function from adtools, defines test_init and test_cats_and_dogs_get_video_names functions. test_init randomly selects a response from getCatOrDogAd (20 responses) for 'cat' category and prints the video information. test_cats_and_dogs_get_video_names iterates over 'cat' and 'dog' categories, retrieves videos using getCatOrDogAd with method 'bm25', and prints their titles. The code also checks if the __name__ is '__main__' to execute either test_init or test_cats_and_dogs_get_video_names function.",
        "type": "summary"
    },
    "42": {
        "file_id": 9,
        "content": "import random\nfrom adtools import getCatOrDogAd\ndef test_init():\n    cat_or_dog='cat'\n    for _ in range(2):\n        responses = getCatOrDogAd(cat_or_dog)\n        videoInfo = random.choice(responses[:20])\n        print(videoInfo)\n        print()\ndef test_cats_and_dogs_get_video_names():\n    for category in ['cat','dog']:\n        print(\"_\"*20)\n        print(\"CATEGORY?\",category)\n        print()\n        responses = getCatOrDogAd(category,method='bm25') # it does not update that often. use online search instead? (fill keywords in description)\n        for info in responses:\n            title = info['title']\n            print(\"VIDEO?\",title)\nif __name__ == '__main__':\n    # test_init()\n    test_cats_and_dogs_get_video_names()",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/test_cat_dog_info_get.py:1-25"
    },
    "43": {
        "file_id": 9,
        "content": "The code imports the getCatOrDogAd function from adtools, defines test_init and test_cats_and_dogs_get_video_names functions. test_init randomly selects a response from getCatOrDogAd (20 responses) for 'cat' category and prints the video information. test_cats_and_dogs_get_video_names iterates over 'cat' and 'dog' categories, retrieves videos using getCatOrDogAd with method 'bm25', and prints their titles. The code also checks if the __name__ is '__main__' to execute either test_init or test_cats_and_dogs_get_video_names function.",
        "type": "comment"
    },
    "44": {
        "file_id": 10,
        "content": "/tasks/qq/qq_red_packet_collect/test_download_qq_image.sh",
        "type": "filepath"
    },
    "45": {
        "file_id": 10,
        "content": "This script downloads a QQ image using curl, saves it as \"qq_image_received.image\", and is compatible with OpenCV for processing.",
        "type": "summary"
    },
    "46": {
        "file_id": 10,
        "content": "# you cannot receive qq voice with opq!\n# but you can download image when it has not expired.\n# what is the type of this image?\ncurl -L -o qq_image_received.image \"http://gchat.qpic.cn/gchatpic_new/3318506826/205569604-2534335053-7D3B7BA4B3476AD210837D8C86F2E8DA/0?vuin=917521610&term=255&pictype=0\"\n# cv2 can handle that.",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/test_download_qq_image.sh:1-6"
    },
    "47": {
        "file_id": 10,
        "content": "This script downloads a QQ image using curl, saves it as \"qq_image_received.image\", and is compatible with OpenCV for processing.",
        "type": "comment"
    },
    "48": {
        "file_id": 11,
        "content": "/tasks/qq/qq_red_packet_collect/test_check_dog_cat.py",
        "type": "filepath"
    },
    "49": {
        "file_id": 11,
        "content": "This code imports a function to check if an image is of a cat or dog. It prints the rate limits and then runs the check function on an image URL three times, displaying the results. If the confidence score for either 'cat' or 'dog' is above 0.4, it returns that species name.",
        "type": "summary"
    },
    "50": {
        "file_id": 11,
        "content": "from adtools import checkIsCatOrDogImage, rateLimits\nimage_url = \"http://gchat.qpic.cn/gchatpic_new/3318506826/205569604-2534335053-7D3B7BA4B3476AD210837D8C86F2E8DA/0?vuin=917521610&term=255&pictype=0\"\nprint(\"RATE LIMITS?\", rateLimits)\nfor _ in range(3):\n    r= checkIsCatOrDogImage(image_url) # will raise Exception! warning\n    print(\"RESULT?\")\n    import rich\n    rich.print(r)\nthreshold = 0.4\n# for species in r:\n#     name = species['identity']\n#     if name in ['cat','dog']:\n#         conf = species['confidence']\n#         if conf > threshold:\n#             return name",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/test_check_dog_cat.py:1-20"
    },
    "51": {
        "file_id": 11,
        "content": "This code imports a function to check if an image is of a cat or dog. It prints the rate limits and then runs the check function on an image URL three times, displaying the results. If the confidence score for either 'cat' or 'dog' is above 0.4, it returns that species name.",
        "type": "comment"
    },
    "52": {
        "file_id": 12,
        "content": "/tasks/qq/qq_red_packet_collect/test_ad_generator.py",
        "type": "filepath"
    },
    "53": {
        "file_id": 12,
        "content": "Iterates through a list of video data, generates Bilibili video ads using provided info, displays the image output on screen and waits for key press.",
        "type": "summary"
    },
    "54": {
        "file_id": 12,
        "content": "from ad_template_2_functional import generateBilibiliVideoAd, getAdLock\nvideoData = [\n    [\n        \"BV1Qd4y177Tc\",\n        \"bbb\",\n        \"https://i0.hdslb.com/bfs/archive/8a5f0a2bdffc99d33776c9d1f101521c0fc85e31.jpg\",\n    ],\n    [\n        \"BV1FG411K7Cd\",\n        \"aaa\",\n        \"https://i2.hdslb.com/bfs/archive/6423c88a8d3011a6a911627d9100b4cc4f08758d.jpg\",\n    ],\n]\nimport cv2\nfor (bvid, title_text, image_link) in videoData:\n    with getAdLock():\n        output_path, output_standalone, output_masked_path = generateBilibiliVideoAd(\n            bvid, title_text, image_link\n        )\n        img = cv2.imread(output_path)\n        cv2.imshow(\"IMAGE\", img)\n        cv2.waitKey(0)",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/test_ad_generator.py:1-25"
    },
    "55": {
        "file_id": 12,
        "content": "Iterates through a list of video data, generates Bilibili video ads using provided info, displays the image output on screen and waits for key press.",
        "type": "comment"
    },
    "56": {
        "file_id": 13,
        "content": "/tasks/qq/qq_red_packet_collect/test_adtools.sh",
        "type": "filepath"
    },
    "57": {
        "file_id": 13,
        "content": "This code changes the current directory (CD) and then runs a test script named \"test_make_dog_cat_connection.py\" using the pytest-3 command, specifically focusing on the test function \"test_query\". This might be related to testing connections between dog and cat data.",
        "type": "summary"
    },
    "58": {
        "file_id": 13,
        "content": "cd . # really sure that is just because of insufficient power supply for external drives?\npytest-3 -s test_make_dog_cat_connection.py::test_query",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/test_adtools.sh:1-2"
    },
    "59": {
        "file_id": 13,
        "content": "This code changes the current directory (CD) and then runs a test script named \"test_make_dog_cat_connection.py\" using the pytest-3 command, specifically focusing on the test function \"test_query\". This might be related to testing connections between dog and cat data.",
        "type": "comment"
    },
    "60": {
        "file_id": 14,
        "content": "/tasks/qq/qq_red_packet_collect/censorApis.py",
        "type": "filepath"
    },
    "61": {
        "file_id": 14,
        "content": "The code defines three functions for censoring replies based on sentiment analysis, including \"censorReply\", which sends a request to a censor API; \"censorReplyAbsSentiment\", which censors if the absolute sentiment score exceeds a certain threshold; and \"censorReplyLinearSentiment\", which censors if the linear sentiment score is below a certain level. However, there is an issue with the positive/negative flag for some sentences. The function also returns the original reply if the sentiment change after censoring is less than 0.5; otherwise, it returns the censored reply.",
        "type": "summary"
    },
    "62": {
        "file_id": 14,
        "content": "import requests\nfrom chat_local import getLinearSentiment, getAbsSentiment\ndef censorReply(reply, moderate=True):\n    url = \"http://127.0.0.1:8932/filter\"\n    response = requests.get(url, params={\"text\": reply, \"moderate\": moderate})\n    response = response.json()\n    reply = response[\"response\"]\n    return reply\ndef censorReplyAbsSentiment(\n    reply, moderate=True, sentiment_abs_level=0.6, censored_sentiment_threshold=0.8\n):\n    sentiment = getAbsSentiment(reply)\n    if sentiment > sentiment_abs_level:\n        reply = censorReply(reply)\n        censored_sentiment = getAbsSentiment(reply)\n        if censored_sentiment > censored_sentiment_threshold:\n            return None\n    return reply\n# however these sentiment based function will not work very well since the positive/negative flag is not working properly for sentence like \"操你妈\" -> (\"positive\", 0.8)\ndef censorReplyLinearSentiment(reply, moderate=True, sentiment_level=-0.9):\n    sentiment = getLinearSentiment(reply)\n    if sentiment < sentiment_level:\n        reply = censorReply(reply)",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/censorApis.py:1-33"
    },
    "63": {
        "file_id": 14,
        "content": "This code defines three functions for censoring replies based on sentiment analysis. The \"censorReply\" function sends a request to a censor API, the \"censorReplyAbsSentiment\" function censors a reply if its absolute sentiment score is above a certain threshold, and the \"censorReplyLinearSentiment\" function censors a reply if its linear sentiment score is below a certain level. However, the positive/negative flag does not work properly for some sentences.",
        "type": "comment"
    },
    "64": {
        "file_id": 14,
        "content": "    return reply\ndef censorReplySentimentDelta(reply, moderate=True, sentiment_delta_level=0.5):\n    reply2 = censorReply(reply)\n    sentiment = getLinearSentiment(reply)\n    sentiment2 = getLinearSentiment(reply2)\n    sentiment_delta = sentiment2 - sentiment\n    if sentiment_delta < sentiment_delta_level:  # is that good?\n        return reply\n    else:\n        return reply2",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/censorApis.py:34-47"
    },
    "65": {
        "file_id": 14,
        "content": "This function censors a reply and returns the original reply if the sentiment change after censoring is less than 0.5; otherwise, it returns the censored reply.",
        "type": "comment"
    },
    "66": {
        "file_id": 15,
        "content": "/tasks/qq/qq_red_packet_collect/red_packet.yaml",
        "type": "filepath"
    },
    "67": {
        "file_id": 15,
        "content": "The code establishes a window with three panes, executes shell commands for server testing, bilibili video recommendation, and xiaoice chat API; requires login and cautions on Gitter token pasting.",
        "type": "summary"
    },
    "68": {
        "file_id": 15,
        "content": "session_name: qq_red_packet\nwindows:\n  - window_name: qq_red_packet_window\n    layout: tiled\n    shell_command_before:\n      - cd ~/Desktop/works/pyjom # run as a first command in all panes\n      - bash # to ensure we use the right shell\n      - conda deactivate # to disable conda enviorment\n    panes:\n      - shell_command:\n          - cd tests/qq_opqbot\n          - cd opq_arm64\n          - bash launch.sh # will kill all opqbots.\n      - shell_command: # magic from https://www.wikitechy.com/tutorials/linux/how-to-write-stderr-to-a-file-while-using-tee-with-a-pipe\n          - sleep 10\n          - cd tasks/qq/qq_red_packet_collect # run multiple commands in this pane\n          - keepalive python3 botoy_redpacket_collect.py 1>/dev/null 2> >(tee -a logs/redPacketLog_0.log >&2)\n          # - python3 botoy_redpacket_collect.py 1>/dev/null\n        #   - python3 botoy_redpacket_collect.py --log 1 --log_file 0 1>/dev/null 2> >(tee -a redPacketLog_0.log >&2)\n      # it seems we need another github account to have another gitter developer token.",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/red_packet.yaml:1-20"
    },
    "69": {
        "file_id": 15,
        "content": "This code is setting up a window with tiled layout and three panes. The first pane runs a command to change the directory, the second pane waits for 10 seconds before changing to another directory, and the third pane runs a Python script called `botoy_redpacket_collect.py`, redirecting both standard output (STDOUT) and standard error (STDERR) to a log file while using `keepalive` to keep the script running indefinitely.",
        "type": "comment"
    },
    "70": {
        "file_id": 15,
        "content": "      - shell_command:\n          - cd tests/qq_opqbot\n          - cd opq_arm64_another_account\n          - sleep 3\n          - bash launch.sh # port 8784\n      - shell_command:\n          - sleep 10\n          - cd tasks/qq/qq_red_packet_collect # run multiple commands in this pane\n          - keepalive python3 botoy_redpacket_collect.py --qq 917521610 --port 8784 1>/dev/null 2> >(tee -a logs/redPacketLog_1.log >&2)\n          # - python3 botoy_redpacket_collect.py --qq 917521610 --port 8784 1>/dev/null \n        #   - python3 botoy_redpacket_collect.py  --log 1 --log_file 0 --qq 917521610 --port 8784 1>/dev/null 2> >(tee -a redPacketLog_1.log >&2)\n      - shell_command: # GPT2 LOCAL CHATBOT SERVER\n          - cd tests/cpm_chinese_chitchat_model_gpt2/server/\n          - bash launch.sh\n      - shell_command: # text censor api\n          - cd tasks/qq/qq_red_packet_collect/textfilter \n          - bash launch.sh\n      - shell_command: # image dog/cat recognition server\n          - cd tests/bezier_paddlehub_dogcat_detector_serving",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/red_packet.yaml:21-39"
    },
    "71": {
        "file_id": 15,
        "content": "This code is setting up and running multiple services for a chatbot application. It changes directories, executes scripts to launch servers, and specifies ports and other configurations for each service. The primary focus appears to be on the \"botoy_redpacket_collect\" application, which requires multiple command line options.",
        "type": "comment"
    },
    "72": {
        "file_id": 15,
        "content": "          - python3 server.py\n      - shell_command:\n          - cd tests/bilibili_video_recommendation_server\n          - python3 test.py\n      - shell_command: # xiaoice chat api\n          - cd tests/microsoft_xiaobing_conversation_bing\n          # - node chat_with_session_id.js\n          # - bash xiaobing_server_keepalive.sh\n          - keepalive node chat_with_session_id.js # try it. you may want to replace it with python.\n      # login first!\n      # when pasting gitter tokens, be careful.",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/red_packet.yaml:40-50"
    },
    "73": {
        "file_id": 15,
        "content": "The code includes three separate shell commands for running different Python and Node.js scripts related to server testing, bilibili video recommendation, and a xiaoice chat API. It also mentions the need to login first and advises being careful when pasting Gitter tokens.",
        "type": "comment"
    },
    "74": {
        "file_id": 16,
        "content": "/tasks/qq/qq_red_packet_collect/botoy_redpacket_collect.py",
        "type": "filepath"
    },
    "75": {
        "file_id": 16,
        "content": "The code manages functions like ad sending, chat APIs, and sentiment analysis in opqbot. It ensures proper messaging practices by checking for banned words and repetition, schedules periodic message sending, sets up a weighted random reply yielder, monitors group chats, categorizes messages about cats and dogs, updates the database, manages ad counters and penalties, processes media messages, handles Chinese conversion, logs for GPT training, filters message types, writes chat cursor data, and manages red packets asynchronously.",
        "type": "summary"
    },
    "76": {
        "file_id": 16,
        "content": "# for arm64 version of opqbot\n# disable that 复读机 plugin.\nimport os\nos.environ['HTTP_PROXY'] = \"\"\nos.environ['HTTPS_PROXY'] = \"\"\n# shall you analyze the logs/redPacketLog_*.log to get topics from groups and individuals.\nfrom chat_local import *\nfrom adtools import sendCatOrDogAdToQQGroup, checkCatOrDog, makeCatOrDogConnections\nfrom chatApis import getChatApiReply\nfrom base_opq import *\nimport schedule\nfrom chat_local import getAbsSentiment\nfrom censorApis import censorReplyAbsSentiment\nfrom commons import (\n    weightedRandomYielder,\n    generatedSentenceFixer,\n    keywordDecorator,\n    removeDuplicateWords,\n    replaceDuplicateChar,\n)\nAD_INIT_COUNTER = 1\ngroupChatCursor = None\ngroupMsgSendStatus = {}\ngroupChatReplyHistory = []\ngroupNoReplyStack = {}  # 防止连续对一个群持续输出\n# qq群最多可以添加500个群 1500个好友 其中群可加的数量 = max(0,500 - 已加入群数量 - 好友数量)\n# 可以退出一些安静的群 不发红包的群 删除好友\n# action.getClusterInfo\n# \"\"\"获取当前集群信息\"\"\"\n# this is to get the current server running status. i suspect.\ndef groupMsgRepeater(msg: str, sentiment_threshold=0.7):\n    sentiment = getAbsSentiment(msg)",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/botoy_redpacket_collect.py:1-45"
    },
    "77": {
        "file_id": 16,
        "content": "This code is for the arm64 version of opqbot, disabling the 复读机 plugin, and managing various functions like ad sending, chat APIs, base opq operations, sentiment analysis, censor replies, and more. It handles group messages, repeating them if necessary, while considering sentiment scores and maintaining a log for red packet collection.",
        "type": "comment"
    },
    "78": {
        "file_id": 16,
        "content": "    if sentiment > sentiment_threshold:\n        return msg\ndef checkGroupMsgSendStatus(group_id, decrease=True):\n    if group_id in groupMsgSendStatus.keys():\n        if decrease:\n            groupMsgSendStatus[group_id] -= 1  # the feedback shall be elsewhere.\n        if groupMsgSendStatus[group_id] <= 0:\n            del groupMsgSendStatus[group_id]\n            return True\n        else:\n            return False\n    return True\n# now async.\n@asyncThread\ndef sendBotGroupTextMsg(\n    replyGetterYielder,\n    groupBannedErrorBuffer=100,  # 被禁言之后的buffer\n    retry=3,\n    min_reply_length=3,  # some impirical value.\n    delay_time_range=(5, 15),\n    context_size_range=(1, 3),  # maybe we do not need no context. or not?\n    maxRepeatRange=(2, 5),\n    noReplyThreshold=3,\n    noReplyBuffer=75,\n):  # the context parameter may lead to OOM.\n    global groupChatCursor\n    # will clear cursor after sending\n    if groupChatCursor is not None:\n        # do work here.\n        group_id = groupChatCursor[\"group_id\"]\n        # groupChatCursor = None",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/botoy_redpacket_collect.py:46-80"
    },
    "79": {
        "file_id": 16,
        "content": "This function, when called with a replyGetterYielder object and other parameters such as groupBannedErrorBuffer, retry, delay_time_range, context_size_range, maxRepeatRange, noReplyThreshold, and noReplyBuffer, sends a message to a QQ group chat using an async thread. It also manages the groupMsgSendStatus dictionary to keep track of the number of messages sent to each group. The function checks if the group is currently banned or not, retries sending the message a certain number of times if necessary, and adjusts the send status accordingly.",
        "type": "comment"
    },
    "80": {
        "file_id": 16,
        "content": "        # return\n        result = checkGroupMsgSendStatus(group_id, decrease=False)  # failsafe.\n        if not result:\n            return\n        # modify this textMessage somehow? with context.\n        context = random.randint(*context_size_range)\n        textMessage = groupChatCursor[\"msg\"]\n        groupChatCursorWithContext = groupChatCursor.copy()\n        messageContext = chat_stack[group_id][-context:-1] + [\n            textMessage\n        ]  # include the last message.\n        messageContext = \" \".join(messageContext)  # just use space.\n        groupChatCursorWithContext[\"msg\"] = messageContext\n        for (\n            replyGetter,\n            argumentList,\n            flag,\n            needContext,\n            enableRetryFlag,\n        ) in replyGetterYielder:  # use all methods.\n            if exit_event.is_set():\n                break\n            retried = False\n            for _ in range(retry):  # retry for three times.\n                if exit_event.is_set():\n                    break\n                extraFlags = {}",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/botoy_redpacket_collect.py:81-109"
    },
    "81": {
        "file_id": 16,
        "content": "The code checks if the group message sending status is successful, then sets a context size range and uses it to construct a new text message. It joins all messages together with spaces and assigns the new message to the group chat cursor. Finally, it loops through multiple reply getters, trying them in order, with a maximum of three retries if the event is not set.",
        "type": "comment"
    },
    "82": {
        "file_id": 16,
        "content": "                if enableRetryFlag:\n                    extraFlags.update({\"retryFlag\": retried})\n                # stderrPrint(extraFlags,replyGetter)\n                if needContext:\n                    reply = replyGetter(\n                        *[groupChatCursorWithContext[key] for key in argumentList],\n                        **extraFlags\n                    )\n                else:\n                    reply = replyGetter(\n                        *[groupChatCursor[key] for key in argumentList], **extraFlags\n                    )\n                if reply is not None:\n                    retried = True  # only plus one on retryIndex when there is no error during generation.\n                    maxRepeat = random.randint(*maxRepeatRange)\n                    reply = generatedSentenceFixer(\n                        reply, maxRepeat=maxRepeat\n                    )  # fix this reply first.\n                    # add a new filter here.\n                    reply = removeDuplicateWords(reply)\n                    if reply in groupChatReplyHistory or len(reply) < min_reply_length:",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/botoy_redpacket_collect.py:110-132"
    },
    "83": {
        "file_id": 16,
        "content": "This code block retrieves a reply from a replyGetter function, depending on whether context is needed or not. If the reply is not None, it updates retryFlag and generates a new random maxRepeat value for generatedSentenceFixer to fix the reply. The reply is then passed through removeDuplicateWords filter before checking if it's already in groupChatReplyHistory or shorter than min_reply_length.",
        "type": "comment"
    },
    "84": {
        "file_id": 16,
        "content": "                        continue  # do not send repeated messages or unusually short messages.\n                    else:\n                        update_stack(groupChatReplyHistory, reply)\n                    # 句子里面不能有违禁词语 不然就不能输出\n                    reply = censorReplyAbsSentiment(reply)\n                    if reply is None:\n                        continue  # skip too vulgar sentences.\n                    if reply.count(\"*\") > 3:  # too much censor will make it unreadable.\n                        continue  # retry to get a better thing.\n                    # do reply.\n                    # stderrPrint(\"PROCESSING GROUP MESSAGE CURSOR:\", groupChatCursor)\n                    stderrPrint(flag, reply)\n                    # must control this shit. 如果被禁言了该如何处理 一般需要缓冲30次\n                    groupChatCursor = None  # remove it only one reply was to be made.\n                    delay = random.randint(*delay_time_range)\n                    time.sleep(delay)  # to make it more humane.\n                    sendMessageStatus = action.sendGroupText(",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/botoy_redpacket_collect.py:133-152"
    },
    "85": {
        "file_id": 16,
        "content": "Code checks if the message contains banned words, censors them if necessary, and ensures messages are not too short or repeated. If a suitable reply is found, it sends the message after a random delay to avoid flooding and make it appear more human-like.",
        "type": "comment"
    },
    "86": {
        "file_id": 16,
        "content": "                        group=group_id, content=reply\n                    )\n                    # stderrPrint(\"SENT MESSAGE STATUS:\",sendMessageStatus)\n                    if not (\n                        sendMessageStatus[\"ErrMsg\"] == \"\"\n                        and sendMessageStatus[\"Ret\"] == 0\n                    ):\n                        # some shit had happened. cannot send message without error.\n                        groupMsgSendStatus.update({group_id: groupBannedErrorBuffer})\n                    else:\n                        # no shit happened.\n                        groupNoReplyStack.update(\n                            {group_id: 1 + groupNoReplyStack.get(group_id, 0)}\n                        )\n                        # stderrPrint(\"UPDATE NOREPLYSTACK\", groupNoReplyStack)\n                        noReply = groupNoReplyStack.get(group_id, 0)\n                        if (\n                            noReply >= noReplyThreshold\n                        ):  # only this noReply greater than 0 we can write it to cursor. LOGIC ELSEWHERE",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/botoy_redpacket_collect.py:153-172"
    },
    "87": {
        "file_id": 16,
        "content": "Code snippet handles sending messages to a group using the 'sendMessageStatus' response. If an error occurs (non-empty 'ErrMsg' or non-zero 'Ret'), the group is marked as banned. If no errors, the count of unsent messages is incremented for that group. If the count exceeds a threshold, it can be written to the cursor.",
        "type": "comment"
    },
    "88": {
        "file_id": 16,
        "content": "                            groupNoReplyStack.update({group_id: -noReplyBuffer})\n                    # stderrPrint(\"sendMessageStatus:\", sendMessageStatus)\n                    return True\ndef sendRandomGroupMessage():\n    sendAtriGroupChatMessage = (\n        keywordDecorator(getChatApiReply, chatApiIndex=0),\n        [\"msg\", \"group_id\"],\n        \"SENDING ATRI API REPLY:\",\n        True,\n        True,\n    )  # last is enableRetryFlag\n    sendGPT2GroupChatMessage = (\n        keywordDecorator(getChatApiReply, chatApiIndex=1),\n        [\"msg\", \"group_id\"],\n        \"SENDING GPT2 API REPLY:\",\n        True,\n        True,\n    )  # last is enableRetryFlag\n    sendXiaoIceGroupChatMessage = (\n        keywordDecorator(getChatApiReply, chatApiIndex=2),\n        [\"msg\", \"group_id\"],\n        \"SENDING XIAOICE API REPLY:\",\n        True,\n        True,\n    )\n    sendChatLocalResponse = (\n        getChatLocalResponse,\n        [\"group_id\", \"msg\"],\n        \"SENDING CHATLOCAL REPLY:\",\n        False,\n        False,\n    )\n    sendRepeaterResponse = (",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/botoy_redpacket_collect.py:173-209"
    },
    "89": {
        "file_id": 16,
        "content": "This code defines four different functions for sending messages to a group chat: `sendAtriGroupChatMessage`, `sendGPT2GroupChatMessage`, `sendXiaoIceGroupChatMessage`, and `sendChatLocalResponse`. Each function takes a \"group_id\" and a \"msg\", and has a specific label indicating the source of the message. The last parameter in each tuple indicates whether to retry sending if an error occurs.",
        "type": "comment"
    },
    "90": {
        "file_id": 16,
        "content": "        groupMsgRepeater,\n        [\"msg\"],\n        \"SENDING REPEATER REPLY:\",\n        False,\n        False,\n    )\n    replyGetterList = [\n        sendAtriGroupChatMessage,\n        sendGPT2GroupChatMessage,\n        sendChatLocalResponse,\n        sendRepeaterResponse,\n        sendXiaoIceGroupChatMessage,\n    ]\n    weightList = [2, 5, 1, 1, 5]\n    # weightList = [1, 3, 2, 2, 5] # said that is girish, because of xiaoice.\n    replyGetterYielder = weightedRandomYielder(replyGetterList, weightList)\n    sendBotGroupTextMsg(replyGetterYielder)\n# schedule.every(1).minute.do(sendApiGroupChatMessage)\n# schedule.every(30).seconds.do(sendChatLocalResponse) # will this shit work?\nschedule.every(1).minute.do(sendRandomGroupMessage)  # will this shit work?\ndef printGroupTextChatJson(group_id, sender_id, content):\n    message = {\"group_id\": group_id, \"sender_id\": sender_id, \"content\": content}\n    message = json.dumps(message, ensure_ascii=False)\n    stderrPrint(\n        \"[GROUP_TEXT_MESSAGE]\", message\n    )  # strange. who the fuck added this shit?",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/botoy_redpacket_collect.py:210-240"
    },
    "91": {
        "file_id": 16,
        "content": "This code is setting up a weighted random reply yielder for a group chat bot, with multiple reply options and weights. It also schedules a function to send a random group message periodically and prints group text chat messages in JSON format. The schedule functionality seems to have some uncertainty about its effectiveness.",
        "type": "comment"
    },
    "92": {
        "file_id": 16,
        "content": "# convert to simplified chinese.\nimport opencc\nchinese_t2s = opencc.OpenCC()\nadBuffer = {}\n# hook up this thing, send cat video only if we receive that topic.\nfrom adtools import checkIsCatOrDogImage\n@asyncThread\ndef catOrDogAsyncThread(group_id:str, sender_id:str,Content:str,is_image:bool=False, is_user:bool=False):\n    if is_image:\n        try:\n            cat_or_dog = checkIsCatOrDogImage(Content)\n        except:\n            import traceback\n            traceback.print_exc()\n            print(\"Exception when detecting image if it is cat or dog\")\n            return\n    else:\n        cat_or_dog = checkCatOrDog(Content)\n    # we need to update neo4j database, using group_id, sender_id, cat_or_dog.\n    if cat_or_dog:\n        makeCatOrDogConnections(\n            str(group_id), str(sender_id), cat_or_dog\n        )\n        # act accordingly. decide to send ad or not.\n        if adBuffer.get(str(group_id), 0) <= 0:\n            penalty = 10\n            # send the ad.\n            success = sendCatOrDogAdToQQGroup(str(group_id), cat_or_dog, action)",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/botoy_redpacket_collect.py:243-274"
    },
    "93": {
        "file_id": 16,
        "content": "This code defines a function that checks whether the content sent in a QQ group is an image of a cat or dog. If it is, the function updates a Neo4j database and decides whether to send an ad based on a counter for each group. The code uses OpenCC library for text simplification and imports traceback module for error handling.",
        "type": "comment"
    },
    "94": {
        "file_id": 16,
        "content": "            if success:\n                penalty += 40 # every 50 messages we have one ad.\n            adBuffer[str(group_id)] = penalty\n        # decrease that counter by standard group messages.\nfrom botoy.collection import MsgTypes\n@bot.on_group_msg\ndef group(ctx: GroupMsg, groupInitReplyDelayRange=(4, 15)):\n    # too broad for groupInitReplyDelayRange to be (2, 20)\n    # global groupChatCursor\n    #    stderrPrint('收到群消息，群号为', ctx.FromGroupId)\n    # recommed you to check the curret group only.\n    #    stderrPrint(\"checkGroupNoReply:\",groupNoReplyStack.get(ctx.FromGroupId,None))\n    data_dict = ctx.data  # recommend to use this json object. or not?\n    groupName = data_dict.get(\"FromGroupName\", None)\n    group_id = data_dict[\"FromGroupId\"]\n    # decrease that ad counter.\n    adCounter = adBuffer.get(str(group_id), AD_INIT_COUNTER)\n    if adCounter > 0:\n        adCounter -= 1\n    adBuffer[str(group_id)] = adCounter\n    if groupName is not None:\n        updateGroupNameDict(groupName, group_id)\n    sender_id = data_dict[\"FromUserId\"]",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/botoy_redpacket_collect.py:275-301"
    },
    "95": {
        "file_id": 16,
        "content": "This code fragment monitors a group chat and manages ad counters based on the number of messages sent. For each message, it checks if a penalty should be added and updates an ad counter for the specific group ID. The ad counter is decreased with every standard group message received. It also updates the group name dictionary and handles user input data from messages sent to the group chat.",
        "type": "comment"
    },
    "96": {
        "file_id": 16,
        "content": "    RedBaginfoDict = data_dict[\"RedBaginfo\"]\n    RedBaginfo = ctx.RedBaginfo\n    MsgType = ctx.MsgType\n    # how to download these shits?\n    try:\n        from botoy.parser.group import Pic\n        if MsgType == MsgTypes.PicMsg:\n            pic_obj = Pic(**json.loads(ctx.Content))\n            pics = pic_obj.GroupPic\n            for pic in pics:\n                pic_url = pic.Url\n                catOrDogAsyncThread(str(group_id), str(sender_id),pic_url,is_image=True)\n        elif MsgType == MsgTypes.VideoMsg:\n            ...\n        elif MsgType == MsgTypes.VoiceMsg:\n            ...\n        elif MsgType == MsgTypes.JsonMsg:\n            ... # hope you can receive that? nope? you can only receive that by go-cqhttp.\n    except:\n        import traceback\n        traceback.print_exc()\n        print(\"ERROR WHEN PROCESSING MEDIA MESSAGES.\")\n        print(\"MSGTYPE:\",MsgType)\n    # first initialize random delay for every group in groupNoReplyStack\n    if group_id not in groupNoReplyStack.keys():\n        groupNoReplyStack.update({group_id: -random.randint(*groupInitReplyDelayRange)})",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/botoy_redpacket_collect.py:302-329"
    },
    "97": {
        "file_id": 16,
        "content": "This code is handling media messages (images, videos, voice) in a chat group. It tries to download images and may process videos or voice messages. If the message type is not recognized, it logs an error. The code also initializes random delay for a group's no-reply stack if the group ID isn't present.",
        "type": "comment"
    },
    "98": {
        "file_id": 16,
        "content": "    def writeGroupChatCursor(Content, enable_t2s=True):\n        if enable_t2s:\n            Content = chinese_t2s.convert(Content)\n        # content need to converted into simplified chinese.\n        global groupChatCursor, chat_stack_lock\n        # maybe we should create the mapping table here.\n        content_length = len(Content)\n        content_min_length = 4\n        # maybe we should split sentence into shorter ones, or via summarization/title generation apis.\n        content_max_length = 15\n        recv_content_min_length, recv_content_max_length = 4, 20\n        if not (Content.startswith(\"[\") or Content.endswith(\"]\")):\n            if (\n                content_length <= recv_content_max_length\n                and content_length >= recv_content_min_length\n            ):\n                printGroupTextChatJson(\n                    group_id, sender_id, Content\n                )  # why the fuck you are not printing?\n            if (\n                content_length <= content_max_length\n                and content_length >= content_min_length",
        "type": "code",
        "location": "/tasks/qq/qq_red_packet_collect/botoy_redpacket_collect.py:331-352"
    },
    "99": {
        "file_id": 16,
        "content": "Function writes group chat cursor data to a file, with support for Chinese simplified to traditional conversion. The content length is checked against minimum and maximum thresholds before printing or potentially splitting into shorter segments.",
        "type": "comment"
    }
}