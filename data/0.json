{
    "0": {
        "file_id": 0,
        "content": "/README.en.md",
        "type": "filepath"
    },
    "1": {
        "file_id": 0,
        "content": "The code is a README for the \"pyjom\" project, providing an overview, installation instructions, and details on its top-down approach to create a Python content producer. It also includes information on contributing and using Gitee features with dependencies and Star History API integration for visualization.",
        "type": "summary"
    },
    "2": {
        "file_id": 0,
        "content": "# pyjom\n<p align=\"center\">\n    <a href=\"https://github.com/James4Ever0/pyjom\"><img alt=\"pyjom\" src=\"https://visitor-badge.glitch.me/badge?page_id=James4Ever0.pyjom\"></a>\n    <a href=\"https://github.com/James4Ever0/pyjom\"><img alt=\"pyjom\" src=\"https://img.shields.io/github/stars/James4Ever0/pyjom.svg\"></a>\n    <a href=\"https://github.com/James4Ever0/pyjom/releases\"><img alt=\"pyjom\" src=\"https://img.shields.io/github/release/James4Ever0/pyjom.svg\"></a>\n</p>\n#### Description\njerk off machine in python, or in other words, \"we media machine\", \"fully automated content producer\", \"the repeater\", \"the feedback loop\", \"retribution\"\n#### Software Architecture\nbased on top-down approach, this time we do not initiate the whole project from details since doing so will lose the grip on the infrastructure.\nwe try to build toy projects, toy modules in different folders. the whole thing shall be installable on pypi, avaliable to post to official pypi.org. not necessarily running on actual data yet.\n#### Installation",
        "type": "code",
        "location": "/README.en.md:1-17"
    },
    "3": {
        "file_id": 0,
        "content": "This code is a README for the \"pyjom\" project. It provides an overview of what the project does, its software architecture, and installation instructions. The project focuses on creating a content producer using Python, with a top-down approach to build modular components.",
        "type": "comment"
    },
    "4": {
        "file_id": 0,
        "content": "1.  git clone this project.\n2.  pip3 install pyjom\n3.  config the pyjom properly with cookies, passwords and so on.\n#### Instructions\n1.  pyjom requires several dependencies, shall be avaliable on all platforms.\n2.  xxxx\n3.  xxxx\n#### Contribution\n1.  Fork the repository\n2.  Create Feat_xxx branch\n3.  Commit your code\n4.  Create Pull Request\n#### Gitee Feature\n1.  You can use Readme\\_XXX.md to support different languages, such as Readme\\_en.md, Readme\\_zh.md\n2.  Gitee blog [blog.gitee.com](https://blog.gitee.com)\n3.  Explore open source project [https://gitee.com/explore](https://gitee.com/explore)\n4.  The most valuable open source project [GVP](https://gitee.com/gvp)\n5.  The manual of Gitee [https://gitee.com/help](https://gitee.com/help)\n6.  The most popular members  [https://gitee.com/gitee-stars/](https://gitee.com/gitee-stars/)\n## Star History\n<img src=\"https://api.star-history.com/svg?repos=james4ever0/pyjom&Timeline\" style=\"filter: invert(100%);\"></img>",
        "type": "code",
        "location": "/README.en.md:19-49"
    },
    "5": {
        "file_id": 0,
        "content": "The code contains instructions for setting up the project, contributing to it, and information about Gitee features. It requires dependencies, and shows a star history visualization using the Star History API.",
        "type": "comment"
    },
    "6": {
        "file_id": 1,
        "content": "/README.md",
        "type": "filepath"
    },
    "7": {
        "file_id": 1,
        "content": "The code represents the README.md file for the \"pyjom\" project, an automated content generation tool for media. It provides installation and usage instructions, integration plans with AI models like ChatGPT, related notes, GitHub repo link, readthedocs documentation, and mentions chaotic architecture possibly to be organized in the future. The README also includes links for donating via WeChat or Alipay and displays the author's star history.",
        "type": "summary"
    },
    "8": {
        "file_id": 1,
        "content": "# pyjom\n<p align=\"center\">\n    <a href=\"https://github.com/James4Ever0/pyjom\"><img alt=\"pyjom\" src=\"https://visitor-badge.glitch.me/badge?page_id=James4Ever0.pyjom\"></a>\n    <a href=\"https://github.com/James4Ever0/pyjom\"><img alt=\"pyjom\" src=\"https://img.shields.io/github/stars/James4Ever0/pyjom.svg\"></a>\n    <a href=\"https://github.com/James4Ever0/pyjom/releases\"><img alt=\"pyjom\" src=\"https://img.shields.io/github/release/James4Ever0/pyjom.svg\"></a>\n</p>\n[English version](./README.en.md)\n<p align=\"center\">\n  <a href=\"https://pyjom.readthedocs.io/en/latest/\">\n    <img src=\"https://tse4-mm.cn.bing.net/th/id/OIP-C.g0coL4omeFEhXvTh5rxedAHaKZ?pid=ImgDet&rs=1\" alt=\"pyjom\">\n  </a>\n</p>\n## 介绍\n自动化的自媒体内容制造机 自动运维自媒体 无人值守创作直播 全平台可运行 做一个有思想的复读机 有金饭碗的ebegger\n计划将ChatGPT类模型接入本项目 构造提示词集合 流水线式工作 (可以创建以前利用传统程序难以做到的事情 比如编写剧本 追踪视频来源 提取还原URL 反馈学习等等)\n## 文档\nreadthedocs 编写中 [文档地址](https://pyjom.readthedocs.io/en/latest/)\n## 我的笔记\n[杂乱的笔记](https://github.com/James4Ever0/notes) 有可能对你理解本项目有帮助\n## 软件架构\n本工程非常的乱 如果你能跑通 祝贺你\n自己以前写过很多有关于自媒体自动化的程序 不知道放到什么地方去了 可以的话会进行整理",
        "type": "code",
        "location": "/README.md:1-35"
    },
    "9": {
        "file_id": 1,
        "content": "This code represents the README.md file of the \"pyjom\" project, which is an automated content generation tool for media. It includes links to the GitHub repository and readthedocs documentation, as well as a brief introduction, plan to integrate ChatGPT-like models, and information about related notes. The code also mentions that the project architecture is chaotic and suggests it might be organized in the future.",
        "type": "comment"
    },
    "10": {
        "file_id": 1,
        "content": "以前还有一些关于AGI的代码 量化交易相关的 感兴趣自行查看\n## 安装教程\n1. pull下来本仓库\n2. 安装linux系统\n3. 安装python3\n4. 一切随缘\n## 使用说明\n1. 随便翻看目录 阅读代码并运行\n2. 看看我的笔记\n3. 看看相关的项目\n## 参与贡献\n1. Fork 本仓库\n2. 本地运行\n3. 提交代码\n4. 新建 Pull Request\n## 特技\n本人擅长到处聊天然后寻找灵感 毕竟没有灵感就没有代码 没有笔记\n据说投喂可以加快开发者写文档的速度 还有几率收到私发的女装照哦\n如果你想捐款 就投喂我吧~\n<table border=\"0\">\n  <tr>\n    <th>微信投喂</th>\n    <th>支付宝投喂</th>\n  </tr>\n  <tr>\n    <td><img width=\"100\" height=\"100\" src=\"https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=wxp://f2f0V92qUQI0aBO5PXtWezujxMm-C1KFub6qCi1Obt3cn1KjZqDPqoWKn8ICCcwdt8zU\"></td>\n    <td><img width=\"100\" height=\"100\" src=\"https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=https://qr.alipay.com/tsx10243tdewwaxrvullge8\"></td>\n  </tr>\n</table>\n## Star History\n<img src=\"https://api.star-history.com/svg?repos=james4ever0/pyjom&Timeline\" style=\"filter: invert(100%);\"></img>",
        "type": "code",
        "location": "/README.md:37-81"
    },
    "11": {
        "file_id": 1,
        "content": "This code is a README file for a Python project. It provides instructions on how to install and use the software, as well as information about contributing to the project. Additionally, it includes links for donating via WeChat or Alipay and displays the author's star history.",
        "type": "comment"
    },
    "12": {
        "file_id": 2,
        "content": "/externals/bgslib-init.sh",
        "type": "filepath"
    },
    "13": {
        "file_id": 2,
        "content": "This script clones bgslibrary, builds and installs it, sets library path, copies config folder, and provides executable scripts for video, camera, demo, and demo2 usage.",
        "type": "summary"
    },
    "14": {
        "file_id": 2,
        "content": "git clone --recursive https://github.com/andrewssobral/bgslibrary.git\ncd bgslibrary\ncd build\ncmake ..\nmake -j $(nproc)\n####### OPTIONAL #######\nmake install\nLD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib # this is to ensure the path.\nexport LD_LIBRARY_PATH\n# for debug: echo $LD_LIBRARY_PATH\n# Next, copy the <<config>> folder from bgslibrary repository to your working space.\n# Now you can run bgslibrary by: bgs -i video.avi\n########################\ncd ..\nchmod +x *.sh\n./run_video.sh\n./run_camera.sh\n./run_demo.sh\n./run_demo2.sh",
        "type": "code",
        "location": "/externals/bgslib-init.sh:1-23"
    },
    "15": {
        "file_id": 2,
        "content": "This script clones bgslibrary, builds and installs it, sets library path, copies config folder, and provides executable scripts for video, camera, demo, and demo2 usage.",
        "type": "comment"
    },
    "16": {
        "file_id": 3,
        "content": "/externals/detectron2_prebuilt_linux_init.sh",
        "type": "filepath"
    },
    "17": {
        "file_id": 3,
        "content": "Installing Detectron2 with pip and specifying the wheel file location for CUDA 11.3, Torch 1.10 compatibility on Linux systems.",
        "type": "summary"
    },
    "18": {
        "file_id": 3,
        "content": "python3 -m pip install detectron2 -f \\\n  https://dl.fbaipublicfiles.com/detectron2/wheels/cu113/torch1.10/index.html",
        "type": "code",
        "location": "/externals/detectron2_prebuilt_linux_init.sh:1-2"
    },
    "19": {
        "file_id": 3,
        "content": "Installing Detectron2 with pip and specifying the wheel file location for CUDA 11.3, Torch 1.10 compatibility on Linux systems.",
        "type": "comment"
    },
    "20": {
        "file_id": 4,
        "content": "/externals/dgl_init.sh",
        "type": "filepath"
    },
    "21": {
        "file_id": 4,
        "content": "This code is cloning and installing DGL (Dynamic Graph Library) for Python. It uses git to clone the repository, sets up a build directory with CMake, compiles the code using make, and then installs it with pip3. This process ensures that the necessary dependencies and configurations are in place before installation.",
        "type": "summary"
    },
    "22": {
        "file_id": 4,
        "content": "git clone --depth 1 --recurse-submodules https://github.com/dmlc/dgl.git\ncd dgl # set up my fucking fastgithub proxy!\n# git submodule update --init --recursive\nmkdir build\ncd build\ncmake -DUSE_CUDA=ON ..\nmake -j4\ncd ..\npip3 install ./python # the way to install this shit.\n# cd ../python\n# python3 setup.py install",
        "type": "code",
        "location": "/externals/dgl_init.sh:1-11"
    },
    "23": {
        "file_id": 4,
        "content": "This code is cloning and installing DGL (Dynamic Graph Library) for Python. It uses git to clone the repository, sets up a build directory with CMake, compiles the code using make, and then installs it with pip3. This process ensures that the necessary dependencies and configurations are in place before installation.",
        "type": "comment"
    },
    "24": {
        "file_id": 5,
        "content": "/externals/ffmpeg_libspeex_tensorflow_support.sh",
        "type": "filepath"
    },
    "25": {
        "file_id": 5,
        "content": "The code configures FFmpeg with various libraries, modules, and specific paths for CUDA include and library files, then builds and installs the custom FFmpeg.",
        "type": "summary"
    },
    "26": {
        "file_id": 5,
        "content": "cd ffmpeg\n###LAST WORKING ONE\n./configure --toolchain=hardened  --arch=amd64  --enable-libspeex --enable-gpl --enable-nonfree --enable-pthreads --extra-libs=-lstdc++ --enable-cuda-nvcc --enable-cuvid --enable-nvenc --enable-shared --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --enable-libnpp --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 ",
        "type": "code",
        "location": "/externals/ffmpeg_libspeex_tensorflow_support.sh:1-5"
    },
    "27": {
        "file_id": 5,
        "content": "The code configures the ffmpeg build with various options such as libspeex, gpl, nonfree, pthreads, and more. It also enables cuda-nvcc, cuvid, nvenc, shared, gnutls, ladspa, aom, ass, bluray, bs2b, caca, dav1d, fontconfig, fribidi, gme, gsm, jack, mp3lame, mysofa, openjpeg, openmpt, opus, pulse, rabbitmq, rubberband, shine, snappy, soxr, ssh, theora, twolame, vidstab, vorbis, vpx, webp, and x265. It uses specific paths for include and library files of cuda. Disables static build.",
        "type": "comment"
    },
    "28": {
        "file_id": 5,
        "content": "--enable-libsrt --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --disable-sndio --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared --enable-libopenh264  --enable-libtensorflow # wtf?\nmake -j8\nmake install",
        "type": "code",
        "location": "/externals/ffmpeg_libspeex_tensorflow_support.sh:5-8"
    },
    "29": {
        "file_id": 5,
        "content": "The code is enabling a variety of libraries and modules for FFmpeg, including audio and video codecs, user interfaces, and specialized libraries like libtensorflow. It then builds and installs the configured FFmpeg.",
        "type": "comment"
    },
    "30": {
        "file_id": 6,
        "content": "/externals/get_the_heck_ffmpeg.py",
        "type": "filepath"
    },
    "31": {
        "file_id": 6,
        "content": "This code splits a string into enabled FFmpeg library names, adds \"-dev\" if necessary, and installs them using \"apt install\".",
        "type": "summary"
    },
    "32": {
        "file_id": 6,
        "content": "mystr = \"-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-chromaprint --enable-frei0r --enable-libx264 \"\nmystr = mystr.split(\" \")",
        "type": "code",
        "location": "/externals/get_the_heck_ffmpeg.py:1-3"
    },
    "33": {
        "file_id": 6,
        "content": "Code is splitting the string mystr into an array of individual enabled libraries for FFmpeg.",
        "type": "comment"
    },
    "34": {
        "file_id": 6,
        "content": "mylibs = []\nfor elem in mystr:\n    a = elem.replace(\"-\",\"\").replace(\" \",\"\").replace(\"enable\",\"\")\n    if len(a) <=2:\n        continue\n    if a.startswith(\"lib\"):\n        a +=\"-dev\"\n        mylibs.append(a)\n    else:\n        a+= \"-dev\"\n        b = \"lib\"+a\n        mylibs.append(a)\n        mylibs.append(b)\nfor lib in mylibs:\n    print(\"yes | apt install {}\".format(lib))",
        "type": "code",
        "location": "/externals/get_the_heck_ffmpeg.py:5-20"
    },
    "35": {
        "file_id": 6,
        "content": "This code filters out a list of library names from a given string, adds \"-dev\" if it doesn't start with \"lib\", and then installs each library using \"apt install\".",
        "type": "comment"
    },
    "36": {
        "file_id": 7,
        "content": "/externals/init_darknet.sh",
        "type": "filepath"
    },
    "37": {
        "file_id": 7,
        "content": "This code clones the Darknet repository, changes directory to it, sets GPU and CUDNN variables, then builds the darknet executable using make.",
        "type": "summary"
    },
    "38": {
        "file_id": 7,
        "content": "git clone --depth 1 https://github.com/AlexeyAB/darknet\ncd darknet\n# GPU=1\n# CUDNN=1\n# make y",
        "type": "code",
        "location": "/externals/init_darknet.sh:1-6"
    },
    "39": {
        "file_id": 7,
        "content": "This code clones the Darknet repository, changes directory to it, sets GPU and CUDNN variables, then builds the darknet executable using make.",
        "type": "comment"
    },
    "40": {
        "file_id": 8,
        "content": "/externals/init_ffmpeg.sh",
        "type": "filepath"
    },
    "41": {
        "file_id": 8,
        "content": "This code downloads and configures FFmpeg libraries with options like CUDA and LibNPP for project dependencies, rebuilds from source if needed, and enables specific libraries using --enable flag.",
        "type": "summary"
    },
    "42": {
        "file_id": 8,
        "content": "git clone --depth 1 https://git.ffmpeg.org/ffmpeg.git ffmpeg/\ngit clone https://git.videolan.org/git/ffmpeg/nv-codec-headers.git\ncd nv-codec-headers && sudo make install && cd ..\nyes | apt-get install build-essential yasm cmake libtool libc6 libc6-dev unzip wget libnuma1 libnuma-dev libchromaprint-dev frei0r-plugins-dev libaom-dev libiec61883-dev libass-dev libbluray-dev libbs2b-dev libcodec2-dev libgsm1-dev libopenjp2-7-dev librsvg2-dev libzmq3-dev libomxil-bellagio-dev libcdio-paranoia-dev libsrt-gnutls-dev libopenh264-dev\n# yes | apt-get   build-dep ffmpeg # has unmet dependencies.\n# git clone https://github.com/Haivision/srt.git libsrt\n# cd libsrt/\n# git checkout -b work v1.4.1\n# sudo apt-get install tclsh pkg-config cmake libssl-dev build-essential\n# ./configure \n# make\n# sudo make install\n# sudo ldconfig\n# cd ..\n# yes | apt install ladspa-dev\n# yes | apt install libaom-dev\n# yes | apt install libass-dev\n# yes | apt install libbluray-dev\n# yes | apt install libbs2b-dev\n# yes | apt install libcaca-dev",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:1-21"
    },
    "43": {
        "file_id": 8,
        "content": "Code is downloading and installing the FFmpeg libraries along with dependencies, making sure necessary packages are installed, performing necessary configurations, compiling and installing SRT library.",
        "type": "comment"
    },
    "44": {
        "file_id": 8,
        "content": "# yes | apt install libcdio-dev\n# yes | apt install libcodec2-dev\n# yes | apt install libdav1d-dev\n# yes | apt install libflite-dev\n# yes | apt install libfontconfig-dev\n# yes | apt install libfreetype-dev\n# yes | apt install libfribidi-dev\n# yes | apt install libgme-dev\n# yes | apt install libgsm-dev\n# yes | apt install libjack-dev\n# yes | apt install libmp3lame-dev\n# yes | apt install libmysofa-dev\n# yes | apt install libopenjpeg-dev\n# yes | apt install libopenmpt-dev\n# yes | apt install libopus-dev\n# yes | apt install libpulse-dev\n# yes | apt install librabbitmq-dev\n# yes | apt install librubberband-dev\n# yes | apt install libshine-dev\n# yes | apt install libsnappy-dev\n# yes | apt install libsoxr-dev\n# yes | apt install libspeex-dev\n# yes | apt install libsrt-dev\n# yes | apt install libssh-dev\n# yes | apt install libtheora-dev\n# yes | apt install libtwolame-dev\n# yes | apt install libvidstab-dev\n# yes | apt install libvorbis-dev\n# yes | apt install libvpx-dev\n# yes | apt install libwebp-dev\n# yes | apt install libx265-dev",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:22-52"
    },
    "45": {
        "file_id": 8,
        "content": "This code is installing various library development packages using the \"apt install\" command with \"yes\" for auto-confirmation, possibly for a project's dependencies.",
        "type": "comment"
    },
    "46": {
        "file_id": 8,
        "content": "# yes | apt install libxml2-dev\n# yes | apt install libxvid-dev\n# yes | apt install libzimg-dev\n# yes | apt install libzmq-dev\n# yes | apt install libzvbi-dev\n# yes | apt install lv2-dev\n# yes | apt install liblv2-dev\n# yes | apt install omx-dev\n# yes | apt install libomx-dev\n# yes | apt install openal-dev\n# yes | apt install libopenal-dev\n# yes | apt install opencl-dev\n# yes | apt install libopencl-dev\n# yes | apt install opengl-dev\n# yes | apt install libopengl-dev\n# yes | apt install sdl2-dev\n# yes | apt install libsdl2-dev\n# yes | apt install pocketsphinx-dev\n# yes | apt install libpocketsphinx-dev\n# yes | apt install librsvg-dev\n# yes | apt install libmfx-dev\n# yes | apt install libdc1394-dev\n# yes | apt install libdrm-dev\n# yes | apt install chromaprint-dev\n# yes | apt install libchromaprint-dev\n# yes | apt install frei0r-dev\n# yes | apt install libfrei0r-dev\n# yes | apt install libx264-dev\ncd ffmpeg\n# libchromaprint: audio fingerprint\n# frei0r: video effects\n# libaom-dev: av1 video codec\n# ./configure --enable",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:53-85"
    },
    "47": {
        "file_id": 8,
        "content": "Installing various development packages for different libraries and codecs before configuring ffmpeg.",
        "type": "comment"
    },
    "48": {
        "file_id": 8,
        "content": "-nonfree --enable-cuda-nvcc --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static --enable-shared\n# ./configure --enable-gpl --enable-nonfree --enable-pthreads --extra-libs=-lstdc++ --enable-cuda-nvcc --enable-cuvid --enable-nvenc --enable-shared --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --enable-libnpp --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static \n# add libspeex\n# why libspeex is not working?\n# you'd better build this shit from source.\n# because libspeex1 rebuild or something.\n###LAST WORKING ONE\n./configure --toolchain=hardened  --arch=amd64 --enable-gpl --enable-nonfree --enable-pthreads --extra-libs=-lstdc++ --enable-cuda-nvcc --enable-cuvid --enable-nvenc --enable-shared --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --enable-libnpp --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --ena",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:85-93"
    },
    "49": {
        "file_id": 8,
        "content": "This code sets various options for configuring FFmpeg, including enabling CUDA NVCC, enabling CUDA CUDV and NVENC, enabling LibNPP, specifying extra include and link directories, disabling static builds, and enabling Gnutls, LADSPA, libAOM, libASS, libBluray, libBS2B. It uses a hardened toolchain with AMD64 architecture, and refers to previous issues with LibSpeex, suggesting rebuilding from source.",
        "type": "comment"
    },
    "50": {
        "file_id": 8,
        "content": "ble-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libsrt --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --disable-sndio --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared --enable-libopenh264 # wtf?\n### LAST WORKING ONE\n# ./configure --enable-gpl --enable-nonfree --enable-",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:93-96"
    },
    "51": {
        "file_id": 8,
        "content": "The code is configuring the build of a software library with various components enabled, specifying different libraries and options for compilation. It enables several libs like cdio, codec2, dav1d, fontconfig, freetype, fribidi etc., disables sndio and searches for the last working configuration for an older version.",
        "type": "comment"
    },
    "52": {
        "file_id": 8,
        "content": "pthreads --extra-libs=-lstdc++ --enable-cuda-nvcc --enable-cuvid --enable-nvenc --enable-shared --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --enable-libnpp --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --arch=amd64 --enable-gpl --disable-stripping --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:96-96"
    },
    "53": {
        "file_id": 8,
        "content": "This code is enabling various libraries and options for the FFmpeg compilation, including CUDA-NVCC, CUVID, NVENC, shared libraries, LibNPP, hardened toolchain, specific architecture, GPL, disabling stripping, and enabling Gnutls among others.",
        "type": "comment"
    },
    "54": {
        "file_id": 8,
        "content": "libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --disable-sndio --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared\n# ./configure --prefix=/usr/local/ffmpeg --enable-gpl --enable-nonfree --enable-pthreads --extra-cflags=-g --extra-cflags=-O0 --extra-libs=-lstdc++ --extra-cxxflags=-g --extra-cxxflags=-O0 --extra-cxxflags=-fpermissive --enable-debug=3 --disable-optimizations --disable-stripping --disable-x86asm --enable-cuda-nvcc --enable-cuvid --enable-shared --enable-nvenc --enable-shared --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --extra-ldflags=-L/usr/local/cuda/lib64\nmake -j8\nmake install\n# this is not distributable. non-free nvenc\n# without mp3!\n# original compiling flags:",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:96-104"
    },
    "55": {
        "file_id": 8,
        "content": "This code is configuring and compiling the FFmpeg library with various enabled components such as libvorbis, libvpx, libwebp, and more. It also includes specific build configurations for optimization and debugging. The final \"make\" commands compile and install the configured FFmpeg library.",
        "type": "comment"
    },
    "56": {
        "file_id": 8,
        "content": "# --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --arch=amd64 --enable-gpl --disable-stripping --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enab",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:105-105"
    },
    "57": {
        "file_id": 8,
        "content": "This code is enabling various libraries and features for FFmpeg, a popular multimedia framework. It includes support for audio and video codecs, file formats, filters, and more. The code specifies the toolchain, directories, architecture, and enabled features for building FFmpeg.",
        "type": "comment"
    },
    "58": {
        "file_id": 8,
        "content": "le-sdl2 --disable-sndio --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:105-105"
    },
    "59": {
        "file_id": 8,
        "content": "This code enables specific libraries for a software by passing the corresponding options using the --enable flag, which ultimately disables other components and enables these selected ones.",
        "type": "comment"
    },
    "60": {
        "file_id": 9,
        "content": "/externals/init_opentoolz.sh",
        "type": "filepath"
    },
    "61": {
        "file_id": 9,
        "content": "Installing necessary packages, cloning OpenToonz repository, configuring and compiling third-party dependencies, building the software, installing it, and creating a symbolic link to simplify execution.",
        "type": "summary"
    },
    "62": {
        "file_id": 9,
        "content": "# sudo apt-get install build-essential git cmake pkg-config libboost-all-dev  qtbase5-dev libqt5svg5-dev qtscript5-dev qttools5-dev qttools5-dev-tools libqt5opengl5-dev qtmultimedia5-dev libqt5multimedia5-plugins libqt5serialport5-dev libsuperlu-dev  liblz4-dev libusb-1.0-0-dev liblzo2-dev libpng-dev libjpeg-dev libglew-dev freeglut3-dev libfreetype6-dev libjson-c-dev qtwayland5 libmypaint-dev libopencv-dev libturbojpeg-dev\n# sudo apt-get install libmypaint-dev\n# git clone --depth 1 https://github.com/opentoonz/opentoonz\nmkdir -p $HOME/.config/OpenToonz\ncp -r opentoonz/stuff $HOME/.config/OpenToonz/\ncd opentoonz/thirdparty/tiff-4.0.3\n./configure --with-pic --disable-jbig\nmake -j$(nproc)\ncd ../../\ncd toonz\nmkdir build\ncd build\ncmake ../sources\nmake -j$(nproc)\nsudo make install\nln -s /opt/opentoonz/bin/opentoonz /usr/bin/opentoonz",
        "type": "code",
        "location": "/externals/init_opentoolz.sh:1-23"
    },
    "63": {
        "file_id": 9,
        "content": "Installing necessary packages, cloning OpenToonz repository, configuring and compiling third-party dependencies, building the software, installing it, and creating a symbolic link to simplify execution.",
        "type": "comment"
    },
    "64": {
        "file_id": 10,
        "content": "/externals/netease_api_download.sh",
        "type": "filepath"
    },
    "65": {
        "file_id": 10,
        "content": "The code is cloning a GitHub repository, changing the directory to it, and installing two packages (husky and npm) for further usage.",
        "type": "summary"
    },
    "66": {
        "file_id": 10,
        "content": "git clone --depth 1 https://github.com/Binaryify/NeteaseCloudMusicApi.git\ncd NeteaseCloudMusicApi\nnpm install -g husky\nnpm install -g .",
        "type": "code",
        "location": "/externals/netease_api_download.sh:1-7"
    },
    "67": {
        "file_id": 10,
        "content": "The code is cloning a GitHub repository, changing the directory to it, and installing two packages (husky and npm) for further usage.",
        "type": "comment"
    },
    "68": {
        "file_id": 11,
        "content": "/externals/opencv_init.sh",
        "type": "filepath"
    },
    "69": {
        "file_id": 11,
        "content": "Code snippet initializes the OpenCV library. It creates a directory, downloads the required zip files, extracts them, configures the build with CMake, builds and installs the library, and finally resets the Python bindings for OpenCV.",
        "type": "summary"
    },
    "70": {
        "file_id": 11,
        "content": "mkdir opencv\ncd opencv\nwget -O opencv.zip https://github.com/opencv/opencv/archive/4.x.zip\nwget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.x.zip\nunzip opencv.zip\nunzip opencv_contrib.zip\n# Create build directory and switch into it\nmkdir -p build && cd build\n# Configure\ncmake -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.x/modules -DWITH_CUDA=ON ../opencv-4.x\n# Build\ncmake --build .\nmake install\nbash /media/root/help/pyjom/externals/opencv_py_reset.sh",
        "type": "code",
        "location": "/externals/opencv_init.sh:1-16"
    },
    "71": {
        "file_id": 11,
        "content": "Code snippet initializes the OpenCV library. It creates a directory, downloads the required zip files, extracts them, configures the build with CMake, builds and installs the library, and finally resets the Python bindings for OpenCV.",
        "type": "comment"
    },
    "72": {
        "file_id": 12,
        "content": "/externals/opencv_py_reset.sh",
        "type": "filepath"
    },
    "73": {
        "file_id": 12,
        "content": "The code uninstalls opencv packages, installs opencv-python, and adds a .so file for CUDA function. It updates installation options with directories, compilation settings, and OpenCV Python reset script choices.",
        "type": "summary"
    },
    "74": {
        "file_id": 12,
        "content": "cd opencv/build/python_loader\nyes | pip3 uninstall opencv\nyes | pip3 uninstall opencv-contrib\nyes | pip3 uninstall opencv-python\nyes | pip3 uninstall opencv-contrib-python\nyes | pip3 install opencv-python # will that break shit?\npython3 setup.py install\n# it is all about that .so file.\n# you would like to say that you have installed the thing.\n# place a link of .so or something, to use the cuda function.\ncp /usr/local/lib/python3.9/site-packages/cv2/python-3.9/cv2.cpython-39-x86_64-linux-gnu.so /usr/local/lib/python3.9/dist-packages/\n# pip3 install .\n# python3 setup.py install --install-lib /usr/lib/python3/dist-packages/\n# # python3 setup.py install --root /usr/lib/python3/dist-packages/\n# Options for 'install' command:\n#   --prefix                             installation prefix\n#   --exec-prefix                        (Unix only) prefix for platform-\n#                                        specific files\n#   --home                               (Unix only) home directory to install\n#                                        under",
        "type": "code",
        "location": "/externals/opencv_py_reset.sh:1-24"
    },
    "75": {
        "file_id": 12,
        "content": "Code uninstalls opencv packages, installs opencv-python, and places a .so file to use CUDA function. It updates installation prefix, exec-prefix, and home directory options for 'install' command.",
        "type": "comment"
    },
    "76": {
        "file_id": 12,
        "content": "#   --install-base                       base installation directory (instead of\n#                                        --prefix or --home)\n#   --install-platbase                   base installation directory for\n#                                        platform-specific files (instead of --\n#                                        exec-prefix or --home)\n#   --root                               install everything relative to this\n#                                        alternate root directory\n#   --install-purelib                    installation directory for pure Python\n#                                        module distributions\n#   --install-platlib                    installation directory for non-pure\n#                                        module distributions\n#   --install-lib                        installation directory for all module\n#                                        distributions (overrides --install-\n#                                        purelib and --install-platlib)\n#   --install-headers                    installation directory for C/C++",
        "type": "code",
        "location": "/externals/opencv_py_reset.sh:25-39"
    },
    "77": {
        "file_id": 12,
        "content": "This code snippet is a part of a help function describing various installation directories and their purposes in the OpenCV library. It provides information on different options like --install-base, --install-platbase, --root, --install-purelib, --install-platlib, --install-lib, and --install-headers.",
        "type": "comment"
    },
    "78": {
        "file_id": 12,
        "content": "#                                        headers\n#   --install-scripts                    installation directory for Python\n#                                        scripts\n#   --install-data                       installation directory for data files\n#   --compile (-c)                       compile .py to .pyc [default]\n#   --no-compile                         don't compile .py files\n#   --optimize (-O)                      also compile with optimization: -O1 for\n#                                        \"python -O\", -O2 for \"python -OO\", and\n#                                        -O0 to disable [default: -O0]\n#   --force (-f)                         force installation (overwrite any\n#                                        existing files)\n#   --skip-build                         skip rebuilding everything (for\n#                                        testing/debugging)\n#   --record                             filename in which to record list of\n#                                        installed files",
        "type": "code",
        "location": "/externals/opencv_py_reset.sh:40-54"
    },
    "79": {
        "file_id": 12,
        "content": "This code snippet describes the various options for installing Python packages, including installation directories for scripts and data files, compilation settings like optimization level and no-compile flag, force installation option, skipping build, and recording installed files.",
        "type": "comment"
    },
    "80": {
        "file_id": 12,
        "content": "#   --user                               install in user site-package\n#                                        '/root/.local/lib/python3.9/site-\n#                                        packages'\n#   --old-and-unmanageable               Try not to use this!\n#   --single-version-externally-managed  used by system package builders to\n#                                        create 'flat' eggs",
        "type": "code",
        "location": "/externals/opencv_py_reset.sh:55-60"
    },
    "81": {
        "file_id": 12,
        "content": "This code snippet describes various installation options for OpenCV Python reset script. It mentions the user site-package location, a deprecated option, and a system package builder choice for 'flat' eggs.",
        "type": "comment"
    },
    "82": {
        "file_id": 13,
        "content": "/externals/opencv_rebuild.sh",
        "type": "filepath"
    },
    "83": {
        "file_id": 13,
        "content": "This script configures, builds, and installs OpenCV with CUDA support using CMake. It sets environment variables for proxy, libraries, and GCC-9, customizing the building process based on defined modules, applications, and languages.",
        "type": "summary"
    },
    "84": {
        "file_id": 13,
        "content": "cd opencv\n# cd build\n# rm -rf build\n# mkdir build\ncd build\n# Configure\n# do not use anaconda\nconda deactivate\n# override anaconda in $PATH\n# export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games:/usr/local/cuda-10.2/bin:/snap/bin\nexport PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games:/snap/bin # ignore incompatible nvcc\n# to download things.\n# export HTTP_PROXY=http://192.168.43.78:8899\n# export http_proxy=http://192.168.43.78:8899\n# export https_proxy=http://192.168.43.78:8899\n# export HTTPS_PROXY=http://192.168.43.78:8899\n# export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/:$LD_LIBRARY_PATH\n# need turn cuda on.\n# switch to gcc-9, lower than 10\ncmake -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.x/modules -DHTTP_PROXY=http://192.168.43.78:38457 -DWITH_CUDA=ON ../opencv-4.x\n# Build\ncmake --build .\nmake install \n# cd /media/root/help/pyjom/externals/\n# bash /media/root/help/pyjom/externals/opencv_py_reset.sh\n# --   OpenCV modules:",
        "type": "code",
        "location": "/externals/opencv_rebuild.sh:1-27"
    },
    "85": {
        "file_id": 13,
        "content": "This script changes directory to the OpenCV folder, configures and builds it using CMake, then installs it. It also sets environment variables for proxy, library paths, and ensures use of GCC-9. The script is specifically configured for CUDA support and uses a custom opencv_py_reset.sh script.",
        "type": "comment"
    },
    "86": {
        "file_id": 13,
        "content": "# --     To be built:                 alphamat aruco barcode bgsegm bioinspired calib3d ccalib core cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev datasets dnn dnn_objdetect dnn_superres dpm face features2d flann freetype fuzzy gapi hdf hfs highgui img_hash imgcodecs imgproc intensity_transform java line_descriptor mcc ml objdetect optflow phase_unwrapping photo plot python2 python3 quality rapid reg rgbd saliency sfm shape stereo stitching structured_light superres surface_matching text tracking ts video videoio videostab wechat_qrcode xfeatures2d ximgproc xobjdetect xphoto\n# --     Disabled:                    world\n# --     Disabled by dependency:      -\n# --     Unavailable:                 cvv julia matlab ovis viz\n# --     Applications:                tests perf_tests apps",
        "type": "code",
        "location": "/externals/opencv_rebuild.sh:28-32"
    },
    "87": {
        "file_id": 13,
        "content": "The code is a list of OpenCV modules, applications, and languages that are to be built, disabled, disabled by dependency, or unavailable. This script controls the building process based on these definitions.",
        "type": "comment"
    },
    "88": {
        "file_id": 14,
        "content": "/externals/pybgs_init.sh",
        "type": "filepath"
    },
    "89": {
        "file_id": 14,
        "content": "This code is installing the \"pybgs\" package using pip, after setting the OpenCV_DIR environment variable. It then performs a build and installation of the package in the \"bgslibrary\" directory. The PATH variable is updated to include relevant directories for proper execution.",
        "type": "summary"
    },
    "90": {
        "file_id": 14,
        "content": "# opencvdir=\"\"\n# env OpenCV_DIR= pip3 install pybgs\nexport PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games:/usr/local/cuda-10.2/bin:/snap/bin\ncd bgslibrary\npython3 setup.py build\npython3 setup.py install",
        "type": "code",
        "location": "/externals/pybgs_init.sh:1-6"
    },
    "91": {
        "file_id": 14,
        "content": "This code is installing the \"pybgs\" package using pip, after setting the OpenCV_DIR environment variable. It then performs a build and installation of the package in the \"bgslibrary\" directory. The PATH variable is updated to include relevant directories for proper execution.",
        "type": "comment"
    },
    "92": {
        "file_id": 15,
        "content": "/externals/test_import_opencv_site.py",
        "type": "filepath"
    },
    "93": {
        "file_id": 15,
        "content": "This code imports necessary libraries and checks for the location of OpenCV libraries. It then inserts that location into sys.path if there is only one library found, and finally imports the OpenCV library (cv2). The code then prints out the available functions and methods within cv2 using dir(cv2).",
        "type": "summary"
    },
    "94": {
        "file_id": 15,
        "content": "import pathlib\nimport site\nimport sys\n# this is root. this is not site-packages.\n# site_path = pathlib.Path([x for x in site.getsitepackages() if \"site-packages\" in x][0])\nsite_path = pathlib.Path(\"/usr/local/lib/python3.9/site-packages\")\ncv2_libs_dir = site_path / 'cv2' / f'python-{sys.version_info.major}.{sys.version_info.minor}'\nprint(cv2_libs_dir)\ncv2_libs = sorted(cv2_libs_dir.glob(\"*.so\"))\nif len(cv2_libs) == 1:\n    print(\"INSERTING:\",cv2_libs[0].parent)\n    sys.path.insert(1, str(cv2_libs[0].parent))\nimport cv2\nprint(dir(cv2)) # shit?",
        "type": "code",
        "location": "/externals/test_import_opencv_site.py:1-18"
    },
    "95": {
        "file_id": 15,
        "content": "This code imports necessary libraries and checks for the location of OpenCV libraries. It then inserts that location into sys.path if there is only one library found, and finally imports the OpenCV library (cv2). The code then prints out the available functions and methods within cv2 using dir(cv2).",
        "type": "comment"
    },
    "96": {
        "file_id": 16,
        "content": "/externals/three_init.sh",
        "type": "filepath"
    },
    "97": {
        "file_id": 16,
        "content": "This command clones the Three.js library from GitHub, ensuring only the latest commit is downloaded for potentially faster download times.",
        "type": "summary"
    },
    "98": {
        "file_id": 16,
        "content": "git clone --depth 1 https://github.com/mrdoob/three.js # this might be faster than shit.",
        "type": "code",
        "location": "/externals/three_init.sh:1-1"
    },
    "99": {
        "file_id": 16,
        "content": "This command clones the Three.js library from GitHub, ensuring only the latest commit is downloaded for potentially faster download times.",
        "type": "comment"
    }
}