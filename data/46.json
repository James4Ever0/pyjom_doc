{
    "4600": {
        "file_id": 601,
        "content": "url = \"https://om.qq.com/image/orginalupload\"\n# php tencent: http://www.ygbks.com/2501.html gtimg\n# python sina: https://www.52pojie.cn/thread-1446200-1-1.html\n\"\"\"\nadd something like this in your website\n<img src='http://inews.gtimg.com/newsapp_ls/0/14966062446/0' width=\"200\"  referrerpolicy=\"no-referrer\" />\n\"\"\"\nfilePath = \"test_cover.jpg\"\nimport requests\n# with open(filepath, \"rb\") as f:\n#     content = f.read()\n# upload elsewhere.\nurl = \"https://om.qq.com/image/exactupload?relogin=1\"\npicUrl = \"https://open.gtimg.cn/open/app_icon/00/95/17/76/100951776_100_m.png\"\nurl = \"https://om.qq.com/image/archscaleupload?isRetImgAttr=1&relogin=1\"\ncookie = {\n\t\"alertclicked\": \"||\",\n\t\"appOmDownClose\": \"1\",\n\t\"csrfToken\": \"csrf-1666038340355\",\n\t\"iip\": \"0\",\n\t\"o_cookie\": \"917521610\",\n\t\"omaccesstoken\": \"00a8d53ee83b92ec4e3111998ca616ad566b9d6fe80814f1be12d2a5c1e7a267baf531f268514a1be2670c9e98da4549a31b36408ed199c6ccd0e069f62ba65438x0\",\n\t\"omtoken\": \"00a8d53ee83b92ec4e3111998ca616ad566b9d6fe80814f1be12d2a5c1e7a267baf531f268514a1be2670c9e98da4549a31b36408ed199c6ccd0e069f62ba65438x0\",",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img2.py:1-25"
    },
    "4601": {
        "file_id": 601,
        "content": "This code is making multiple requests to different URLs, likely for image uploading purposes. It uses the requests library to interact with the specified URLs and includes cookies for authentication. The code seems to involve various steps including reading a file, opening it in binary mode, and sending it for exact or archive scale upload depending on the URL.",
        "type": "comment"
    },
    "4602": {
        "file_id": 601,
        "content": "\t\"pac_uid\": \"1_917521610\",\n\t\"pgv_info\": \"ssid=s2914806624\",\n\t\"pgv_pvid\": \"977259220\",\n\t\"ptcz\": \"cff0fae128e230ac9cbdca6b44c812da07a8a27199142b3856073da30bd7d37f\",\n\t\"ptui_loginuin\": \"917521610@qq.com\",\n\t\"RK\": \"bNrVuDJjGZ\",\n\t\"ts_last\": \"om.qq.com/userReg/mediaInfo\",\n\t\"ts_uid\": \"6110293192\",\n\t\"TSID\": \"fg2om4ff3b0028rpbovnpafde1\",\n\t\"tvfe_boss_uuid\": \"ba12af7c5a70407c\",\n\t\"userid\": \"22690801\",\n\t\"wxky\": \"1\"\n}\ncookie_str = \"; \".join([\"{}:{}\".format(k, v) for k, v in cookie.items()])\nfiles = {\n    \"Filedata\": open(filePath, \"rb\"),\n    \"id\": \"WU_FILE_0\",\n    \"name\": \"test_cover.jpg\",\n    \"type\": \"image/jpeg\",\n    \"lastModifiedDate\": \"10/18/2022, 4:27:08 AM\",\n    'appKey':'1',\n    'isRetImgAttr':'1',\n    'from':'user',\n    'subModule':'userAuth_individual_head'\n}\nreq_headers = [\n\t\t\t{\n\t\t\t\t\"name\": \"Accept\",\n\t\t\t\t\"value\": \"*/*\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Accept-Encoding\",\n\t\t\t\t\"value\": \"gzip, deflate, br\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Accept-Language\",\n\t\t\t\t\"value\": \"en-US,en;q=0.5\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Connection\",\n\t\t\t\t\"value\": \"keep-alive\"\n\t\t\t},\n\t\t\t# {",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img2.py:26-68"
    },
    "4603": {
        "file_id": 601,
        "content": "The code is creating a request to upload an image file using the parameters provided in the cookie dictionary and request headers. The cookies are converted into a string format, and the image file is included with additional metadata in the files dictionary. The request headers include information about the desired content type, language preference, and connection type.",
        "type": "comment"
    },
    "4604": {
        "file_id": 601,
        "content": "\t\t\t# \t\"name\": \"Content-Length\",\n\t\t\t# \t\"value\": \"197582\"\n\t\t\t# },\n\t\t\t# {\n\t\t\t\t# \"name\": \"Content-Type\",\n\t\t\t\t# \"value\": \"multipart/form-data; boundary=---------------------------26791228924136332743854048233\"\n\t\t\t# },\n\t\t\t{ # do some cookie hook to get these data in playwright.\n\t\t\t\t\"name\": \"Cookie\",\n\t\t\t\t\"value\": \"userid=22690801; omaccesstoken=00a8d53ee83b92ec4e3111998ca616ad566b9d6fe80814f1be12d2a5c1e7a267baf531f268514a1be2670c9e98da4549a31b36408ed199c6ccd0e069f62ba65438x0\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Host\",\n\t\t\t\t\"value\": \"om.qq.com\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Origin\",\n\t\t\t\t\"value\": \"https://om.qq.com\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Referer\",\n\t\t\t\t\"value\": \"https://om.qq.com/userReg/mediaInfo\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Sec-Fetch-Dest\",\n\t\t\t\t\"value\": \"empty\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Sec-Fetch-Mode\",\n\t\t\t\t\"value\": \"cors\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Sec-Fetch-Site\",\n\t\t\t\t\"value\": \"same-origin\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"User-Agent\",\n\t\t\t\t\"value\": \"Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0\"\n\t\t\t}\n\t\t]\nheaders = {item['name']: item['value'] for item in req_headers}",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img2.py:69-109"
    },
    "4605": {
        "file_id": 601,
        "content": "This code defines a list of request headers, each represented by a dictionary containing 'name' and 'value'. The 'headers' variable is then generated using a dictionary comprehension, mapping the header names to their respective values. This structured format can be used for making API requests or handling HTTP communication in a program.",
        "type": "comment"
    },
    "4606": {
        "file_id": 601,
        "content": "respone = requests.post(url, files=files,headers=headers)\nres = respone.json()\nprint(res)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img2.py:110-112"
    },
    "4607": {
        "file_id": 601,
        "content": "This code sends a POST request to a specified URL, including files in the request body using Python's requests library. The response is then converted to JSON format and stored in 'res', which is printed for output.",
        "type": "comment"
    },
    "4608": {
        "file_id": 602,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img.py",
        "type": "filepath"
    },
    "4609": {
        "file_id": 602,
        "content": "This Python script uses the requests library to upload an image to QQ platform, setting up necessary headers, cookies, and metadata for processing. It sends a POST request with session data and tokens to \"om.qq.com\" and prints the response in JSON format.",
        "type": "summary"
    },
    "4610": {
        "file_id": 602,
        "content": "url = \"https://om.qq.com/image/orginalupload\"\n# php tencent: http://www.ygbks.com/2501.html gtimg\n# python sina: https://www.52pojie.cn/thread-1446200-1-1.html\n\"\"\"\nadd something like this in your website\n<img src='http://inews.gtimg.com/newsapp_ls/0/14966062446/0' width=\"200\"  referrerpolicy=\"no-referrer\" />\n\"\"\"\nfilePath = \"test_cover.jpg\"\nimport requests\n# with open(filepath, \"rb\") as f:\n#     content = f.read()\n# upload elsewhere.\nurl = \"https://om.qq.com/image/exactupload?relogin=1\"\npicUrl = \"https://open.gtimg.cn/open/app_icon/00/95/17/76/100951776_100_m.png\"\nurl = \"https://om.qq.com/image/archscaleupload?isRetImgAttr=1&relogin=1\"\ncookie = {\n\t\"alertclicked\": \"||\",\n\t\"appOmDownClose\": \"1\",\n\t\"csrfToken\": \"csrf-1666038340355\",\n\t\"iip\": \"0\",\n\t\"o_cookie\": \"917521610\",\n\t\"omaccesstoken\": \"00a8d53ee83b92ec4e3111998ca616ad566b9d6fe80814f1be12d2a5c1e7a267baf531f268514a1be2670c9e98da4549a31b36408ed199c6ccd0e069f62ba65438x0\",\n\t\"omtoken\": \"00a8d53ee83b92ec4e3111998ca616ad566b9d6fe80814f1be12d2a5c1e7a267baf531f268514a1be2670c9e98da4549a31b36408ed199c6ccd0e069f62ba65438x0\",",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img.py:1-25"
    },
    "4611": {
        "file_id": 602,
        "content": "This code is attempting to upload an image to the QQ platform using Python. It first specifies the URL for uploading the image and provides a file path for the image. Then, it imports the requests library to handle the HTTP request for uploading the image. The code includes several different URLs for various types of uploads, as well as a dictionary of cookies necessary for authentication during the upload process.",
        "type": "comment"
    },
    "4612": {
        "file_id": 602,
        "content": "\t\"pac_uid\": \"1_917521610\",\n\t\"pgv_info\": \"ssid=s2914806624\",\n\t\"pgv_pvid\": \"977259220\",\n\t\"ptcz\": \"cff0fae128e230ac9cbdca6b44c812da07a8a27199142b3856073da30bd7d37f\",\n\t\"ptui_loginuin\": \"917521610@qq.com\",\n\t\"RK\": \"bNrVuDJjGZ\",\n\t\"ts_last\": \"om.qq.com/userReg/mediaInfo\",\n\t\"ts_uid\": \"6110293192\",\n\t\"TSID\": \"fg2om4ff3b0028rpbovnpafde1\",\n\t\"tvfe_boss_uuid\": \"ba12af7c5a70407c\",\n\t\"userid\": \"22690801\",\n\t\"wxky\": \"1\"\n}\ncookie_str = \";\".join([\"{}:{}\".format(k, v) for k, v in cookie.items()])\nfiles = {\n    \"Filedata\": open(filePath, \"rb\"),\n    \"id\": \"WU_FILE_0\",\n    \"name\": \"test_cover.jpg\",\n    \"type\": \"image/jpeg\",\n    \"lastModifiedDate\": \"10/18/2022, 4:27:08 AM\",\n    'appKey':'1',\n    'isRetImgAttr':'1',\n    'from':'user',\n    'subModule':'userAuth_individual_head'\n}\nreq_headers = [\n\t\t\t{\n\t\t\t\t\"name\": \"Accept\",\n\t\t\t\t\"value\": \"*/*\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Accept-Encoding\",\n\t\t\t\t\"value\": \"gzip, deflate, br\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Accept-Language\",\n\t\t\t\t\"value\": \"en-US,en;q=0.5\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Connection\",\n\t\t\t\t\"value\": \"keep-alive\"\n\t\t\t},\n\t\t\t# {",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img.py:26-68"
    },
    "4613": {
        "file_id": 602,
        "content": "This code sends an image file to the server for processing. It sets up necessary headers, converts cookie data into a string format, and includes relevant information like user IDs and timestamps in the request. The image is sent with additional metadata such as app key, ret img attr, and source module.",
        "type": "comment"
    },
    "4614": {
        "file_id": 602,
        "content": "\t\t\t# \t\"name\": \"Content-Length\",\n\t\t\t# \t\"value\": \"197582\"\n\t\t\t# },\n\t\t\t# {\n\t\t\t\t# \"name\": \"Content-Type\",\n\t\t\t\t# \"value\": \"multipart/form-data; boundary=---------------------------26791228924136332743854048233\"\n\t\t\t# },\n\t\t\t{\n\t\t\t\t\"name\": \"Cookie\",\n\t\t\t\t\"value\": \"pgv_pvid=977259220; pac_uid=1_917521610; RK=bNrVuDJjGZ; ptcz=cff0fae128e230ac9cbdca6b44c812da07a8a27199142b3856073da30bd7d37f; tvfe_boss_uuid=ba12af7c5a70407c; o_cookie=917521610; iip=0; TSID=fg2om4ff3b0028rpbovnpafde1; pgv_info=ssid=s2914806624; ts_last=om.qq.com/userReg/mediaInfo; ts_uid=6110293192; csrfToken=csrf-1666038340355; appOmDownClose=1; ptui_loginuin=917521610@qq.com; userid=22690801; omaccesstoken=00a8d53ee83b92ec4e3111998ca616ad566b9d6fe80814f1be12d2a5c1e7a267baf531f268514a1be2670c9e98da4549a31b36408ed199c6ccd0e069f62ba65438x0; omtoken=00a8d53ee83b92ec4e3111998ca616ad566b9d6fe80814f1be12d2a5c1e7a267baf531f268514a1be2670c9e98da4549a31b36408ed199c6ccd0e069f62ba65438x0; wxky=1; alertclicked=%7C%7C\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Host\",\n\t\t\t\t\"value\": \"om.qq.com\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img.py:69-82"
    },
    "4615": {
        "file_id": 602,
        "content": "This code represents a request with various headers, including \"Cookie\" header storing multiple QQ session data and tokens, and \"Host\" set to \"om.qq.com\".",
        "type": "comment"
    },
    "4616": {
        "file_id": 602,
        "content": "\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Origin\",\n\t\t\t\t\"value\": \"https://om.qq.com\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Referer\",\n\t\t\t\t\"value\": \"https://om.qq.com/userReg/mediaInfo\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Sec-Fetch-Dest\",\n\t\t\t\t\"value\": \"empty\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Sec-Fetch-Mode\",\n\t\t\t\t\"value\": \"cors\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Sec-Fetch-Site\",\n\t\t\t\t\"value\": \"same-origin\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"User-Agent\",\n\t\t\t\t\"value\": \"Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0\"\n\t\t\t}\n\t\t]\nheaders = {item['name']: item['value'] for item in req_headers}\nrespone = requests.post(url, files=files,headers=headers)\nres = respone.json()\nprint(res)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/upload_img.py:83-112"
    },
    "4617": {
        "file_id": 602,
        "content": "The code sends a POST request with specified headers to the given URL using requests library. It uses the provided headers for various purposes such as origin, referer, fetch destination mode, fetch site, and user agent. The response is then printed after converting it to JSON format.",
        "type": "comment"
    },
    "4618": {
        "file_id": 603,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_xml_qq.py",
        "type": "filepath"
    },
    "4619": {
        "file_id": 603,
        "content": "The code creates an Action object for QQ messages, handles cover options, and sends XML/JSON messages using `sendFriendXml`/`sendGroupXml`. The \"SendMsgV2\" function sends a QQ message with XML content via a POST request to \"/v1/LuaApiCaller\", including the title, summary, and URL of a music file.",
        "type": "summary"
    },
    "4620": {
        "file_id": 603,
        "content": "from botoy import Action\nqq = 917521610\nport = 8784\naction = Action(qq=qq, port=port, host=\"127.0.0.1\")\nuser = 1281727431\n# but the goddamn xml format is not right.\n# cover = \"http://inews.gtimg.com/newsapp_bt/0/15352117085/640\"\ncover = \"http://pubminishare-30161.picsz.qpic.cn/d4ad36fa-833e-4018-b994-a2da810f2d54\"\n# just need a better cover. i don't know.\n# cover = \"https://i0.hdslb.com/bfs/archive/c5a0d18ee077fb6a4ac0970ccb0a3788e137d14f.jpg\" # works.\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes'?><msg templateID=\"123\" url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" serviceID=\"1\" action=\"web\" actionData=\"\" a_actionData=\"\" i_actionData=\"\" brief=\"[QQ小程序]哔哩哔哩\" flag=\"0\"><item layout=\"2\"><picture cover=\"{}\"/><title>哔哩哔哩</title><summary>【C语言】《带你学C带你飞》</summary></item><source url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_xml_qq.py:1-12"
    },
    "4621": {
        "file_id": 603,
        "content": "The code is creating an Action object with QQ number, port, and host. It also includes a variable for the user, cover image URLs, and a template XML message with specific parameters. The current cover URL seems to be causing issues and there are alternative options provided.",
        "type": "comment"
    },
    "4622": {
        "file_id": 603,
        "content": "amp;ts=1657521142233\" icon=\"https://open.gtimg.cn/open/app_icon/00/95/17/76/100951776_100_m.png?t=1657091104\" name=\"哔哩哔哩\" appid=\"0\" action=\"web\" actionData=\"\" a_actionData=\"tencent0://\" i_actionData=\"\"/></msg>\"\"\".format(\n    # cover\n# )\n# content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><msg templateID=\"123\" url=\"https://b23.tv/uHML5mi?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1666023406285\" serviceID=\"1\" action=\"web\" actionData=\"\" a_actionData=\"\" i_actionData=\"\" brief=\"[QQ小程序]哔哩哔哩\" flag=\"0\"><item layout=\"2\"><picture cover=\"{}\"/><title>【AI动画】妮露PV动画 风转换【NovelAI】</title></item><source url=\"https://b23.tv/uHML5mi?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1666023406285\" icon=\"http://miniapp.gtimg.cn/public/appicon/432b76be3a548fc128acaa6c1ec90131_200.jpg\" name=\"哔哩哔哩\" appid=\"0\" action=\"app\" actionData=\"\" a_actionData=\"tencent0://\" i_actionData=\"\"/></msg>\"\"\".format(cover)\n# i guess, it is just the way it send the data is different.",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_xml_qq.py:12-16"
    },
    "4623": {
        "file_id": 603,
        "content": "This code is formatting XML content for a QQ message template, including the URL, app icon, and app name. The code is using string formatting to replace placeholders with actual data before sending it via QQ.",
        "type": "comment"
    },
    "4624": {
        "file_id": 603,
        "content": "# result= action.sendFriendXml(user=user, content=content)\n# print(result)\n# content=\"\"\"{\"app\":\"com.tencent.gamecenter.gameshare\",\"desc\":\"\",\"view\":\"singleImg\",\"ver\":\"0.0.0.0\",\"prompt\":\"邪少QQXML论坛\",\"appID\":\"\",\"sourceName\":\"\",\"actionData\":\"\",\"actionData_A\":\"\",\"sourceUrl\":\"\",\"meta\":{\"singleImg\":{\"mainImage\":\"https://gchat.qpic.cn/gchatpic_new/3020005669/916530575-2949639428-6E45D21EADE33511C565E25AB432AB59/0?term=2\",\"mainUrl\":\"\"}},\"config\":{\"forward\":1},\"text\":\"\",\"sourceAd\":\"\"}\"\"\"\ngroup = 543780931\n# have error when sending group xml? why?\n# result = action.sendGroupXml(group=group, content=content)\n# successful!\n# this 'com.tencent.structmsg' might be our way. just maybe.\ncontent = \"\"\"{\"app\":\"com.tencent.structmsg\",\"desc\":\"\",\"view\":\"news\",\"ver\":\"0.0.0.1\",\"prompt\":\"邪少QQXML论坛\",\"appID\":100951776,\"sourceName\":\"\",\"actionData\":\"\",\"actionData_A\":\"\",\"sourceUrl\":\"\",\"meta\":{\"singleImg\":{\"mainImage\":\"https://gchat.qpic.cn/gchatpic_new/3020005669/916530575-2949639428-6E45D21EADE33511C565E25AB432AB59/0?term=2\",\"mainUrl\":\"\"}},\"text\":\"\",\"extraApps\":[],\"sourceAd\":\"\",\"config\":{\"forward\":1}}\"\"\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_xml_qq.py:17-26"
    },
    "4625": {
        "file_id": 603,
        "content": "This code attempts to send XML messages using the `sendFriendXml` and `sendGroupXml` methods. The first content is intended for individual chats, while the second content is meant for group chats. It encounters an error when sending group XML and suggests that using \"com.tencent.structmsg\" might be a solution.",
        "type": "comment"
    },
    "4626": {
        "file_id": 603,
        "content": "# content = \"\"\"{\"app\":\"com.tencent.gamecenter.gameshare\",\"desc\":\"\",\"view\":\"singleImg\",\"ver\":\"0.0.0.0\",\"prompt\":\"邪少QQXML论坛\",\"appID\":\"\",\"sourceName\":\"\",\"actionData\":\"\",\"actionData_A\":\"\",\"sourceUrl\":\"\",\"meta\":{\"singleImg\":{\"mainImage\":\"https://gchat.qpic.cn/gchatpic_new/3020005669/916530575-2949639428-6E45D21EADE33511C565E25AB432AB59/0?term=2\",\"mainUrl\":\"\"}},\"text\":\"\",\"extraApps\":[],\"sourceAd\":\"\",\"config\":{\"forward\":1}}\"\"\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes' ?><msg templateID=\"123\" url=\"https://b23.tv/uHML5mi?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1666023406285\" serviceID=\"1\" action=\"web\" actionData=\"\" a_actionData=\"\" i_actionData=\"\" brief=\"[QQ小程序]哔哩哔哩\" flag=\"0\"></msg>\"\"\"\nresult = action.sendGroupJson(group=group, content=content)\n# result = action.sendGroupXml(group=group, content=content)\nprint(result)\n# result = action.sendGroupText(group=group,content='test')\n# result = action.sendGroupText(group=group,content=content)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_xml_qq.py:27-33"
    },
    "4627": {
        "file_id": 603,
        "content": "Sending a group message in JSON format, with the option to send in XML format as well. The content variable holds the message data, and the result is the response from sending the message. Printing the result for further use or logging.",
        "type": "comment"
    },
    "4628": {
        "file_id": 603,
        "content": "# funcname = \"SendMsgV2\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes' ?><msg serviceID='1' templateID='1' action='' brief='&#91;群僵尸任务&#93;' sourceMsgId='0' url='' flag='2' adverSign='0' multiMsgFlag='0'><item layout='0'><title size='38' color='#9900CC' style='1'>🆕已经启动🆕</title></item><item layout='0'><hr hidden='false' style='0' /></item><item layout='6'><summary color='#FF0033'>1⃣️</summary><summary color='#FF0099'>💪正在扫秒僵尸💪</summary></item><source name='' icon='' action='' appid='-1' /></msg>\"\"\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes' ?><msg serviceID=\"2\" templateID=\"1\" action=\"web\" brief=\"&#91;分享&#93; 十年\" sourceMsgId=\"0\" url=\"https://i.y.qq.com/v8/playsong.html?_wv=1&amp;songid=4830342&amp;souce=qqshare&amp;source=qqshare&amp;ADTAG=qqshare\" flag=\"0\" adverSign=\"0\" multiMsgFlag=\"0\" ><item layout=\"2\"><audio cover=\"http://imgcache.qq.com/music/photo/album_500/26/500_albumpic_89526_0.jpg\" src=\"http://ws.stream.qqmusic.qq.com/C400003mAan70z",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_xml_qq.py:34-36"
    },
    "4629": {
        "file_id": 603,
        "content": "This code defines a function named \"SendMsgV2\" and includes an XML content string. The XML contains message details for QQ messenger, including the service ID, template ID, action, brief, source message ID, URL, flag, adverSign, multiMsgFlag, and item layout. It sets the message title and summary, as well as specifying the URL to share a song from QQ music.",
        "type": "comment"
    },
    "4630": {
        "file_id": 603,
        "content": "Uy5O.m4a?guid=1535153710&amp;vkey=D5315B8C0603653592AD4879A8A3742177F59D582A7A86546E24DD7F282C3ACF81526C76E293E57EA1E42CF19881C561275D919233333ADE&amp;uin=&amp;fromtag=3\" /><title>十年</title><summary>陈奕迅</summary></item><source name=\"QQ音乐\" icon=\"https://i.gtimg.cn/open/app_icon/01/07/98/56/1101079856_100_m.png\" url=\"http://web.p.qq.com/qqmpmobile/aio/app.html?id=1101079856\" action=\"app\"  a_actionData=\"com.tencent.qqmusic\" i_actionData=\"tencent1101079856://\" appid=\"1101079856\" /></msg>\"\"\"\n# content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><msg serviceID=\"1\" templateID=\"1\" action=\"\" brief=\"QQ红包\" sourceMsgId=\"0\" flag=\"8\" adverSign=\"0\" multiMsgFlag=\"0\"><item layout=\"6\"><title color=\"#EE00EE\" style=\"4\">阿深真帅</title><summary color=\"#9A32CD\">是不是很无语</summary><picture cover=\"http://t1.hddhhn.com/uploads/tu/20150507/20405-eBE9jO.jpg\" action=\"web\" url=\"http://url.cn/5g4eOiY\" w=\"0\" h=\"0\"/></item></msg>\"\"\"\n# payload = {\n#     \"ToUserUid\": group,\n#     \"SendToType\": 2,\n#     \"SendMsgType\": \"XmlMsg\",",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_xml_qq.py:36-41"
    },
    "4631": {
        "file_id": 603,
        "content": "This code snippet is sending an XML message to QQ with content and media information for a music file. The message includes details such as title, summary, and URL of the music file along with the source name and icon of QQ Music app. It also specifies the action and action data associated with the app.",
        "type": "comment"
    },
    "4632": {
        "file_id": 603,
        "content": "#     \"Content\": content,\n# }\n# result = action.baseRequest(\n#     method=\"POST\",\n#     funcname=funcname,\n#     path=\"/v1/LuaApiCaller\",\n#     params={\"qq\": qq, \"funcname\": funcname},\n#     payload=payload,\n# )\n# print(result)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_xml_qq.py:42-51"
    },
    "4633": {
        "file_id": 603,
        "content": "Sending XML data via POST request to \"/v1/LuaApiCaller\" with QQ number and funcname parameters, then printing the result.",
        "type": "comment"
    },
    "4634": {
        "file_id": 604,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_get_link.sh",
        "type": "filepath"
    },
    "4635": {
        "file_id": 604,
        "content": "Code navigates to the \"free-img\" directory, sets the PICTURE variable to a specific image path, and runs the Python script \"cli/free-img.py\" with options \"-s gtimg\" and \"-i $PICTURE\", which uploads an image to the \"gtimg\" server using the specified picture.",
        "type": "summary"
    },
    "4636": {
        "file_id": 604,
        "content": "cd free-img\nPICTURE=/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/test_cover.jpg\npython3 cli/free-img.py -s gtimg -i $PICTURE",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_get_link.sh:1-5"
    },
    "4637": {
        "file_id": 604,
        "content": "Code navigates to the \"free-img\" directory, sets the PICTURE variable to a specific image path, and runs the Python script \"cli/free-img.py\" with options \"-s gtimg\" and \"-i $PICTURE\", which uploads an image to the \"gtimg\" server using the specified picture.",
        "type": "comment"
    },
    "4638": {
        "file_id": 605,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_launch_share.sh",
        "type": "filepath"
    },
    "4639": {
        "file_id": 605,
        "content": "This code launches the JumpActivity in the Tencent MobileQQ app, passing a complex URI with various data such as file type, file data, title, description, and URL to share. The shared content is related to Bilibili video recommendation server. It specifies the app name and package name (tv.danmaku.bili).",
        "type": "summary"
    },
    "4640": {
        "file_id": 605,
        "content": "am start -n com.tencent.mobileqq/com.tencent.mobileqq.activity.JumpActivity -a android.intent.action.VIEW -d 'mqqapi://share/to_fri?src_type=app&version=1&file_type=news&file_data=L3N0b3JhZ2UvZW11bGF0ZWQvMC9QaWN0dXJlcy9zaGFyZS8xMjcyMDY0MzU0&file_uri=Y29udGVudDovL3R2LmRhbm1ha3UuYmlsaS5maWxlcHJvdmlkZXIvb3BlbnNka19leHRlcm5hbC9zaGFyZTJxcV90ZW1wNDIwOTU0OTNhYjhlZGRhZmYzMWQ1Y2ZjYWYzZjE3MDQuanBn&title=5ZOU5ZOp5ZOU5ZOp&description=5aSn5Z6L5pS/6K6654mH772c5paw5pe25Luj562U5Y23&share_id=100951776&url=aHR0cHM6Ly9iMjMudHYvdGRKZGd6WT9zaGFyZV9tZWRpdW09YW5kcm9pZCZzaGFyZV9zb3VyY2U9cXEmYmJpZD1YWTFCQjcyMUIxRjk3MzQ4REJERTQyOTdGRTFCNEFCRTI2QkFBJnRzPTE2NjcyNzU0ODI4MTY=&app_name=5ZOU5ZOp5ZOU5ZOp&req_type=Nw==&mini_program_appid=MTEwOTkzNzU1Nw==&mini_program_path=cGFnZXMvdmlkZW8vdmlkZW8/YnZpZD1CVjFuZTQxMUw3aHkmc2hhcmVfc291cmNlPXFxX3VnYyZ1bmlxdWVfaz10ZEpkZ3pZ&mini_program_type=Mw==&cflag=MA==&third_sd=dHJ1ZQ==' -e pkg_name tv.danmaku.bili",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_launch_share.sh:1-1"
    },
    "4641": {
        "file_id": 605,
        "content": "This code launches the JumpActivity in the Tencent MobileQQ app, passing a complex URI with various data such as file type, file data, title, description, and URL to share. The shared content is related to Bilibili video recommendation server. It specifies the app name and package name (tv.danmaku.bili).",
        "type": "comment"
    },
    "4642": {
        "file_id": 606,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/send_friend_xml_and_forward_xml_to_group.py",
        "type": "filepath"
    },
    "4643": {
        "file_id": 606,
        "content": "This code sends QQ messages containing video recommendations or Baidu website links to specific users and groups using XML format, and utilizes the requests library for API calls.",
        "type": "summary"
    },
    "4644": {
        "file_id": 606,
        "content": "cover = \"https://i0.hdslb.com/bfs/archive/c5a0d18ee077fb6a4ac0970ccb0a3788e137d14f.jpg\" # works.\ncontent = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><msg templateID=\"123\" url=\"https://b23.tv/uHML5mi?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1666023406285\" serviceID=\"1\" action=\"web\" actionData=\"\" a_actionData=\"\" i_actionData=\"\" brief=\"[QQ小程序]哔哩哔哩\" flag=\"0\"><item layout=\"2\"><picture cover=\"{}\"/><title>【AI动画】妮露PV动画 风转换【NovelAI】</title></item><source url=\"https://b23.tv/uHML5mi?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1666023406285\" icon=\"http://miniapp.gtimg.cn/public/appicon/432b76be3a548fc128acaa6c1ec90131_200.jpg\" name=\"哔哩哔哩\" appid=\"0\" action=\"app\" actionData=\"\" a_actionData=\"tencent0://\" i_actionData=\"\"/></msg>\"\"\".format(cover)\nqq = 917521610\nuser = 1281727431\ngroup = 543780931\nbaseUrl = \"http://0.0.0.0:5700\" # the thing is not ready yet.\nimport requests\nurl = baseUrl + \"/send_private_msg\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/send_friend_xml_and_forward_xml_to_group.py:1-14"
    },
    "4645": {
        "file_id": 606,
        "content": "This code sends a QQ message with an XML format containing a video recommendation to a specific user and group. The cover image URL is set, the content is a formatted XML string, QQ account IDs are defined, and the base URL for sending the message is specified. The code uses the requests library to send the message to the server.",
        "type": "comment"
    },
    "4646": {
        "file_id": 606,
        "content": "message = '[CQ:share,url=http://baidu.com,title=百度]'\ndata = {\"user_id\": user, \"message\": message, \"auto_escape\": False}\nr = requests.post(url, data=data)\nprint(r.json())\n# message = \"[CQ:forward,id={}]\".format(291457889)\n# url = baseUrl+\"/send_group_msg\"\n# data = {\"group_id\":group, \"message\": message, \"auto_escape\": False}\n# r = requests.post(url,data=data)\n# print(r.json())",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/send_friend_xml_and_forward_xml_to_group.py:15-27"
    },
    "4647": {
        "file_id": 606,
        "content": "This code sends a message containing a Baidu website link to a specific user using XML format and also includes an option to forward the message with a given ID to a group. The API call is made using requests library, and the response from the server is printed in JSON format.",
        "type": "comment"
    },
    "4648": {
        "file_id": 607,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/run_qq_capture.sh",
        "type": "filepath"
    },
    "4649": {
        "file_id": 607,
        "content": "This code sets up a man-in-the-middle (MITM) proxy using MitmProxy, listening on port 8050 and logging all captured traffic to 'qq.log'. It also enables WebSocket stream processing for the 'tv.danmaku.bili' application.",
        "type": "summary"
    },
    "4650": {
        "file_id": 607,
        "content": "mitmproxy --mode socks5 --listen-port 8050 -w qq.log --set stream_websocket=true\n# tv.danmaku.bili",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/run_qq_capture.sh:1-3"
    },
    "4651": {
        "file_id": 607,
        "content": "This code sets up a man-in-the-middle (MITM) proxy using MitmProxy, listening on port 8050 and logging all captured traffic to 'qq.log'. It also enables WebSocket stream processing for the 'tv.danmaku.bili' application.",
        "type": "comment"
    },
    "4652": {
        "file_id": 608,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/run_bilibili_qq_share_xml.sh",
        "type": "filepath"
    },
    "4653": {
        "file_id": 608,
        "content": "This code sets up a MitM proxy in Socks5 mode, listens on port 8050, and logs websocket activity for bilibili QQ share feature.",
        "type": "summary"
    },
    "4654": {
        "file_id": 608,
        "content": "mitmproxy --mode socks5 --listen-port 8050 -w bilibili_qq_xml_share.log --set stream_websocket=true\n# tv.danmaku.bili",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/run_bilibili_qq_share_xml.sh:1-3"
    },
    "4655": {
        "file_id": 608,
        "content": "This code sets up a MitM proxy in Socks5 mode, listens on port 8050, and logs websocket activity for bilibili QQ share feature.",
        "type": "comment"
    },
    "4656": {
        "file_id": 609,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py",
        "type": "filepath"
    },
    "4657": {
        "file_id": 609,
        "content": "The code utilizes go-cqhttp and Requests library to send XML-formatted rich media messages, targeting group chats with audio and QQ Music items, requiring a group ID. It allows Python users to send messages containing JSON or XML data to a web URL with dynamic content.",
        "type": "summary"
    },
    "4658": {
        "file_id": 609,
        "content": "baseUrl = \"http://0.0.0.0:5700\"\n# try to send xml to group.\n# 私聊可以发xml 但是群聊不行 群聊只能发加密好验证好的json\n# cover = \"http://pubminishare-30161.picsz.qpic.cn/d4ad36fa-833e-4018-b994-a2da810f2d54\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes'?><msg templateID=\"123\" url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" serviceID=\"1\" action=\"web\" actionData=\"\" a_actionData=\"\" i_actionData=\"\" brief=\"[QQ小程序]哔哩哔哩\" flag=\"0\"><item layout=\"2\"><picture cover=\"{}\"/><title>哔哩哔哩</title><summary>【C语言】《带你学C带你飞》</summary></item><source url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" icon=\"https://open.gtimg.cn/open/app_icon/00/95/17/76/100951776_100_m.png?t=1657091104\" name=\"哔哩哔哩\" appid=\"0\" action=\"web\" actionData=\"\" a_actionData=\"tencent0://\" i_actionData=\"\"/></msg>\"\"\".format(\n# cover)\ngroup = 543780931\nimport requests\nurl = baseUrl + \"/send_group_msg\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:1-12"
    },
    "4659": {
        "file_id": 609,
        "content": "The code attempts to send an XML message to a group chat using the GOCQHTTP API. The message contains a template with a cover image, title, and summary, promoting a video from Bilibili. The message can only be sent in group chats and not private chats. It uses the base URL \"http://0.0.0.0:5700\" and requires the group ID as input for sending the XML message.",
        "type": "comment"
    },
    "4660": {
        "file_id": 609,
        "content": "# message = 'test'\n# content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?><msg serviceID=\"2\" templateID=\"1\" action=\"web\" brief=\"\" sourceMsgId=\"0\" url=\"https://qm.qq.com/cgi-bin/qm/qr?k=wyw10nH14NxBzBmM2DZK_bj9y9yX-IJL\" flag=\"0\" adverSign=\"0\" multiMsgFlag=\"0\"><item layout=\"2\"><audio cover=\"https://python3student.github.io/img/avatar.jpg\" src=\"https://music.163.com/song/media/outer/url?id=449818326.mp3\" /><title>鹿 be free</title><summary>『作者』神奇</summary></item><source name=\"神奇永远的神！\" icon=\"https://python3student.github.io/img/avatar.jpg\" url=\"https://python3student.github.io/img/avatar.jpg\" action=\"app\" a_actionData=\"com.netease.cloudmusic\" i_actionData=\"tencent100495085://\" appid=\"100495085\" /></msg>\"\"\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes' ?><msg serviceID=\"2\" templateID=\"1\" action=\"web\" brief=\"&#91;分享&#93; 十年\" sourceMsgId=\"0\" url=\"https://i.y.qq.com/v8/playsong.html?_wv=1&amp;songid=4830342&amp;souce=qqshare&amp;source=qqshare&amp;ADTAG=qqsh",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:13-15"
    },
    "4661": {
        "file_id": 609,
        "content": "This code is setting a message and content for an XML-formatted message to be sent using the gocqhttp package. The message includes an image, audio, and links to a music source and app ID. It will be used for sending a rich media message with QQ Gocqhttp.",
        "type": "comment"
    },
    "4662": {
        "file_id": 609,
        "content": "are\" flag=\"0\" adverSign=\"0\" multiMsgFlag=\"0\" ><item layout=\"2\"><audio cover=\"http://imgcache.qq.com/music/photo/album_500/26/500_albumpic_89526_0.jpg\" src=\"http://ws.stream.qqmusic.qq.com/C400003mAan70zUy5O.m4a?guid=1535153710&amp;vkey=D5315B8C0603653592AD4879A8A3742177F59D582A7A86546E24DD7F282C3ACF81526C76E293E57EA1E42CF19881C561275D919233333ADE&amp;uin=&amp;fromtag=3\" /><title>十年</title><summary>陈奕迅</summary></item><source name=\"QQ音乐\" icon=\"https://i.gtimg.cn/open/app_icon/01/07/98/56/1101079856_100_m.png\" url=\"http://web.p.qq.com/qqmpmobile/aio/app.html?id=1101079856\" action=\"app\"  a_actionData=\"com.tencent.qqmusic\" i_actionData=\"tencent1101079856://\" appid=\"1101079856\" /></msg>\"\"\"\n# content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><msg serviceID=\"1\" templateID=\"1\" action=\"\" brief=\"QQ红包\" sourceMsgId=\"0\" flag=\"8\" adverSign=\"0\" multiMsgFlag=\"0\"><item layout=\"6\"><title color=\"#EE00EE\" style=\"4\">阿深真帅</title><summary color=\"#9A32CD\">是不是很无语</summary><picture cover=\"http:",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:15-16"
    },
    "4663": {
        "file_id": 609,
        "content": "This code is creating an XML string for a QQ goCQHttp message, featuring an audio track and an item from QQ Music. It includes the audio source, title, summary, and source information. The message has a service ID of 1, template ID of 1, and a flag value of 8.",
        "type": "comment"
    },
    "4664": {
        "file_id": 609,
        "content": "//t1.hddhhn.com/uploads/tu/20150507/20405-eBE9jO.jpg\" action=\"web\" url=\"http://url.cn/5g4eOiY\" w=\"0\" h=\"0\"/></item></msg>\"\"\"\n# message = \"[CQ:xml,data={}]\".format(content) # xml thing.\n# content=\"\"\"{\"app\":\"com.tencent.miniapp_01\"&#44;\"desc\":\"哔哩哔哩\"&#44;\"view\":\"view_8C8E89B49BE609866298ADDFF2DBABA4\"&#44;\"ver\":\"1.0.0.19\"&#44;\"prompt\":\"&#91;QQ小程序&#93;哔哩哔哩\"&#44;\"meta\":{\"detail_1\":{\"appType\":0&#44;\"appid\":\"1109937557\"&#44;\"desc\":\"Appium 手机 App 自动化 + Python\"&#44;\"gamePoints\":\"\"&#44;\"gamePointsUrl\":\"\"&#44;\"host\":{\"nick\":\"Yukio\"&#44;\"uin\":1281727431}&#44;\"icon\":\"https:\\/\\/open.gtimg.cn\\/open\\/app_icon\\/00\\/95\\/17\\/76\\/100951776_100_m.png?t=1659061321\"&#44;\"preview\":\"pubminishare-30161.picsz.qpic.cn\\/a0b8d306-5b6d-4b27-9539-021a2adcc264\"&#44;\"qqdocurl\":\"https:\\/\\/b23.tv\\/4hWdtET?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1665924308147\"&#44;\"scene\":1036&#44;\"shareTemplateData\":{}&#44;\"shareTemplateId\":\"8C8E89B49BE609866298ADDFF2DBABA4\"&#44;\"showLi",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:16-18"
    },
    "4665": {
        "file_id": 609,
        "content": "This code is formatting a JSON message with app details, prompt, and other information. It will be used in QQ gocqhttp post XML function.",
        "type": "comment"
    },
    "4666": {
        "file_id": 609,
        "content": "ttleTail\":\"\"&#44;\"title\":\"哔哩哔哩\"&#44;\"url\":\"m.q.qq.com\\/a\\/s\\/ea6d34b58a6a6209cd5088c436a254de\"}}&#44;\"config\":{\"autoSize\":0&#44;\"ctime\":1665924338&#44;\"forward\":1&#44;\"height\":0&#44;\"token\":\"a2458ec4231b7b8204c717f3a955a9fc\"&#44;\"type\":\"normal\"&#44;\"width\":0}}\"\"\"\ncontent = \"\"\"{\"app\":\"com.tencent.structmsg\"&#44;\"desc\":\"新闻\"&#44;\"view\":\"news\"&#44;\"ver\":\"0.0.0.1\"&#44;\"prompt\":\"&#91;分享&#93;哔哩哔哩\"&#44;\"meta\":{\"news\":{\"action\":\"\"&#44;\"android_pkg_name\":\"\"&#44;\"app_type\":1&#44;\"appid\":100951776&#44;\"ctime\":1666081902&#44;\"desc\":\"外国博主英文讲解：二十大为什么如此重要？\"&#44;\"jumpUrl\":\"https:\\/\\/b23.tv\\/B64KMQq?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1666081860133\"&#44;\"preview\":\"https:\\/\\/pic.ugcimg.cn\\/58a74c8432a80e7e2de612e6e53e37f3\\/jpg1\"&#44;\"source_icon\":\"https:\\/\\/open.gtimg.cn\\/open\\/app_icon\\/00\\/95\\/17\\/76\\/100951776_100_m.png?t=1659061321\"&#44;\"source_url\":\"\"&#44;\"tag\":\"哔哩哔哩\"&#44;\"title\":\"哔哩哔哩\"&#44;\"uin\":1281727431}}&#44;\"config\":{\"ctime\":1666081902&#44;\"forward\":true&#44;\"token\":\"d7cc3a93e7c3a9acd1c8662157e3e5fb\"&#44;\"type\":\"normal\"}}\"\"\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:18-19"
    },
    "4667": {
        "file_id": 609,
        "content": "This code contains two JSON strings representing messages in a chat application. The first message is from QQ and includes title, URL, and config details, while the second message is for sharing news on bilibili and has app, desc, view, ver, prompt, meta (with news info), config details, and more. Both messages contain timestamps, tokens, and forward options.",
        "type": "comment"
    },
    "4668": {
        "file_id": 609,
        "content": "# content = \"\"\"{\"app\":\"com.tencent.structmsg\"&#44;\"desc\":\"音乐\"&#44;\"view\":\"music\"&#44;\"ver\":\"0.0.0.1\"&#44;\"prompt\":\"\"&#44;\"meta\":{}}\"\"\"\n# content = (\n    # \"\"\"{\"app\":\"com.tencent.structmsg\",\"desc\":\"\",\"view\":\"singleImg\",\"ver\":\"0.0.0.1\",\"prompt\":\"邪少QQXML论坛\",\"appID\":\"\",\"sourceName\":\"\",\"actionData\":\"\",\"actionData_A\":\"\",\"sourceUrl\":\"\",\"meta\":{\"singleImg\":{\"mainImage\":\"https://gchat.qpic.cn/gchatpic_new/3020005669/916530575-2949639428-6E45D21EADE33511C565E25AB432AB59/0?term=2\",\"mainUrl\":\"\"}},\"text\":\"\",\"extraApps\":[],\"sourceAd\":\"\",\"config\":{\"forward\":1}}\"\"\".replace(\n#         \"&\", \"&amp;\"\n#     )\n#     .replace(\",\", \"&#44;\")\n#     .replace(\"[\", \"&#91;\")\n#     .replace(\"]\", \"&#93;\")\n# )\n# the token is likely to be some checksum, md5 or something. some aes/rsa?\nmessage = \"[CQ:json,data={}]\".format(content)  # json thing.\n# message = \"[CQ:tts,text=嘤嘤嘤]\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes' ?><msg serviceID=\"2\" templateID=\"1\" action=\"web\" brief=\"&#91;分享&#93; 十年\" sourceMsgId=\"0\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:20-34"
    },
    "4669": {
        "file_id": 609,
        "content": "This code is likely related to a messaging application and involves sending messages containing XML or JSON data, possibly for a chat bot or communication tool. It includes functions for formatting the message content and converting it into CQ:json or CQ:tts formats. The content of the messages seems to be dynamic and can contain various types of data like app information, descriptions, images, and text prompts.",
        "type": "comment"
    },
    "4670": {
        "file_id": 609,
        "content": " url=\"http://music.163.com/m/song/409650368\" flag=\"0\" adverSign=\"0\" multiMsgFlag=\"0\" ><item layout=\"2\"><audio cover=\"http://p2.music.126.net/g-Qgb9ibk9Wp_0HWra0xQQ==/16636710440565853.jpg?param=90y90\" src=\"https://music.163.com/song/media/outer/url?id=409650368.mp3\" /><title>十年</title><summary>黄梦之</summary></item><source name=\"网易云音乐\" icon=\"https://pic.rmb.bdstatic.com/911423bee2bef937975b29b265d737b3.png\" url=\"http://web.p.qq.com/qqmpmobile/aio/app.html?id=1101079856\" action=\"app\" a_actionData=\"com.netease.cloudmusic\" i_actionData=\"tencent100495085://\" appid=\"100495085\" /></msg>\"\"\"\n# message = '[CQ:xml,data={}]'.format(content)\ndata = {\"group_id\": group, \"message\": message, \"auto_escape\": False}\nr = requests.post(url, data=data)\nprint(r.json())\n# cannot send json. wtf?\n# 请参考 go-cqhttp 端输出",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:34-40"
    },
    "4671": {
        "file_id": 609,
        "content": "The code is constructing an XML message and sending it to a web URL using the Requests library in Python. It uses go-cqhttp for communication, and the code includes a group ID and a message formatted as XML data. The response from the server is printed in JSON format.",
        "type": "comment"
    },
    "4672": {
        "file_id": 610,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_xml_message.py",
        "type": "filepath"
    },
    "4673": {
        "file_id": 610,
        "content": "The given code uses the xmltodict library to parse an XML message containing Bilibili video sharing information, then prints its details. The \"print_xml_message\" function handles exceptions during parsing and printing.",
        "type": "summary"
    },
    "4674": {
        "file_id": 610,
        "content": "# arc_share\nxml_msg='{\"Content\":\"\\\\u003c?xml version=\\'1.0\\' encoding=\\'UTF-8\\' standalone=\\'yes\\'?\\\\u003e\\\\u003cmsg templateID=\\\\\"123\\\\\" url=\\\\\"https://b23.tv/5K7qh7K?share_medium=android\\\\u0026amp;share_source=qq\\\\u0026amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A\\\\u0026amp;ts=1657521142233\\\\\" serviceID=\\\\\"1\\\\\" action=\\\\\"web\\\\\" actionData=\\\\\"\\\\\" a_actionData=\\\\\"\\\\\" i_actionData=\\\\\"\\\\\" brief=\\\\\"[QQ小程序]哔哩哔哩\\\\\" flag=\\\\\"0\\\\\"\\\\u003e\\\\u003citem layout=\\\\\"2\\\\\"\\\\u003e\\\\u003cpicture cover=\\\\\"http://pubminishare-30161.picsz.qpic.cn/d4ad36fa-833e-4018-b994-a2da810f2d54\\\\\"/\\\\u003e\\\\u003ctitle\\\\u003e哔哩哔哩\\\\u003c/title\\\\u003e\\\\u003csummary\\\\u003e【C语言】《带你学C带你飞》\\\\u003c/summary\\\\u003e\\\\u003c/item\\\\u003e\\\\u003csource url=\\\\\"https://b23.tv/5K7qh7K?share_medium=android\\\\u0026amp;share_source=qq\\\\u0026amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A\\\\u0026amp;ts=1657521142233\\\\\" icon=\\\\\"https://open.gtimg.cn/open/app_icon/00/95/17/76/100951776_100_m.png?t=1657091104\\\\\" name=\\\\\"哔哩哔哩\\\\\" appid=\\\\\"0\\\\\" action=\\",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_xml_message.py:1-2"
    },
    "4675": {
        "file_id": 610,
        "content": "This code represents an XML message with various attributes and data for sharing a Bilibili video on QQ. It contains the template ID, URL to share the video, service ID, action type and data, brief description of the shared content, and more specific details about the item being shared, such as its cover image and title.",
        "type": "comment"
    },
    "4676": {
        "file_id": 610,
        "content": "\\\"web\\\\\" actionData=\\\\\"\\\\\" a_actionData=\\\\\"tencent0://\\\\\" i_actionData=\\\\\"\\\\\"/\\\\u003e\\\\u003c/msg\\\\u003e\"}'\ncontentDict = eval(xml_msg)\ncontent = contentDict['Content']\nprint(content) # let's understand this shit.\n\"\"\"\n<?xml version='1.0' encoding='UTF-8' standalone='yes'?><msg templateID=\"123\" url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" serviceID=\"1\" action=\"web\" actionData=\"\" a_actionData=\"\" i_actionData=\"\" brief=\"[QQ小程序]哔哩哔哩\" flag=\"0\"><item layout=\"2\"><picture cover=\"http://pubminishare-30161.picsz.qpic.cn/d4ad36fa-833e-4018-b994-a2da810f2d54\"/><title>哔哩哔哩</title><summary>【C语言】《带你学C带你飞》</summary></item><source url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" icon=\"https://open.gtimg.cn/open/app_icon/00/95/17/76/100951776_100_m.png?t=1657091104\" name=\"哔哩哔哩\" appid=\"0\" action=\"web\" actionData=\"\" a_actionData=\"tencent0://\" i_actionData=\"\"/></msg>",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_xml_message.py:2-9"
    },
    "4677": {
        "file_id": 610,
        "content": "This code is parsing an XML message, specifically for QQ share, extracting the content and printing it. The message contains information about a video recommendation from Bilibili, including title, summary, URL, and more.",
        "type": "comment"
    },
    "4678": {
        "file_id": 610,
        "content": "\"\"\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_xml_message.py:11-11"
    },
    "4679": {
        "file_id": 610,
        "content": "The code defines a function called \"print_xml_message\" that takes in an XML message and prints it. It uses the xmltodict library to parse the XML message into a Python dictionary format, then iterates over each element in the dictionary and prints its text content. The code also handles any potential exceptions that may occur during parsing or printing of the XML message.",
        "type": "comment"
    },
    "4680": {
        "file_id": 611,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_bilibili_json.py",
        "type": "filepath"
    },
    "4681": {
        "file_id": 611,
        "content": "The code presents a JSON structure with app details and metadata for a QQ mini-app, and replaces spaces with \"&#44\" potentially for formatting or data manipulation before sending to QQ.",
        "type": "summary"
    },
    "4682": {
        "file_id": 611,
        "content": "content=\"\"\"{\"app\":\"com.tencent.miniapp_01\"&#44;\"desc\":\"哔哩哔哩\"&#44;\"view\":\"view_8C8E89B49BE609866298ADDFF2DBABA4\"&#44;\"ver\":\"1.0.0.19\"&#44;\"prompt\":\"&#91;QQ小程序&#93;哔哩哔哩\"&#44;\"meta\":{\"detail_1\":{\"appType\":0&#44;\"appid\":\"1109937557\"&#44;\"desc\":\"Appium 手机 App 自动化 + Python\"&#44;\"gamePoints\":\"\"&#44;\"gamePointsUrl\":\"\"&#44;\"host\":{\"nick\":\"Yukio\"&#44;\"uin\":1281727431}&#44;\"icon\":\"https:\\/\\/open.gtimg.cn\\/open\\/app_icon\\/00\\/95\\/17\\/76\\/100951776_100_m.png?t=1659061321\"&#44;\"preview\":\"pubminishare-30161.picsz.qpic.cn\\/a0b8d306-5b6d-4b27-9539-021a2adcc264\"&#44;\"qqdocurl\":\"https:\\/\\/b23.tv\\/4hWdtET?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1665924308147\"&#44;\"scene\":1036&#44;\"shareTemplateData\":{}&#44;\"shareTemplateId\":\"8C8E89B49BE609866298ADDFF2DBABA4\"&#44;\"showLittleTail\":\"\"&#44;\"title\":\"哔哩哔哩\"&#44;\"url\":\"m.q.qq.com\\/a\\/s\\/ea6d34b58a6a6209cd5088c436a254de\"}}&#44;\"config\":{\"autoSize\":0&#44;\"ctime\":1665924338&#44;\"forward\":1&#44;\"height\":0&#44;\"token\":\"a2458ec4231b7b8204c717f3a955a9fc\"&#44;\"type\":\"normal\"&#44;\"width\":0}}\"\"\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_bilibili_json.py:1-1"
    },
    "4683": {
        "file_id": 611,
        "content": "This code represents a JSON structure containing various app details and metadata. It includes information such as app name, version, icon URL, description, and share template data for a QQ mini-app with the app ID \"1109937557\" and nickname \"Yukio\".",
        "type": "comment"
    },
    "4684": {
        "file_id": 611,
        "content": "# i can see that all spaces have been replaced by &#44.",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_bilibili_json.py:2-2"
    },
    "4685": {
        "file_id": 611,
        "content": "This code snippet is replacing all spaces in the input with \"&#44\" which could be used for formatting or data manipulation purposes before sending it to QQ.",
        "type": "comment"
    },
    "4686": {
        "file_id": 612,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/new_xml.py",
        "type": "filepath"
    },
    "4687": {
        "file_id": 612,
        "content": "This code extracts content from a dictionary representing an XML message, assigns it to a variable, and prints it, possibly for debugging or validation purposes.",
        "type": "summary"
    },
    "4688": {
        "file_id": 612,
        "content": "contentDictString = {\"Content\":\"\\u003c?xml version='1.0' encoding='UTF-8' standalone='yes'?\\u003e\\u003cmsg templateID=\\\"123\\\" url=\\\"https://b23.tv/uHML5mi?share_medium=android\\u0026amp;share_source=qq\\u0026amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA\\u0026amp;ts=1666023406285\\\" serviceID=\\\"1\\\" action=\\\"web\\\" actionData=\\\"\\\" a_actionData=\\\"\\\" i_actionData=\\\"\\\" brief=\\\"[QQ小程序]哔哩哔哩\\\" flag=\\\"0\\\"\\u003e\\u003citem layout=\\\"2\\\"\\u003e\\u003cpicture cover=\\\"http://pubminishare-30161.picsz.qpic.cn/c099bdd6-9e61-43d9-b82f-c9d5354ace68\\\"/\\u003e\\u003ctitle\\u003e哔哩哔哩\\u003c/title\\u003e\\u003csummary\\u003e【AI动画】妮露PV动画 风转换【NovelAI】\\u003c/summary\\u003e\\u003c/item\\u003e\\u003csource url=\\\"https://b23.tv/uHML5mi?share_medium=android\\u0026amp;share_source=qq\\u0026amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA\\u0026amp;ts=1666023406285\\\" icon=\\\"http://miniapp.gtimg.cn/public/appicon/432b76be3a548fc128acaa6c1ec90131_200.jpg\\\" name=\\\"哔哩哔哩\\\" appid=\\\"0\\\" action=\\\"web\\\" actionData=\\\"\\\" a_actionData=\\\"tencent0://\\\" i_actionData=\\\"\\\"/\\u003e\\u003c/msg\\u003e\"}",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/new_xml.py:1-1"
    },
    "4689": {
        "file_id": 612,
        "content": "This code contains a dictionary named \"contentDictString\" that represents an XML message with information about a video recommendation from Bilibili, including the template ID, URL, service ID, action, action data, i_actionData, brief, layout, picture, title, summary, source URL, icon, name, appid, and more.",
        "type": "comment"
    },
    "4690": {
        "file_id": 612,
        "content": "contentDict = contentDictString\ncontent = contentDict['Content']\nprint(content)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/new_xml.py:3-6"
    },
    "4691": {
        "file_id": 612,
        "content": "Content from the string is being assigned to the dictionary variable 'contentDict'. The 'Content' key in this dictionary is then extracted and stored in the variable 'content', which is finally printed. This code appears to print the content of a certain element in a file, potentially for debugging or validation purposes.",
        "type": "comment"
    },
    "4692": {
        "file_id": 613,
        "content": "/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py",
        "type": "filepath"
    },
    "4693": {
        "file_id": 613,
        "content": "This code sets up a video processing task with image overlay, fade transition, and audio, saving a JSON object for Editly template and running the software using xvfb in subprocess.",
        "type": "summary"
    },
    "4694": {
        "file_id": 613,
        "content": "# maybe this time you can burn uploader logo to the video\n# the title of the video, intro, outro.\nvideo_path = \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/sample_video/sample_video.mp4\"\nup_image_path = (\n    \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/up_image.jpg\"\n)\noutput_path = \"output.mp4\"\nfontPath = \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/wqy-microhei0.ttf\"\ncat_image = (\n    \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/cat_image.jpg\"\n)\ntitle = \"世上所有的小猫\\n\\n都是天使变的！\" # add newline, change it into another catchy title, as compliment.\naudio_path = \"output.mp3.mp3\"\naudio_duration = 3.31\ntemplate_name = \"template.json\"\nfrom caer.video.frames_and_fps import get_duration, get_res\nvideo_duration = get_duration(video_path)\nvideo_width, video_height = get_res(video_path)\n# we shall use editly to do this job shall we?\nmin_video_scalar = min(video_width, video_height)\nup_image_scalar = int(min_video_scalar * 0.2)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py:1-24"
    },
    "4695": {
        "file_id": 613,
        "content": "This code is setting up variables for video processing, such as the input video path, uploader logo path, output path, font path, and image path. It also includes a title, audio path, and template name. The code uses the get_duration() function to determine the video duration and get_res() to retrieve the video's width and height. Lastly, it calculates a minimum video scalar value for editing purposes using editly.",
        "type": "comment"
    },
    "4696": {
        "file_id": 613,
        "content": "up_image_width = up_image_scalar / video_width\nup_image_height = up_image_scalar / video_height\n# some parameters are using floating point numbers between 0 and 1\n# image overlay can be done in editly\n# no need to render that silly karaoke effects.\neditlyJson = {\n    \"outPath\": output_path,\n    \"width\": video_width,\n    \"height\": video_height,\n    \"fps\": 30,  # different from the default value.\n    \"fast\": True,  # just for preview. if not turning this on, will be too slow.\n    \"keepSourceAudio\": True,  # it does!\n    \"defaults\": {\n        \"transition\": {\n            \"duration\": 0.5,\n            \"name\": \"fade\",\n            \"audioOutCurve\": \"tri\",\n            \"audioInCurve\": \"tri\",\n        }\n    },\n    \"clips\": [\n        # {\n        #     \"duration\": 0.5,\n        #     \"layers\": [\n        #         # {\"type\": \"fill-color\", \"color\": \"#000000\"},\n        #         # {\"type\": \"detached-audio\", \"path\": audio_path}, # will make sure nothing visual presents.\n        #     ],\n        # },\n        # we disable this clip.\n        {",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py:25-57"
    },
    "4697": {
        "file_id": 613,
        "content": "This code sets up parameters for an editly job, which involves overlaying an image with specific dimensions and applying a fade transition effect. The video's audio will be kept, and the job is set to a fast preview mode.",
        "type": "comment"
    },
    "4698": {
        "file_id": 613,
        "content": "            \"duration\": audio_duration,\n            \"layers\": [\n                {\n                    \"type\": \"image-overlay\",\n                    \"path\": cat_image,\n                    \"position\": \"center\",\n                    \"width\": 1,\n                    \"height\": 1,\n                },\n                {\n                    # \"type\": \"title-background\",\n                    \"type\": \"title\",\n                    \"text\": title,\n                    # \"background\": \"#000000\",\n                    \"fontPath\": fontPath,\n                    \"textColor\": \"#FFFFFF\",\n                },\n                {\"type\": \"audio\", \"path\": audio_path},  # order matters!\n            ],\n        },\n        {\n            # \"transition\": \"fade\",  # or we just use random?\n            \"duration\": video_duration,\n            \"layers\": [\n                {\"type\": \"video\", \"path\": video_path},  # order is important.\n                {\n                    \"type\": \"image-overlay\",\n                    \"path\": up_image_path,\n                    \"position\": \"top-left\",",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py:58-86"
    },
    "4699": {
        "file_id": 613,
        "content": "This code is creating a video with a cat image overlay, title text, and an audio track. The order of layers is important, and the audio path comes first. The video is then transitioned with a fade effect and combined with another video file, along with an optional top-left image overlay.",
        "type": "comment"
    }
}