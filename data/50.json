{
    "5000": {
        "file_id": 641,
        "content": "/tests/qq_share_autojs/parse_qq_url.py",
        "type": "filepath"
    },
    "5001": {
        "file_id": 641,
        "content": "The code parses a QQ share URL, handles base64 encoding and decoding, stores values in a new dictionary for sharing, encodes URL parameters, prints them, opens the link using os.system().",
        "type": "summary"
    },
    "5002": {
        "file_id": 641,
        "content": "url = \"mqqapi://share/to_fri?src_type=app&version=1&file_type=news&file_data=L3N0b3JhZ2UvZW11bGF0ZWQvMC9QaWN0dXJlcy9zaGFyZS8xMjcyMDY0MzU0&file_uri=Y29udGVudDovL3R2LmRhbm1ha3UuYmlsaS5maWxlcHJvdmlkZXIvb3BlbnNka19leHRlcm5hbC9zaGFyZTJxcV90ZW1wNDIwOTU0OTNhYjhlZGRhZmYzMWQ1Y2ZjYWYzZjE3MDQuanBn&title=5ZOU5ZOp5ZOU5ZOp&description=5aSn5Z6L5pS/6K6654mH772c5paw5pe25Luj562U5Y23&share_id=100951776&url=aHR0cHM6Ly9iMjMudHYvdGRKZGd6WT9zaGFyZV9tZWRpdW09YW5kcm9pZCZzaGFyZV9zb3VyY2U9cXEmYmJpZD1YWTFCQjcyMUIxRjk3MzQ4REJERTQyOTdGRTFCNEFCRTI2QkFBJnRzPTE2NjcyNzU0ODI4MTY=&app_name=5ZOU5ZOp5ZOU5ZOp&req_type=Nw==&mini_program_appid=MTEwOTkzNzU1Nw==&mini_program_path=cGFnZXMvdmlkZW8vdmlkZW8/YnZpZD1CVjFuZTQxMUw3aHkmc2hhcmVfc291cmNlPXFxX3VnYyZ1bmlxdWVfaz10ZEpkZ3pZ&mini_program_type=Mw==&cflag=MA==&third_sd=dHJ1ZQ==\"\nfrom urllib.parse import urlparse, parse_qs\nparse_result=urlparse(url)\n#print(parse_result)\n#breakpoint()\n#\n#params=['count', 'encode', 'fragment', 'geturl', 'hostname', 'index', 'netloc', 'params', 'password', 'path', 'port', 'query', 'scheme', 'username']",
        "type": "code",
        "location": "/tests/qq_share_autojs/parse_qq_url.py:1-9"
    },
    "5003": {
        "file_id": 641,
        "content": "This code is parsing a URL using urllib.parse, extracting its components and possibly preparing for further processing. The URL appears to be related to QQ share and contains various parameters including app name, file data, description, etc.",
        "type": "comment"
    },
    "5004": {
        "file_id": 641,
        "content": "#for k in params:\n#    print(\"key:\",k,\"value:\",eval(\"parse_result.{}\".format(k)))\n#[scheme]://[netloc/hostname]/[path]?[query]\ndict_result=parse_qs(parse_result.query)\nnon_b64vals=[\"share_id\",\"src_type\",\"version\",\"file_type\"]\nimport base64\ndef dec_b64(v):\n    if type(v) == str:\n        v = v.encode()\n    v=base64.b64decode(v)\n    v=v.decode()\n    return v\ndef enc_b64(v):\n    if type(v) == str:\n        v = v.encode()\n    v=base64.b64encode(v)\n    v=v.decode()\n    return v\nnew_q={}\nmypic=\"/storage/emulated/0/Pictures/share/cat.gif\"\nmyuri='file://{}'.format(mypic)\nshortlink=\"uHML5mi\"\nbvid=\"BV1zd4y117WF\"\nfor k,v in dict_result.items():\n    v=v[0]\n    if k == \"file_data\":\n        v=enc_b64(mypic)\n    elif k == \"file_uri\":\n        v=enc_b64(myuri)\n    elif k == \"share_id\":\n        v=100951776\n    elif k == \"url\":\n        v=\"https://b23.tv/\"+shortlink\n        v=enc_b64(v)\n    elif k == \"mini_program_path\":\n        v=enc_b64(\"pages/video/video?bvid=\"+bvid)\n    elif k == \"description\":\n        v=enc_b64(\"喵喵喵\")\n    new_q.update({k:v})",
        "type": "code",
        "location": "/tests/qq_share_autojs/parse_qq_url.py:10-55"
    },
    "5005": {
        "file_id": 641,
        "content": "The code is parsing a QQ share URL, decoding and encoding specific values using base64, and storing them in a new dictionary. It also includes hardcoded values such as file path, shortlink, and bvid. The purpose seems to be related to sharing files or links within the QQ platform.",
        "type": "comment"
    },
    "5006": {
        "file_id": 641,
        "content": "    #for printing purpose\n    if k not in non_b64vals:\n        v=dec_b64(v)\n    print(k,\":\",v)\nfrom urllib.parse import urlencode\nnew_qs=urlencode(new_q)\nprint()\ntemplate=\"am start -n com.tencent.mobileqq/com.tencent.mobileqq.activity.JumpActivity -a android.intent.action.VIEW -d 'mqqapi://share/to_fri?{}' -e pkg_name tv.danmaku.bili\"\ncmd=template.format(new_qs)\nprint(cmd)\nimport os\nos.system(cmd)",
        "type": "code",
        "location": "/tests/qq_share_autojs/parse_qq_url.py:56-67"
    },
    "5007": {
        "file_id": 641,
        "content": "The code encodes URL parameters, prints them, and then executes a command to open a QQ share link in the mobile app. It converts base64 values if needed for printing, formats the command with URL parameters, and uses os.system() to execute the command.",
        "type": "comment"
    },
    "5008": {
        "file_id": 642,
        "content": "/tests/qq_share_autojs/launch_autojs.sh",
        "type": "filepath"
    },
    "5009": {
        "file_id": 642,
        "content": "This code uses the am start command to launch the ShortcutActivity in AutoJS, passing the path of a JavaScript file (\"/storage/emulated/0/脚本/show_toast.js\") as an argument. This could be used for executing a specific AutoJS script on the device.",
        "type": "summary"
    },
    "5010": {
        "file_id": 642,
        "content": "am start -n org.autojs.autoxjs.v6/org.autojs.autojs.external.shortcut.ShortcutActivity -a android.intent.action.MAIN -e path \"/storage/emulated/0/脚本/show_toast.js\"\n#am start -n org.autojs.autoxjs.v6/org.autojs.autojs.external.shortcut.ShortcutActivity -a android.intent.action.MAIN -e path \"/storage/emulated/0/脚本/qq_share_auto.js\"",
        "type": "code",
        "location": "/tests/qq_share_autojs/launch_autojs.sh:1-2"
    },
    "5011": {
        "file_id": 642,
        "content": "This code uses the am start command to launch the ShortcutActivity in AutoJS, passing the path of a JavaScript file (\"/storage/emulated/0/脚本/show_toast.js\") as an argument. This could be used for executing a specific AutoJS script on the device.",
        "type": "comment"
    },
    "5012": {
        "file_id": 643,
        "content": "/tests/qq_share_autojs/appium_unlock_phone.py",
        "type": "filepath"
    },
    "5013": {
        "file_id": 643,
        "content": "The code sets up an Appium test for unlocking an Android phone without requiring the device password. It initializes capabilities, connects to the appium server, checks if the screen is locked, and uses a bash script to unlock it.",
        "type": "summary"
    },
    "5014": {
        "file_id": 643,
        "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom appium import webdriver\nfrom appium.webdriver.common.appiumby import AppiumBy\ncapabilities = dict(\n    platformName='Android',\n    automationName='uiautomator2',\n    deviceName='Android',\n    appPackage='com.android.settings',\n    appActivity='.Settings',\n    language='en',\n    locale='US',\n    noSign=True,\n    skipUnlock=True\n    # it tries to clear my password.\n)\nappium_server_url = 'http://localhost:4723'\ndriver = webdriver.Remote(appium_server_url, capabilities)\nprint('is screen ready?')\nwhile True:\n    try:\n        locked = driver.is_locked()\n        print('locked?', locked)\n        if not locked:\n            break\n        import os\n        if locked:\n            os.system(\"bash adb_unlock.sh\")\n            print(\"UNLOCKED\")\n    except:\n        pass\n# unlocking the phone will disconnect adb sessions\nif driver:\n    driver.quit()",
        "type": "code",
        "location": "/tests/qq_share_autojs/appium_unlock_phone.py:1-42"
    },
    "5015": {
        "file_id": 643,
        "content": "The code sets up an Appium test for unlocking an Android phone without requiring the device password. It initializes capabilities, connects to the appium server, checks if the screen is locked, and uses a bash script to unlock it.",
        "type": "comment"
    },
    "5016": {
        "file_id": 644,
        "content": "/tests/qq_share_autojs/appium_test.py",
        "type": "filepath"
    },
    "5017": {
        "file_id": 644,
        "content": "Code sets up Appium test for Android device using the uiautomator2 automation, launches com.android.settings app, searches for \"Battery\" and clicks it, then quits the driver if open.",
        "type": "summary"
    },
    "5018": {
        "file_id": 644,
        "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom appium import webdriver\nfrom appium.webdriver.common.appiumby import AppiumBy\ncapabilities = dict(\n    platformName='Android',\n    automationName='uiautomator2',\n    deviceName='Android',\n    appPackage='com.android.settings',\n    appActivity='.Settings',\n    language='en',\n    locale='US',\n    noSign=True\n)\nappium_server_url = 'http://localhost:4723'\ndriver = webdriver.Remote(appium_server_url, capabilities)\nel = driver.find_element(by=AppiumBy.XPATH, value='//*[@text=\"Battery\"]')\nel.click()\nif driver:\n    driver.quit()",
        "type": "code",
        "location": "/tests/qq_share_autojs/appium_test.py:1-27"
    },
    "5019": {
        "file_id": 644,
        "content": "Code sets up Appium test for Android device using the uiautomator2 automation, launches com.android.settings app, searches for \"Battery\" and clicks it, then quits the driver if open.",
        "type": "comment"
    },
    "5020": {
        "file_id": 645,
        "content": "/tests/qq_share_autojs/adb_unlock.sh",
        "type": "filepath"
    },
    "5021": {
        "file_id": 645,
        "content": "This code uses ADB to simulate touch events on an Android device. It performs a power button press, a swipe gesture, enters text, and presses the back key.",
        "type": "summary"
    },
    "5022": {
        "file_id": 645,
        "content": "adb -s 192.168.10.3:5555 shell input keyevent 26\nadb -s 192.168.10.3:5555 shell input swipe 500 500 500 0\nadb -s 192.168.10.3:5555 shell input text \"Bumper\\&Mountains\"\nadb -s 192.168.10.3:5555 shell input keyevent 66",
        "type": "code",
        "location": "/tests/qq_share_autojs/adb_unlock.sh:1-4"
    },
    "5023": {
        "file_id": 645,
        "content": "This code uses ADB to simulate touch events on an Android device. It performs a power button press, a swipe gesture, enters text, and presses the back key.",
        "type": "comment"
    },
    "5024": {
        "file_id": 646,
        "content": "/tests/qq_share_autojs/adb_check_lock.sh",
        "type": "filepath"
    },
    "5025": {
        "file_id": 646,
        "content": "This script checks if the phone is locked or unlocked by running \"adb -s 192.168.10.3:5555 shell dumpsys window | grep mDreamingLockscreen=false\" and then executes \"bash adb_unlock.sh\" if locked, otherwise exits. The check is performed in an infinite loop using a \"while true\" statement.",
        "type": "summary"
    },
    "5026": {
        "file_id": 646,
        "content": "function checkScreen {\n  adb -s 192.168.10.3:5555 shell dumpsys window | grep mDreamingLockscreen=false\n  if [[ $? -eq 1 ]]; then\n    echo \"phone locked\"\n    bash adb_unlock.sh\n    sleep 2\n  else\n    echo \"phone unlocked\"\n    exit\n  fi\n}\nwhile true\ndo\n  checkScreen\ndone",
        "type": "code",
        "location": "/tests/qq_share_autojs/adb_check_lock.sh:1-16"
    },
    "5027": {
        "file_id": 646,
        "content": "This script checks if the phone is locked or unlocked by running \"adb -s 192.168.10.3:5555 shell dumpsys window | grep mDreamingLockscreen=false\" and then executes \"bash adb_unlock.sh\" if locked, otherwise exits. The check is performed in an infinite loop using a \"while true\" statement.",
        "type": "comment"
    },
    "5028": {
        "file_id": 647,
        "content": "/tests/qq_share_autojs/adb_autox_launch.sh",
        "type": "filepath"
    },
    "5029": {
        "file_id": 647,
        "content": "This code is using the 'adb' command to launch the 'ShortcutActivity' in AutoJS v6 on a specific device (192.168.10.3:5555). It starts an activity and passes an intent action with the path to the 'qq_share_auto.js' script as an extra parameter.",
        "type": "summary"
    },
    "5030": {
        "file_id": 647,
        "content": "adb -s 192.168.10.3:5555 shell am start -n org.autojs.autoxjs.v6/org.autojs.autojs.external.shortcut.ShortcutActivity -a android.intent.action.MAIN -e path \"/storage/emulated/0/脚本/qq_share_auto.js\"",
        "type": "code",
        "location": "/tests/qq_share_autojs/adb_autox_launch.sh:1-1"
    },
    "5031": {
        "file_id": 647,
        "content": "This code is using the 'adb' command to launch the 'ShortcutActivity' in AutoJS v6 on a specific device (192.168.10.3:5555). It starts an activity and passes an intent action with the path to the 'qq_share_auto.js' script as an extra parameter.",
        "type": "comment"
    },
    "5032": {
        "file_id": 648,
        "content": "/tests/qq_share_autojs/account_management.sh",
        "type": "filepath"
    },
    "5033": {
        "file_id": 648,
        "content": "The code is starting the \"com.tencent.mobileqq.activity.AccountManageActivity\" activity, which likely pertains to account management in a mobile application named MobileQQ.",
        "type": "summary"
    },
    "5034": {
        "file_id": 648,
        "content": "am start  com.tencent.mobileqq.activity.AccountManageActivity",
        "type": "code",
        "location": "/tests/qq_share_autojs/account_management.sh:1-1"
    },
    "5035": {
        "file_id": 648,
        "content": "The code is starting the \"com.tencent.mobileqq.activity.AccountManageActivity\" activity, which likely pertains to account management in a mobile application named MobileQQ.",
        "type": "comment"
    },
    "5036": {
        "file_id": 649,
        "content": "/tests/qq_share_autojs/autojs_scripts/wesee_search.js",
        "type": "filepath"
    },
    "5037": {
        "file_id": 649,
        "content": "This code initiates the WeSee app, starts the GlobalSearchActivity, and inputs the search term \"猫猫\" before triggering a search with KEYCODE_ENTER.",
        "type": "summary"
    },
    "5038": {
        "file_id": 649,
        "content": "pkg=\"com.tencent.weishi\"\nact=\"com.tencent.oscar.module.discovery.ui.GlobalSearchActivity\"\napp.startActivity({root:true,\npackageName:pkg,className:act,\naction:\"View\"})\nwaitForActivity(act)\nsetText(\"猫猫\")\nKeyCode(\"KEYCODE_ENTER\")",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/wesee_search.js:1-12"
    },
    "5039": {
        "file_id": 649,
        "content": "This code initiates the WeSee app, starts the GlobalSearchActivity, and inputs the search term \"猫猫\" before triggering a search with KEYCODE_ENTER.",
        "type": "comment"
    },
    "5040": {
        "file_id": 650,
        "content": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js",
        "type": "filepath"
    },
    "5041": {
        "file_id": 650,
        "content": "This code reduces music volume, opens Taobao app with custom URL, handles session ID and video player settings using item ID, GG search request, and referer origin, while waiting for prompts and handling expired ones by polling, clicking \"I know\" button, setting specific text, searching for \"猫猫\", and managing volume settings.",
        "type": "summary"
    },
    "5042": {
        "file_id": 650,
        "content": "package=\"com.taobao.taobao\";\nactivity=\"com.taobao.search.searchdoor.SearchDoorActivity\";\n//activity=\"com.taobao.search.searchdoor.MultipleSearchDoorActivity\";\nvar vol=device.getMusicVolume()\ndevice.setMusicVolume(0)\n// mute the thing please?\napp.startActivity({action:\"View\",\npackageName:package,className:activity,\nroot:true,\n//category:[\"com.taobao.intent.category.search.MULTI_SEARCHDOOR\"],\ndata:\"http://s.m.taobao.com/...\",})\n // not launching 淘宝逛逛\n /*\n 2221:2022-11-02 13:02:20.328 | startActivity { calling=com.taobao.taobao:-1--1, rc=10159-1987, iTS=false, requestCode=-1, startFlags=0, target=com.taobao.taobao/com.taobao.search.searchdoor.SearchDoorActivity<true>, intent=Intent { act=android.intent.action.VIEW dat=http://s.m.taobao.com/... pkg=com.taobao.taobao cmp=com.taobao.taobao/com.taobao.search.searchdoor.SearchDoorActivity (has extras) }, extras={ NAV_START_ACTIVITY_TIME:(java.lang.Long)1667365340316, ad_type:(java.lang.String)1.0, NAV_TO_URL_START_TIME:(java.lang.Long)1667365340268, referr",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js:1-19"
    },
    "5043": {
        "file_id": 650,
        "content": "The code sets the music volume to 0 and then launches the Taobao app's search function by starting the specified activity with a specific URL. The intent action is VIEW, and it targets com.taobao.taobao/com.taobao.search.searchdoor.SearchDoorActivity.",
        "type": "comment"
    },
    "5044": {
        "file_id": 650,
        "content": "er:(java.lang.String)http://market.m.taobao.com/app/tb-source-app/video-fullpage/pages/index2?wh_weex=false&wx_navbar_transparent=true&wx_navbar_hidden=true&id=380201806724&bizParameters=%7B%22itemIds%22%3A%22681366994883%22%2C%22contentId%22%3A%22380201806724%22%2C%22videoId%22%3A%22380201806724%22%7D&videoUrl=http%3A%2F%2Fcloud.video.taobao.com%2Fplay%2Fu%2F2208882892036%2Fp%2F1%2Fe%2F6%2Ft%2F1%2F380201806724.mp4&type=cainixihuansy&source=cainixihuansy&business_spm=a211r6.cjvideo&hideAccountInfo=false&extParams=%7B%2288_bucket%22%3A%220%22%7D&scm=1007.10088.311498.0&spm=a2141.1.guessitemtab_1.5&pvid=b9ca1499-6a25-4913-9b4a-a2c703576f45&utparam=%7B%22x_sid%22%3A%2252aa36213ede47006361f9b21dbc602d%22%2C%22card_subtype%22%3A%22xgc%22%2C%22up_pvid%22%3A%22f88bbfa6-c859-44a5-94bb-e0599c889e5a%22%2C%22x_sid_cpm%22%3A%22be353521ca7fc7006361f9b20c542845%22%2C%22x_object_type%22%3A%22VIDEO_916%22%2C%22x_ad_bucketid_cpm%22%3A%2212676854%2C17296858%22%2C%22hybrid_score%22%3A0.303358%2C%22x_biz%",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js:19-19"
    },
    "5045": {
        "file_id": 650,
        "content": "This code appears to be a URL for a Taobao video page, containing various parameters and identifiers for tracking and customization purposes.",
        "type": "comment"
    },
    "5046": {
        "file_id": 650,
        "content": "22%3A%22VIDEO_916%22%2C%22sessionid%22%3A%22b9ca1499-6a25-4913-9b4a-a2c703576f45%22%2C%22tpp_buckets%22%3A%22%7E9%7EU2wG6g9N1IaCq1M7J1Ia11K6A2Tg4x4I02E6nIfMi-u9KM9NveH1FhPjhxK7AniKCnO3mIO8Kj2dCQ6NhoMCwioGO1X6ddGN2W5qOUcWe41W2PePv31PMlSe11O2XcVr31EA5_s41zO2NubdRr-Z851Q1I7Li2dFU4S93dGSkxl5dU2TcFf7dBN8Cf8d_2ImFqbdY2A1JvbdM1U1P3cdX1y4IlcdZ1L6w9ddyCN9ddBN9AeedJL7Htgd_2Qpx2jdCW2QgjdzC4w2kdDJ8B6ldF%7EwpwFaf9z%7EZb7wWs29B%7EJhwQ4f9-B22y65-1Gp2BfmB2%7EGdwGfh9O1K52Nj5GSg2RplCB4V3mIN61FhfdIGcW041AEuHshdEDn1Lj7dFY5y98dB1O4H29dz-hw3cdPL1MqbdDVj1V4mdZ2C1WfkdFEp-4mdOF1IemdU%7EXk1wC0d9G%7EPi3wJh59wNeUo1Xp%7Ezv1wYcn5wEt7Uv2dD2C7Li3dGqKuQp7dU4zk1AcedZ4W7W0idRp%7EWecwFq49HPt8Dv9dNZ82U8gdKNqS6kdQWIbkdYU4VskdQ%7EFt4wG8g9A%22%2C%22miniapphc_score%22%3A0.0%2C%22x_summary_trackInfo%22%3A%22380569870474---380569870474-new_vp_4_3-new_vp_4_3%22%2C%22pvid%22%3A%22b9ca1499-6a25-4913-9b4a-a2c703576f45%22%2C%22evo_buckets%22%3A%22evo263227_118977%23275047_321220%23286254_324141%23337973_477247evo%22%2C%22auction_sco",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js:19-19"
    },
    "5047": {
        "file_id": 650,
        "content": "The code seems to be related to tracking information, session ID, and possibly video player settings for a specific platform or application.",
        "type": "comment"
    },
    "5048": {
        "file_id": 650,
        "content": "re%22%3A0.0%2C%22scm%22%3A%221007.10088.311498.428654_37338_4631_438253_439584_428623_446528_434662_23752_438956_34262_433641_443307_25137_36851_22642_38173_25152_431777_445505_440772_438225_439515_37791_36729_1862_34124_26810_438089_445972_429366_447685_15345_10206_438387_19172_18035_439601%22%2C%22glc%22%3A%221%22%2C%22guessModelVersion%22%3A%2220211016%22%2C%22mtx_c%22%3A380201806724%2C%22matrix_score%22%3A0.0%2C%22miniapp_score%22%3A0.0%2C%22card_type%22%3A%22xgc%22%2C%22x_item_ids%22%3A%22681366994883%22%2C%22author_id%22%3A%222208882892036%22%2C%22guess_buckets%22%3A%226595_11513_11609_12894_13440_17348_19178_21337_21230_20634_22262%22%2C%22x_sytab%22%3A%221001%22%2C%22x_object_id%22%3A380201806724%7D&itemid=681366994883&item_id=681366994883&noDynamicRec=1&newItemList=1&utabtest=aliabtest184572_25123, URL_REFERER_ORIGIN:(java.lang.String)//s.m.taobao.com/h5entry?g_channelSrp=videointeract&g_tab=tbexperience&g_pfilter=daren&g_closeModues=tab&closeExpSubTab=true&g_csearchdoor_spm=a",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js:19-19"
    },
    "5049": {
        "file_id": 650,
        "content": "Code contains various parameters for a Taobao GG search request, including scm, glc, guessModelVersion, mtx_c, matrix_score, miniapp_score, card_type, x_item_ids, author_id, guess_buckets, x_sytab, and x_object_id. The item ID is 681366994883. It also includes parameters for noDynamicRec, newItemList, and utabtest, and the URL referer origin is s.m.taobao.com/h5entry.",
        "type": "comment"
    },
    "5050": {
        "file_id": 650,
        "content": "310p.14955560&spm=a310p.13800399&launchMode=android_new_task&g_closeExpSubTab=true, WEEX_NAV_PROCESSOR_TIME:(java.lang.Long)1667365340292 } }.../xintent/logs #\n */\n waitForPackage(package);\n //跳转之后可能出现过期的提示\n //可能需要轮询\n for (var i=0;i<5;i++){//triple check?\n while (true){\n     sleep(200);\n  var succ=click(\"我知道了\");\n  if (succ){break;}\n if (currentActivity() ==activity)break;\n }\n }\n mytext=\"【淘宝】https://m.tb.cn/h.UfbOyIi?sm=26a80a?tk=XjXUd0OFtMN CZ0001 「这就是：我预判了你的预判吗」点击链接直接打开\"\n setText(mytext)\n //淘宝直接输入到搜索框里面 然后用这个进入视频搜索界面\n while(!click(\"搜索\"));\nwaitForActivity(\"com.taobao.android.interactive.timeline.VideoListActivity2\")\nid(\"imgSearch\").findOne().click()\nwaitForActivity(\"com.taobao.search.searchdoor.MultipleSearchDoorActivity\")\nsetText(\"猫猫\")\n//Text(\"猫猫\")\nwhile(!click(\"搜索\"));\n//可能出现搜索失败的情况 请注意\ndevice.setMusicVolume(vol)",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/taobao_gg_search.js:19-54"
    },
    "5051": {
        "file_id": 650,
        "content": "Code snippet is performing actions in a Taobao app. It waits for the package, handles expired prompts by polling, clicks \"I know\" button, sets a specific text and searches for \"猫猫\". It ensures volume settings by setting music volume and possibly handles search failure scenarios.",
        "type": "comment"
    },
    "5052": {
        "file_id": 651,
        "content": "/tests/qq_share_autojs/autojs_scripts/show_toast.js",
        "type": "filepath"
    },
    "5053": {
        "file_id": 651,
        "content": "This code displays a toast notification with the message \"hello\" in the autojs_scripts directory.",
        "type": "summary"
    },
    "5054": {
        "file_id": 651,
        "content": "toast(\"hello\");",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/show_toast.js:1-1"
    },
    "5055": {
        "file_id": 651,
        "content": "This code displays a toast notification with the message \"hello\" in the autojs_scripts directory.",
        "type": "comment"
    },
    "5056": {
        "file_id": 652,
        "content": "/tests/qq_share_autojs/autojs_scripts/qq_share_auto.js",
        "type": "filepath"
    },
    "5057": {
        "file_id": 652,
        "content": "This script performs activities for QQ Share, searches \"卷王培训基地\", clicks the contact number, attempts to find and click \"发送\" while waiting for \"返回哔哩哔哩\", then removes 'flag' file using AutoJS.",
        "type": "summary"
    },
    "5058": {
        "file_id": 652,
        "content": "auto();\nvar cmd = \"am start -S -n com.tencent.mobileqq/com.tencent.mobileqq.activity.JumpActivity -a android.intent.action.VIEW -d 'mqqapi://share/to_fri?src_type=app&version=1&file_type=news&file_data=L3N0b3JhZ2UvZW11bGF0ZWQvMC9QaWN0dXJlcy9zaGFyZS9jYXQuZ2lm&file_uri=ZmlsZTovLy9zdG9yYWdlL2VtdWxhdGVkLzAvUGljdHVyZXMvc2hhcmUvY2F0LmdpZg%3D%3D&title=5ZOU5ZOp5ZOU5ZOp&description=5Za15Za15Za1&share_id=100951776&url=aHR0cHM6Ly9iMjMudHYvdUhNTDVtaQ%3D%3D&app_name=5ZOU5ZOp5ZOU5ZOp&req_type=Nw%3D%3D&mini_program_appid=MTEwOTkzNzU1Nw%3D%3D&mini_program_path=cGFnZXMvdmlkZW8vdmlkZW8%2FYnZpZD1CVjF6ZDR5MTE3V0Y%3D&mini_program_type=Mw%3D%3D&cflag=MA%3D%3D&third_sd=dHJ1ZQ%3D%3D' -e pkg_name tv.danmaku.bili\";\nshell(cmd,true);\nwaitForActivity(\"com.tencent.mobileqq.activity.ForwardRecentActivity\");\nwhile(!click(\"搜索\"));\nsetText(\"卷王培训基地\");\nwhile(!click(\"543780931\"));\nwhile(true){\nvar send =text(\"发送\").findOne(1000);\nif (send !=null){send.click();}\n// will be null.\nvar ret=text(\"返回哔哩哔哩\").findOne(1000);\nif (ret != null){ret.click();break;}",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/qq_share_auto.js:1-21"
    },
    "5059": {
        "file_id": 652,
        "content": "The script starts an activity for QQ Share, sets text, and waits for a specific activity to launch. It then clicks on \"搜索\", enters the search term \"卷王培训基地\", clicks on the contact number \"543780931\", and repeatedly tries to find the \"发送\" button while waiting for the \"返回哔哩哔哩\" button to appear before finally clicking it and breaking the loop.",
        "type": "comment"
    },
    "5060": {
        "file_id": 652,
        "content": "}\nshell(\"rm /storage/emulated/0/flag\")",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/qq_share_auto.js:22-24"
    },
    "5061": {
        "file_id": 652,
        "content": "Removes the 'flag' file from storage using AutoJS script.",
        "type": "comment"
    },
    "5062": {
        "file_id": 653,
        "content": "/tests/qq_share_autojs/autojs_scripts/qq_account_switch.js",
        "type": "filepath"
    },
    "5063": {
        "file_id": 653,
        "content": "This code starts the \"com.tencent.mobileqq\" application, specifically the AccountManageActivity, which allows switching between different QQ accounts.",
        "type": "summary"
    },
    "5064": {
        "file_id": 653,
        "content": "app.startActivity({\n    root:true,\n        action: \"View\",\n        packageName:\"com.tencent.mobileqq\",\n        className: \"com.tencent.mobileqq.activity.AccountManageActivity\"\n    });",
        "type": "code",
        "location": "/tests/qq_share_autojs/autojs_scripts/qq_account_switch.js:1-6"
    },
    "5065": {
        "file_id": 653,
        "content": "This code starts the \"com.tencent.mobileqq\" application, specifically the AccountManageActivity, which allows switching between different QQ accounts.",
        "type": "comment"
    },
    "5066": {
        "file_id": 654,
        "content": "/tests/render_and_recognize_long_text_to_filter_unwanted_characters/test_render.py",
        "type": "filepath"
    },
    "5067": {
        "file_id": 654,
        "content": "The code utilizes pygame and specific libraries to generate text, render it, set up a game display window, and save the updated display as output_name.",
        "type": "summary"
    },
    "5068": {
        "file_id": 654,
        "content": "import os\n# https://github.com/ntasfi/PyGame-Learning-Environment/issues/26\nos.environ[\"SDL_VIDEODRIVER\"] = \"dummy\"\nimport pygame\npygame.init()\nblack, white = pygame.Color('black'), pygame.Color('white')\n# pillow can also do that\n# https://plainenglish.io/blog/generating-text-on-image-with-python-eefe4430fe77\ntextContent = \"\".join([\"中\",\"ぁ\"]+[f\"[{index+1}]\" for index in range(100)]) # will see [100] at the end of text if successful.\n# pygame.font.get_fonts()\n# install your font to system please? but why all lower case font names?\n# fontName = \"notosans\"\n# this font is bad.\nfontSize = 40\n# font = pygame.font.SysFont(fontName,fontSize)\n# fontPath = \"/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf\" # shit this fails.\nfontPath = \"./get_and_merge_fonts/GoNotoCurrent.ttf\"\n# use some kind of super large merged notofont.\nfont = pygame.font.Font(fontPath, fontSize)\noutput_name = \"test_render.png\"\nword_surface = font.render(textContent, False, black)\nword_width, word_height = word_surface.get_size()\nmargin=20\nSIZE=(word_width+margin*2, word_height+margin*2)",
        "type": "code",
        "location": "/tests/render_and_recognize_long_text_to_filter_unwanted_characters/test_render.py:1-33"
    },
    "5069": {
        "file_id": 654,
        "content": "The code imports necessary libraries, sets the video driver, initializes pygame, defines colors, generates text content with 100 placeholders, selects a font (GoNotoCurrent.ttf), renders the text, and determines the size of the rendered image.",
        "type": "comment"
    },
    "5070": {
        "file_id": 654,
        "content": "image = pygame.display.set_mode(SIZE, pygame.RESIZABLE)\nimage.fill(white)\nimage.blit(word_surface,(margin,margin))\npygame.display.update()\npygame.image.save(image,output_name)",
        "type": "code",
        "location": "/tests/render_and_recognize_long_text_to_filter_unwanted_characters/test_render.py:34-38"
    },
    "5071": {
        "file_id": 654,
        "content": "Initializes game display window with specified size, fills it with white color, blits word image onto the surface, updates pygame display and saves the updated display to output_name.",
        "type": "comment"
    },
    "5072": {
        "file_id": 655,
        "content": "/tests/render_and_recognize_long_text_to_filter_unwanted_characters/test_pytesseract.py",
        "type": "filepath"
    },
    "5073": {
        "file_id": 655,
        "content": "This code uses the pytesseract library to extract text from an image. It specifies a list of supported languages (English, Chinese Simplified, Chinese Traditional, Japanese), combines them into a single language code, and applies it to the \"test_render.png\" image file. The resulting extracted text is then printed out. However, there may be many incorrect results due to the complexity of character recognition in different languages.",
        "type": "summary"
    },
    "5074": {
        "file_id": 655,
        "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport pytesseract\n# pytesseract.get_languages(config=\"\")\nlangs =['eng','chi_sim','chi_tra','jpn']\nlangCode = \"+\".join(langs)\npicPath = \"test_render.png\"\noutput = pytesseract.image_to_string(picPath, lang=langCode)\nprint(\"OUTPUT?\")\nprint(output)\n# many incorrect results?",
        "type": "code",
        "location": "/tests/render_and_recognize_long_text_to_filter_unwanted_characters/test_pytesseract.py:1-15"
    },
    "5075": {
        "file_id": 655,
        "content": "This code uses the pytesseract library to extract text from an image. It specifies a list of supported languages (English, Chinese Simplified, Chinese Traditional, Japanese), combines them into a single language code, and applies it to the \"test_render.png\" image file. The resulting extracted text is then printed out. However, there may be many incorrect results due to the complexity of character recognition in different languages.",
        "type": "comment"
    },
    "5076": {
        "file_id": 656,
        "content": "/tests/remove_subtle_watermark_local_contrast_ocr/test.py",
        "type": "filepath"
    },
    "5077": {
        "file_id": 656,
        "content": "This code imports the necessary library, Image, from wand. It opens and processes an image file called 'IWWS.jpeg'. The image is cloned and processed with local_contrast function at different radius and sigma values to enhance the contrast and text visibility. The resulting images are saved as 'local_contrast1.jpg' and 'local_contrast2.jpg'.",
        "type": "summary"
    },
    "5078": {
        "file_id": 656,
        "content": "# Import library from Image\nfrom wand.image import Image\n# Import the image\n# 2160x1080\n# the original image scale.\nwith Image(filename ='IWWS.jpeg') as image:\n\t# Clone the image in order to process\n\twith image.clone() as local_contrast:\n        # radius is related to text size and picture size.\n\t\t# Invoke local_contrast function with radius 12 and sigma 3\n\t\tlocal_contrast.local_contrast(4, 150) # radius, sigma\n\t\t# Save the image\n\t\tlocal_contrast.save(filename ='local_contrast1.jpg')\n\t\tlocal_contrast.local_contrast(8, 75) # radius, sigma\n\t\tlocal_contrast.local_contrast(12, 75) # radius, sigma\n\t\tlocal_contrast.save(filename ='local_contrast2.jpg')",
        "type": "code",
        "location": "/tests/remove_subtle_watermark_local_contrast_ocr/test.py:1-18"
    },
    "5079": {
        "file_id": 656,
        "content": "This code imports the necessary library, Image, from wand. It opens and processes an image file called 'IWWS.jpeg'. The image is cloned and processed with local_contrast function at different radius and sigma values to enhance the contrast and text visibility. The resulting images are saved as 'local_contrast1.jpg' and 'local_contrast2.jpg'.",
        "type": "comment"
    },
    "5080": {
        "file_id": 657,
        "content": "/tests/remove_subtle_watermark_local_contrast_ocr/README.md",
        "type": "filepath"
    },
    "5081": {
        "file_id": 657,
        "content": "This code snippet discusses an issue where watermarks in certain image formats (using wand or darktable) can be recognized even after local contrast enhancement. The original method failed to remove these watermarks. Additionally, the pymusica library does not currently support colored images, as mentioned in a GitHub issue.",
        "type": "summary"
    },
    "5082": {
        "file_id": 657,
        "content": "watermarks inside wand enhanced picture, darktable local contrast enhanced pictures can be recognized. the original one failed.\npymusica currently does not support colored images.\nhttps://github.com/lafith/pymusica/issues/2",
        "type": "code",
        "location": "/tests/remove_subtle_watermark_local_contrast_ocr/README.md:1-5"
    },
    "5083": {
        "file_id": 657,
        "content": "This code snippet discusses an issue where watermarks in certain image formats (using wand or darktable) can be recognized even after local contrast enhancement. The original method failed to remove these watermarks. Additionally, the pymusica library does not currently support colored images, as mentioned in a GitHub issue.",
        "type": "comment"
    },
    "5084": {
        "file_id": 658,
        "content": "/tests/remove_subtle_watermark_local_contrast_ocr/opencv_clahe.py",
        "type": "filepath"
    },
    "5085": {
        "file_id": 658,
        "content": "This code enhances image contrast using OpenCV's CLAHE on the L channel, then saves the result as \"clahe_image.jpeg\" and \"clahe_image_double.jpeg\". The code also includes thresholding and image display steps which may be unrelated to the main operation of applying CLAHE.",
        "type": "summary"
    },
    "5086": {
        "file_id": 658,
        "content": "# https://www.geeksforgeeks.org/clahe-histogram-eqalization-opencv/\nimport cv2\n# import numpy as np\n# Reading the image from the present directory\ncolorimage = cv2.imread(\"IWWS.jpeg\")\n# Resizing the image for compatibility\n# image = cv2.resize(image, (500, 600))\n# why?\n# The initial processing of the image\n# image = cv2.medianBlur(image, 3)\n# image_bw = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n# The declaration of CLAHE\n# clipLimit -> Threshold for contrast limiting\nclahe_model = cv2.createCLAHE(clipLimit = 5)\n# you may use grayscale image for the luminosity output.\n# final_img = clahe.apply(image)\n# For ease of understanding, we explicitly equalize each channel individually\n## highly unstable. do not use.\n# colorimage_b = clahe_model.apply(colorimage[:,:,0])\n# colorimage_g = clahe_model.apply(colorimage[:,:,1])\n# colorimage_r = clahe_model.apply(colorimage[:,:,2])\nimg = cv2.cvtColor(colorimage, cv2.COLOR_RGB2Lab)\n#configure CLAHE\n# clahe = cv2.createCLAHE(clipLimit=12,tileGridSize=(10,10))\nclahe = cv2.createCLAHE(clipLimit=10,tileGridSize=(8,8))",
        "type": "code",
        "location": "/tests/remove_subtle_watermark_local_contrast_ocr/opencv_clahe.py:1-36"
    },
    "5087": {
        "file_id": 658,
        "content": "This code is for image processing using OpenCV's Contrast Limited Adaptive Histogram Equalization (CLAHE) to enhance the contrast of an input image. It reads the image, applies CLAHE on each RGB channel separately, and then converts the result back to Lab color space. The parameters clipLimit and tileGridSize are used for customizing the CLAHE algorithm.",
        "type": "comment"
    },
    "5088": {
        "file_id": 658,
        "content": "# better?\n# https://www.appsloveworld.com/opencv/100/1/how-to-apply-clahe-on-rgb-color-images\n#0 to 'L' channel, 1 to 'a' channel, and 2 to 'b' channel\nimg[:,:,0] = clahe.apply(img[:,:,0])\nsimg = cv2.cvtColor(img, cv2.COLOR_Lab2RGB)\ncv2.imwrite(\"clahe_image.jpeg\", simg)\nimg[:,:,0] = clahe.apply(img[:,:,0])\nsimg = cv2.cvtColor(img, cv2.COLOR_Lab2RGB)\ncv2.imwrite(\"clahe_image_double.jpeg\", simg)\n# still need this?\n# img[:,:,1] = clahe.apply(img[:,:,1])\n# img[:,:,2] = clahe.apply(img[:,:,2])\n# colorimage_clahe = np.stack((colorimage_b,colorimage_g,colorimage_r), axis=2)\n# Ordinary thresholding the same image\n# _, ordinary_img = cv2.threshold(image_bw, 155, 255, cv2.THRESH_BINARY)\n# Showing all the three images\n# cv2.imshow(\"ordinary threshold\", ordinary_img)\n# cv2.imshow(\"CLAHE image\", final_img)",
        "type": "code",
        "location": "/tests/remove_subtle_watermark_local_contrast_ocr/opencv_clahe.py:38-61"
    },
    "5089": {
        "file_id": 658,
        "content": "Code applies CLAHE to an image, converts it back to RGB, and saves the result as \"clahe_image.jpeg\". It then applies CLAHE again for double effect, saving the result as \"clahe_image_double.jpeg\". The comments suggest that applying CLAHE to all color channels might be unnecessary and retaining the comment about it indicates that only L channel requires CLAHE. The code also includes thresholding and image display steps which seem unrelated to the main operation of applying CLAHE.",
        "type": "comment"
    },
    "5090": {
        "file_id": 659,
        "content": "/tests/remove_subtle_watermark_local_contrast_ocr/mclahe_test.py",
        "type": "filepath"
    },
    "5091": {
        "file_id": 659,
        "content": "This code imports the mclahe module and OpenCV library, reads an image, applies MCLAHE (Max Contrast Limited Averaging Hierarchical Equalization) using a specific kernel size, but fails to produce the expected result. Finally, it writes the processed image as \"clahe_image_mclahe.jpeg\".",
        "type": "summary"
    },
    "5092": {
        "file_id": 659,
        "content": "import mclahe\nimport cv2\ncolorimage = cv2.imread(\"IWWS.jpeg\")\n# print(colorimage.shape)\nk = (30,30,1)\ncolorimage_clahe = mclahe.mclahe(colorimage, kernel_size=k) # not working! what the fuck?\ncv2.imwrite(\"clahe_image_mclahe.jpeg\", colorimage_clahe)",
        "type": "code",
        "location": "/tests/remove_subtle_watermark_local_contrast_ocr/mclahe_test.py:1-11"
    },
    "5093": {
        "file_id": 659,
        "content": "This code imports the mclahe module and OpenCV library, reads an image, applies MCLAHE (Max Contrast Limited Averaging Hierarchical Equalization) using a specific kernel size, but fails to produce the expected result. Finally, it writes the processed image as \"clahe_image_mclahe.jpeg\".",
        "type": "comment"
    },
    "5094": {
        "file_id": 660,
        "content": "/tests/remove_subtle_watermark_local_contrast_ocr/jython_imagej_test_clahe.py",
        "type": "filepath"
    },
    "5095": {
        "file_id": 660,
        "content": "The code sets the system path, imports modules for image processing, and enhances local contrast using CLAHE. It opens an image, applies enhancement twice, saves as grayscale, and saves two output files.",
        "type": "summary"
    },
    "5096": {
        "file_id": 660,
        "content": "import os\nimport sys\ncpdirs = [\n    \"/root/Desktop/works/pyjom/tests/remove_subtle_watermark_local_contrast_ocr/imagej_fiji_linux/Fiji.app/jars/\",\n    \"/root/Desktop/works/pyjom/tests/remove_subtle_watermark_local_contrast_ocr/imagej_fiji_linux/Fiji.app/plugins/\",\n]\nfor d in cpdirs:\n    abspath = os.path.abspath(d)\n    files = os.listdir(abspath)\n    jars = [f for f in files if f.endswith(\".jar\")]\n    for f in jars:\n        abs_jarpath = os.path.join(abspath, f)\n        sys.path.append(abs_jarpath)\n# now begin work.\nfrom ij import IJ\n# import os\nfrom mpicbg.ij.clahe import Flat\nfrom ij.process import ImageConverter\n# http://fiji.sc/wiki/index.php/Enhance_Local_Contrast_(CLAHE)\n# http://fiji.sc/cgi-bin/gitweb.cgi?p=mpicbg.git;a=blob;f=mpicbg/ij/clahe/PlugIn.java;h=663153764493547de560c08ee11f2e6b1e7e1a32;hb=HEAD\n# dir = \"/usr/people/tmacrina/seungmount/research/Julimaps/datasets/AIBS_pilot_v1/0_raw/\"\nblocksize = 40\nhistogram_bins = 255\nmaximum_slope = 5\nmask = \"*None*\"\ncomposite = False\nmask = None\n# files = os.listdir(dir)",
        "type": "code",
        "location": "/tests/remove_subtle_watermark_local_contrast_ocr/jython_imagej_test_clahe.py:1-38"
    },
    "5097": {
        "file_id": 660,
        "content": "The code is setting the system path to include jar files from specific directories, and then importing necessary modules to begin image processing work. It defines some parameters for local contrast enhancement using CLAHE algorithm, but does not specify the file paths or operations it will perform on images.",
        "type": "comment"
    },
    "5098": {
        "file_id": 660,
        "content": "# files.sort()\n# for file in files:\n#      if file.endswith(\".tif\")\n# fn = os.path.join(dir, 'original.tif')\nfn = \"IWWS.jpeg\"\nimp = IJ.openImage(fn)\noutput_fn = \"imagej_output_jython.jpg\"\nimp = IJ.openImage(fn)\nFlat.getFastInstance().run(\n    imp, blocksize, histogram_bins, maximum_slope, mask, composite\n)\nIJ.save(imp, output_fn)\nFlat.getFastInstance().run(\n    imp, blocksize, histogram_bins, maximum_slope, mask, composite\n)\n# ImageConverter(imp).convertToGray8()\nIJ.save(imp, \"imagej_double_jython.jpg\")",
        "type": "code",
        "location": "/tests/remove_subtle_watermark_local_contrast_ocr/jython_imagej_test_clahe.py:39-58"
    },
    "5099": {
        "file_id": 660,
        "content": "This code opens an image file, applies contrast enhancement using Flat.getFastInstance(), saves the result as \"imagej_output_jython.jpg\", applies contrast enhancement again (probably unnecessarily), converts the image to grayscale, and saves it as \"imagej_double_jython.jpg\".",
        "type": "comment"
    }
}