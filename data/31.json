{
    "3100": {
        "file_id": 359,
        "content": "# funcname = \"SendMsgV2\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes' ?><msg serviceID='1' templateID='1' action='' brief='&#91;Áæ§ÂÉµÂ∞∏‰ªªÂä°&#93;' sourceMsgId='0' url='' flag='2' adverSign='0' multiMsgFlag='0'><item layout='0'><title size='38' color='#9900CC' style='1'>üÜïÂ∑≤ÁªèÂêØÂä®üÜï</title></item><item layout='0'><hr hidden='false' style='0' /></item><item layout='6'><summary color='#FF0033'>1‚É£Ô∏è</summary><summary color='#FF0099'>üí™Ê≠£Âú®Êâ´ÁßíÂÉµÂ∞∏üí™</summary></item><source name='' icon='' action='' appid='-1' /></msg>\"\"\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes' ?><msg serviceID=\"2\" templateID=\"1\" action=\"web\" brief=\"&#91;ÂàÜ‰∫´&#93; ÂçÅÂπ¥\" sourceMsgId=\"0\" url=\"https://i.y.qq.com/v8/playsong.html?_wv=1&amp;songid=4830342&amp;souce=qqshare&amp;source=qqshare&amp;ADTAG=qqshare\" flag=\"0\" adverSign=\"0\" multiMsgFlag=\"0\" ><item layout=\"2\"><audio cover=\"http://imgcache.qq.com/music/photo/album_500/26/500_albumpic_89526_0.jpg\" src=\"http://ws.stream.qqmusic.qq.com/C400003mAan70z",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_xml_qq.py:34-36"
    },
    "3101": {
        "file_id": 359,
        "content": "This code defines a function named \"SendMsgV2\" and includes an XML content string. The XML contains message details for QQ messenger, including the service ID, template ID, action, brief, source message ID, URL, flag, adverSign, multiMsgFlag, and item layout. It sets the message title and summary, as well as specifying the URL to share a song from QQ music.",
        "type": "comment"
    },
    "3102": {
        "file_id": 359,
        "content": "Uy5O.m4a?guid=1535153710&amp;vkey=D5315B8C0603653592AD4879A8A3742177F59D582A7A86546E24DD7F282C3ACF81526C76E293E57EA1E42CF19881C561275D919233333ADE&amp;uin=&amp;fromtag=3\" /><title>ÂçÅÂπ¥</title><summary>ÈôàÂ•ïËøÖ</summary></item><source name=\"QQÈü≥‰πê\" icon=\"https://i.gtimg.cn/open/app_icon/01/07/98/56/1101079856_100_m.png\" url=\"http://web.p.qq.com/qqmpmobile/aio/app.html?id=1101079856\" action=\"app\"  a_actionData=\"com.tencent.qqmusic\" i_actionData=\"tencent1101079856://\" appid=\"1101079856\" /></msg>\"\"\"\n# content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><msg serviceID=\"1\" templateID=\"1\" action=\"\" brief=\"QQÁ∫¢ÂåÖ\" sourceMsgId=\"0\" flag=\"8\" adverSign=\"0\" multiMsgFlag=\"0\"><item layout=\"6\"><title color=\"#EE00EE\" style=\"4\">ÈòøÊ∑±ÁúüÂ∏Ö</title><summary color=\"#9A32CD\">ÊòØ‰∏çÊòØÂæàÊó†ËØ≠</summary><picture cover=\"http://t1.hddhhn.com/uploads/tu/20150507/20405-eBE9jO.jpg\" action=\"web\" url=\"http://url.cn/5g4eOiY\" w=\"0\" h=\"0\"/></item></msg>\"\"\"\n# payload = {\n#     \"ToUserUid\": group,\n#     \"SendToType\": 2,\n#     \"SendMsgType\": \"XmlMsg\",",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_xml_qq.py:36-41"
    },
    "3103": {
        "file_id": 359,
        "content": "This code snippet is sending an XML message to QQ with content and media information for a music file. The message includes details such as title, summary, and URL of the music file along with the source name and icon of QQ Music app. It also specifies the action and action data associated with the app.",
        "type": "comment"
    },
    "3104": {
        "file_id": 359,
        "content": "#     \"Content\": content,\n# }\n# result = action.baseRequest(\n#     method=\"POST\",\n#     funcname=funcname,\n#     path=\"/v1/LuaApiCaller\",\n#     params={\"qq\": qq, \"funcname\": funcname},\n#     payload=payload,\n# )\n# print(result)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_xml_qq.py:42-51"
    },
    "3105": {
        "file_id": 359,
        "content": "Sending XML data via POST request to \"/v1/LuaApiCaller\" with QQ number and funcname parameters, then printing the result.",
        "type": "comment"
    },
    "3106": {
        "file_id": 360,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_get_link.sh",
        "type": "filepath"
    },
    "3107": {
        "file_id": 360,
        "content": "Code navigates to the \"free-img\" directory, sets the PICTURE variable to a specific image path, and runs the Python script \"cli/free-img.py\" with options \"-s gtimg\" and \"-i $PICTURE\", which uploads an image to the \"gtimg\" server using the specified picture.",
        "type": "summary"
    },
    "3108": {
        "file_id": 360,
        "content": "cd free-img\nPICTURE=/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/test_cover.jpg\npython3 cli/free-img.py -s gtimg -i $PICTURE",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_upload_get_link.sh:1-5"
    },
    "3109": {
        "file_id": 360,
        "content": "Code navigates to the \"free-img\" directory, sets the PICTURE variable to a specific image path, and runs the Python script \"cli/free-img.py\" with options \"-s gtimg\" and \"-i $PICTURE\", which uploads an image to the \"gtimg\" server using the specified picture.",
        "type": "comment"
    },
    "3110": {
        "file_id": 361,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_launch_share.sh",
        "type": "filepath"
    },
    "3111": {
        "file_id": 361,
        "content": "This code launches the JumpActivity in the Tencent MobileQQ app, passing a complex URI with various data such as file type, file data, title, description, and URL to share. The shared content is related to Bilibili video recommendation server. It specifies the app name and package name (tv.danmaku.bili).",
        "type": "summary"
    },
    "3112": {
        "file_id": 361,
        "content": "am start -n com.tencent.mobileqq/com.tencent.mobileqq.activity.JumpActivity -a android.intent.action.VIEW -d 'mqqapi://share/to_fri?src_type=app&version=1&file_type=news&file_data=L3N0b3JhZ2UvZW11bGF0ZWQvMC9QaWN0dXJlcy9zaGFyZS8xMjcyMDY0MzU0&file_uri=Y29udGVudDovL3R2LmRhbm1ha3UuYmlsaS5maWxlcHJvdmlkZXIvb3BlbnNka19leHRlcm5hbC9zaGFyZTJxcV90ZW1wNDIwOTU0OTNhYjhlZGRhZmYzMWQ1Y2ZjYWYzZjE3MDQuanBn&title=5ZOU5ZOp5ZOU5ZOp&description=5aSn5Z6L5pS/6K6654mH772c5paw5pe25Luj562U5Y23&share_id=100951776&url=aHR0cHM6Ly9iMjMudHYvdGRKZGd6WT9zaGFyZV9tZWRpdW09YW5kcm9pZCZzaGFyZV9zb3VyY2U9cXEmYmJpZD1YWTFCQjcyMUIxRjk3MzQ4REJERTQyOTdGRTFCNEFCRTI2QkFBJnRzPTE2NjcyNzU0ODI4MTY=&app_name=5ZOU5ZOp5ZOU5ZOp&req_type=Nw==&mini_program_appid=MTEwOTkzNzU1Nw==&mini_program_path=cGFnZXMvdmlkZW8vdmlkZW8/YnZpZD1CVjFuZTQxMUw3aHkmc2hhcmVfc291cmNlPXFxX3VnYyZ1bmlxdWVfaz10ZEpkZ3pZ&mini_program_type=Mw==&cflag=MA==&third_sd=dHJ1ZQ==' -e pkg_name tv.danmaku.bili",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/test_launch_share.sh:1-1"
    },
    "3113": {
        "file_id": 361,
        "content": "This code launches the JumpActivity in the Tencent MobileQQ app, passing a complex URI with various data such as file type, file data, title, description, and URL to share. The shared content is related to Bilibili video recommendation server. It specifies the app name and package name (tv.danmaku.bili).",
        "type": "comment"
    },
    "3114": {
        "file_id": 362,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/send_friend_xml_and_forward_xml_to_group.py",
        "type": "filepath"
    },
    "3115": {
        "file_id": 362,
        "content": "This code sends QQ messages containing video recommendations or Baidu website links to specific users and groups using XML format, and utilizes the requests library for API calls.",
        "type": "summary"
    },
    "3116": {
        "file_id": 362,
        "content": "cover = \"https://i0.hdslb.com/bfs/archive/c5a0d18ee077fb6a4ac0970ccb0a3788e137d14f.jpg\" # works.\ncontent = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><msg templateID=\"123\" url=\"https://b23.tv/uHML5mi?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1666023406285\" serviceID=\"1\" action=\"web\" actionData=\"\" a_actionData=\"\" i_actionData=\"\" brief=\"[QQÂ∞èÁ®ãÂ∫è]ÂìîÂì©ÂìîÂì©\" flag=\"0\"><item layout=\"2\"><picture cover=\"{}\"/><title>„ÄêAIÂä®Áîª„ÄëÂ¶ÆÈú≤PVÂä®Áîª È£éËΩ¨Êç¢„ÄêNovelAI„Äë</title></item><source url=\"https://b23.tv/uHML5mi?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1666023406285\" icon=\"http://miniapp.gtimg.cn/public/appicon/432b76be3a548fc128acaa6c1ec90131_200.jpg\" name=\"ÂìîÂì©ÂìîÂì©\" appid=\"0\" action=\"app\" actionData=\"\" a_actionData=\"tencent0://\" i_actionData=\"\"/></msg>\"\"\".format(cover)\nqq = 917521610\nuser = 1281727431\ngroup = 543780931\nbaseUrl = \"http://0.0.0.0:5700\" # the thing is not ready yet.\nimport requests\nurl = baseUrl + \"/send_private_msg\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/send_friend_xml_and_forward_xml_to_group.py:1-14"
    },
    "3117": {
        "file_id": 362,
        "content": "This code sends a QQ message with an XML format containing a video recommendation to a specific user and group. The cover image URL is set, the content is a formatted XML string, QQ account IDs are defined, and the base URL for sending the message is specified. The code uses the requests library to send the message to the server.",
        "type": "comment"
    },
    "3118": {
        "file_id": 362,
        "content": "message = '[CQ:share,url=http://baidu.com,title=ÁôæÂ∫¶]'\ndata = {\"user_id\": user, \"message\": message, \"auto_escape\": False}\nr = requests.post(url, data=data)\nprint(r.json())\n# message = \"[CQ:forward,id={}]\".format(291457889)\n# url = baseUrl+\"/send_group_msg\"\n# data = {\"group_id\":group, \"message\": message, \"auto_escape\": False}\n# r = requests.post(url,data=data)\n# print(r.json())",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/send_friend_xml_and_forward_xml_to_group.py:15-27"
    },
    "3119": {
        "file_id": 362,
        "content": "This code sends a message containing a Baidu website link to a specific user using XML format and also includes an option to forward the message with a given ID to a group. The API call is made using requests library, and the response from the server is printed in JSON format.",
        "type": "comment"
    },
    "3120": {
        "file_id": 363,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/run_qq_capture.sh",
        "type": "filepath"
    },
    "3121": {
        "file_id": 363,
        "content": "This code sets up a man-in-the-middle (MITM) proxy using MitmProxy, listening on port 8050 and logging all captured traffic to 'qq.log'. It also enables WebSocket stream processing for the 'tv.danmaku.bili' application.",
        "type": "summary"
    },
    "3122": {
        "file_id": 363,
        "content": "mitmproxy --mode socks5 --listen-port 8050 -w qq.log --set stream_websocket=true\n# tv.danmaku.bili",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/run_qq_capture.sh:1-3"
    },
    "3123": {
        "file_id": 363,
        "content": "This code sets up a man-in-the-middle (MITM) proxy using MitmProxy, listening on port 8050 and logging all captured traffic to 'qq.log'. It also enables WebSocket stream processing for the 'tv.danmaku.bili' application.",
        "type": "comment"
    },
    "3124": {
        "file_id": 364,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/run_bilibili_qq_share_xml.sh",
        "type": "filepath"
    },
    "3125": {
        "file_id": 364,
        "content": "This code sets up a MitM proxy in Socks5 mode, listens on port 8050, and logs websocket activity for bilibili QQ share feature.",
        "type": "summary"
    },
    "3126": {
        "file_id": 364,
        "content": "mitmproxy --mode socks5 --listen-port 8050 -w bilibili_qq_xml_share.log --set stream_websocket=true\n# tv.danmaku.bili",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/run_bilibili_qq_share_xml.sh:1-3"
    },
    "3127": {
        "file_id": 364,
        "content": "This code sets up a MitM proxy in Socks5 mode, listens on port 8050, and logs websocket activity for bilibili QQ share feature.",
        "type": "comment"
    },
    "3128": {
        "file_id": 365,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py",
        "type": "filepath"
    },
    "3129": {
        "file_id": 365,
        "content": "The code utilizes go-cqhttp and Requests library to send XML-formatted rich media messages, targeting group chats with audio and QQ Music items, requiring a group ID. It allows Python users to send messages containing JSON or XML data to a web URL with dynamic content.",
        "type": "summary"
    },
    "3130": {
        "file_id": 365,
        "content": "baseUrl = \"http://0.0.0.0:5700\"\n# try to send xml to group.\n# ÁßÅËÅäÂèØ‰ª•Âèëxml ‰ΩÜÊòØÁæ§ËÅä‰∏çË°å Áæ§ËÅäÂè™ËÉΩÂèëÂä†ÂØÜÂ•ΩÈ™åËØÅÂ•ΩÁöÑjson\n# cover = \"http://pubminishare-30161.picsz.qpic.cn/d4ad36fa-833e-4018-b994-a2da810f2d54\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes'?><msg templateID=\"123\" url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" serviceID=\"1\" action=\"web\" actionData=\"\" a_actionData=\"\" i_actionData=\"\" brief=\"[QQÂ∞èÁ®ãÂ∫è]ÂìîÂì©ÂìîÂì©\" flag=\"0\"><item layout=\"2\"><picture cover=\"{}\"/><title>ÂìîÂì©ÂìîÂì©</title><summary>„ÄêCËØ≠Ë®Ä„Äë„ÄäÂ∏¶‰Ω†Â≠¶CÂ∏¶‰Ω†È£û„Äã</summary></item><source url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" icon=\"https://open.gtimg.cn/open/app_icon/00/95/17/76/100951776_100_m.png?t=1657091104\" name=\"ÂìîÂì©ÂìîÂì©\" appid=\"0\" action=\"web\" actionData=\"\" a_actionData=\"tencent0://\" i_actionData=\"\"/></msg>\"\"\".format(\n# cover)\ngroup = 543780931\nimport requests\nurl = baseUrl + \"/send_group_msg\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:1-12"
    },
    "3131": {
        "file_id": 365,
        "content": "The code attempts to send an XML message to a group chat using the GOCQHTTP API. The message contains a template with a cover image, title, and summary, promoting a video from Bilibili. The message can only be sent in group chats and not private chats. It uses the base URL \"http://0.0.0.0:5700\" and requires the group ID as input for sending the XML message.",
        "type": "comment"
    },
    "3132": {
        "file_id": 365,
        "content": "# message = 'test'\n# content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?><msg serviceID=\"2\" templateID=\"1\" action=\"web\" brief=\"\" sourceMsgId=\"0\" url=\"https://qm.qq.com/cgi-bin/qm/qr?k=wyw10nH14NxBzBmM2DZK_bj9y9yX-IJL\" flag=\"0\" adverSign=\"0\" multiMsgFlag=\"0\"><item layout=\"2\"><audio cover=\"https://python3student.github.io/img/avatar.jpg\" src=\"https://music.163.com/song/media/outer/url?id=449818326.mp3\" /><title>Èπø be free</title><summary>„Äé‰ΩúËÄÖ„ÄèÁ•ûÂ•á</summary></item><source name=\"Á•ûÂ•áÊ∞∏ËøúÁöÑÁ•ûÔºÅ\" icon=\"https://python3student.github.io/img/avatar.jpg\" url=\"https://python3student.github.io/img/avatar.jpg\" action=\"app\" a_actionData=\"com.netease.cloudmusic\" i_actionData=\"tencent100495085://\" appid=\"100495085\" /></msg>\"\"\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes' ?><msg serviceID=\"2\" templateID=\"1\" action=\"web\" brief=\"&#91;ÂàÜ‰∫´&#93; ÂçÅÂπ¥\" sourceMsgId=\"0\" url=\"https://i.y.qq.com/v8/playsong.html?_wv=1&amp;songid=4830342&amp;souce=qqshare&amp;source=qqshare&amp;ADTAG=qqsh",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:13-15"
    },
    "3133": {
        "file_id": 365,
        "content": "This code is setting a message and content for an XML-formatted message to be sent using the gocqhttp package. The message includes an image, audio, and links to a music source and app ID. It will be used for sending a rich media message with QQ Gocqhttp.",
        "type": "comment"
    },
    "3134": {
        "file_id": 365,
        "content": "are\" flag=\"0\" adverSign=\"0\" multiMsgFlag=\"0\" ><item layout=\"2\"><audio cover=\"http://imgcache.qq.com/music/photo/album_500/26/500_albumpic_89526_0.jpg\" src=\"http://ws.stream.qqmusic.qq.com/C400003mAan70zUy5O.m4a?guid=1535153710&amp;vkey=D5315B8C0603653592AD4879A8A3742177F59D582A7A86546E24DD7F282C3ACF81526C76E293E57EA1E42CF19881C561275D919233333ADE&amp;uin=&amp;fromtag=3\" /><title>ÂçÅÂπ¥</title><summary>ÈôàÂ•ïËøÖ</summary></item><source name=\"QQÈü≥‰πê\" icon=\"https://i.gtimg.cn/open/app_icon/01/07/98/56/1101079856_100_m.png\" url=\"http://web.p.qq.com/qqmpmobile/aio/app.html?id=1101079856\" action=\"app\"  a_actionData=\"com.tencent.qqmusic\" i_actionData=\"tencent1101079856://\" appid=\"1101079856\" /></msg>\"\"\"\n# content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><msg serviceID=\"1\" templateID=\"1\" action=\"\" brief=\"QQÁ∫¢ÂåÖ\" sourceMsgId=\"0\" flag=\"8\" adverSign=\"0\" multiMsgFlag=\"0\"><item layout=\"6\"><title color=\"#EE00EE\" style=\"4\">ÈòøÊ∑±ÁúüÂ∏Ö</title><summary color=\"#9A32CD\">ÊòØ‰∏çÊòØÂæàÊó†ËØ≠</summary><picture cover=\"http:",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:15-16"
    },
    "3135": {
        "file_id": 365,
        "content": "This code is creating an XML string for a QQ goCQHttp message, featuring an audio track and an item from QQ Music. It includes the audio source, title, summary, and source information. The message has a service ID of 1, template ID of 1, and a flag value of 8.",
        "type": "comment"
    },
    "3136": {
        "file_id": 365,
        "content": "//t1.hddhhn.com/uploads/tu/20150507/20405-eBE9jO.jpg\" action=\"web\" url=\"http://url.cn/5g4eOiY\" w=\"0\" h=\"0\"/></item></msg>\"\"\"\n# message = \"[CQ:xml,data={}]\".format(content) # xml thing.\n# content=\"\"\"{\"app\":\"com.tencent.miniapp_01\"&#44;\"desc\":\"ÂìîÂì©ÂìîÂì©\"&#44;\"view\":\"view_8C8E89B49BE609866298ADDFF2DBABA4\"&#44;\"ver\":\"1.0.0.19\"&#44;\"prompt\":\"&#91;QQÂ∞èÁ®ãÂ∫è&#93;ÂìîÂì©ÂìîÂì©\"&#44;\"meta\":{\"detail_1\":{\"appType\":0&#44;\"appid\":\"1109937557\"&#44;\"desc\":\"Appium ÊâãÊú∫ App Ëá™Âä®Âåñ + Python\"&#44;\"gamePoints\":\"\"&#44;\"gamePointsUrl\":\"\"&#44;\"host\":{\"nick\":\"Yukio\"&#44;\"uin\":1281727431}&#44;\"icon\":\"https:\\/\\/open.gtimg.cn\\/open\\/app_icon\\/00\\/95\\/17\\/76\\/100951776_100_m.png?t=1659061321\"&#44;\"preview\":\"pubminishare-30161.picsz.qpic.cn\\/a0b8d306-5b6d-4b27-9539-021a2adcc264\"&#44;\"qqdocurl\":\"https:\\/\\/b23.tv\\/4hWdtET?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1665924308147\"&#44;\"scene\":1036&#44;\"shareTemplateData\":{}&#44;\"shareTemplateId\":\"8C8E89B49BE609866298ADDFF2DBABA4\"&#44;\"showLi",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:16-18"
    },
    "3137": {
        "file_id": 365,
        "content": "This code is formatting a JSON message with app details, prompt, and other information. It will be used in QQ gocqhttp post XML function.",
        "type": "comment"
    },
    "3138": {
        "file_id": 365,
        "content": "ttleTail\":\"\"&#44;\"title\":\"ÂìîÂì©ÂìîÂì©\"&#44;\"url\":\"m.q.qq.com\\/a\\/s\\/ea6d34b58a6a6209cd5088c436a254de\"}}&#44;\"config\":{\"autoSize\":0&#44;\"ctime\":1665924338&#44;\"forward\":1&#44;\"height\":0&#44;\"token\":\"a2458ec4231b7b8204c717f3a955a9fc\"&#44;\"type\":\"normal\"&#44;\"width\":0}}\"\"\"\ncontent = \"\"\"{\"app\":\"com.tencent.structmsg\"&#44;\"desc\":\"Êñ∞Èóª\"&#44;\"view\":\"news\"&#44;\"ver\":\"0.0.0.1\"&#44;\"prompt\":\"&#91;ÂàÜ‰∫´&#93;ÂìîÂì©ÂìîÂì©\"&#44;\"meta\":{\"news\":{\"action\":\"\"&#44;\"android_pkg_name\":\"\"&#44;\"app_type\":1&#44;\"appid\":100951776&#44;\"ctime\":1666081902&#44;\"desc\":\"Â§ñÂõΩÂçö‰∏ªËã±ÊñáËÆ≤Ëß£Ôºö‰∫åÂçÅÂ§ß‰∏∫‰ªÄ‰πàÂ¶ÇÊ≠§ÈáçË¶ÅÔºü\"&#44;\"jumpUrl\":\"https:\\/\\/b23.tv\\/B64KMQq?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1666081860133\"&#44;\"preview\":\"https:\\/\\/pic.ugcimg.cn\\/58a74c8432a80e7e2de612e6e53e37f3\\/jpg1\"&#44;\"source_icon\":\"https:\\/\\/open.gtimg.cn\\/open\\/app_icon\\/00\\/95\\/17\\/76\\/100951776_100_m.png?t=1659061321\"&#44;\"source_url\":\"\"&#44;\"tag\":\"ÂìîÂì©ÂìîÂì©\"&#44;\"title\":\"ÂìîÂì©ÂìîÂì©\"&#44;\"uin\":1281727431}}&#44;\"config\":{\"ctime\":1666081902&#44;\"forward\":true&#44;\"token\":\"d7cc3a93e7c3a9acd1c8662157e3e5fb\"&#44;\"type\":\"normal\"}}\"\"\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:18-19"
    },
    "3139": {
        "file_id": 365,
        "content": "This code contains two JSON strings representing messages in a chat application. The first message is from QQ and includes title, URL, and config details, while the second message is for sharing news on bilibili and has app, desc, view, ver, prompt, meta (with news info), config details, and more. Both messages contain timestamps, tokens, and forward options.",
        "type": "comment"
    },
    "3140": {
        "file_id": 365,
        "content": "# content = \"\"\"{\"app\":\"com.tencent.structmsg\"&#44;\"desc\":\"Èü≥‰πê\"&#44;\"view\":\"music\"&#44;\"ver\":\"0.0.0.1\"&#44;\"prompt\":\"\"&#44;\"meta\":{}}\"\"\"\n# content = (\n    # \"\"\"{\"app\":\"com.tencent.structmsg\",\"desc\":\"\",\"view\":\"singleImg\",\"ver\":\"0.0.0.1\",\"prompt\":\"ÈÇ™Â∞ëQQXMLËÆ∫Âùõ\",\"appID\":\"\",\"sourceName\":\"\",\"actionData\":\"\",\"actionData_A\":\"\",\"sourceUrl\":\"\",\"meta\":{\"singleImg\":{\"mainImage\":\"https://gchat.qpic.cn/gchatpic_new/3020005669/916530575-2949639428-6E45D21EADE33511C565E25AB432AB59/0?term=2\",\"mainUrl\":\"\"}},\"text\":\"\",\"extraApps\":[],\"sourceAd\":\"\",\"config\":{\"forward\":1}}\"\"\".replace(\n#         \"&\", \"&amp;\"\n#     )\n#     .replace(\",\", \"&#44;\")\n#     .replace(\"[\", \"&#91;\")\n#     .replace(\"]\", \"&#93;\")\n# )\n# the token is likely to be some checksum, md5 or something. some aes/rsa?\nmessage = \"[CQ:json,data={}]\".format(content)  # json thing.\n# message = \"[CQ:tts,text=Âò§Âò§Âò§]\"\n# content = \"\"\"<?xml version='1.0' encoding='UTF-8' standalone='yes' ?><msg serviceID=\"2\" templateID=\"1\" action=\"web\" brief=\"&#91;ÂàÜ‰∫´&#93; ÂçÅÂπ¥\" sourceMsgId=\"0\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:20-34"
    },
    "3141": {
        "file_id": 365,
        "content": "This code is likely related to a messaging application and involves sending messages containing XML or JSON data, possibly for a chat bot or communication tool. It includes functions for formatting the message content and converting it into CQ:json or CQ:tts formats. The content of the messages seems to be dynamic and can contain various types of data like app information, descriptions, images, and text prompts.",
        "type": "comment"
    },
    "3142": {
        "file_id": 365,
        "content": " url=\"http://music.163.com/m/song/409650368\" flag=\"0\" adverSign=\"0\" multiMsgFlag=\"0\" ><item layout=\"2\"><audio cover=\"http://p2.music.126.net/g-Qgb9ibk9Wp_0HWra0xQQ==/16636710440565853.jpg?param=90y90\" src=\"https://music.163.com/song/media/outer/url?id=409650368.mp3\" /><title>ÂçÅÂπ¥</title><summary>ÈªÑÊ¢¶‰πã</summary></item><source name=\"ÁΩëÊòì‰∫ëÈü≥‰πê\" icon=\"https://pic.rmb.bdstatic.com/911423bee2bef937975b29b265d737b3.png\" url=\"http://web.p.qq.com/qqmpmobile/aio/app.html?id=1101079856\" action=\"app\" a_actionData=\"com.netease.cloudmusic\" i_actionData=\"tencent100495085://\" appid=\"100495085\" /></msg>\"\"\"\n# message = '[CQ:xml,data={}]'.format(content)\ndata = {\"group_id\": group, \"message\": message, \"auto_escape\": False}\nr = requests.post(url, data=data)\nprint(r.json())\n# cannot send json. wtf?\n# ËØ∑ÂèÇËÄÉ go-cqhttp Á´ØËæìÂá∫",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/qq_gocqhttp_post_xml.py:34-40"
    },
    "3143": {
        "file_id": 365,
        "content": "The code is constructing an XML message and sending it to a web URL using the Requests library in Python. It uses go-cqhttp for communication, and the code includes a group ID and a message formatted as XML data. The response from the server is printed in JSON format.",
        "type": "comment"
    },
    "3144": {
        "file_id": 366,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_xml_message.py",
        "type": "filepath"
    },
    "3145": {
        "file_id": 366,
        "content": "The given code uses the xmltodict library to parse an XML message containing Bilibili video sharing information, then prints its details. The \"print_xml_message\" function handles exceptions during parsing and printing.",
        "type": "summary"
    },
    "3146": {
        "file_id": 366,
        "content": "# arc_share\nxml_msg='{\"Content\":\"\\\\u003c?xml version=\\'1.0\\' encoding=\\'UTF-8\\' standalone=\\'yes\\'?\\\\u003e\\\\u003cmsg templateID=\\\\\"123\\\\\" url=\\\\\"https://b23.tv/5K7qh7K?share_medium=android\\\\u0026amp;share_source=qq\\\\u0026amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A\\\\u0026amp;ts=1657521142233\\\\\" serviceID=\\\\\"1\\\\\" action=\\\\\"web\\\\\" actionData=\\\\\"\\\\\" a_actionData=\\\\\"\\\\\" i_actionData=\\\\\"\\\\\" brief=\\\\\"[QQÂ∞èÁ®ãÂ∫è]ÂìîÂì©ÂìîÂì©\\\\\" flag=\\\\\"0\\\\\"\\\\u003e\\\\u003citem layout=\\\\\"2\\\\\"\\\\u003e\\\\u003cpicture cover=\\\\\"http://pubminishare-30161.picsz.qpic.cn/d4ad36fa-833e-4018-b994-a2da810f2d54\\\\\"/\\\\u003e\\\\u003ctitle\\\\u003eÂìîÂì©ÂìîÂì©\\\\u003c/title\\\\u003e\\\\u003csummary\\\\u003e„ÄêCËØ≠Ë®Ä„Äë„ÄäÂ∏¶‰Ω†Â≠¶CÂ∏¶‰Ω†È£û„Äã\\\\u003c/summary\\\\u003e\\\\u003c/item\\\\u003e\\\\u003csource url=\\\\\"https://b23.tv/5K7qh7K?share_medium=android\\\\u0026amp;share_source=qq\\\\u0026amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A\\\\u0026amp;ts=1657521142233\\\\\" icon=\\\\\"https://open.gtimg.cn/open/app_icon/00/95/17/76/100951776_100_m.png?t=1657091104\\\\\" name=\\\\\"ÂìîÂì©ÂìîÂì©\\\\\" appid=\\\\\"0\\\\\" action=\\",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_xml_message.py:1-2"
    },
    "3147": {
        "file_id": 366,
        "content": "This code represents an XML message with various attributes and data for sharing a Bilibili video on QQ. It contains the template ID, URL to share the video, service ID, action type and data, brief description of the shared content, and more specific details about the item being shared, such as its cover image and title.",
        "type": "comment"
    },
    "3148": {
        "file_id": 366,
        "content": "\\\"web\\\\\" actionData=\\\\\"\\\\\" a_actionData=\\\\\"tencent0://\\\\\" i_actionData=\\\\\"\\\\\"/\\\\u003e\\\\u003c/msg\\\\u003e\"}'\ncontentDict = eval(xml_msg)\ncontent = contentDict['Content']\nprint(content) # let's understand this shit.\n\"\"\"\n<?xml version='1.0' encoding='UTF-8' standalone='yes'?><msg templateID=\"123\" url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" serviceID=\"1\" action=\"web\" actionData=\"\" a_actionData=\"\" i_actionData=\"\" brief=\"[QQÂ∞èÁ®ãÂ∫è]ÂìîÂì©ÂìîÂì©\" flag=\"0\"><item layout=\"2\"><picture cover=\"http://pubminishare-30161.picsz.qpic.cn/d4ad36fa-833e-4018-b994-a2da810f2d54\"/><title>ÂìîÂì©ÂìîÂì©</title><summary>„ÄêCËØ≠Ë®Ä„Äë„ÄäÂ∏¶‰Ω†Â≠¶CÂ∏¶‰Ω†È£û„Äã</summary></item><source url=\"https://b23.tv/5K7qh7K?share_medium=android&amp;share_source=qq&amp;bbid=XY46C7C4C74C8D645671EF7E8F4CC7810054A&amp;ts=1657521142233\" icon=\"https://open.gtimg.cn/open/app_icon/00/95/17/76/100951776_100_m.png?t=1657091104\" name=\"ÂìîÂì©ÂìîÂì©\" appid=\"0\" action=\"web\" actionData=\"\" a_actionData=\"tencent0://\" i_actionData=\"\"/></msg>",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_xml_message.py:2-9"
    },
    "3149": {
        "file_id": 366,
        "content": "This code is parsing an XML message, specifically for QQ share, extracting the content and printing it. The message contains information about a video recommendation from Bilibili, including title, summary, URL, and more.",
        "type": "comment"
    },
    "3150": {
        "file_id": 366,
        "content": "\"\"\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_xml_message.py:11-11"
    },
    "3151": {
        "file_id": 366,
        "content": "The code defines a function called \"print_xml_message\" that takes in an XML message and prints it. It uses the xmltodict library to parse the XML message into a Python dictionary format, then iterates over each element in the dictionary and prints its text content. The code also handles any potential exceptions that may occur during parsing or printing of the XML message.",
        "type": "comment"
    },
    "3152": {
        "file_id": 367,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_bilibili_json.py",
        "type": "filepath"
    },
    "3153": {
        "file_id": 367,
        "content": "The code presents a JSON structure with app details and metadata for a QQ mini-app, and replaces spaces with \"&#44\" potentially for formatting or data manipulation before sending to QQ.",
        "type": "summary"
    },
    "3154": {
        "file_id": 367,
        "content": "content=\"\"\"{\"app\":\"com.tencent.miniapp_01\"&#44;\"desc\":\"ÂìîÂì©ÂìîÂì©\"&#44;\"view\":\"view_8C8E89B49BE609866298ADDFF2DBABA4\"&#44;\"ver\":\"1.0.0.19\"&#44;\"prompt\":\"&#91;QQÂ∞èÁ®ãÂ∫è&#93;ÂìîÂì©ÂìîÂì©\"&#44;\"meta\":{\"detail_1\":{\"appType\":0&#44;\"appid\":\"1109937557\"&#44;\"desc\":\"Appium ÊâãÊú∫ App Ëá™Âä®Âåñ + Python\"&#44;\"gamePoints\":\"\"&#44;\"gamePointsUrl\":\"\"&#44;\"host\":{\"nick\":\"Yukio\"&#44;\"uin\":1281727431}&#44;\"icon\":\"https:\\/\\/open.gtimg.cn\\/open\\/app_icon\\/00\\/95\\/17\\/76\\/100951776_100_m.png?t=1659061321\"&#44;\"preview\":\"pubminishare-30161.picsz.qpic.cn\\/a0b8d306-5b6d-4b27-9539-021a2adcc264\"&#44;\"qqdocurl\":\"https:\\/\\/b23.tv\\/4hWdtET?share_medium=android&amp;share_source=qq&amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA&amp;ts=1665924308147\"&#44;\"scene\":1036&#44;\"shareTemplateData\":{}&#44;\"shareTemplateId\":\"8C8E89B49BE609866298ADDFF2DBABA4\"&#44;\"showLittleTail\":\"\"&#44;\"title\":\"ÂìîÂì©ÂìîÂì©\"&#44;\"url\":\"m.q.qq.com\\/a\\/s\\/ea6d34b58a6a6209cd5088c436a254de\"}}&#44;\"config\":{\"autoSize\":0&#44;\"ctime\":1665924338&#44;\"forward\":1&#44;\"height\":0&#44;\"token\":\"a2458ec4231b7b8204c717f3a955a9fc\"&#44;\"type\":\"normal\"&#44;\"width\":0}}\"\"\"",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_bilibili_json.py:1-1"
    },
    "3155": {
        "file_id": 367,
        "content": "This code represents a JSON structure containing various app details and metadata. It includes information such as app name, version, icon URL, description, and share template data for a QQ mini-app with the app ID \"1109937557\" and nickname \"Yukio\".",
        "type": "comment"
    },
    "3156": {
        "file_id": 367,
        "content": "# i can see that all spaces have been replaced by &#44.",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/print_bilibili_json.py:2-2"
    },
    "3157": {
        "file_id": 367,
        "content": "This code snippet is replacing all spaces in the input with \"&#44\" which could be used for formatting or data manipulation purposes before sending it to QQ.",
        "type": "comment"
    },
    "3158": {
        "file_id": 368,
        "content": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/new_xml.py",
        "type": "filepath"
    },
    "3159": {
        "file_id": 368,
        "content": "This code extracts content from a dictionary representing an XML message, assigns it to a variable, and prints it, possibly for debugging or validation purposes.",
        "type": "summary"
    },
    "3160": {
        "file_id": 368,
        "content": "contentDictString = {\"Content\":\"\\u003c?xml version='1.0' encoding='UTF-8' standalone='yes'?\\u003e\\u003cmsg templateID=\\\"123\\\" url=\\\"https://b23.tv/uHML5mi?share_medium=android\\u0026amp;share_source=qq\\u0026amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA\\u0026amp;ts=1666023406285\\\" serviceID=\\\"1\\\" action=\\\"web\\\" actionData=\\\"\\\" a_actionData=\\\"\\\" i_actionData=\\\"\\\" brief=\\\"[QQÂ∞èÁ®ãÂ∫è]ÂìîÂì©ÂìîÂì©\\\" flag=\\\"0\\\"\\u003e\\u003citem layout=\\\"2\\\"\\u003e\\u003cpicture cover=\\\"http://pubminishare-30161.picsz.qpic.cn/c099bdd6-9e61-43d9-b82f-c9d5354ace68\\\"/\\u003e\\u003ctitle\\u003eÂìîÂì©ÂìîÂì©\\u003c/title\\u003e\\u003csummary\\u003e„ÄêAIÂä®Áîª„ÄëÂ¶ÆÈú≤PVÂä®Áîª È£éËΩ¨Êç¢„ÄêNovelAI„Äë\\u003c/summary\\u003e\\u003c/item\\u003e\\u003csource url=\\\"https://b23.tv/uHML5mi?share_medium=android\\u0026amp;share_source=qq\\u0026amp;bbid=XY1BB721B1F97348DBDE4297FE1B4ABE26BAA\\u0026amp;ts=1666023406285\\\" icon=\\\"http://miniapp.gtimg.cn/public/appicon/432b76be3a548fc128acaa6c1ec90131_200.jpg\\\" name=\\\"ÂìîÂì©ÂìîÂì©\\\" appid=\\\"0\\\" action=\\\"web\\\" actionData=\\\"\\\" a_actionData=\\\"tencent0://\\\" i_actionData=\\\"\\\"/\\u003e\\u003c/msg\\u003e\"}",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/new_xml.py:1-1"
    },
    "3161": {
        "file_id": 368,
        "content": "This code contains a dictionary named \"contentDictString\" that represents an XML message with information about a video recommendation from Bilibili, including the template ID, URL, service ID, action, action data, i_actionData, brief, layout, picture, title, summary, source URL, icon, name, appid, and more.",
        "type": "comment"
    },
    "3162": {
        "file_id": 368,
        "content": "contentDict = contentDictString\ncontent = contentDict['Content']\nprint(content)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/xml_and_json_qq_send/new_xml.py:3-6"
    },
    "3163": {
        "file_id": 368,
        "content": "Content from the string is being assigned to the dictionary variable 'contentDict'. The 'Content' key in this dictionary is then extracted and stored in the variable 'content', which is finally printed. This code appears to print the content of a certain element in a file, potentially for debugging or validation purposes.",
        "type": "comment"
    },
    "3164": {
        "file_id": 369,
        "content": "/tests/bilibili_video_recommendation_server/sample_video/tts.py",
        "type": "filepath"
    },
    "3165": {
        "file_id": 369,
        "content": "This Python script converts text to speech using argparse, argues SSML input, and connects to Microsoft Cognitive Services TTS endpoint. It also handles time fixes, timestamps, and async WebSocket communication with potential API key authentication, runs on an asyncio event loop, and writes audio responses to a file.",
        "type": "summary"
    },
    "3166": {
        "file_id": 369,
        "content": "# Êù•Ê∫ê https://github.com/OS984/DiscordBotBackend/blob/3b06b8be39e4dbc07722b0afefeee4c18c136102/NeuralTTS.py\n# A completely innocent attempt to borrow proprietary Microsoft technology for a much better TTS experience\nimport requests\nimport websockets\nimport asyncio\nfrom datetime import datetime\nimport time\nimport re\nimport uuid\nimport argparse\n'''ÂëΩ‰ª§Ë°åÂèÇÊï∞Ëß£Êûê'''\ndef parseArgs():\n    parser = argparse.ArgumentParser(description='text2speech')\n    parser.add_argument('--input', dest='input', help='SSML(ËØ≠Èü≥ÂêàÊàêÊ†áËÆ∞ËØ≠Ë®Ä)ÁöÑË∑ØÂæÑ', type=str, required=True)\n    parser.add_argument('--output', dest='output', help='‰øùÂ≠òmp3Êñá‰ª∂ÁöÑË∑ØÂæÑ', type=str, required=False)\n    args = parser.parse_args()\n    return args\n# Fix the time to match Americanisms\ndef hr_cr(hr):\n    corrected = (hr - 1) % 24\n    return str(corrected)\n# Add zeros in the right places i.e 22:1:5 -> 22:01:05\ndef fr(input_string):\n    corr = ''\n    i = 2 - len(input_string)\n    while (i > 0):\n        corr += '0'\n        i -= 1\n    return corr + input_string\n# Generate X-Timestamp all correctly formatted",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:1-35"
    },
    "3167": {
        "file_id": 369,
        "content": "This code is a Python file that utilizes the `argparse` library to parse command-line arguments. The purpose of this script seems to be text-to-speech conversion, where it accepts an SSML (Speech Synthesis Markup Language) input file and outputs an MP3 audio file. It also includes functions for fixing time formats to match American conventions and generating formatted timestamps.",
        "type": "comment"
    },
    "3168": {
        "file_id": 369,
        "content": "def getXTime():\n    now = datetime.now()\n    return fr(str(now.year)) + '-' + fr(str(now.month)) + '-' + fr(str(now.day)) + 'T' + fr(hr_cr(int(now.hour))) + ':' + fr(str(now.minute)) + ':' + fr(str(now.second)) + '.' + str(now.microsecond)[:3] + 'Z'\n# Async function for actually communicating with the websocket\nasync def transferMsTTSData(SSML_text, outputPath):\n    # endpoint1 = \"https://azure.microsoft.com/en-gb/services/cognitive-services/text-to-speech/\"\n    # r = requests.get(endpoint1)\n    # main_web_content = r.text\n    # # They hid the Auth key assignment for the websocket in the main body of the webpage....\n    # token_expr = re.compile('token: \\\"(.*?)\\\"', re.DOTALL)\n    # Auth_Token = re.findall(token_expr, main_web_content)[0]\n    # req_id = str('%032x' % random.getrandbits(128)).upper()\n    # req_id is generated by uuid.\n    req_id = uuid.uuid4().hex.upper()\n    print(req_id)\n    # wss://eastus.api.speech.microsoft.com/cognitiveservices/websocket/v1?TrafficType=AzureDemo&Authorization=bearer%20undefined&X-ConnectionId=577D1E595EEB45979BA26C056A519073",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:36-52"
    },
    "3169": {
        "file_id": 369,
        "content": "This code defines two functions: `getXTime` and `transferMsTTSData`. The `getXTime` function returns the current date and time in a specific format. The `transferMsTTSData` function is an asynchronous function responsible for communicating with a WebSocket endpoint, potentially using an API key to authenticate the request. It generates a unique ID (req_id) and prints it before potentially making the WebSocket connection.",
        "type": "comment"
    },
    "3170": {
        "file_id": 369,
        "content": "    # endpoint2 = \"wss://eastus.tts.speech.microsoft.com/cognitiveservices/websocket/v1?Authorization=\" + \\\n    #     Auth_Token + \"&X-ConnectionId=\" + req_id\n    # ÁõÆÂâçËØ•Êé•Âè£Ê≤°ÊúâËÆ§ËØÅÂèØËÉΩÂæàÂø´Â§±Êïà\n    endpoint2 = f\"wss://eastus.api.speech.microsoft.com/cognitiveservices/websocket/v1?TrafficType=AzureDemo&Authorization=bearer%20undefined&X-ConnectionId={req_id}\"\n    async with websockets.connect(endpoint2) as websocket:\n        payload_1 = '{\"context\":{\"system\":{\"name\":\"SpeechSDK\",\"version\":\"1.12.1-rc.1\",\"build\":\"JavaScript\",\"lang\":\"JavaScript\",\"os\":{\"platform\":\"Browser/Linux x86_64\",\"name\":\"Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\",\"version\":\"5.0 (X11)\"}}}}'\n        message_1 = 'Path : speech.config\\r\\nX-RequestId: ' + req_id + '\\r\\nX-Timestamp: ' + \\\n            getXTime() + '\\r\\nContent-Type: application/json\\r\\n\\r\\n' + payload_1\n        await websocket.send(message_1)\n        payload_2 = '{\"synthesis\":{\"audio\":{\"metadataOptions\":{\"sentenceBoundaryEnabled\":false,\"wordBoundaryEnabled\":false},\"outputFormat\":\"audio-16khz-32kbitrate-mono-mp3\"}}}'",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:53-63"
    },
    "3171": {
        "file_id": 369,
        "content": "This code connects to the Microsoft Cognitive Services TTS (Text-to-Speech) websocket endpoint, sends two payloads for speech synthesis, and sets various headers such as Authorization, X-ConnectionId, Content-Type, etc. The current authentication may expire soon, so a new temporary endpoint is used instead of the original one.",
        "type": "comment"
    },
    "3172": {
        "file_id": 369,
        "content": "        message_2 = 'Path : synthesis.context\\r\\nX-RequestId: ' + req_id + '\\r\\nX-Timestamp: ' + \\\n            getXTime() + '\\r\\nContent-Type: application/json\\r\\n\\r\\n' + payload_2\n        await websocket.send(message_2)\n        # payload_3 = '<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xmlns:emo=\"http://www.w3.org/2009/10/emotionml\" version=\"1.0\" xml:lang=\"en-US\"><voice name=\"' + voice + '\"><mstts:express-as style=\"General\"><prosody rate=\"'+spd+'%\" pitch=\"'+ptc+'%\">'+ msg_content +'</prosody></mstts:express-as></voice></speak>'\n        payload_3 = SSML_text\n        message_3 = 'Path: ssml\\r\\nX-RequestId: ' + req_id + '\\r\\nX-Timestamp: ' + \\\n            getXTime() + '\\r\\nContent-Type: application/ssml+xml\\r\\n\\r\\n' + payload_3\n        await websocket.send(message_3)\n        # Checks for close connection message\n        end_resp_pat = re.compile('Path:turn.end')\n        audio_stream = b''\n        while(True):\n            response = await websocket.recv()",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:64-78"
    },
    "3173": {
        "file_id": 369,
        "content": "Sends text to TTS service for synthesis and awaits response. Stores the SSML XML for audio customization. Sends SSML XML payload for final audio output generation. Continuously receives response from websocket until 'turn.end' path detected, storing data in audio_stream variable.",
        "type": "comment"
    },
    "3174": {
        "file_id": 369,
        "content": "            print('receiving...')\n            # Make sure the message isn't telling us to stop\n            if (re.search(end_resp_pat, str(response)) == None):\n                # Check if our response is text data or the audio bytes\n                if type(response) == type(bytes()):\n                    # Extract binary data\n                    try:\n                        needle = b'Path:audio\\r\\n'\n                        start_ind = response.find(needle) + len(needle)\n                        audio_stream += response[start_ind:]\n                    except:\n                        pass\n            else:\n                break\n        with open(f'{outputPath}.mp3', 'wb') as audio_out:\n            audio_out.write(audio_stream)\nasync def mainSeq(SSML_text, outputPath):\n    await transferMsTTSData(SSML_text, outputPath)\ndef get_SSML(path):\n    with open(path,'r',encoding='utf-8') as f:\n        return f.read()\nif __name__ == \"__main__\":\n    args = parseArgs()\n    SSML_text = get_SSML(args.input)\n    output_path = args.output if args.output else 'output_'+ str(int(time.time()*1000))",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:79-107"
    },
    "3175": {
        "file_id": 369,
        "content": "This code snippet is a part of a TTS (Text-to-Speech) server implementation. It receives an audio response from the server, checks if it's text or binary data, and writes the audio to a file. The `mainSeq` function initiates the transfer process by calling `transferMsTTSData` function with SSML text and output path. The `get_SSML` function reads SSML text from input file. The code is run as a main program after parsing command-line arguments using `parseArgs()`.",
        "type": "comment"
    },
    "3176": {
        "file_id": 369,
        "content": "    asyncio.get_event_loop().run_until_complete(mainSeq(SSML_text, output_path))\n    print('completed')\n    # python tts.py --input SSML.xml\n    # python tts.py --input SSML.xml --output ‰øùÂ≠òÊñá‰ª∂Âêç",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/tts.py:108-111"
    },
    "3177": {
        "file_id": 369,
        "content": "This code calls the `mainSeq` function with SSML text and output path, using asyncio event loop to run until completion. It prints \"completed\" upon execution. The two command examples show how to input an SSML file and optionally specify an output filename.",
        "type": "comment"
    },
    "3178": {
        "file_id": 370,
        "content": "/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py",
        "type": "filepath"
    },
    "3179": {
        "file_id": 370,
        "content": "This code sets up a video processing task with image overlay, fade transition, and audio, saving a JSON object for Editly template and running the software using xvfb in subprocess.",
        "type": "summary"
    },
    "3180": {
        "file_id": 370,
        "content": "# maybe this time you can burn uploader logo to the video\n# the title of the video, intro, outro.\nvideo_path = \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/sample_video/sample_video.mp4\"\nup_image_path = (\n    \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/up_image.jpg\"\n)\noutput_path = \"output.mp4\"\nfontPath = \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/wqy-microhei0.ttf\"\ncat_image = (\n    \"/root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/cat_image.jpg\"\n)\ntitle = \"‰∏ñ‰∏äÊâÄÊúâÁöÑÂ∞èÁå´\\n\\nÈÉΩÊòØÂ§©‰ΩøÂèòÁöÑÔºÅ\" # add newline, change it into another catchy title, as compliment.\naudio_path = \"output.mp3.mp3\"\naudio_duration = 3.31\ntemplate_name = \"template.json\"\nfrom caer.video.frames_and_fps import get_duration, get_res\nvideo_duration = get_duration(video_path)\nvideo_width, video_height = get_res(video_path)\n# we shall use editly to do this job shall we?\nmin_video_scalar = min(video_width, video_height)\nup_image_scalar = int(min_video_scalar * 0.2)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py:1-24"
    },
    "3181": {
        "file_id": 370,
        "content": "This code is setting up variables for video processing, such as the input video path, uploader logo path, output path, font path, and image path. It also includes a title, audio path, and template name. The code uses the get_duration() function to determine the video duration and get_res() to retrieve the video's width and height. Lastly, it calculates a minimum video scalar value for editing purposes using editly.",
        "type": "comment"
    },
    "3182": {
        "file_id": 370,
        "content": "up_image_width = up_image_scalar / video_width\nup_image_height = up_image_scalar / video_height\n# some parameters are using floating point numbers between 0 and 1\n# image overlay can be done in editly\n# no need to render that silly karaoke effects.\neditlyJson = {\n    \"outPath\": output_path,\n    \"width\": video_width,\n    \"height\": video_height,\n    \"fps\": 30,  # different from the default value.\n    \"fast\": True,  # just for preview. if not turning this on, will be too slow.\n    \"keepSourceAudio\": True,  # it does!\n    \"defaults\": {\n        \"transition\": {\n            \"duration\": 0.5,\n            \"name\": \"fade\",\n            \"audioOutCurve\": \"tri\",\n            \"audioInCurve\": \"tri\",\n        }\n    },\n    \"clips\": [\n        # {\n        #     \"duration\": 0.5,\n        #     \"layers\": [\n        #         # {\"type\": \"fill-color\", \"color\": \"#000000\"},\n        #         # {\"type\": \"detached-audio\", \"path\": audio_path}, # will make sure nothing visual presents.\n        #     ],\n        # },\n        # we disable this clip.\n        {",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py:25-57"
    },
    "3183": {
        "file_id": 370,
        "content": "This code sets up parameters for an editly job, which involves overlaying an image with specific dimensions and applying a fade transition effect. The video's audio will be kept, and the job is set to a fast preview mode.",
        "type": "comment"
    },
    "3184": {
        "file_id": 370,
        "content": "            \"duration\": audio_duration,\n            \"layers\": [\n                {\n                    \"type\": \"image-overlay\",\n                    \"path\": cat_image,\n                    \"position\": \"center\",\n                    \"width\": 1,\n                    \"height\": 1,\n                },\n                {\n                    # \"type\": \"title-background\",\n                    \"type\": \"title\",\n                    \"text\": title,\n                    # \"background\": \"#000000\",\n                    \"fontPath\": fontPath,\n                    \"textColor\": \"#FFFFFF\",\n                },\n                {\"type\": \"audio\", \"path\": audio_path},  # order matters!\n            ],\n        },\n        {\n            # \"transition\": \"fade\",  # or we just use random?\n            \"duration\": video_duration,\n            \"layers\": [\n                {\"type\": \"video\", \"path\": video_path},  # order is important.\n                {\n                    \"type\": \"image-overlay\",\n                    \"path\": up_image_path,\n                    \"position\": \"top-left\",",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py:58-86"
    },
    "3185": {
        "file_id": 370,
        "content": "This code is creating a video with a cat image overlay, title text, and an audio track. The order of layers is important, and the audio path comes first. The video is then transitioned with a fade effect and combined with another video file, along with an optional top-left image overlay.",
        "type": "comment"
    },
    "3186": {
        "file_id": 370,
        "content": "                    \"width\": up_image_width,  # float numbers.\n                    \"height\": up_image_height,\n                },\n            ],\n        },\n        {\"duration\": 0.5, \"layers\": [{\"type\": \"fill-color\", \"color\": \"#000000\"}]},\n    ],\n}\nfrom lazero.filesystem.io import writeJsonObjectToFile\nwriteJsonObjectToFile(template_name, editlyJson)\nimport subprocess\n# use xvfb you SOB\ncommand = [\n    \"xvfb-run\",\n    \"editly\",\n    template_name,\n]  # no need to specify --out outputPath here\nsubprocess.run(command)",
        "type": "code",
        "location": "/tests/bilibili_video_recommendation_server/sample_video/create_sample_video_with_fade_and_metadata.py:87-108"
    },
    "3187": {
        "file_id": 370,
        "content": "Code writes a JSON object for Editly video template, saves it to file, and runs the Editly software using subprocess with xvfb.",
        "type": "comment"
    },
    "3188": {
        "file_id": 371,
        "content": "/tests/post_numpy_array/server.py",
        "type": "filepath"
    },
    "3189": {
        "file_id": 371,
        "content": "The code sets up a FastAPI server on port 5463, defines an endpoint that receives an image and returns \"good\", and runs a non-blocking Uvicorn server.",
        "type": "summary"
    },
    "3190": {
        "file_id": 371,
        "content": "SERVER_PORT=5463\nif __name__ == '__main__':\n    # from pydantic import BaseModel\n    # import numpy as np\n    import numpy_serializer\n    # from typing import Union\n    # class Image(BaseModel):\n    #     image:Union[str,bytes]\n    from fastapi import FastAPI, Body\n    app = FastAPI()\n    @app.post(\"/\")\n    def receiveImage(image:bytes=Body(default=None),\n        isBytes:bool =False,\n    encoding:str='utf-8', debug:bool=False):\n        # return book\n        # print('image type:',type(image))\n        # print(image)\n        import urllib.parse\n        image = image.removeprefix(b'image=') # fuck man.\n        image = urllib.parse.unquote_to_bytes(image)\n        if debug:\n            print(\"isBytes:\",isBytes)\n        if not isBytes:\n            image = image.decode(encoding) #fuck?\n            # read image from path, url\n        else:\n            image = numpy_serializer.from_bytes(image)\n        if debug:\n            print('shape?',image.shape)\n            print('image?',image)\n        return \"good\"\n    import uvicorn\n ",
        "type": "code",
        "location": "/tests/post_numpy_array/server.py:2-39"
    },
    "3191": {
        "file_id": 371,
        "content": "This code is setting up a FastAPI server on port 5463. It defines an endpoint at the root (\"/\") that receives an image either in bytes or as a string, and returns \"good\" as a response. The image data can be decoded from bytes using numpy_serializer or read from a file or URL if it's received as a string.",
        "type": "comment"
    },
    "3192": {
        "file_id": 371,
        "content": "   # checking: https://9to5answer.com/python-how-to-use-fastapi-and-uvicorn-run-without-blocking-the-thread\n    def run(host='0.0.0.0',port=SERVER_PORT): \n        \"\"\"\n        This function to run configured uvicorn server.\n        \"\"\"\n        uvicorn.run(app=app, host=host, port=port)\n    run()",
        "type": "code",
        "location": "/tests/post_numpy_array/server.py:39-46"
    },
    "3193": {
        "file_id": 371,
        "content": "This function runs a configured Uvicorn server non-blocking, allowing concurrent tasks.",
        "type": "comment"
    },
    "3194": {
        "file_id": 372,
        "content": "/tests/post_numpy_array/client.py",
        "type": "filepath"
    },
    "3195": {
        "file_id": 372,
        "content": "Importing numpy, requests, and numpy_serializer; using SERVER_PORT from server module; creating a test image array; converting the image to bytes using numpy_serializer; sending the image data as a POST request to localhost; printing the response received. Includes a malformatted docstring function with textwrap usage.",
        "type": "summary"
    },
    "3196": {
        "file_id": 372,
        "content": "import numpy as np\nimport requests\nimport numpy_serializer\n# this is pure magic. shit.\nfrom server import SERVER_PORT\nimage = np.array([1,2,3])\nimage_bytes = numpy_serializer.to_bytes(image)\ndata = {'image':image_bytes}\nprint(\"BYTES?\", image_bytes)\nr = requests.post(\"http://localhost:{}\".format(SERVER_PORT),data=data,params={'isBytes':True,'debug':True})\nprint('RESPONSE?',r.text)\ndef docstring(): # malformat\n    import textwrap\n    a =\"\"\"\n    lmn\n    abcdefg \n    hijk\n    \"\"\"\n    print(a)\n    print()\n    print(textwrap.dedent(a))\n    # inspect.cleandoc\n    # https://9to5answer.com/how-to-remove-extra-indentation-of-python-triple-quoted-multi-line-strings\ndocstring()",
        "type": "code",
        "location": "/tests/post_numpy_array/client.py:1-28"
    },
    "3197": {
        "file_id": 372,
        "content": "Importing numpy, requests, and numpy_serializer; using SERVER_PORT from server module; creating a test image array; converting the image to bytes using numpy_serializer; sending the image data as a POST request to localhost; printing the response received. Includes a malformatted docstring function with textwrap usage.",
        "type": "comment"
    },
    "3198": {
        "file_id": 373,
        "content": "/tests/patch_requests_timeout/server.py",
        "type": "filepath"
    },
    "3199": {
        "file_id": 373,
        "content": "This code sets up a FastAPI server using uvicorn, listens on port 9341, and has a single route (\"/\") that returns \"hello world\" after a 10-second delay. The run() function is used to start the configured uvicorn server.",
        "type": "summary"
    }
}