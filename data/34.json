{
    "3400": {
        "file_id": 412,
        "content": "        l.dur = l.end_time - l.start_time\n        c1 = \"&H81F4FF&\"\n        c3 = \"&H199AAA&\"\n        # Change color if inline_fx is m1\n        if syl.inline_fx == \"m1\":\n            c1 = \"&H8282FF&\"\n            c3 = \"&H191AAA&\"\n        on_inline_effect_2 = \"\"\n        # Apply rotation if inline_fx is m2\n        if syl.inline_fx == \"m2\":\n            on_inline_effect_2 = \"\\\\t(0,%d,\\\\frz%.3f)\\\\t(%d,%d,\\\\frz0)\" % (\n                l.dur / 4,\n                random.uniform(-40, 40),\n                l.dur / 4,\n                l.dur,\n            )\n        l.text = (\n            \"{\\\\an5\\\\pos(%.3f,%.3f)%s\\\\t(0,80,\\\\fscx105\\\\fscy105\\\\1c%s\\\\3c%s)\\\\t(80,%d,\\\\fscx100\\\\fscy100\\\\1c%s\\\\3c%s)}%s\"\n            % (\n                syl.center,\n                syl.middle,\n                on_inline_effect_2,\n                c1,\n                c3,\n                l.dur - 80,\n                line.styleref.color1,\n                line.styleref.color3,\n                syl.text,\n            )\n        )\n        io.write_line(l)\n        # Animating star shape that jumps over the syllables",
        "type": "code",
        "location": "/tests/karaoke_effects/starJumping.py:86-122"
    },
    "3401": {
        "file_id": 412,
        "content": "This code applies colors and rotation to a star shape that jumps over syllables based on the inline_fx value. If inline_fx is \"m1\", it changes the colors; if inline_fx is \"m2,\" it applies rotation. The resulting star shape is then written to a file.",
        "type": "comment"
    },
    "3402": {
        "file_id": 412,
        "content": "        # Jump-in to the first syl\n        jump_height = 18\n        if syl.i == 0:\n            FU = FrameUtility(line.start_time - line.leadin / 2, line.start_time)\n            for s, e, i, n in FU:\n                l.start_time = s\n                l.end_time = e\n                frame_pct = i / n\n                x = syl.center - syl.width * (1 - frame_pct)\n                y = syl.top - math.sin(frame_pct * math.pi) * jump_height\n                alpha = 255\n                alpha += FU.add(0, syl.duration, -255)\n                alpha = Convert.alpha_dec_to_ass(int(alpha))\n                l.text = (\n                    \"{\\\\alpha%s\\\\pos(%.3f,%.3f)\\\\bord1\\\\blur1\\\\1c%s\\\\3c%s\\\\p1}%s\"\n                    % (alpha, x, y, c1, c3, star)\n                )\n                io.write_line(l)\n        # Jump to the next syl or to the end of line\n        jump_width = (\n            line.syls[syl.i + 1].center - syl.center\n            if syl.i != len(line.syls) - 1\n            else syl.width\n        )\n        # FU = FrameUtility(\n        #     line.start_time + syl.start_time, line.start_time + syl.end_time",
        "type": "code",
        "location": "/tests/karaoke_effects/starJumping.py:123-152"
    },
    "3403": {
        "file_id": 412,
        "content": "Code snippet performs the following:\n1. Jumps into first syllable, with jump height determined by variable `jump_height`.\n2. Uses `FrameUtility` for timing calculations based on line's start time minus lead-in time divided by 2 to start frame.\n3. Loops through each segment of `FrameUtility`, adjusting start and end times, and positioning the text accordingly.\n4. Calculates alpha value, which is then converted using `Convert.alpha_dec_to_ass` for blending effect.\n5. Writes each line to `io` (presumably an output stream).",
        "type": "comment"
    },
    "3404": {
        "file_id": 412,
        "content": "        # )\n        FU = FrameUtility(syl.start_time, syl.end_time)\n        for s, e, i, n in FU:\n            l.start_time = s\n            l.end_time = e\n            frame_pct = i / n\n            x = syl.center + frame_pct * jump_width\n            y = syl.top - math.sin(frame_pct * math.pi) * jump_height\n            alpha = 0\n            # Last jump should fade-out\n            if syl.i == len(line.syls) - 1:\n                alpha += FU.add(0, syl.duration, 255)\n            alpha = Convert.alpha_dec_to_ass(int(alpha))\n            l.text = \"{\\\\alpha%s\\\\pos(%.3f,%.3f)\\\\bord1\\\\blur1\\\\1c%s\\\\3c%s\\\\p1}%s\" % (\n                alpha,\n                x,\n                y,\n                c1,\n                c3,\n                star,\n            )\n            io.write_line(l)\n    # Leadout Effect\n    for syl in Utils.all_non_empty(line.syls):\n        l.layer = 0\n        l.start_time = syl.end_time\n        # l.start_time = line.start_time + syl.end_time + 100\n        l.end_time = line.end_time\n        # l.end_time = line.end_time - 25 * (len(line.syls) - syl.i) + delay + 100",
        "type": "code",
        "location": "/tests/karaoke_effects/starJumping.py:153-186"
    },
    "3405": {
        "file_id": 412,
        "content": "Code snippet applies a star jumping effect to the text of each syllable in a line, and adds a leadout effect at the end. The star jumping effect adjusts the position and fades out the last jump, while the leadout effect is triggered after all syllables have been processed.",
        "type": "comment"
    },
    "3406": {
        "file_id": 412,
        "content": "        # l.end_time = line.end_time - 25 * (len(line.syls) - syl.i) + delay + 100\n        l.dur = l.end_time - l.start_time\n        if l.dur <= 0:\n            continue\n        l.text = (\n            \"{\\\\an5\\\\move(%.3f,%.3f,%.3f,%.3f,%d,%d)\\\\t(%d,%d,\\\\blur2)\\\\fad(0,%d)}%s\"\n            % (\n                syl.center,\n                syl.middle,\n                syl.center + math.cos(syl.i / 2) * off_x,\n                syl.middle + math.sin(syl.i / 4) * off_y,\n                l.dur - delay,\n                l.dur,\n                l.dur - delay,\n                l.dur,\n                delay,\n                syl.text,\n            )\n        )\n        io.write_line(l)\ndef kanji(line, l):\n    # Setting up a delay, we will use it as duration time of the leadin and leadout effects\n    delay = 300\n    # Setting up offset variables, we will use them for the \\move in leadin and leadout effects\n    off_x = 35\n    off_y = 15\n    # Leadin Effect\n    for syl in Utils.all_non_empty(line.syls):\n        l.layer = 0\n        l.start_time = line.start_time",
        "type": "code",
        "location": "/tests/karaoke_effects/starJumping.py:187-221"
    },
    "3407": {
        "file_id": 412,
        "content": "This code snippet is adding leadin effects to a line of text. It calculates the start time and duration for each syllable in the line, adjusting the position of the \\move effect based on the syllable index. The delay value is used as the duration for leadin and leadout effects.",
        "type": "comment"
    },
    "3408": {
        "file_id": 412,
        "content": "        # l.start_time = (\n        #     line.start_time + 25 * syl.i - delay - 80\n        # )  # Remove 80 to start_time to let leadin finish a little bit earlier than the main effect of the first syllable\n        l.end_time = syl.start_time\n        # l.end_time = line.start_time + syl.start_time\n        l.dur = l.end_time - l.start_time\n        if l.dur <= 0:\n            continue\n        l.text = (\n            \"{\\\\an5\\\\move(%.3f,%.3f,%.3f,%.3f,0,%d)\\\\blur2\\\\t(0,%d,\\\\blur0)\\\\fad(%d,0)}%s\"\n            % (\n                syl.center + math.cos(syl.i / 2) * off_x,\n                syl.middle + math.sin(syl.i / 4) * off_y,\n                syl.center,\n                syl.middle,\n                delay,\n                delay,\n                delay,\n                syl.text,\n            )\n        )\n        io.write_line(l)\n    # Main Effect\n    for syl in Utils.all_non_empty(line.syls):\n        l.layer = 1\n        l.start_time = syl.start_time\n        # l.start_time = line.start_time + syl.start_time\n        l.end_time = syl.end_time + 100",
        "type": "code",
        "location": "/tests/karaoke_effects/starJumping.py:223-254"
    },
    "3409": {
        "file_id": 412,
        "content": "Code snippet is defining a star jumping animation effect for syllables in a line of karaoke lyrics. It calculates start and end times, layer, and text positioning based on syllable index and other variables. The main effect is applied to all non-empty syllables with a duration of 100ms extra to ensure it finishes properly.",
        "type": "comment"
    },
    "3410": {
        "file_id": 412,
        "content": "        l.dur = l.end_time - l.start_time\n        c1 = \"&H81F4FF&\"\n        c3 = \"&H199AAA&\"\n        # Change color if effect field is m1\n        if line.effect == \"m1\":\n            c1 = \"&H8282FF&\"\n            c3 = \"&H191AAA&\"\n        on_inline_effect_2 = \"\"\n        # Apply rotation if effect field is m2\n        if line.effect == \"m2\":\n            on_inline_effect_2 = \"\\\\t(0,%d,\\\\frz%.3f)\\\\t(%d,%d,\\\\frz0)\" % (\n                l.dur / 4,\n                random.uniform(-40, 40),\n                l.dur / 4,\n                l.dur,\n            )\n        l.text = (\n            \"{\\\\an5\\\\pos(%.3f,%.3f)%s\\\\t(0,80,\\\\fscx105\\\\fscy105\\\\1c%s\\\\3c%s)\\\\t(80,%d,\\\\fscx100\\\\fscy100\\\\1c%s\\\\3c%s)}%s\"\n            % (\n                syl.center,\n                syl.middle,\n                on_inline_effect_2,\n                c1,\n                c3,\n                l.dur - 80,\n                line.styleref.color1,\n                line.styleref.color3,\n                syl.text,\n            )\n        )\n        io.write_line(l)\n    # Leadout Effect",
        "type": "code",
        "location": "/tests/karaoke_effects/starJumping.py:255-291"
    },
    "3411": {
        "file_id": 412,
        "content": "This code dynamically sets the colors and applies rotation based on an \"effect\" field. If \"m1\", it changes colors, if \"m2\", applies rotation using a random angle within -40 to 40 degrees. The applied effects are combined with other formatting attributes to create the final line of text which is then written out.",
        "type": "comment"
    },
    "3412": {
        "file_id": 412,
        "content": "    for syl in Utils.all_non_empty(line.syls):\n        l.layer = 0\n        l.start_time = syl.end_time + 100\n        # l.start_time = line.start_time + syl.end_time + 100\n        l.end_time = line.end_time\n        # l.end_time = line.end_time - 25 * (len(line.syls) - syl.i) + delay + 100\n        l.dur = l.end_time - l.start_time\n        if l.dur <= 0:\n            continue\n        l.text = (\n            \"{\\\\an5\\\\move(%.3f,%.3f,%.3f,%.3f,%d,%d)\\\\t(%d,%d,\\\\blur2)\\\\fad(0,%d)}%s\"\n            % (\n                syl.center,\n                syl.middle,\n                syl.center + math.cos(syl.i / 2) * off_x,\n                syl.middle + math.sin(syl.i / 4) * off_y,\n                l.dur - delay,\n                l.dur,\n                l.dur - delay,\n                l.dur,\n                delay,\n                syl.text,\n            )\n        )\n        io.write_line(l)\ndef sub(line, l):\n    # Translation Effect\n    l.layer = 0\n    l.start_time = line.start_time - line.leadin / 2\n    l.end_time = line.end_time + line.leadout / 2",
        "type": "code",
        "location": "/tests/karaoke_effects/starJumping.py:292-327"
    },
    "3413": {
        "file_id": 412,
        "content": "The code iterates through non-empty syllables in a line, sets the layer and start time for each, calculates end time and duration, then creates a translation effect by writing it to the output.",
        "type": "comment"
    },
    "3414": {
        "file_id": 412,
        "content": "    l.dur = l.end_time - l.start_time\n    # Getting interpolated color changes (notice that we do that only after having set up all the times, that's important)\n    colors = CU.get_color_change(l)\n    # Base text\n    l.text = \"{\\\\an5\\\\pos(%.3f,%.3f)\\\\fad(%d,%d)}%s\" % (\n        line.center,\n        line.middle,\n        line.leadin / 2,\n        line.leadout / 2,\n        line.text,\n    )\n    io.write_line(l)\n    # Random clipped text colorated\n    l.layer = 1\n    for i in range(1, int(line.width / 80)):\n        x_clip = line.left + random.uniform(0, line.width)\n        y_clip = line.top - 5\n        clip = (\n            x_clip,\n            y_clip,\n            x_clip + random.uniform(10, 30),\n            y_clip + line.height + 10,\n        )\n        l.text = \"{\\\\an5\\\\pos(%.3f,%.3f)\\\\fad(%d,%d)\\\\clip(%d,%d,%d,%d)%s}%s\" % (\n            line.center,\n            line.middle,\n            line.leadin / 2,\n            line.leadout / 2,\n            clip[0],\n            clip[1],\n            clip[2],\n            clip[3],\n            colors,",
        "type": "code",
        "location": "/tests/karaoke_effects/starJumping.py:328-365"
    },
    "3415": {
        "file_id": 412,
        "content": "This code is creating a line of text with interpolated color changes and random clipped, colored text for karaoke effects. It sets the duration, gets color change values, defines the text's position and fade-in/out duration, writes the base text, and generates multiple lines with randomly clipped, colored text based on the line width.",
        "type": "comment"
    },
    "3416": {
        "file_id": 412,
        "content": "            line.text,\n        )\n        io.write_line(l)\nfor line in lines:\n    # Generating lines\n    if line.styleref.alignment >= 7:\n        lineModSource = line.copy()\n        break\n    elif line.styleref.alignment >= 4:\n        lineModSource = line.copy()\n        break\nfrom test_pylrc import *\n# just a test.\nshiftAdjust = 600\nfor elem in newTextArray:\n    lineMod = lineModSource.copy()\n    lineMod.start_time = max(0, elem[\"start\"] * 1000 - shiftAdjust)\n    lineMod.end_time = elem[\"end\"] * 1000 - shiftAdjust\n    lineMod.duration = lineMod.end_time - lineMod.start_time\n    lineMod.text = elem[\"text\"].strip().replace(\"  \", \"\")\n    # print(lineMod)\n    lineMod.words = lineMod.text.split(\" \")\n    # lineMod.syls =\n    # print(dir(lineMod))\n    # breakpoint()\n    sylList = []\n    wordCount = len(lineMod.words)\n    sylDuration = (lineMod.end_time - lineMod.start_time) / wordCount\n    textLength = len(lineMod.text)\n    charShift = 30\n    absWordCenterShiftList = []\n    prevWordShift = 0\n    CENTER = 1600 / 2\n    wordWidthList = []",
        "type": "code",
        "location": "/tests/karaoke_effects/starJumping.py:366-403"
    },
    "3417": {
        "file_id": 412,
        "content": "The code is generating lines and applying modifications to them based on alignment values. It then creates new line objects with adjusted start and end times, duration, text content, and splits the text into words. The code also calculates word position shifts and other variables for further processing.",
        "type": "comment"
    },
    "3418": {
        "file_id": 412,
        "content": "    for word in lineMod.words:\n        wordWidth = len(word) * charShift\n        wordWidthList.append(wordWidth)\n        wordLength = len(word) + 1\n        wordCenterShift = (charShift * wordLength) / 2\n        wordShift = charShift * wordLength\n        absWordCenterShift = (\n            CENTER - (textLength * charShift) / 2 + prevWordShift + wordCenterShift\n        )\n        absWordCenterShiftList.append(absWordCenterShift)\n        prevWordShift += wordShift\n    # CENTER + centerShift*charShift\n    getCenter = lambda index: absWordCenterShiftList[index]\n    getWidth = lambda index: wordWidthList[index]\n    mSylYShift = 700\n    for index, word in enumerate(lineMod.words):\n        syl = Syllable()\n        syl.text = word\n        syl.i = index\n        syl.center = getCenter(index)\n        syl.width = getWidth(index)\n        syl.top = 25 + mSylYShift\n        syl.inline_fx = \"m2\"\n        syl.middle = 49.0 + mSylYShift\n        syl.bottom = 73.0 + mSylYShift\n        syl.start_time = lineMod.start_time + index * sylDuration",
        "type": "code",
        "location": "/tests/karaoke_effects/starJumping.py:404-429"
    },
    "3419": {
        "file_id": 412,
        "content": "This code calculates word positions and dimensions for a karaoke effect. It iterates through each word in a line, determines the width of each word based on character shift, and then calculates the center position and overall position of the word. Finally, it creates an instance of the Syllable class for each word with the calculated properties and sets the start time based on the word index and duration.",
        "type": "comment"
    },
    "3420": {
        "file_id": 412,
        "content": "        syl.end_time = syl.start_time + sylDuration\n        syl.duration = sylDuration\n        sylList.append(syl)\n    lineMod.syls = sylList\n    # print(lineMod.syls)\n    # breakpoint()\n    # pyonfx.ass_core.Syllable\n    source = lineMod.copy()\n    target = lineMod.copy()\n    romaji(source, target)\n    lineMod2 = lineMod.copy()\n    translateShift = -200\n    for i in range(len(lineMod2.syls)):\n        lineMod2.syls[i].top += translateShift\n        lineMod2.syls[i].middle += translateShift\n        lineMod2.syls[i].bottom += translateShift\n    source = lineMod2.copy()\n    target = lineMod2.copy()\n    # elif line.styleref.alignment >= 4:\n    kanji(source, target)\n    # else:\n    #     sub(line, line.copy())\n# how to deal with the tra\nio.save()\n# io.open_aegisub()\nsample_video = \"/root/Desktop/works/pyjom/samples/video/karaoke_effects_source.mp4\"\nio.open_mpv(video_path=sample_video)  # ain't see shit...",
        "type": "code",
        "location": "/tests/karaoke_effects/starJumping.py:430-460"
    },
    "3421": {
        "file_id": 412,
        "content": "This code is manipulating and modifying a line of karaoke lyrics by adding a translation shift, updating the syllable positions, and applying kanji (Chinese characters) to specific alignments. It then saves the changes and opens an associated video file for playback.",
        "type": "comment"
    },
    "3422": {
        "file_id": 413,
        "content": "/tests/karaoke_effects/test_baidu_language_recognize.py",
        "type": "filepath"
    },
    "3423": {
        "file_id": 413,
        "content": "This code imports the PaddleHub library and initializes two modules, \"baidu_translate\" for language translation and \"baidu_language_recognition\" for language recognition. It then defines a text to be recognized as \"私は日本人です\", sets the expected language code as the output of the language recognition model's recognize function, and prints the resulting language code.",
        "type": "summary"
    },
    "3424": {
        "file_id": 413,
        "content": "import paddlehub as hub\nlanguage_translation_model = hub.Module(name=\"baidu_translate\")\nlanguage_recognition_model = hub.Module(name=\"baidu_language_recognition\")\n# text = \"hello world\"\n# \"zh\", 'en', 'jp'\n# text = \"請輸入要轉換簡繁體的中文漢字\" # zh\ntext = \"私は日本人です\"\nlanguage_code = language_recognition_model.recognize(text)\nprint(\"language_code: %s\" % language_code)",
        "type": "code",
        "location": "/tests/karaoke_effects/test_baidu_language_recognize.py:1-11"
    },
    "3425": {
        "file_id": 413,
        "content": "This code imports the PaddleHub library and initializes two modules, \"baidu_translate\" for language translation and \"baidu_language_recognition\" for language recognition. It then defines a text to be recognized as \"私は日本人です\", sets the expected language code as the output of the language recognition model's recognize function, and prints the resulting language code.",
        "type": "comment"
    },
    "3426": {
        "file_id": 414,
        "content": "/tests/karaoke_effects/test_detect_different_language.py",
        "type": "filepath"
    },
    "3427": {
        "file_id": 414,
        "content": "The code uses three libraries to detect language in sample text, but faces challenges due to unstable vector tools and unreliable language detection. Testing shows it fails to correctly identify Chinese in the example \"你好\".",
        "type": "summary"
    },
    "3428": {
        "file_id": 414,
        "content": "sample = \"Last Friday night. 影響包含\"\nimport pycld2 as cld2\ntext_content = sample\n_, _, _, detected_language = cld2.detect(text_content, returnVectors=True)\nprint(detected_language)  # unknown! fucking shit\n# ((0, 323, 'FRENCH', 'fr'), (323, 64, 'ENGLISH', 'en'))\n# this vector tool is very unstable. so as the freaking cld3 'get_frequent_language' shit\n# ((0, 30, 'Unknown', 'un'),)\nimport cld3\nresult = cld3.get_frequent_languages(sample, num_langs=3)\nprint(result)\n# what the fuck?\n# [LanguagePrediction(language='uz', probability=0.44310665130615234, is_reliable=False, proportion=0.5757575631141663), LanguagePrediction(language='zh', probability=0.9812981486320496, is_reliable=True, proportion=0.42424243688583374)]\nprint(cld3.get_language(\"last friday night do it all again this friday night\"))\n# not very freaking reliable.\nimport whatlang\nresult = whatlang.detect_language(\"last friday night\")\nprint(result)\nprint(whatlang.detect_language(\"你好\"))\n# from loadLingua_jpype import getLinguaDetectedLanguageLabel\n# print(getLinguaDetectedLanguageLabel('你好'))",
        "type": "code",
        "location": "/tests/karaoke_effects/test_detect_different_language.py:1-36"
    },
    "3429": {
        "file_id": 414,
        "content": "The code attempts to detect the language of a given sample text using different libraries: `pycld2`, `cld3`, and `whatlang`. However, it encounters issues with instability in vector tools, unpredictable results, and lack of reliability in detected languages.",
        "type": "comment"
    },
    "3430": {
        "file_id": 414,
        "content": "from loadLingua_pyjnius import pyjniusLinguaDetectLanguageLabel\nprint(pyjniusLinguaDetectLanguageLabel(\"你好\"))",
        "type": "code",
        "location": "/tests/karaoke_effects/test_detect_different_language.py:37-39"
    },
    "3431": {
        "file_id": 414,
        "content": "Testing if the code detects Chinese language correctly. It prints the detected language for the input \"你好\".",
        "type": "comment"
    },
    "3432": {
        "file_id": 415,
        "content": "/tests/karaoke_effects/test_pylrc.py",
        "type": "filepath"
    },
    "3433": {
        "file_id": 415,
        "content": "The code retrieves music file duration, parses LRC file for lyrics and their start times, sorts and filters them, calculates end times based on durations, and prints the final output.",
        "type": "summary"
    },
    "3434": {
        "file_id": 415,
        "content": "import pylrc\nfrom MediaInfo import MediaInfo\ndef getMusicDuration(musicPath):\n    info = MediaInfo(filename=musicPath)\n    info = info.getInfo()\n    # print(info)\n    # breakpoint()\n    length = info[\"duration\"]\n    length = float(length)\n    return length\nmusicPath = \"/root/Desktop/works/pyjom/tests/music_analysis/exciting_bgm.mp3\"\nmusicDuration = getMusicDuration(musicPath)\nlrc_file = open(\"/root/Desktop/works/pyjom/tests/music_analysis/exciting_bgm.lrc\")\nlrc_string = \"\".join(lrc_file.readlines())\nlrc_file.close()\nsubs = pylrc.parse(lrc_string)\nlyricDurationThresholds = (0.5, 4)\ntextArray = []\nfor sub in subs:\n    startTime = sub.time\n    text = sub.text\n    textArray.append((startTime, text))\ntextArray.sort(key=lambda x: x[0])\nlastStartTime = textArray[0][0]\nnewTextArray = [{\"start\": textArray[0][0], \"text\": textArray[0][1]}]\nfor startTime, text in textArray[1:]:\n    if startTime - lastStartTime < lyricDurationThresholds[0]:\n        continue\n    else:\n        lastStartTime = startTime\n        newTextArray.append({\"text\": text, \"start\": startTime})",
        "type": "code",
        "location": "/tests/karaoke_effects/test_pylrc.py:1-43"
    },
    "3435": {
        "file_id": 415,
        "content": "This code retrieves the duration of a music file, reads its associated LRC file, parses it to extract lyrics and their start times, sorts them, filters out consecutive lyric lines within threshold time intervals, and stores the result in a new list of dictionaries containing \"text\" and \"start\" keys.",
        "type": "comment"
    },
    "3436": {
        "file_id": 415,
        "content": "# now calculate the end time, please?\n# you may want to translate this if you have to.\n# when it does not contains anything in chinese.\n# using deepl?\n# put that aside please? focus on this shit...\nimport numpy as np\nlyricDurations = [np.mean(lyricDurationThresholds)]\nfor index, elem in enumerate(newTextArray):\n    text = elem[\"text\"]\n    start = elem[\"start\"]\n    nextIndex = index + 1\n    if nextIndex < len(newTextArray):\n        nextElem = newTextArray[nextIndex]\n        nextStart = nextElem[\"start\"]\n        end = nextStart - start\n        if end > lyricDurationThresholds[0] and end < lyricDurationThresholds[1]:\n            lyricDurations.append(end)\n        end = min(end, lyricDurationThresholds[1], musicDuration - start) + start\n    else:\n        end = np.mean(lyricDurations) + start\n        end = min(musicDuration, end)\n    newTextArray[index].update({\"end\": end})\nfor elem in newTextArray:\n    print(elem)\n# great. now let's do the freaking work?",
        "type": "code",
        "location": "/tests/karaoke_effects/test_pylrc.py:45-73"
    },
    "3437": {
        "file_id": 415,
        "content": "This code calculates the end time of each lyric element in a newTextArray based on its start time and the given lyricDurationThresholds. It appends the calculated end times to the lyricDurations list, updates the end time for each element in newTextArray, and then prints all elements with their start and end times.",
        "type": "comment"
    },
    "3438": {
        "file_id": 416,
        "content": "/tests/karaoke_effects/test_split_different_lang.py",
        "type": "filepath"
    },
    "3439": {
        "file_id": 416,
        "content": "The code imports libraries, defines a list of multilingual test cases, and uses `getTextListTranslated` to translate them. It prints the translated results for demonstration purposes.",
        "type": "summary"
    },
    "3440": {
        "file_id": 416,
        "content": "# example of TDD.\nimport os\n# os.environ['http_proxy'] = \"\"\n# os.environ['https_proxy'] = \"\"\n# os.environ['all_proxy'] = \"\"\ntests = [\n    [\"リンの麺は終わった\", \"リンの麺は終わった\"],\n    # only japanese\n    [\n        \"リンの麺は終わった Lina的面吃完了没有\",\n        \"リンの麺は終わった Lina的面吃完了没有\",\n    ],  # japanese with chinese containing english\n    [\n        \"Lina I miss you Lina我想你了\",\n        \"Lina I miss you Lina我想你了\",\n    ],  # english with chinese containing english\n    [\"向前冲 冲 冲\", \"向前冲 冲 冲\"],  # only chinese\n    [\"go go go\", \"go go go\"],  # chinese containing english (overall)\n]\n# build a classifier for this? wtf?\n# whatlang?\nfrom lyrictoolbox import getTextListTranslated\nif __name__ == \"__main__\":\n    # result = translate('hello world')\n    # print(\"RESULT:\", result)\n    # result = translate('hello world', backend='baidu')\n    # print(\"RESULT:\", result)\n    # exit()\n    for test in tests:\n        # we need to demostrate this workflow.\n        newLyricArray = getTextListTranslated(test)\n        print(\"_________RESULT_________\")\n        for elem in newLyricArray:",
        "type": "code",
        "location": "/tests/karaoke_effects/test_split_different_lang.py:1-38"
    },
    "3441": {
        "file_id": 416,
        "content": "This code imports necessary libraries, defines a list of test cases containing text in different languages, and uses the `getTextListTranslated` function from the `lyrictoolbox` module to translate the texts. The translated results are then printed for demonstration purposes.",
        "type": "comment"
    },
    "3442": {
        "file_id": 416,
        "content": "            print(elem)\n        print(\"_________RESULT_________\")",
        "type": "code",
        "location": "/tests/karaoke_effects/test_split_different_lang.py:39-40"
    },
    "3443": {
        "file_id": 416,
        "content": "Testing function by printing each element and a separator line to indicate the end of the input.",
        "type": "comment"
    },
    "3444": {
        "file_id": 417,
        "content": "/tests/karaoke_effects/translator.yml",
        "type": "filepath"
    },
    "3445": {
        "file_id": 417,
        "content": "This code sets up a session with online translators and uses Uvicorn for FastAPI apps on different ports, while managing Clash operations through a bash script. It also updates Clash automatically via a Python script.",
        "type": "summary"
    },
    "3446": {
        "file_id": 417,
        "content": "# all online translators, with retry automatically.\nsession_name: translator\nwindows:\n  - window_name: dev window\n    layout: tiled\n    panes:\n    # for main translator gateway\n      - shell_command:\n        - cd /root/Desktop/works/pyjom/tests/karaoke_effects\n        - python3 -m uvicorn --port 8974 fastapi_translator:app\n    # for lingua api\n      - shell_command:\n        - cd /root/Desktop/works/pyjom/tests/karaoke_effects\n        - python3 -m uvicorn --port 8978 loadLingua_jpype_fastapi:app\n    # the deepl hacked api\n      - shell_command:\n        - cd /root/Desktop/works/pyjom/tests/deepl_free_translator/deepl-api-rs\n        # - env ROCKET_PORT=8281 http_proxy=\"\" https_proxy=\"\" ./executable_deepl\n        # what is the fucking use of that clash shit?\n        - env ROCKET_PORT=8281 http_proxy=http://localhost:8381 https_proxy=http://localhost:8381 ./executable_deepl\n    # for clash\n      - shell_command:\n        - cd /root/Desktop/works/pyjom/tests/karaoke_effects\n        - bash launch_clash.sh # clash command",
        "type": "code",
        "location": "/tests/karaoke_effects/translator.yml:1-24"
    },
    "3447": {
        "file_id": 417,
        "content": "This code defines a session with multiple panes for online translators, lingua API, deepl hacked API, and clash. It uses Uvicorn to run FastAPI applications on different ports, with environment variables set for the deepl hacked API to connect through Clash using the Clash proxy. The code also mentions a bash script (launch_clash.sh) for managing Clash operations.",
        "type": "comment"
    },
    "3448": {
        "file_id": 417,
        "content": "    # clash auto updates\n      - shell_command:\n        - cd /root/Desktop/works/pyjom/tests/karaoke_effects\n        - sleep 3 # wait for clash to be ready?\n        - python3 clash_auto_update.py",
        "type": "code",
        "location": "/tests/karaoke_effects/translator.yml:25-29"
    },
    "3449": {
        "file_id": 417,
        "content": "This code triggers an automatic update for the Clash software by executing a Python script. It changes directory to the project's location, waits 3 seconds for the program to be ready, and then runs the update script.",
        "type": "comment"
    },
    "3450": {
        "file_id": 418,
        "content": "/tests/keepalive_service/install.sh",
        "type": "filepath"
    },
    "3451": {
        "file_id": 418,
        "content": "This line of code copies the 'keepalive' file to '/usr/local/bin/' directory, allowing it to be accessed and executed system-wide.",
        "type": "summary"
    },
    "3452": {
        "file_id": 418,
        "content": "cp keepalive /usr/local/bin/",
        "type": "code",
        "location": "/tests/keepalive_service/install.sh:1-1"
    },
    "3453": {
        "file_id": 418,
        "content": "This line of code copies the 'keepalive' file to '/usr/local/bin/' directory, allowing it to be accessed and executed system-wide.",
        "type": "comment"
    },
    "3454": {
        "file_id": 419,
        "content": "/tests/keepalive_service/test.sh",
        "type": "filepath"
    },
    "3455": {
        "file_id": 419,
        "content": "This line of code is running the \"keepalive\" executable with the argument \"echo abc\". The purpose seems to be testing and logging that the process is still alive.",
        "type": "summary"
    },
    "3456": {
        "file_id": 419,
        "content": "./keepalive echo abc",
        "type": "code",
        "location": "/tests/keepalive_service/test.sh:1-1"
    },
    "3457": {
        "file_id": 419,
        "content": "This line of code is running the \"keepalive\" executable with the argument \"echo abc\". The purpose seems to be testing and logging that the process is still alive.",
        "type": "comment"
    },
    "3458": {
        "file_id": 420,
        "content": "/tests/launch_test_enviroment.py",
        "type": "filepath"
    },
    "3459": {
        "file_id": 420,
        "content": "The function launches programs, changes directory, and waits for sleep duration. It asserts file existence, handles errors, and runs commands using os.system(). The code sets up a test environment by launching processes and services, specifying options, handling errors, and providing debugging information.",
        "type": "summary"
    },
    "3460": {
        "file_id": 420,
        "content": "import time\nimport os\ndef launchProgramWithTerminal(\n    directory,\n    intepreter,\n    executable,\n    sleep=None,\n    no_terminal=False,\n    keep_on=True,  # preserve error log\n):\n    try:\n        if type(sleep) in [int, float]:\n            if sleep > 0:  # logic shortcut please?\n                time.sleep(sleep)\n            else:\n                raise Exception(\"negative or zero sleep duration:\", sleep)\n        directory = os.path.abspath(directory)\n        assert os.path.exists(directory)\n        os.chdir(directory)\n        executable_path = os.path.join(directory, executable)\n        assert os.path.exists(executable_path)\n        # mkeep_on = (\n        #     \"{}\"\n        #     if (not keep_on) or no_terminal\n        #     else \"bash -c \\\"{}; echo; echo 'error log above...'; date; bash;\\\"\"\n        # )\n        mkeep_on = (\n            \"{}\"\n            if not keep_on\n            else (\n                \"bash -c \\\"{}; if [[ '$!' -ne 0 ]] then; echo; echo 'error log above...'; date; bash; fi;\\\"\"\n                if no_terminal",
        "type": "code",
        "location": "/tests/launch_test_enviroment.py:1-34"
    },
    "3461": {
        "file_id": 420,
        "content": "This function launches a program with its associated terminal, changes directory to the specified path, and optionally waits for a sleep duration. It asserts the existence of the executable file and handles error logs based on keep_on and no_terminal flags.",
        "type": "comment"
    },
    "3462": {
        "file_id": 420,
        "content": "                else \"bash -c \\\"{}; echo; echo 'error log above...'; date; bash;\\\"\"\n            )\n        )\n        command = f'{\"gnome-terminal -- \" if not no_terminal else \"\"}{mkeep_on.format(f\"{intepreter} {executable_path}\")}'\n        return command\n    except:\n        import traceback\n        traceback.print_exc()\n        print(\"failed while launching program with parameters:\")\n        print(\n            f\"[D]:{directory}\\n[I]{intepreter}\\n[E]{executable}\\n[C]{dict(sleep=sleep, no_terminal=no_terminal)}\"\n        )\n        breakpoint()\n    return None\ndef executeCommand(command):\n    print(\"executing command:\", command)\n    os.system(command)\n# common paths\npyjom_directory = \"/root/Desktop/works/pyjom\"\npyjom_tests = os.path.join(pyjom_directory, \"tests\")\npyjom_externals = os.path.join(pyjom_directory, \"externals\")\nkeepalive_bin = '/usr/local/bin/keepalive'\n# interpreters\nnode_exec = \"/usr/bin/node\"\npython3_exec = \"/usr/bin/python3\"\nbash_exec = \"/bin/bash\"\nlaunchList = [\n    # launch billibili recommendation server",
        "type": "code",
        "location": "/tests/launch_test_enviroment.py:35-70"
    },
    "3463": {
        "file_id": 420,
        "content": "This code launches a program with specified parameters and optional Gnome Terminal. It handles potential errors by printing an exception traceback and breakpoint for debugging. The executeCommand function runs the generated command using os.system(). Common paths, interpreters, and a list of programs to launch are defined.",
        "type": "comment"
    },
    "3464": {
        "file_id": 420,
        "content": "    # do this in qq task.\n    # [\n    #     [\n    #         os.path.join(pyjom_tests, \"bilibili_video_recommendation_server\"),\n    #         python3_exec,\n    #         \"test.py\",\n    #     ],\n    #     {},\n    # ],\n    # launch qq cqhttp\n    [[os.path.join(pyjom_tests, \"qq_go_cqhttp\"), bash_exec, \"launch.sh\"], {}],\n    # make sure milvus is running.\n    [\n        [\n            os.path.join(pyjom_tests, \"video_phash_deduplication\"),\n            bash_exec,\n            \"config_milvus.sh\",\n        ],\n        dict(no_terminal=True),\n    ],\n    # launch netease api server. we need it to download new music, currently.\n    # video phash is the last step among all filters.\n    [\n        [os.path.join(pyjom_externals, \"NeteaseCloudMusicApi\"), bash_exec, \"launch.sh\"],\n        {},\n    ],  # port is 4042. port 4000 is used. don't know why.\n    # how to check avaliability of netease cloud music api?\n    [\n        [os.path.join(pyjom_tests, \"karaoke_effects\"), bash_exec, \"load_translator.sh\"],\n        {},\n    ],\n    [\n        [\n            os.path.join(pyjom_tests, \"redis_music_info_persistance\"),",
        "type": "code",
        "location": "/tests/launch_test_enviroment.py:71-104"
    },
    "3465": {
        "file_id": 420,
        "content": "This code is setting up a test environment by launching multiple processes and services. It includes tasks for the bilibili video recommendation server, QQ CQHTTP, Milvus database, Netease Cloud Music API, Karaoke effects, and Redis music info persistence. Each task consists of the location of the executable and any necessary arguments. The code ensures proper execution by specifying different options for each task.",
        "type": "comment"
    },
    "3466": {
        "file_id": 420,
        "content": "            bash_exec,\n            \"launch_redis.sh\",\n        ],\n        dict(sleep=1),\n    ],\n    [\n        [os.path.join(pyjom_tests, \"random_giphy_gifs\"), node_exec, \"nodejs_server.js\"],\n        dict(sleep=1),\n    ],\n    [\n        [\n            os.path.join(pyjom_tests, \"nsfw_violence_drug_detection\"),\n            node_exec,\n            \"nsfwjs_test.js\",\n        ],\n        dict(sleep=1),\n    ],\n    # [\n    #     [\n    #         os.path.join(pyjom_tests, \"bezier_paddlehub_dogcat_detector_serving\"),\n    #         python3_exec,\n    #         \"server.py\",\n    #     ],\n    #     dict(sleep=1),\n    # ],\n]\nfor argumentList, kwargs in launchList:\n    try:\n        assert type(kwargs) == dict\n        [directory, intepreter, executable] = argumentList\n        command = launchProgramWithTerminal(directory, intepreter, executable, **kwargs)\n        if command is None:\n            raise Exception(\"command is None\")\n        else:\n            executeCommand(command)\n    except:\n        import traceback\n        traceback.print_exc()\n        print(\"error when decomposing program launch parameters\")",
        "type": "code",
        "location": "/tests/launch_test_enviroment.py:105-145"
    },
    "3467": {
        "file_id": 420,
        "content": "The code defines a list of argument lists and their corresponding keyword arguments, then iterates through each set of arguments to launch different programs using the specified interpreter and executable. It handles potential errors by catching exceptions and printing the traceback for debugging purposes.",
        "type": "comment"
    },
    "3468": {
        "file_id": 420,
        "content": "        print(f\"[AL]{argumentList}\\n[KW]{kwargs}\")\n        breakpoint()",
        "type": "code",
        "location": "/tests/launch_test_enviroment.py:146-147"
    },
    "3469": {
        "file_id": 420,
        "content": "The code prints a formatted string containing the command-line arguments (in `argumentList`) and keyword arguments (in `kwargs`), then pauses execution at the breakpoint.",
        "type": "comment"
    },
    "3470": {
        "file_id": 421,
        "content": "/tests/launch_test_enviroment.sh",
        "type": "filepath"
    },
    "3471": {
        "file_id": 421,
        "content": "The code is a shell script that launches various environments for testing and services, including servers, APIs, and multiple terminal instances for different tests. It includes commands to ensure proper execution without overlap or conflicts.",
        "type": "summary"
    },
    "3472": {
        "file_id": 421,
        "content": "cd /root/Desktop/works/pyjom/tests/\npython3 launch_test_enviroment.py\n# # launch bilibili recommendation server\n# cd /root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server\n# gnome-terminal -- python3 /root/Desktop/works/pyjom/tests/bilibili_video_recommendation_server/test.py\n# # launch qq cqhttp\n# cd /root/Desktop/works/pyjom/tests/qq_go_cqhttp\n# gnome-terminal -- bash /root/Desktop/works/pyjom/tests/qq_go_cqhttp/launch.sh\n# # make sure milvus is running.\n# cd /root/Desktop/works/pyjom/tests/video_phash_deduplication/\n# bash /root/Desktop/works/pyjom/tests/video_phash_deduplication/config_milvus.sh\n# # launch netease api server. we need it to download new music, currently.\n# # video phash is the last step among all filters.\n# cd /root/Desktop/works/pyjom/externals/NeteaseCloudMusicApi\n# gnome-terminal -- bash /root/Desktop/works/pyjom/externals/NeteaseCloudMusicApi/launch.sh # port is 4042. port 4000 is used. don't know why.\n# # how to check avaliability of netease cloud music api?\n# cd /root/Desktop/works/pyjom/tests/karaoke_effects/",
        "type": "code",
        "location": "/tests/launch_test_enviroment.sh:1-23"
    },
    "3473": {
        "file_id": 421,
        "content": "The code is a shell script that launches various environments for testing and services, including a bilibili recommendation server, qq cqhttp, milvus, netease api server. It also includes commands to ensure the servers are running correctly and provides instructions on how to check the availability of the netease cloud music API.",
        "type": "comment"
    },
    "3474": {
        "file_id": 421,
        "content": "# gnome-terminal -- bash /root/Desktop/works/pyjom/tests/karaoke_effects/load_translator.sh\n# sleep 1\n# cd /root/Desktop/works/pyjom/tests/redis_music_info_persistance\n# gnome-terminal -- bash /root/Desktop/works/pyjom/tests/redis_music_info_persistance/launch_redis.sh\n# sleep 1\n# cd /root/Desktop/works/pyjom/tests/random_giphy_gifs/\n# gnome-terminal -- node /root/Desktop/works/pyjom/tests/random_giphy_gifs/nodejs_server.js\n# sleep 1\n# cd /root/Desktop/works/pyjom/tests/nsfw_violence_drug_detection\n# gnome-terminal -- node /root/Desktop/works/pyjom/tests/nsfw_violence_drug_detection/nsfwjs_test.js",
        "type": "code",
        "location": "/tests/launch_test_enviroment.sh:24-36"
    },
    "3475": {
        "file_id": 421,
        "content": "The code launches multiple terminal instances and scripts for different tests, with each instance running a specific script in the project's directory. The \"sleep 1\" command introduces a pause between commands to allow the previous terminal instance to start before proceeding. This ensures proper execution of each test without overlap or conflicts.",
        "type": "comment"
    },
    "3476": {
        "file_id": 422,
        "content": "/tests/medialang_reference/audiolang.mdl",
        "type": "filepath"
    },
    "3477": {
        "file_id": 422,
        "content": "The code represents a sequence of media items and text to be processed by the program. It includes audio, video files, and text strings for conversion. The media items are specified with their respective paths and properties like speed and padding. The text strings are to be converted using the \"voice\" converter and may have additional properties like provider and speed.",
        "type": "summary"
    },
    "3478": {
        "file_id": 422,
        "content": "(\".mp3\", speed=1.5\n)\n(\"/root/Desktop/works/pyjom/src/samples/video/dog_with_text.mp4\",\n    speed=1.5, video=false\n)\n    (\"/root/Desktop/works/pyjom/src/samples/video/IxEQhCslT.mp4\",\n        padding=\"black\"\n    )\n        (\"text://you did a good job\",\n            converter=\"voice\", provider=\"tts_male\",\n            speed=2\n        )\n(\"/root/Desktop/works/pyjom/src/samples/video/dog_with_text.mp4\",\n    speed=1.5\n)\n    (\"text://you did a bad job\",\n        converter=\"voice\"\n    )",
        "type": "code",
        "location": "/tests/medialang_reference/audiolang.mdl:1-20"
    },
    "3479": {
        "file_id": 422,
        "content": "The code represents a sequence of media items and text to be processed by the program. It includes audio, video files, and text strings for conversion. The media items are specified with their respective paths and properties like speed and padding. The text strings are to be converted using the \"voice\" converter and may have additional properties like provider and speed.",
        "type": "comment"
    },
    "3480": {
        "file_id": 423,
        "content": "/tests/medialang_reference/audiolang.mdl.j2",
        "type": "filepath"
    },
    "3481": {
        "file_id": 423,
        "content": "The code defines a sequence of media items to be played. It includes audio and video files, with options for speed adjustment and text-to-speech conversion. The code also utilizes a loop to create multiple instances of these media items, replacing some variables like 'some_number' and 'some_text'.",
        "type": "summary"
    },
    "3482": {
        "file_id": 423,
        "content": "(\".mp3\", speed=1.5\n)\n(\"/root/Desktop/works/pyjom/src/samples/video/dog_with_text.mp4\",\n    speed=1.5, video=false\n)\n    (\"/root/Desktop/works/pyjom/src/samples/video/IxEQhCslT.mp4\",\n        padding=\"black\"\n    )\n        (\"text://you did a good job\",\n            converter=\"voice\", provider=\"tts_male\",\n            speed=2\n        )\n{% for i in range(some_number) %}\n(\"/root/Desktop/works/pyjom/src/samples/video/dog_with_text.mp4\",\n    speed={{ some_number }}\n)\n    (\"text://{{ some_text }}\",\n        converter=\"voice\"\n    )\n{% endfor %}",
        "type": "code",
        "location": "/tests/medialang_reference/audiolang.mdl.j2:1-23"
    },
    "3483": {
        "file_id": 423,
        "content": "The code defines a sequence of media items to be played. It includes audio and video files, with options for speed adjustment and text-to-speech conversion. The code also utilizes a loop to create multiple instances of these media items, replacing some variables like 'some_number' and 'some_text'.",
        "type": "comment"
    },
    "3484": {
        "file_id": 424,
        "content": "/tests/medialang_reference/processor_demo.mdl",
        "type": "filepath"
    },
    "3485": {
        "file_id": 424,
        "content": "The code specifies a video file path and sets the playback speed. The \"subtitle_detector\" processor is applied to a JSON file.",
        "type": "summary"
    },
    "3486": {
        "file_id": 424,
        "content": "(\".json\", processor=\"subtitle_detector\"\n)\n(\"/root/Desktop/works/pyjom/samples/video/dog_with_text.mp4\",\n    speed=1.5\n)",
        "type": "code",
        "location": "/tests/medialang_reference/processor_demo.mdl:1-6"
    },
    "3487": {
        "file_id": 424,
        "content": "The code specifies a video file path and sets the playback speed. The \"subtitle_detector\" processor is applied to a JSON file.",
        "type": "comment"
    },
    "3488": {
        "file_id": 425,
        "content": "/tests/medialang_reference/processor_multi.mdl",
        "type": "filepath"
    },
    "3489": {
        "file_id": 425,
        "content": "The code is creating a pipeline to process a video file and associated .json files. It uses a video file \"dog_with_text.mp4\" at 1.5x speed, followed by subtitle detection and active region detection on the .json files.",
        "type": "summary"
    },
    "3490": {
        "file_id": 425,
        "content": "(\"/root/Desktop/works/pyjom/src/samples/video/dog_with_text.mp4\",\n    speed=1.5\n)\n(\".json\", processor=\"subtitle_detector\"\n)\n(\".json\",\n    processor=\"active_region_detector\"\n)",
        "type": "code",
        "location": "/tests/medialang_reference/processor_multi.mdl:1-10"
    },
    "3491": {
        "file_id": 425,
        "content": "The code is creating a pipeline to process a video file and associated .json files. It uses a video file \"dog_with_text.mp4\" at 1.5x speed, followed by subtitle detection and active region detection on the .json files.",
        "type": "comment"
    },
    "3492": {
        "file_id": 426,
        "content": "/tests/medialang_reference/recursive_audiolang.mdl",
        "type": "filepath"
    },
    "3493": {
        "file_id": 426,
        "content": "This code sets the audio language model and specifies its configuration. It uses a subtitle detector with an input file located at \"/root/Desktop/works/pyjom/src/samples/video/dog_with_text.mp4\". The speed of processing is set to 1.5x, and the output file is generated from the template at \"/root/Desktop/works/pyjom/src/test/audiolang.mdl.j2\" with format arguments \"some_number\": 2 and \"some_text\": \"shit\".",
        "type": "summary"
    },
    "3494": {
        "file_id": 426,
        "content": "(\".mp3\", processor=\"subtitle_detector\"\n)\n(\"/root/Desktop/works/pyjom/src/samples/video/dog_with_text.mp4\",\n    speed=1.5\n)\n(\"/root/Desktop/works/pyjom/src/test/audiolang.mdl.j2\",\n    format_args={\"some_number\": 2, \"some_text\": \"shit\"}\n)",
        "type": "code",
        "location": "/tests/medialang_reference/recursive_audiolang.mdl:1-10"
    },
    "3495": {
        "file_id": 426,
        "content": "This code sets the audio language model and specifies its configuration. It uses a subtitle detector with an input file located at \"/root/Desktop/works/pyjom/src/samples/video/dog_with_text.mp4\". The speed of processing is set to 1.5x, and the output file is generated from the template at \"/root/Desktop/works/pyjom/src/test/audiolang.mdl.j2\" with format arguments \"some_number\": 2 and \"some_text\": \"shit\".",
        "type": "comment"
    },
    "3496": {
        "file_id": 427,
        "content": "/tests/medialang_reference/videolang.mdl",
        "type": "filepath"
    },
    "3497": {
        "file_id": 427,
        "content": "The code defines two media streams: the first one is a video with a .mp4 extension and a speed of 1.5, while the second one is an audio file also with a .mp4 extension located at \"/root/Desktop/works/pyjom/src/samples/video/dog_with_text.mp4\", set to play at 1.5 speed but without video output.",
        "type": "summary"
    },
    "3498": {
        "file_id": 427,
        "content": "(\".mp4\", speed=1.5\n)\n(\"/root/Desktop/works/pyjom/src/samples/video/dog_with_text.mp4\",\n    speed=1.5, video=false\n)",
        "type": "code",
        "location": "/tests/medialang_reference/videolang.mdl:1-6"
    },
    "3499": {
        "file_id": 427,
        "content": "The code defines two media streams: the first one is a video with a .mp4 extension and a speed of 1.5, while the second one is an audio file also with a .mp4 extension located at \"/root/Desktop/works/pyjom/src/samples/video/dog_with_text.mp4\", set to play at 1.5 speed but without video output.",
        "type": "comment"
    }
}