{
    "1600": {
        "file_id": 136,
        "content": "#   --install-base                       base installation directory (instead of\n#                                        --prefix or --home)\n#   --install-platbase                   base installation directory for\n#                                        platform-specific files (instead of --\n#                                        exec-prefix or --home)\n#   --root                               install everything relative to this\n#                                        alternate root directory\n#   --install-purelib                    installation directory for pure Python\n#                                        module distributions\n#   --install-platlib                    installation directory for non-pure\n#                                        module distributions\n#   --install-lib                        installation directory for all module\n#                                        distributions (overrides --install-\n#                                        purelib and --install-platlib)\n#   --install-headers                    installation directory for C/C++",
        "type": "code",
        "location": "/externals/opencv_py_reset.sh:25-39"
    },
    "1601": {
        "file_id": 136,
        "content": "This code snippet is a part of a help function describing various installation directories and their purposes in the OpenCV library. It provides information on different options like --install-base, --install-platbase, --root, --install-purelib, --install-platlib, --install-lib, and --install-headers.",
        "type": "comment"
    },
    "1602": {
        "file_id": 136,
        "content": "#                                        headers\n#   --install-scripts                    installation directory for Python\n#                                        scripts\n#   --install-data                       installation directory for data files\n#   --compile (-c)                       compile .py to .pyc [default]\n#   --no-compile                         don't compile .py files\n#   --optimize (-O)                      also compile with optimization: -O1 for\n#                                        \"python -O\", -O2 for \"python -OO\", and\n#                                        -O0 to disable [default: -O0]\n#   --force (-f)                         force installation (overwrite any\n#                                        existing files)\n#   --skip-build                         skip rebuilding everything (for\n#                                        testing/debugging)\n#   --record                             filename in which to record list of\n#                                        installed files",
        "type": "code",
        "location": "/externals/opencv_py_reset.sh:40-54"
    },
    "1603": {
        "file_id": 136,
        "content": "This code snippet describes the various options for installing Python packages, including installation directories for scripts and data files, compilation settings like optimization level and no-compile flag, force installation option, skipping build, and recording installed files.",
        "type": "comment"
    },
    "1604": {
        "file_id": 136,
        "content": "#   --user                               install in user site-package\n#                                        '/root/.local/lib/python3.9/site-\n#                                        packages'\n#   --old-and-unmanageable               Try not to use this!\n#   --single-version-externally-managed  used by system package builders to\n#                                        create 'flat' eggs",
        "type": "code",
        "location": "/externals/opencv_py_reset.sh:55-60"
    },
    "1605": {
        "file_id": 136,
        "content": "This code snippet describes various installation options for OpenCV Python reset script. It mentions the user site-package location, a deprecated option, and a system package builder choice for 'flat' eggs.",
        "type": "comment"
    },
    "1606": {
        "file_id": 137,
        "content": "/externals/opencv_rebuild.sh",
        "type": "filepath"
    },
    "1607": {
        "file_id": 137,
        "content": "This script configures, builds, and installs OpenCV with CUDA support using CMake. It sets environment variables for proxy, libraries, and GCC-9, customizing the building process based on defined modules, applications, and languages.",
        "type": "summary"
    },
    "1608": {
        "file_id": 137,
        "content": "cd opencv\n# cd build\n# rm -rf build\n# mkdir build\ncd build\n# Configure\n# do not use anaconda\nconda deactivate\n# override anaconda in $PATH\n# export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games:/usr/local/cuda-10.2/bin:/snap/bin\nexport PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games:/snap/bin # ignore incompatible nvcc\n# to download things.\n# export HTTP_PROXY=http://192.168.43.78:8899\n# export http_proxy=http://192.168.43.78:8899\n# export https_proxy=http://192.168.43.78:8899\n# export HTTPS_PROXY=http://192.168.43.78:8899\n# export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/:$LD_LIBRARY_PATH\n# need turn cuda on.\n# switch to gcc-9, lower than 10\ncmake -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.x/modules -DHTTP_PROXY=http://192.168.43.78:38457 -DWITH_CUDA=ON ../opencv-4.x\n# Build\ncmake --build .\nmake install \n# cd /media/root/help/pyjom/externals/\n# bash /media/root/help/pyjom/externals/opencv_py_reset.sh\n# --   OpenCV modules:",
        "type": "code",
        "location": "/externals/opencv_rebuild.sh:1-27"
    },
    "1609": {
        "file_id": 137,
        "content": "This script changes directory to the OpenCV folder, configures and builds it using CMake, then installs it. It also sets environment variables for proxy, library paths, and ensures use of GCC-9. The script is specifically configured for CUDA support and uses a custom opencv_py_reset.sh script.",
        "type": "comment"
    },
    "1610": {
        "file_id": 137,
        "content": "# --     To be built:                 alphamat aruco barcode bgsegm bioinspired calib3d ccalib core cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev datasets dnn dnn_objdetect dnn_superres dpm face features2d flann freetype fuzzy gapi hdf hfs highgui img_hash imgcodecs imgproc intensity_transform java line_descriptor mcc ml objdetect optflow phase_unwrapping photo plot python2 python3 quality rapid reg rgbd saliency sfm shape stereo stitching structured_light superres surface_matching text tracking ts video videoio videostab wechat_qrcode xfeatures2d ximgproc xobjdetect xphoto\n# --     Disabled:                    world\n# --     Disabled by dependency:      -\n# --     Unavailable:                 cvv julia matlab ovis viz\n# --     Applications:                tests perf_tests apps",
        "type": "code",
        "location": "/externals/opencv_rebuild.sh:28-32"
    },
    "1611": {
        "file_id": 137,
        "content": "The code is a list of OpenCV modules, applications, and languages that are to be built, disabled, disabled by dependency, or unavailable. This script controls the building process based on these definitions.",
        "type": "comment"
    },
    "1612": {
        "file_id": 138,
        "content": "/externals/opencv_init.sh",
        "type": "filepath"
    },
    "1613": {
        "file_id": 138,
        "content": "Code snippet initializes the OpenCV library. It creates a directory, downloads the required zip files, extracts them, configures the build with CMake, builds and installs the library, and finally resets the Python bindings for OpenCV.",
        "type": "summary"
    },
    "1614": {
        "file_id": 138,
        "content": "mkdir opencv\ncd opencv\nwget -O opencv.zip https://github.com/opencv/opencv/archive/4.x.zip\nwget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.x.zip\nunzip opencv.zip\nunzip opencv_contrib.zip\n# Create build directory and switch into it\nmkdir -p build && cd build\n# Configure\ncmake -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.x/modules -DWITH_CUDA=ON ../opencv-4.x\n# Build\ncmake --build .\nmake install\nbash /media/root/help/pyjom/externals/opencv_py_reset.sh",
        "type": "code",
        "location": "/externals/opencv_init.sh:1-16"
    },
    "1615": {
        "file_id": 138,
        "content": "Code snippet initializes the OpenCV library. It creates a directory, downloads the required zip files, extracts them, configures the build with CMake, builds and installs the library, and finally resets the Python bindings for OpenCV.",
        "type": "comment"
    },
    "1616": {
        "file_id": 139,
        "content": "/externals/netease_api_download.sh",
        "type": "filepath"
    },
    "1617": {
        "file_id": 139,
        "content": "The code is cloning a GitHub repository, changing the directory to it, and installing two packages (husky and npm) for further usage.",
        "type": "summary"
    },
    "1618": {
        "file_id": 139,
        "content": "git clone --depth 1 https://github.com/Binaryify/NeteaseCloudMusicApi.git\ncd NeteaseCloudMusicApi\nnpm install -g husky\nnpm install -g .",
        "type": "code",
        "location": "/externals/netease_api_download.sh:1-7"
    },
    "1619": {
        "file_id": 139,
        "content": "The code is cloning a GitHub repository, changing the directory to it, and installing two packages (husky and npm) for further usage.",
        "type": "comment"
    },
    "1620": {
        "file_id": 140,
        "content": "/externals/init_opentoolz.sh",
        "type": "filepath"
    },
    "1621": {
        "file_id": 140,
        "content": "Installing necessary packages, cloning OpenToonz repository, configuring and compiling third-party dependencies, building the software, installing it, and creating a symbolic link to simplify execution.",
        "type": "summary"
    },
    "1622": {
        "file_id": 140,
        "content": "# sudo apt-get install build-essential git cmake pkg-config libboost-all-dev  qtbase5-dev libqt5svg5-dev qtscript5-dev qttools5-dev qttools5-dev-tools libqt5opengl5-dev qtmultimedia5-dev libqt5multimedia5-plugins libqt5serialport5-dev libsuperlu-dev  liblz4-dev libusb-1.0-0-dev liblzo2-dev libpng-dev libjpeg-dev libglew-dev freeglut3-dev libfreetype6-dev libjson-c-dev qtwayland5 libmypaint-dev libopencv-dev libturbojpeg-dev\n# sudo apt-get install libmypaint-dev\n# git clone --depth 1 https://github.com/opentoonz/opentoonz\nmkdir -p $HOME/.config/OpenToonz\ncp -r opentoonz/stuff $HOME/.config/OpenToonz/\ncd opentoonz/thirdparty/tiff-4.0.3\n./configure --with-pic --disable-jbig\nmake -j$(nproc)\ncd ../../\ncd toonz\nmkdir build\ncd build\ncmake ../sources\nmake -j$(nproc)\nsudo make install\nln -s /opt/opentoonz/bin/opentoonz /usr/bin/opentoonz",
        "type": "code",
        "location": "/externals/init_opentoolz.sh:1-23"
    },
    "1623": {
        "file_id": 140,
        "content": "Installing necessary packages, cloning OpenToonz repository, configuring and compiling third-party dependencies, building the software, installing it, and creating a symbolic link to simplify execution.",
        "type": "comment"
    },
    "1624": {
        "file_id": 141,
        "content": "/externals/init_ffmpeg.sh",
        "type": "filepath"
    },
    "1625": {
        "file_id": 141,
        "content": "This code downloads and configures FFmpeg libraries with options like CUDA and LibNPP for project dependencies, rebuilds from source if needed, and enables specific libraries using --enable flag.",
        "type": "summary"
    },
    "1626": {
        "file_id": 141,
        "content": "git clone --depth 1 https://git.ffmpeg.org/ffmpeg.git ffmpeg/\ngit clone https://git.videolan.org/git/ffmpeg/nv-codec-headers.git\ncd nv-codec-headers && sudo make install && cd ..\nyes | apt-get install build-essential yasm cmake libtool libc6 libc6-dev unzip wget libnuma1 libnuma-dev libchromaprint-dev frei0r-plugins-dev libaom-dev libiec61883-dev libass-dev libbluray-dev libbs2b-dev libcodec2-dev libgsm1-dev libopenjp2-7-dev librsvg2-dev libzmq3-dev libomxil-bellagio-dev libcdio-paranoia-dev libsrt-gnutls-dev libopenh264-dev\n# yes | apt-get   build-dep ffmpeg # has unmet dependencies.\n# git clone https://github.com/Haivision/srt.git libsrt\n# cd libsrt/\n# git checkout -b work v1.4.1\n# sudo apt-get install tclsh pkg-config cmake libssl-dev build-essential\n# ./configure \n# make\n# sudo make install\n# sudo ldconfig\n# cd ..\n# yes | apt install ladspa-dev\n# yes | apt install libaom-dev\n# yes | apt install libass-dev\n# yes | apt install libbluray-dev\n# yes | apt install libbs2b-dev\n# yes | apt install libcaca-dev",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:1-21"
    },
    "1627": {
        "file_id": 141,
        "content": "Code is downloading and installing the FFmpeg libraries along with dependencies, making sure necessary packages are installed, performing necessary configurations, compiling and installing SRT library.",
        "type": "comment"
    },
    "1628": {
        "file_id": 141,
        "content": "# yes | apt install libcdio-dev\n# yes | apt install libcodec2-dev\n# yes | apt install libdav1d-dev\n# yes | apt install libflite-dev\n# yes | apt install libfontconfig-dev\n# yes | apt install libfreetype-dev\n# yes | apt install libfribidi-dev\n# yes | apt install libgme-dev\n# yes | apt install libgsm-dev\n# yes | apt install libjack-dev\n# yes | apt install libmp3lame-dev\n# yes | apt install libmysofa-dev\n# yes | apt install libopenjpeg-dev\n# yes | apt install libopenmpt-dev\n# yes | apt install libopus-dev\n# yes | apt install libpulse-dev\n# yes | apt install librabbitmq-dev\n# yes | apt install librubberband-dev\n# yes | apt install libshine-dev\n# yes | apt install libsnappy-dev\n# yes | apt install libsoxr-dev\n# yes | apt install libspeex-dev\n# yes | apt install libsrt-dev\n# yes | apt install libssh-dev\n# yes | apt install libtheora-dev\n# yes | apt install libtwolame-dev\n# yes | apt install libvidstab-dev\n# yes | apt install libvorbis-dev\n# yes | apt install libvpx-dev\n# yes | apt install libwebp-dev\n# yes | apt install libx265-dev",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:22-52"
    },
    "1629": {
        "file_id": 141,
        "content": "This code is installing various library development packages using the \"apt install\" command with \"yes\" for auto-confirmation, possibly for a project's dependencies.",
        "type": "comment"
    },
    "1630": {
        "file_id": 141,
        "content": "# yes | apt install libxml2-dev\n# yes | apt install libxvid-dev\n# yes | apt install libzimg-dev\n# yes | apt install libzmq-dev\n# yes | apt install libzvbi-dev\n# yes | apt install lv2-dev\n# yes | apt install liblv2-dev\n# yes | apt install omx-dev\n# yes | apt install libomx-dev\n# yes | apt install openal-dev\n# yes | apt install libopenal-dev\n# yes | apt install opencl-dev\n# yes | apt install libopencl-dev\n# yes | apt install opengl-dev\n# yes | apt install libopengl-dev\n# yes | apt install sdl2-dev\n# yes | apt install libsdl2-dev\n# yes | apt install pocketsphinx-dev\n# yes | apt install libpocketsphinx-dev\n# yes | apt install librsvg-dev\n# yes | apt install libmfx-dev\n# yes | apt install libdc1394-dev\n# yes | apt install libdrm-dev\n# yes | apt install chromaprint-dev\n# yes | apt install libchromaprint-dev\n# yes | apt install frei0r-dev\n# yes | apt install libfrei0r-dev\n# yes | apt install libx264-dev\ncd ffmpeg\n# libchromaprint: audio fingerprint\n# frei0r: video effects\n# libaom-dev: av1 video codec\n# ./configure --enable",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:53-85"
    },
    "1631": {
        "file_id": 141,
        "content": "Installing various development packages for different libraries and codecs before configuring ffmpeg.",
        "type": "comment"
    },
    "1632": {
        "file_id": 141,
        "content": "-nonfree --enable-cuda-nvcc --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static --enable-shared\n# ./configure --enable-gpl --enable-nonfree --enable-pthreads --extra-libs=-lstdc++ --enable-cuda-nvcc --enable-cuvid --enable-nvenc --enable-shared --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --enable-libnpp --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static \n# add libspeex\n# why libspeex is not working?\n# you'd better build this shit from source.\n# because libspeex1 rebuild or something.\n###LAST WORKING ONE\n./configure --toolchain=hardened  --arch=amd64 --enable-gpl --enable-nonfree --enable-pthreads --extra-libs=-lstdc++ --enable-cuda-nvcc --enable-cuvid --enable-nvenc --enable-shared --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --enable-libnpp --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --ena",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:85-93"
    },
    "1633": {
        "file_id": 141,
        "content": "This code sets various options for configuring FFmpeg, including enabling CUDA NVCC, enabling CUDA CUDV and NVENC, enabling LibNPP, specifying extra include and link directories, disabling static builds, and enabling Gnutls, LADSPA, libAOM, libASS, libBluray, libBS2B. It uses a hardened toolchain with AMD64 architecture, and refers to previous issues with LibSpeex, suggesting rebuilding from source.",
        "type": "comment"
    },
    "1634": {
        "file_id": 141,
        "content": "ble-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libsrt --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --disable-sndio --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared --enable-libopenh264 # wtf?\n### LAST WORKING ONE\n# ./configure --enable-gpl --enable-nonfree --enable-",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:93-96"
    },
    "1635": {
        "file_id": 141,
        "content": "The code is configuring the build of a software library with various components enabled, specifying different libraries and options for compilation. It enables several libs like cdio, codec2, dav1d, fontconfig, freetype, fribidi etc., disables sndio and searches for the last working configuration for an older version.",
        "type": "comment"
    },
    "1636": {
        "file_id": 141,
        "content": "pthreads --extra-libs=-lstdc++ --enable-cuda-nvcc --enable-cuvid --enable-nvenc --enable-shared --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --enable-libnpp --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --arch=amd64 --enable-gpl --disable-stripping --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:96-96"
    },
    "1637": {
        "file_id": 141,
        "content": "This code is enabling various libraries and options for the FFmpeg compilation, including CUDA-NVCC, CUVID, NVENC, shared libraries, LibNPP, hardened toolchain, specific architecture, GPL, disabling stripping, and enabling Gnutls among others.",
        "type": "comment"
    },
    "1638": {
        "file_id": 141,
        "content": "libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --disable-sndio --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared\n# ./configure --prefix=/usr/local/ffmpeg --enable-gpl --enable-nonfree --enable-pthreads --extra-cflags=-g --extra-cflags=-O0 --extra-libs=-lstdc++ --extra-cxxflags=-g --extra-cxxflags=-O0 --extra-cxxflags=-fpermissive --enable-debug=3 --disable-optimizations --disable-stripping --disable-x86asm --enable-cuda-nvcc --enable-cuvid --enable-shared --enable-nvenc --enable-shared --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --extra-ldflags=-L/usr/local/cuda/lib64\nmake -j8\nmake install\n# this is not distributable. non-free nvenc\n# without mp3!\n# original compiling flags:",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:96-104"
    },
    "1639": {
        "file_id": 141,
        "content": "This code is configuring and compiling the FFmpeg library with various enabled components such as libvorbis, libvpx, libwebp, and more. It also includes specific build configurations for optimization and debugging. The final \"make\" commands compile and install the configured FFmpeg library.",
        "type": "comment"
    },
    "1640": {
        "file_id": 141,
        "content": "# --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --arch=amd64 --enable-gpl --disable-stripping --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enab",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:105-105"
    },
    "1641": {
        "file_id": 141,
        "content": "This code is enabling various libraries and features for FFmpeg, a popular multimedia framework. It includes support for audio and video codecs, file formats, filters, and more. The code specifies the toolchain, directories, architecture, and enabled features for building FFmpeg.",
        "type": "comment"
    },
    "1642": {
        "file_id": 141,
        "content": "le-sdl2 --disable-sndio --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:105-105"
    },
    "1643": {
        "file_id": 141,
        "content": "This code enables specific libraries for a software by passing the corresponding options using the --enable flag, which ultimately disables other components and enables these selected ones.",
        "type": "comment"
    },
    "1644": {
        "file_id": 142,
        "content": "/externals/init_darknet.sh",
        "type": "filepath"
    },
    "1645": {
        "file_id": 142,
        "content": "This code clones the Darknet repository, changes directory to it, sets GPU and CUDNN variables, then builds the darknet executable using make.",
        "type": "summary"
    },
    "1646": {
        "file_id": 142,
        "content": "git clone --depth 1 https://github.com/AlexeyAB/darknet\ncd darknet\n# GPU=1\n# CUDNN=1\n# make y",
        "type": "code",
        "location": "/externals/init_darknet.sh:1-6"
    },
    "1647": {
        "file_id": 142,
        "content": "This code clones the Darknet repository, changes directory to it, sets GPU and CUDNN variables, then builds the darknet executable using make.",
        "type": "comment"
    },
    "1648": {
        "file_id": 143,
        "content": "/externals/get_the_heck_ffmpeg.py",
        "type": "filepath"
    },
    "1649": {
        "file_id": 143,
        "content": "This code splits a string into enabled FFmpeg library names, adds \"-dev\" if necessary, and installs them using \"apt install\".",
        "type": "summary"
    },
    "1650": {
        "file_id": 143,
        "content": "mystr = \"-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-chromaprint --enable-frei0r --enable-libx264 \"\nmystr = mystr.split(\" \")",
        "type": "code",
        "location": "/externals/get_the_heck_ffmpeg.py:1-3"
    },
    "1651": {
        "file_id": 143,
        "content": "Code is splitting the string mystr into an array of individual enabled libraries for FFmpeg.",
        "type": "comment"
    },
    "1652": {
        "file_id": 143,
        "content": "mylibs = []\nfor elem in mystr:\n    a = elem.replace(\"-\",\"\").replace(\" \",\"\").replace(\"enable\",\"\")\n    if len(a) <=2:\n        continue\n    if a.startswith(\"lib\"):\n        a +=\"-dev\"\n        mylibs.append(a)\n    else:\n        a+= \"-dev\"\n        b = \"lib\"+a\n        mylibs.append(a)\n        mylibs.append(b)\nfor lib in mylibs:\n    print(\"yes | apt install {}\".format(lib))",
        "type": "code",
        "location": "/externals/get_the_heck_ffmpeg.py:5-20"
    },
    "1653": {
        "file_id": 143,
        "content": "This code filters out a list of library names from a given string, adds \"-dev\" if it doesn't start with \"lib\", and then installs each library using \"apt install\".",
        "type": "comment"
    },
    "1654": {
        "file_id": 144,
        "content": "/externals/ffmpeg_libspeex_tensorflow_support.sh",
        "type": "filepath"
    },
    "1655": {
        "file_id": 144,
        "content": "The code configures FFmpeg with various libraries, modules, and specific paths for CUDA include and library files, then builds and installs the custom FFmpeg.",
        "type": "summary"
    },
    "1656": {
        "file_id": 144,
        "content": "cd ffmpeg\n###LAST WORKING ONE\n./configure --toolchain=hardened  --arch=amd64  --enable-libspeex --enable-gpl --enable-nonfree --enable-pthreads --extra-libs=-lstdc++ --enable-cuda-nvcc --enable-cuvid --enable-nvenc --enable-shared --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --enable-libnpp --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 ",
        "type": "code",
        "location": "/externals/ffmpeg_libspeex_tensorflow_support.sh:1-5"
    },
    "1657": {
        "file_id": 144,
        "content": "The code configures the ffmpeg build with various options such as libspeex, gpl, nonfree, pthreads, and more. It also enables cuda-nvcc, cuvid, nvenc, shared, gnutls, ladspa, aom, ass, bluray, bs2b, caca, dav1d, fontconfig, fribidi, gme, gsm, jack, mp3lame, mysofa, openjpeg, openmpt, opus, pulse, rabbitmq, rubberband, shine, snappy, soxr, ssh, theora, twolame, vidstab, vorbis, vpx, webp, and x265. It uses specific paths for include and library files of cuda. Disables static build.",
        "type": "comment"
    },
    "1658": {
        "file_id": 144,
        "content": "--enable-libsrt --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --disable-sndio --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared --enable-libopenh264  --enable-libtensorflow # wtf?\nmake -j8\nmake install",
        "type": "code",
        "location": "/externals/ffmpeg_libspeex_tensorflow_support.sh:5-8"
    },
    "1659": {
        "file_id": 144,
        "content": "The code is enabling a variety of libraries and modules for FFmpeg, including audio and video codecs, user interfaces, and specialized libraries like libtensorflow. It then builds and installs the configured FFmpeg.",
        "type": "comment"
    },
    "1660": {
        "file_id": 145,
        "content": "/externals/dgl_init.sh",
        "type": "filepath"
    },
    "1661": {
        "file_id": 145,
        "content": "This code is cloning and installing DGL (Dynamic Graph Library) for Python. It uses git to clone the repository, sets up a build directory with CMake, compiles the code using make, and then installs it with pip3. This process ensures that the necessary dependencies and configurations are in place before installation.",
        "type": "summary"
    },
    "1662": {
        "file_id": 145,
        "content": "git clone --depth 1 --recurse-submodules https://github.com/dmlc/dgl.git\ncd dgl # set up my fucking fastgithub proxy!\n# git submodule update --init --recursive\nmkdir build\ncd build\ncmake -DUSE_CUDA=ON ..\nmake -j4\ncd ..\npip3 install ./python # the way to install this shit.\n# cd ../python\n# python3 setup.py install",
        "type": "code",
        "location": "/externals/dgl_init.sh:1-11"
    },
    "1663": {
        "file_id": 145,
        "content": "This code is cloning and installing DGL (Dynamic Graph Library) for Python. It uses git to clone the repository, sets up a build directory with CMake, compiles the code using make, and then installs it with pip3. This process ensures that the necessary dependencies and configurations are in place before installation.",
        "type": "comment"
    },
    "1664": {
        "file_id": 146,
        "content": "/externals/detectron2_prebuilt_linux_init.sh",
        "type": "filepath"
    },
    "1665": {
        "file_id": 146,
        "content": "Installing Detectron2 with pip and specifying the wheel file location for CUDA 11.3, Torch 1.10 compatibility on Linux systems.",
        "type": "summary"
    },
    "1666": {
        "file_id": 146,
        "content": "python3 -m pip install detectron2 -f \\\n  https://dl.fbaipublicfiles.com/detectron2/wheels/cu113/torch1.10/index.html",
        "type": "code",
        "location": "/externals/detectron2_prebuilt_linux_init.sh:1-2"
    },
    "1667": {
        "file_id": 146,
        "content": "Installing Detectron2 with pip and specifying the wheel file location for CUDA 11.3, Torch 1.10 compatibility on Linux systems.",
        "type": "comment"
    },
    "1668": {
        "file_id": 147,
        "content": "/externals/bgslib-init.sh",
        "type": "filepath"
    },
    "1669": {
        "file_id": 147,
        "content": "This script clones bgslibrary, builds and installs it, sets library path, copies config folder, and provides executable scripts for video, camera, demo, and demo2 usage.",
        "type": "summary"
    },
    "1670": {
        "file_id": 147,
        "content": "git clone --recursive https://github.com/andrewssobral/bgslibrary.git\ncd bgslibrary\ncd build\ncmake ..\nmake -j $(nproc)\n####### OPTIONAL #######\nmake install\nLD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib # this is to ensure the path.\nexport LD_LIBRARY_PATH\n# for debug: echo $LD_LIBRARY_PATH\n# Next, copy the <<config>> folder from bgslibrary repository to your working space.\n# Now you can run bgslibrary by: bgs -i video.avi\n########################\ncd ..\nchmod +x *.sh\n./run_video.sh\n./run_camera.sh\n./run_demo.sh\n./run_demo2.sh",
        "type": "code",
        "location": "/externals/bgslib-init.sh:1-23"
    },
    "1671": {
        "file_id": 147,
        "content": "This script clones bgslibrary, builds and installs it, sets library path, copies config folder, and provides executable scripts for video, camera, demo, and demo2 usage.",
        "type": "comment"
    },
    "1672": {
        "file_id": 148,
        "content": "/tests/unittest_aegisub_ass_configure.py",
        "type": "filepath"
    },
    "1673": {
        "file_id": 148,
        "content": "This code reads a file using `readFile` function and stores its contents as a template in Jinja2. It then configures the template with specific font and size values from the `template_configs` dictionary, and prints the final configured template.",
        "type": "summary"
    },
    "1674": {
        "file_id": 148,
        "content": "from lazero.filesystem.io import readFile\nimport jinja2\ntemplate_configs = {\n    \"defaultFontname\": \"Arial\",\n    \"defaultFontsize\": 48,  # integer?\n    \"translationFontname\": \"Migu 1P\",\n    \"translationFontsize\": 48,\n    \"kanjiFontname\": \"Migu 1P\",\n    \"kanjiFontsize\": 46,\n    \"romajiFontname\": \"Migu 1P\",\n    \"romajiFontsize\": 38,\n}\n# template_configs = {'defaultFontname':'Anonymous Pro'}\ntemplate_path = \"/root/Desktop/works/pyjom/tests/karaoke_effects/in2.ass.j2\"\ntemplate = jinja2.Template(source=readFile(template_path))\ntemplate_configured = template.render(**template_configs)\nprint(template_configured)",
        "type": "code",
        "location": "/tests/unittest_aegisub_ass_configure.py:1-19"
    },
    "1675": {
        "file_id": 148,
        "content": "This code reads a file using `readFile` function and stores its contents as a template in Jinja2. It then configures the template with specific font and size values from the `template_configs` dictionary, and prints the final configured template.",
        "type": "comment"
    },
    "1676": {
        "file_id": 149,
        "content": "/tests/test_ocr_entity_detector.py",
        "type": "filepath"
    },
    "1677": {
        "file_id": 149,
        "content": "The code loads JSON data containing stationary and moving text, checks their locations over time using similarity metrics, and performs forced combination of OCR results, iterating through the combined results to print content and type.",
        "type": "summary"
    },
    "1678": {
        "file_id": 149,
        "content": "from test_commons import *\nfrom pyjom.medialang.functions.detectors.entityDetector import *\nimport json\n# check if text is movement or we have to mark its trajectory.\n# feeling like i am a game maker.\ndataPath = \"/root/Desktop/works/pyjom/logs/local/1649678716_663207.json\"\nmdata = open(dataPath, \"r\", encoding=\"utf8\").read()\nmdata = json.loads(mdata)\n# minMaxThresh = 14 # max difference is ten pixel. or it is considered as moving.\n# strDisThreshold = 1 # or considered as changing?\n# certThreshold = 0.7\n# changingMinMaxThresh = 25\n# changingstrDisThreshold = 2\n# timeThreshold = 0.3 # i intentially set it.\n# blockTimeThreshold = 0.3 # at least last this long?\n# strSimThreshold = 0.8\n# print(mtext, key) # this is stationary.\nfor elem in mdata:\n    # maybe something in a sequence? like location similarity?\n    # if location is similar, but text is different, do we really need to handle it?\n    # we need to collect similar frames, so we can deduct further.\n    try:\n        rev = elem[\"review\"][\"review\"][1]\n        ocrData = rev[\"subtitle_detector\"][\"subtitle_result\"][\"paddleocr\"]",
        "type": "code",
        "location": "/tests/test_ocr_entity_detector.py:1-30"
    },
    "1679": {
        "file_id": 149,
        "content": "This code is loading data from a JSON file and iterating through each element in the data. It appears to be checking if the text is stationary or moving by comparing its location and text over time, and possibly using similarity metrics like string distance and similarity threshold. The code seems to involve subtitle detection using PaddleOCR, as indicated by the \"paddleocr\" attribute in the JSON data.",
        "type": "comment"
    },
    "1680": {
        "file_id": 149,
        "content": "        # here is the core.\n        myresult = makeOCREntity(ocrData, blockTimeThreshold=0, timeThreshold=0.1)\n        myNewResult = staticOCRCombinator(myresult)  # this is forced combination.\n        # print(json.dumps(myNewResult,indent=4))\n        for key in myNewResult.keys():\n            myElem = myNewResult[key]\n            print(myElem[\"content\"], key)\n        breakpoint()\n    except:\n        import traceback\n        traceback.print_exc()\n        breakpoint()",
        "type": "code",
        "location": "/tests/test_ocr_entity_detector.py:31-43"
    },
    "1681": {
        "file_id": 149,
        "content": "Code snippet initializes and performs a forced combination of OCR results, then iterates over the combined results and prints their content and type.",
        "type": "comment"
    },
    "1682": {
        "file_id": 150,
        "content": "/tests/test_weibo_pets.py",
        "type": "filepath"
    },
    "1683": {
        "file_id": 150,
        "content": "This code imports necessary modules, initializes a WeiboPetsReviewer object with specific parameters and then runs its main function to perform an automated review of Weibo Pets data.",
        "type": "summary"
    },
    "1684": {
        "file_id": 150,
        "content": "from test_commons import *\nfrom pyjom.primitives import *  # this is capitalized.\ntemplate_names = [\"subtitle_detector.mdl.j2\"]\nautoArgs = {\"subtitle_detector\": {\"timestep\": 0.2}}\nwbRev = WeiboPetsReviewer(\n    auto=True,\n    semiauto=False,\n    dummy_auto=False,\n    args=autoArgs,\n    template_names=template_names,\n)\n# wbRev.main(skip_review=True) # to test feedback.\nwbRev.main()",
        "type": "code",
        "location": "/tests/test_weibo_pets.py:1-15"
    },
    "1685": {
        "file_id": 150,
        "content": "This code imports necessary modules, initializes a WeiboPetsReviewer object with specific parameters and then runs its main function to perform an automated review of Weibo Pets data.",
        "type": "comment"
    },
    "1686": {
        "file_id": 151,
        "content": "/tests/test_remerge_demanded_cut_spans.py",
        "type": "filepath"
    },
    "1687": {
        "file_id": 151,
        "content": "This code defines cut_spans as ranges for processing and creates a test function to check if the list of spans has consistent order, duration, and is remerged correctly.",
        "type": "summary"
    },
    "1688": {
        "file_id": 151,
        "content": "cut_spans = [(0, 1), (1, 2), (2, 9), (9, 100), (100, 101), (101, 102)]\n# cut_spans=[(0, 2.43475), (2.43475, 4.3458125), (4.3458125, 7.543145833333333), (7.543145833333333, 10.7313125), (10.7313125, 13.928645833333333), (13.928645833333333, 16.492041666666665), (16.492041666666665, 22.216020833333335), (22.216020833333335, 25.4225625), (25.4225625, 30.530958333333334), (30.530958333333334, 33.709916666666665), (33.709916666666665, 36.907270833333335), (36.907270833333335, 39.46145833333333), (39.46145833333333, 42.649625), (42.649625, 46.499291666666664), (46.499291666666664, 49.0443125), (49.0443125, 52.54485416666667), (52.54485416666667, 55.10825), (55.10825, 57.65325), (57.65325, 61.806125), (61.806125, 64.99429166666667), (64.99429166666667, 67.55766666666666), (67.55766666666666, 70.1026875), (70.1026875, 73.28164583333333), (73.28164583333333, 76.16660416666667), (76.16660416666667, 79.99791666666667), (79.99791666666667, 82.23054166666667), (82.23054166666667, 85.1063125), (85.10",
        "type": "code",
        "location": "/tests/test_remerge_demanded_cut_spans.py:1-2"
    },
    "1689": {
        "file_id": 151,
        "content": "Code defines a list of cut_spans, where each span represents a range of values for further processing or analysis.",
        "type": "comment"
    },
    "1690": {
        "file_id": 151,
        "content": "63125, 87.97289583333334), (87.97289583333334, 91.1610625), (91.1610625, 93.09047916666667), (93.09047916666667, 96.26945833333333), (96.26945833333333, 100.42233333333333), (100.42233333333333, 102.97652083333334), (102.97652083333334, 106.80783333333333), (106.80783333333333, 111.27308333333333), (111.27308333333333, 117.33702083333333), (117.33702083333333, 119.57883333333334), (119.57883333333334, 123.0701875), (123.0701875, 127.250625), (127.250625, 129.7864375), (129.7864375, 134.57327083333334), (134.57327083333334, 137.7614375), (137.7614375, 140.95877083333335), (140.95877083333335, 146.06716666666668), (146.06716666666668, 150.5324375), (150.5324375, 153.72058333333334), (153.72058333333334, 157.55189583333333), (157.55189583333333, 160.74922916666668), (160.74922916666668, 163.3034375), (163.3034375, 164.25895833333334), (164.25895833333334, 164.89291666666668), (164.89291666666668, 171.576)]\nfrom test_commons import *\nfrom pyjom.lyrictoolbox import remergeDemandedCutSpans\ndef test_cut_spans_valid(list_of_spans, min_span=1.5, max_span=10, no_range_test=False):",
        "type": "code",
        "location": "/tests/test_remerge_demanded_cut_spans.py:2-7"
    },
    "1691": {
        "file_id": 151,
        "content": "This code defines a function `test_cut_spans_valid` that takes a list of spans and optional arguments for minimum and maximum span duration. It calls the `remergeDemandedCutSpans` function from `pyjom.lyrictoolbox`. The code also imports functions from `test_commons` module and defines some variables.",
        "type": "comment"
    },
    "1692": {
        "file_id": 151,
        "content": "    start = list_of_spans[0][0]\n    init_end = list_of_spans[0][1]\n    minit_duration = list_of_spans[0][1] - start\n    if not no_range_test:\n        assert start < list_of_spans[0][1]\n        assert minit_duration >= min_span and minit_duration <= max_span\n    # end = list_of_spans[-1][1]\n    for i, span in enumerate(list_of_spans[1:]):\n        mstart, mend = span\n        try:\n            assert mstart == init_end\n        except:\n            print(mstart, mend, init_end, i + 1)\n            print(list_of_spans[max(0, i - 2) : min(len(list_of_spans), i + 2)])\n            breakpoint()\n        assert mstart < mend\n        duration = mend - mstart\n        if not no_range_test:\n            assert duration >= min_span and duration <= max_span\n        init_end = mend\ntest_cut_spans_valid(cut_spans, no_range_test=True)\nnew_spans = remergeDemandedCutSpans(cut_spans)\nprint(\"new spans?\", new_spans)\ntest_cut_spans_valid(new_spans)\nassert cut_spans[0][0] == new_spans[0][0]\nassert cut_spans[-1][1] == new_spans[-1][1]",
        "type": "code",
        "location": "/tests/test_remerge_demanded_cut_spans.py:8-35"
    },
    "1693": {
        "file_id": 151,
        "content": "This code checks if the list of spans has a consistent order and duration. It asserts that the start of each span is less than its end, and the duration (end - start) adheres to specified minimum and maximum span values. If any assertion fails, it prints the offending span and surrounding spans for debugging. The code then tests if the list of spans has been remerged correctly using the remergeDemandedCutSpans function, ensuring that the first and last spans remain unchanged.",
        "type": "comment"
    },
    "1694": {
        "file_id": 152,
        "content": "/tests/test_manual_censorInterface.py",
        "type": "filepath"
    },
    "1695": {
        "file_id": 152,
        "content": "The code imports necessary modules, defines lists of tags, shuffles them, and uses the censorInterface function to perform content censorship on a title and content with specified tags. It then prints the result.",
        "type": "summary"
    },
    "1696": {
        "file_id": 152,
        "content": "from test_commons import *\nfrom pyjom.modules.contentCensoring.core import censorInterface\nmcounter = 20\nmtags0 = [\"superLongtag{}\".format(x) for x in range(mcounter)]  # must be differet.\nmtags1 = [\"tag{}\".format(x) for x in range(mcounter)]\nmtags = mtags0 + mtags1\nimport random\nrandom.shuffle(mtags)\nresult = censorInterface(\n    \"title\", [\"mytopic\", \"another topic\"], \"mycontent\", mtags=mtags\n)\nprint(result)",
        "type": "code",
        "location": "/tests/test_manual_censorInterface.py:1-18"
    },
    "1697": {
        "file_id": 152,
        "content": "The code imports necessary modules, defines lists of tags, shuffles them, and uses the censorInterface function to perform content censorship on a title and content with specified tags. It then prints the result.",
        "type": "comment"
    },
    "1698": {
        "file_id": 153,
        "content": "/tests/test_local_reviewer.py",
        "type": "filepath"
    },
    "1699": {
        "file_id": 153,
        "content": "This code imports necessary modules, initializes a FilesystemContentReviewer object with a directory path, and calls its main() method to perform content review on the specified directory.",
        "type": "summary"
    }
}