{
    "1600": {
        "file_id": 136,
        "content": "# yes | apt install libcdio-dev\n# yes | apt install libcodec2-dev\n# yes | apt install libdav1d-dev\n# yes | apt install libflite-dev\n# yes | apt install libfontconfig-dev\n# yes | apt install libfreetype-dev\n# yes | apt install libfribidi-dev\n# yes | apt install libgme-dev\n# yes | apt install libgsm-dev\n# yes | apt install libjack-dev\n# yes | apt install libmp3lame-dev\n# yes | apt install libmysofa-dev\n# yes | apt install libopenjpeg-dev\n# yes | apt install libopenmpt-dev\n# yes | apt install libopus-dev\n# yes | apt install libpulse-dev\n# yes | apt install librabbitmq-dev\n# yes | apt install librubberband-dev\n# yes | apt install libshine-dev\n# yes | apt install libsnappy-dev\n# yes | apt install libsoxr-dev\n# yes | apt install libspeex-dev\n# yes | apt install libsrt-dev\n# yes | apt install libssh-dev\n# yes | apt install libtheora-dev\n# yes | apt install libtwolame-dev\n# yes | apt install libvidstab-dev\n# yes | apt install libvorbis-dev\n# yes | apt install libvpx-dev\n# yes | apt install libwebp-dev\n# yes | apt install libx265-dev",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:22-52"
    },
    "1601": {
        "file_id": 136,
        "content": "This code is installing various library development packages using the \"apt install\" command with \"yes\" for auto-confirmation, possibly for a project's dependencies.",
        "type": "comment"
    },
    "1602": {
        "file_id": 136,
        "content": "# yes | apt install libxml2-dev\n# yes | apt install libxvid-dev\n# yes | apt install libzimg-dev\n# yes | apt install libzmq-dev\n# yes | apt install libzvbi-dev\n# yes | apt install lv2-dev\n# yes | apt install liblv2-dev\n# yes | apt install omx-dev\n# yes | apt install libomx-dev\n# yes | apt install openal-dev\n# yes | apt install libopenal-dev\n# yes | apt install opencl-dev\n# yes | apt install libopencl-dev\n# yes | apt install opengl-dev\n# yes | apt install libopengl-dev\n# yes | apt install sdl2-dev\n# yes | apt install libsdl2-dev\n# yes | apt install pocketsphinx-dev\n# yes | apt install libpocketsphinx-dev\n# yes | apt install librsvg-dev\n# yes | apt install libmfx-dev\n# yes | apt install libdc1394-dev\n# yes | apt install libdrm-dev\n# yes | apt install chromaprint-dev\n# yes | apt install libchromaprint-dev\n# yes | apt install frei0r-dev\n# yes | apt install libfrei0r-dev\n# yes | apt install libx264-dev\ncd ffmpeg\n# libchromaprint: audio fingerprint\n# frei0r: video effects\n# libaom-dev: av1 video codec\n# ./configure --enable",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:53-85"
    },
    "1603": {
        "file_id": 136,
        "content": "Installing various development packages for different libraries and codecs before configuring ffmpeg.",
        "type": "comment"
    },
    "1604": {
        "file_id": 136,
        "content": "-nonfree --enable-cuda-nvcc --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static --enable-shared\n# ./configure --enable-gpl --enable-nonfree --enable-pthreads --extra-libs=-lstdc++ --enable-cuda-nvcc --enable-cuvid --enable-nvenc --enable-shared --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --enable-libnpp --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static \n# add libspeex\n# why libspeex is not working?\n# you'd better build this shit from source.\n# because libspeex1 rebuild or something.\n###LAST WORKING ONE\n./configure --toolchain=hardened  --arch=amd64 --enable-gpl --enable-nonfree --enable-pthreads --extra-libs=-lstdc++ --enable-cuda-nvcc --enable-cuvid --enable-nvenc --enable-shared --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --enable-libnpp --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --ena",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:85-93"
    },
    "1605": {
        "file_id": 136,
        "content": "This code sets various options for configuring FFmpeg, including enabling CUDA NVCC, enabling CUDA CUDV and NVENC, enabling LibNPP, specifying extra include and link directories, disabling static builds, and enabling Gnutls, LADSPA, libAOM, libASS, libBluray, libBS2B. It uses a hardened toolchain with AMD64 architecture, and refers to previous issues with LibSpeex, suggesting rebuilding from source.",
        "type": "comment"
    },
    "1606": {
        "file_id": 136,
        "content": "ble-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libsrt --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --disable-sndio --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared --enable-libopenh264 # wtf?\n### LAST WORKING ONE\n# ./configure --enable-gpl --enable-nonfree --enable-",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:93-96"
    },
    "1607": {
        "file_id": 136,
        "content": "The code is configuring the build of a software library with various components enabled, specifying different libraries and options for compilation. It enables several libs like cdio, codec2, dav1d, fontconfig, freetype, fribidi etc., disables sndio and searches for the last working configuration for an older version.",
        "type": "comment"
    },
    "1608": {
        "file_id": 136,
        "content": "pthreads --extra-libs=-lstdc++ --enable-cuda-nvcc --enable-cuvid --enable-nvenc --enable-shared --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --enable-libnpp --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --arch=amd64 --enable-gpl --disable-stripping --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:96-96"
    },
    "1609": {
        "file_id": 136,
        "content": "This code is enabling various libraries and options for the FFmpeg compilation, including CUDA-NVCC, CUVID, NVENC, shared libraries, LibNPP, hardened toolchain, specific architecture, GPL, disabling stripping, and enabling Gnutls among others.",
        "type": "comment"
    },
    "1610": {
        "file_id": 136,
        "content": "libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --disable-sndio --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared\n# ./configure --prefix=/usr/local/ffmpeg --enable-gpl --enable-nonfree --enable-pthreads --extra-cflags=-g --extra-cflags=-O0 --extra-libs=-lstdc++ --extra-cxxflags=-g --extra-cxxflags=-O0 --extra-cxxflags=-fpermissive --enable-debug=3 --disable-optimizations --disable-stripping --disable-x86asm --enable-cuda-nvcc --enable-cuvid --enable-shared --enable-nvenc --enable-shared --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --extra-ldflags=-L/usr/local/cuda/lib64\nmake -j8\nmake install\n# this is not distributable. non-free nvenc\n# without mp3!\n# original compiling flags:",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:96-104"
    },
    "1611": {
        "file_id": 136,
        "content": "This code is configuring and compiling the FFmpeg library with various enabled components such as libvorbis, libvpx, libwebp, and more. It also includes specific build configurations for optimization and debugging. The final \"make\" commands compile and install the configured FFmpeg library.",
        "type": "comment"
    },
    "1612": {
        "file_id": 136,
        "content": "# --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --arch=amd64 --enable-gpl --disable-stripping --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enab",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:105-105"
    },
    "1613": {
        "file_id": 136,
        "content": "This code is enabling various libraries and features for FFmpeg, a popular multimedia framework. It includes support for audio and video codecs, file formats, filters, and more. The code specifies the toolchain, directories, architecture, and enabled features for building FFmpeg.",
        "type": "comment"
    },
    "1614": {
        "file_id": 136,
        "content": "le-sdl2 --disable-sndio --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared",
        "type": "code",
        "location": "/externals/init_ffmpeg.sh:105-105"
    },
    "1615": {
        "file_id": 136,
        "content": "This code enables specific libraries for a software by passing the corresponding options using the --enable flag, which ultimately disables other components and enables these selected ones.",
        "type": "comment"
    },
    "1616": {
        "file_id": 137,
        "content": "/externals/opencv_py_reset.sh",
        "type": "filepath"
    },
    "1617": {
        "file_id": 137,
        "content": "The code uninstalls opencv packages, installs opencv-python, and adds a .so file for CUDA function. It updates installation options with directories, compilation settings, and OpenCV Python reset script choices.",
        "type": "summary"
    },
    "1618": {
        "file_id": 137,
        "content": "cd opencv/build/python_loader\nyes | pip3 uninstall opencv\nyes | pip3 uninstall opencv-contrib\nyes | pip3 uninstall opencv-python\nyes | pip3 uninstall opencv-contrib-python\nyes | pip3 install opencv-python # will that break shit?\npython3 setup.py install\n# it is all about that .so file.\n# you would like to say that you have installed the thing.\n# place a link of .so or something, to use the cuda function.\ncp /usr/local/lib/python3.9/site-packages/cv2/python-3.9/cv2.cpython-39-x86_64-linux-gnu.so /usr/local/lib/python3.9/dist-packages/\n# pip3 install .\n# python3 setup.py install --install-lib /usr/lib/python3/dist-packages/\n# # python3 setup.py install --root /usr/lib/python3/dist-packages/\n# Options for 'install' command:\n#   --prefix                             installation prefix\n#   --exec-prefix                        (Unix only) prefix for platform-\n#                                        specific files\n#   --home                               (Unix only) home directory to install\n#                                        under",
        "type": "code",
        "location": "/externals/opencv_py_reset.sh:1-24"
    },
    "1619": {
        "file_id": 137,
        "content": "Code uninstalls opencv packages, installs opencv-python, and places a .so file to use CUDA function. It updates installation prefix, exec-prefix, and home directory options for 'install' command.",
        "type": "comment"
    },
    "1620": {
        "file_id": 137,
        "content": "#   --install-base                       base installation directory (instead of\n#                                        --prefix or --home)\n#   --install-platbase                   base installation directory for\n#                                        platform-specific files (instead of --\n#                                        exec-prefix or --home)\n#   --root                               install everything relative to this\n#                                        alternate root directory\n#   --install-purelib                    installation directory for pure Python\n#                                        module distributions\n#   --install-platlib                    installation directory for non-pure\n#                                        module distributions\n#   --install-lib                        installation directory for all module\n#                                        distributions (overrides --install-\n#                                        purelib and --install-platlib)\n#   --install-headers                    installation directory for C/C++",
        "type": "code",
        "location": "/externals/opencv_py_reset.sh:25-39"
    },
    "1621": {
        "file_id": 137,
        "content": "This code snippet is a part of a help function describing various installation directories and their purposes in the OpenCV library. It provides information on different options like --install-base, --install-platbase, --root, --install-purelib, --install-platlib, --install-lib, and --install-headers.",
        "type": "comment"
    },
    "1622": {
        "file_id": 137,
        "content": "#                                        headers\n#   --install-scripts                    installation directory for Python\n#                                        scripts\n#   --install-data                       installation directory for data files\n#   --compile (-c)                       compile .py to .pyc [default]\n#   --no-compile                         don't compile .py files\n#   --optimize (-O)                      also compile with optimization: -O1 for\n#                                        \"python -O\", -O2 for \"python -OO\", and\n#                                        -O0 to disable [default: -O0]\n#   --force (-f)                         force installation (overwrite any\n#                                        existing files)\n#   --skip-build                         skip rebuilding everything (for\n#                                        testing/debugging)\n#   --record                             filename in which to record list of\n#                                        installed files",
        "type": "code",
        "location": "/externals/opencv_py_reset.sh:40-54"
    },
    "1623": {
        "file_id": 137,
        "content": "This code snippet describes the various options for installing Python packages, including installation directories for scripts and data files, compilation settings like optimization level and no-compile flag, force installation option, skipping build, and recording installed files.",
        "type": "comment"
    },
    "1624": {
        "file_id": 137,
        "content": "#   --user                               install in user site-package\n#                                        '/root/.local/lib/python3.9/site-\n#                                        packages'\n#   --old-and-unmanageable               Try not to use this!\n#   --single-version-externally-managed  used by system package builders to\n#                                        create 'flat' eggs",
        "type": "code",
        "location": "/externals/opencv_py_reset.sh:55-60"
    },
    "1625": {
        "file_id": 137,
        "content": "This code snippet describes various installation options for OpenCV Python reset script. It mentions the user site-package location, a deprecated option, and a system package builder choice for 'flat' eggs.",
        "type": "comment"
    },
    "1626": {
        "file_id": 138,
        "content": "/externals/init_darknet.sh",
        "type": "filepath"
    },
    "1627": {
        "file_id": 138,
        "content": "This code clones the Darknet repository, changes directory to it, sets GPU and CUDNN variables, then builds the darknet executable using make.",
        "type": "summary"
    },
    "1628": {
        "file_id": 138,
        "content": "git clone --depth 1 https://github.com/AlexeyAB/darknet\ncd darknet\n# GPU=1\n# CUDNN=1\n# make y",
        "type": "code",
        "location": "/externals/init_darknet.sh:1-6"
    },
    "1629": {
        "file_id": 138,
        "content": "This code clones the Darknet repository, changes directory to it, sets GPU and CUDNN variables, then builds the darknet executable using make.",
        "type": "comment"
    },
    "1630": {
        "file_id": 139,
        "content": "/externals/opencv_rebuild.sh",
        "type": "filepath"
    },
    "1631": {
        "file_id": 139,
        "content": "This script configures, builds, and installs OpenCV with CUDA support using CMake. It sets environment variables for proxy, libraries, and GCC-9, customizing the building process based on defined modules, applications, and languages.",
        "type": "summary"
    },
    "1632": {
        "file_id": 139,
        "content": "cd opencv\n# cd build\n# rm -rf build\n# mkdir build\ncd build\n# Configure\n# do not use anaconda\nconda deactivate\n# override anaconda in $PATH\n# export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games:/usr/local/cuda-10.2/bin:/snap/bin\nexport PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games:/snap/bin # ignore incompatible nvcc\n# to download things.\n# export HTTP_PROXY=http://192.168.43.78:8899\n# export http_proxy=http://192.168.43.78:8899\n# export https_proxy=http://192.168.43.78:8899\n# export HTTPS_PROXY=http://192.168.43.78:8899\n# export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/:$LD_LIBRARY_PATH\n# need turn cuda on.\n# switch to gcc-9, lower than 10\ncmake -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.x/modules -DHTTP_PROXY=http://192.168.43.78:38457 -DWITH_CUDA=ON ../opencv-4.x\n# Build\ncmake --build .\nmake install \n# cd /media/root/help/pyjom/externals/\n# bash /media/root/help/pyjom/externals/opencv_py_reset.sh\n# --   OpenCV modules:",
        "type": "code",
        "location": "/externals/opencv_rebuild.sh:1-27"
    },
    "1633": {
        "file_id": 139,
        "content": "This script changes directory to the OpenCV folder, configures and builds it using CMake, then installs it. It also sets environment variables for proxy, library paths, and ensures use of GCC-9. The script is specifically configured for CUDA support and uses a custom opencv_py_reset.sh script.",
        "type": "comment"
    },
    "1634": {
        "file_id": 139,
        "content": "# --     To be built:                 alphamat aruco barcode bgsegm bioinspired calib3d ccalib core cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev datasets dnn dnn_objdetect dnn_superres dpm face features2d flann freetype fuzzy gapi hdf hfs highgui img_hash imgcodecs imgproc intensity_transform java line_descriptor mcc ml objdetect optflow phase_unwrapping photo plot python2 python3 quality rapid reg rgbd saliency sfm shape stereo stitching structured_light superres surface_matching text tracking ts video videoio videostab wechat_qrcode xfeatures2d ximgproc xobjdetect xphoto\n# --     Disabled:                    world\n# --     Disabled by dependency:      -\n# --     Unavailable:                 cvv julia matlab ovis viz\n# --     Applications:                tests perf_tests apps",
        "type": "code",
        "location": "/externals/opencv_rebuild.sh:28-32"
    },
    "1635": {
        "file_id": 139,
        "content": "The code is a list of OpenCV modules, applications, and languages that are to be built, disabled, disabled by dependency, or unavailable. This script controls the building process based on these definitions.",
        "type": "comment"
    },
    "1636": {
        "file_id": 140,
        "content": "/externals/opencv_init.sh",
        "type": "filepath"
    },
    "1637": {
        "file_id": 140,
        "content": "Code snippet initializes the OpenCV library. It creates a directory, downloads the required zip files, extracts them, configures the build with CMake, builds and installs the library, and finally resets the Python bindings for OpenCV.",
        "type": "summary"
    },
    "1638": {
        "file_id": 140,
        "content": "mkdir opencv\ncd opencv\nwget -O opencv.zip https://github.com/opencv/opencv/archive/4.x.zip\nwget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.x.zip\nunzip opencv.zip\nunzip opencv_contrib.zip\n# Create build directory and switch into it\nmkdir -p build && cd build\n# Configure\ncmake -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.x/modules -DWITH_CUDA=ON ../opencv-4.x\n# Build\ncmake --build .\nmake install\nbash /media/root/help/pyjom/externals/opencv_py_reset.sh",
        "type": "code",
        "location": "/externals/opencv_init.sh:1-16"
    },
    "1639": {
        "file_id": 140,
        "content": "Code snippet initializes the OpenCV library. It creates a directory, downloads the required zip files, extracts them, configures the build with CMake, builds and installs the library, and finally resets the Python bindings for OpenCV.",
        "type": "comment"
    },
    "1640": {
        "file_id": 141,
        "content": "/externals/get_the_heck_ffmpeg.py",
        "type": "filepath"
    },
    "1641": {
        "file_id": 141,
        "content": "This code splits a string into enabled FFmpeg library names, adds \"-dev\" if necessary, and installs them using \"apt install\".",
        "type": "summary"
    },
    "1642": {
        "file_id": 141,
        "content": "mystr = \"-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-chromaprint --enable-frei0r --enable-libx264 \"\nmystr = mystr.split(\" \")",
        "type": "code",
        "location": "/externals/get_the_heck_ffmpeg.py:1-3"
    },
    "1643": {
        "file_id": 141,
        "content": "Code is splitting the string mystr into an array of individual enabled libraries for FFmpeg.",
        "type": "comment"
    },
    "1644": {
        "file_id": 141,
        "content": "mylibs = []\nfor elem in mystr:\n    a = elem.replace(\"-\",\"\").replace(\" \",\"\").replace(\"enable\",\"\")\n    if len(a) <=2:\n        continue\n    if a.startswith(\"lib\"):\n        a +=\"-dev\"\n        mylibs.append(a)\n    else:\n        a+= \"-dev\"\n        b = \"lib\"+a\n        mylibs.append(a)\n        mylibs.append(b)\nfor lib in mylibs:\n    print(\"yes | apt install {}\".format(lib))",
        "type": "code",
        "location": "/externals/get_the_heck_ffmpeg.py:5-20"
    },
    "1645": {
        "file_id": 141,
        "content": "This code filters out a list of library names from a given string, adds \"-dev\" if it doesn't start with \"lib\", and then installs each library using \"apt install\".",
        "type": "comment"
    },
    "1646": {
        "file_id": 142,
        "content": "/externals/netease_api_download.sh",
        "type": "filepath"
    },
    "1647": {
        "file_id": 142,
        "content": "The code is cloning a GitHub repository, changing the directory to it, and installing two packages (husky and npm) for further usage.",
        "type": "summary"
    },
    "1648": {
        "file_id": 142,
        "content": "git clone --depth 1 https://github.com/Binaryify/NeteaseCloudMusicApi.git\ncd NeteaseCloudMusicApi\nnpm install -g husky\nnpm install -g .",
        "type": "code",
        "location": "/externals/netease_api_download.sh:1-7"
    },
    "1649": {
        "file_id": 142,
        "content": "The code is cloning a GitHub repository, changing the directory to it, and installing two packages (husky and npm) for further usage.",
        "type": "comment"
    },
    "1650": {
        "file_id": 143,
        "content": "/externals/init_opentoolz.sh",
        "type": "filepath"
    },
    "1651": {
        "file_id": 143,
        "content": "Installing necessary packages, cloning OpenToonz repository, configuring and compiling third-party dependencies, building the software, installing it, and creating a symbolic link to simplify execution.",
        "type": "summary"
    },
    "1652": {
        "file_id": 143,
        "content": "# sudo apt-get install build-essential git cmake pkg-config libboost-all-dev  qtbase5-dev libqt5svg5-dev qtscript5-dev qttools5-dev qttools5-dev-tools libqt5opengl5-dev qtmultimedia5-dev libqt5multimedia5-plugins libqt5serialport5-dev libsuperlu-dev  liblz4-dev libusb-1.0-0-dev liblzo2-dev libpng-dev libjpeg-dev libglew-dev freeglut3-dev libfreetype6-dev libjson-c-dev qtwayland5 libmypaint-dev libopencv-dev libturbojpeg-dev\n# sudo apt-get install libmypaint-dev\n# git clone --depth 1 https://github.com/opentoonz/opentoonz\nmkdir -p $HOME/.config/OpenToonz\ncp -r opentoonz/stuff $HOME/.config/OpenToonz/\ncd opentoonz/thirdparty/tiff-4.0.3\n./configure --with-pic --disable-jbig\nmake -j$(nproc)\ncd ../../\ncd toonz\nmkdir build\ncd build\ncmake ../sources\nmake -j$(nproc)\nsudo make install\nln -s /opt/opentoonz/bin/opentoonz /usr/bin/opentoonz",
        "type": "code",
        "location": "/externals/init_opentoolz.sh:1-23"
    },
    "1653": {
        "file_id": 143,
        "content": "Installing necessary packages, cloning OpenToonz repository, configuring and compiling third-party dependencies, building the software, installing it, and creating a symbolic link to simplify execution.",
        "type": "comment"
    },
    "1654": {
        "file_id": 144,
        "content": "/externals/ffmpeg_libspeex_tensorflow_support.sh",
        "type": "filepath"
    },
    "1655": {
        "file_id": 144,
        "content": "The code configures FFmpeg with various libraries, modules, and specific paths for CUDA include and library files, then builds and installs the custom FFmpeg.",
        "type": "summary"
    },
    "1656": {
        "file_id": 144,
        "content": "cd ffmpeg\n###LAST WORKING ONE\n./configure --toolchain=hardened  --arch=amd64  --enable-libspeex --enable-gpl --enable-nonfree --enable-pthreads --extra-libs=-lstdc++ --enable-cuda-nvcc --enable-cuvid --enable-nvenc --enable-shared --enable-libnpp --extra-cflags=-I/usr/local/cuda/include --enable-libnpp --extra-ldflags=-L/usr/local/cuda/lib64 --disable-static --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 ",
        "type": "code",
        "location": "/externals/ffmpeg_libspeex_tensorflow_support.sh:1-5"
    },
    "1657": {
        "file_id": 144,
        "content": "The code configures the ffmpeg build with various options such as libspeex, gpl, nonfree, pthreads, and more. It also enables cuda-nvcc, cuvid, nvenc, shared, gnutls, ladspa, aom, ass, bluray, bs2b, caca, dav1d, fontconfig, fribidi, gme, gsm, jack, mp3lame, mysofa, openjpeg, openmpt, opus, pulse, rabbitmq, rubberband, shine, snappy, soxr, ssh, theora, twolame, vidstab, vorbis, vpx, webp, and x265. It uses specific paths for include and library files of cuda. Disables static build.",
        "type": "comment"
    },
    "1658": {
        "file_id": 144,
        "content": "--enable-libsrt --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --disable-sndio --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared --enable-libopenh264  --enable-libtensorflow # wtf?\nmake -j8\nmake install",
        "type": "code",
        "location": "/externals/ffmpeg_libspeex_tensorflow_support.sh:5-8"
    },
    "1659": {
        "file_id": 144,
        "content": "The code is enabling a variety of libraries and modules for FFmpeg, including audio and video codecs, user interfaces, and specialized libraries like libtensorflow. It then builds and installs the configured FFmpeg.",
        "type": "comment"
    },
    "1660": {
        "file_id": 145,
        "content": "/externals/dgl_init.sh",
        "type": "filepath"
    },
    "1661": {
        "file_id": 145,
        "content": "This code is cloning and installing DGL (Dynamic Graph Library) for Python. It uses git to clone the repository, sets up a build directory with CMake, compiles the code using make, and then installs it with pip3. This process ensures that the necessary dependencies and configurations are in place before installation.",
        "type": "summary"
    },
    "1662": {
        "file_id": 145,
        "content": "git clone --depth 1 --recurse-submodules https://github.com/dmlc/dgl.git\ncd dgl # set up my fucking fastgithub proxy!\n# git submodule update --init --recursive\nmkdir build\ncd build\ncmake -DUSE_CUDA=ON ..\nmake -j4\ncd ..\npip3 install ./python # the way to install this shit.\n# cd ../python\n# python3 setup.py install",
        "type": "code",
        "location": "/externals/dgl_init.sh:1-11"
    },
    "1663": {
        "file_id": 145,
        "content": "This code is cloning and installing DGL (Dynamic Graph Library) for Python. It uses git to clone the repository, sets up a build directory with CMake, compiles the code using make, and then installs it with pip3. This process ensures that the necessary dependencies and configurations are in place before installation.",
        "type": "comment"
    },
    "1664": {
        "file_id": 146,
        "content": "/externals/detectron2_prebuilt_linux_init.sh",
        "type": "filepath"
    },
    "1665": {
        "file_id": 146,
        "content": "Installing Detectron2 with pip and specifying the wheel file location for CUDA 11.3, Torch 1.10 compatibility on Linux systems.",
        "type": "summary"
    },
    "1666": {
        "file_id": 146,
        "content": "python3 -m pip install detectron2 -f \\\n  https://dl.fbaipublicfiles.com/detectron2/wheels/cu113/torch1.10/index.html",
        "type": "code",
        "location": "/externals/detectron2_prebuilt_linux_init.sh:1-2"
    },
    "1667": {
        "file_id": 146,
        "content": "Installing Detectron2 with pip and specifying the wheel file location for CUDA 11.3, Torch 1.10 compatibility on Linux systems.",
        "type": "comment"
    },
    "1668": {
        "file_id": 147,
        "content": "/externals/bgslib-init.sh",
        "type": "filepath"
    },
    "1669": {
        "file_id": 147,
        "content": "This script clones bgslibrary, builds and installs it, sets library path, copies config folder, and provides executable scripts for video, camera, demo, and demo2 usage.",
        "type": "summary"
    },
    "1670": {
        "file_id": 147,
        "content": "git clone --recursive https://github.com/andrewssobral/bgslibrary.git\ncd bgslibrary\ncd build\ncmake ..\nmake -j $(nproc)\n####### OPTIONAL #######\nmake install\nLD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib # this is to ensure the path.\nexport LD_LIBRARY_PATH\n# for debug: echo $LD_LIBRARY_PATH\n# Next, copy the <<config>> folder from bgslibrary repository to your working space.\n# Now you can run bgslibrary by: bgs -i video.avi\n########################\ncd ..\nchmod +x *.sh\n./run_video.sh\n./run_camera.sh\n./run_demo.sh\n./run_demo2.sh",
        "type": "code",
        "location": "/externals/bgslib-init.sh:1-23"
    },
    "1671": {
        "file_id": 147,
        "content": "This script clones bgslibrary, builds and installs it, sets library path, copies config folder, and provides executable scripts for video, camera, demo, and demo2 usage.",
        "type": "comment"
    },
    "1672": {
        "file_id": 148,
        "content": "/tests/test_bilibili_resolve_tid.py",
        "type": "filepath"
    },
    "1673": {
        "file_id": 148,
        "content": "This code imports necessary modules, sets tid to 217, and calls resolveSubTidsFromTid function with the tid. The returned result is then printed. It tests resolving subTids from a given tid in Bilibili platform's database.",
        "type": "summary"
    },
    "1674": {
        "file_id": 148,
        "content": "from test_commons import *\nfrom pyjom.platforms.bilibili.database import resolveSubTidsFromTid\ntid = 217\nresult = resolveSubTidsFromTid(tid)\nprint(\"RESULT?\", result)",
        "type": "code",
        "location": "/tests/test_bilibili_resolve_tid.py:1-6"
    },
    "1675": {
        "file_id": 148,
        "content": "This code imports necessary modules, sets tid to 217, and calls resolveSubTidsFromTid function with the tid. The returned result is then printed. It tests resolving subTids from a given tid in Bilibili platform's database.",
        "type": "comment"
    },
    "1676": {
        "file_id": 149,
        "content": "/tests/test_manual_censor.py",
        "type": "filepath"
    },
    "1677": {
        "file_id": 149,
        "content": "The code imports necessary functions from test_commons and contentCensoring, initiates a test sequence by calling censorInterface with input data for title, content and prints collected data.",
        "type": "summary"
    },
    "1678": {
        "file_id": 149,
        "content": "from test_commons import *\nfrom contentCensoring import *\nprint(\"initiating test sequence...\")\nmdata = censorInterface(\n    \"test_title\",\n    None,\n    \"test_content\",\n)\nprint(\"interface closed.\")\nprint(\"collected data:\", mdata)",
        "type": "code",
        "location": "/tests/test_manual_censor.py:1-11"
    },
    "1679": {
        "file_id": 149,
        "content": "The code imports necessary functions from test_commons and contentCensoring, initiates a test sequence by calling censorInterface with input data for title, content and prints collected data.",
        "type": "comment"
    },
    "1680": {
        "file_id": 150,
        "content": "/tests/test_bilibili_register_video.py",
        "type": "filepath"
    },
    "1681": {
        "file_id": 150,
        "content": "This code imports necessary modules, sets bilibili video ID and user ID, calls the \"registerBilibiliUserVideo\" function to register the video with given parameters, and prints the success status of registration.",
        "type": "summary"
    },
    "1682": {
        "file_id": 150,
        "content": "dedeuserid = str(397424026)\nbvid = \"BV1Gd4y1j7ht\"\nfrom test_commons import *\nfrom pyjom.modules.contentPosting.bilibiliPoster import registerBilibiliUserVideo\nsuccess = registerBilibiliUserVideo(bvid, dedeuserid)\nprint(\"SUCCESS?\", success)",
        "type": "code",
        "location": "/tests/test_bilibili_register_video.py:1-7"
    },
    "1683": {
        "file_id": 150,
        "content": "This code imports necessary modules, sets bilibili video ID and user ID, calls the \"registerBilibiliUserVideo\" function to register the video with given parameters, and prints the success status of registration.",
        "type": "comment"
    },
    "1684": {
        "file_id": 151,
        "content": "/tests/test_auto_dog_video_giphy_online_producer.sh",
        "type": "filepath"
    },
    "1685": {
        "file_id": 151,
        "content": "This code sets up an environment and runs tests for a video producer script. It first kills the existing test session, loads a configuration file, and then checks the media language render result. The Python script is used to perform full testing, and there's mention of potentially improving time duration using Gaussian.",
        "type": "summary"
    },
    "1686": {
        "file_id": 151,
        "content": "# env LD_LIBRARY_PATH=/usr/local/lib python3 test_auto_dog_video_giphy_online_producer.py \n#### PHASE 1 ####\n# FULL TEST\nulimit -n 1048576 # to avoid NOF issues.\ntmux kill-session -t online_dog_cat_generator_test && echo \"killed session: online_dog_cat_generator_test\"\ntmuxp load test_auto_dog_video_giphy_online_producer.yaml\n#### PHASE 2 ####\n# check medialang render result.\n# python3 test_auto_dog_video_giphy_online_producer.py -p\n# seems all good. but the time duration is not so good. maybe gaussian will help? set breakpoint after main list is created.",
        "type": "code",
        "location": "/tests/test_auto_dog_video_giphy_online_producer.sh:1-12"
    },
    "1687": {
        "file_id": 151,
        "content": "This code sets up an environment and runs tests for a video producer script. It first kills the existing test session, loads a configuration file, and then checks the media language render result. The Python script is used to perform full testing, and there's mention of potentially improving time duration using Gaussian.",
        "type": "comment"
    },
    "1688": {
        "file_id": 152,
        "content": "/tests/test_auto_local_reviewer.py",
        "type": "filepath"
    },
    "1689": {
        "file_id": 152,
        "content": "The code imports modules, defines detectors' dictionaries, sets template names, and initializes an object wbRev from Main class with specific arguments. The main() method is then called with these arguments for execution.",
        "type": "summary"
    },
    "1690": {
        "file_id": 152,
        "content": "from test_commons import *\nfrom pyjom.primitives import *  # this is capitalized.\n# autoArgs = {\"subtitle_detector\": {\"timestep\": 0.2}} # not work for boundary works.\n# autoArgs = {\"subtitle_detector\": {\"timestep\": 0.2},\"yolov5_detector\":{\"model\":\"yolov5x\"}}\n# template_names = [\"subtitle_detector.mdl.j2\"] # test ocr entities first.\n# template_names = [\"yolov5_detector.mdl.j2\"]\nautoArgs = {\n    \"frameborder_detector\": {\n        \"model\": \"huffline_horizontal_vertical\",\n        \"config\": {\"includeBoundaryLines\": True},\n    }\n}\n# autoArgs={\"frameborder_detector\":{\"model\":\"framedifference_talib\",\"config\":{}}}\ntemplate_names = [\"frameborder_detector.mdl.j2\"]\n# template_names = [\"framediff_detector.mdl.j2\"]\n# seems cudnn is causing trouble?\n# CuDNN Version 降到7.6试试，这个问题是环境问题引起的\n# https://pypi.tuna.tsinghua.edu.cn/packages/a4/1f/56dddeb4794137e3f824476ead29806d60a5d5fc20adba9f4d7ca5899900/paddlepaddle_gpu-2.2.2-cp39-cp39-manylinux1_x86_64.whl\n# from pip._internal.cli.main\n# we have modified the pip downloader.\nwbRev = FilesystemAutoContentReviewer(",
        "type": "code",
        "location": "/tests/test_auto_local_reviewer.py:1-24"
    },
    "1691": {
        "file_id": 152,
        "content": "This code is importing necessary modules, defining the autoArgs dictionary for various detectors, and setting template names for testing. It mentions potential issues with CuDNN version and a modified pip downloader.",
        "type": "comment"
    },
    "1692": {
        "file_id": 152,
        "content": "    dirpath=\"./samples/video/\",\n    dummy_auto=False,\n    args=autoArgs,\n    template_names=template_names,\n    semiauto=False,  # i do not want to comment shit.\n)\nwbRev.main()",
        "type": "code",
        "location": "/tests/test_auto_local_reviewer.py:25-32"
    },
    "1693": {
        "file_id": 152,
        "content": "This code initializes an object, wbRev, of the main function from the class Main in the module main.py, and calls its main() method with specific arguments: dirpath set to \"./samples/video/\", dummy_auto as False, args as autoArgs, template_names not mentioned, and semiauto as False. The main() method is then executed.",
        "type": "comment"
    },
    "1694": {
        "file_id": 153,
        "content": "/tests/test_auto_local_producer.py",
        "type": "filepath"
    },
    "1695": {
        "file_id": 153,
        "content": "The code imports modules, sets environment variables, and installs local producers for OCR testing. It creates video processing configurations with completeTest() and partialMedialangRenderTest(). It handles temporary directories, cleans them, and prints save paths for debugging.",
        "type": "summary"
    },
    "1696": {
        "file_id": 153,
        "content": "import os\nos.environ[\"LD_LIBRARY_PATH\"] = \"/usr/local/lib\"\nfrom test_commons import *\nfrom pyjom.primitives import *  # this is capitalized.\n# let's hack the gl!\n# os.environ[\"DISPLAY\"] = \":1\"\n# os.environ[\"XAUTHORITY\"] = \"/root/.Xauthority\"\n# undefined symbol? wtf? how about use xvfb-run directly?\nautoArgs = {\n    \"subtitle_detector\": {\"timestep\": 0.2}\n}  # what is this? should't you detect all before production?\n# autoArgs = {\"subtitle_detector\": {\"timestep\": 0.2},\"yolov5_detector\":{\"model\":\"yolov5x\"}}\ntemplate_names = [\"subtitle_detector.mdl.j2\"]  # test ocr entities first.\n# template_names = [\"yolov5_detector.mdl.j2\"]\n# template_names = [\"framediff_detector.mdl.j2\"]\n# seems cudnn is causing trouble?\n# CuDNN Version 降到7.6试试，这个问题是环境问题引起的\n# https://pypi.tuna.tsinghua.edu.cn/packages/a4/1f/56dddeb4794137e3f824476ead29806d60a5d5fc20adba9f4d7ca5899900/paddlepaddle_gpu-2.2.2-cp39-cp39-manylinux1_x86_64.whl\n# from pip._internal.cli.main\n# we have modified the pip downloader.\nwbRev = FilesystemAutoContentProducer(",
        "type": "code",
        "location": "/tests/test_auto_local_producer.py:1-27"
    },
    "1697": {
        "file_id": 153,
        "content": "This code is importing necessary modules and setting environment variables for a specific purpose. It seems to be testing OCR entities first by using a subtitle detector and possibly other detectors later. The comment mentions potential issues with CUDA libraries and suggests downgrading the CuDNN version to resolve them. Additionally, it notes that the pip downloader has been modified.",
        "type": "comment"
    },
    "1698": {
        "file_id": 153,
        "content": "    dirpath=\"./samples/video/\",\n    reviewerLogs=[\n        \"/root/Desktop/works/pyjom/logs/local/1648576077_705094.log\",  # this is the paddleocr result.\n        \"/root/Desktop/works/pyjom/logs/local/1652502047_091761.json\",  # yolov5\n        \"/root/Desktop/works/pyjom/logs/local/1652856912_480332.json\",  # framedifference_talib\n    ],\n    producer_filters={\n        \"yolov5\": {\"objects\": [\"dog\", \"cat\"], \"min_time\": 2},\n        \"meta\": {\n            \"type\": \"video\",\n            \"timelimit\": {\n                \"min\": 1,\n            },\n        },\n    },\n    path_replacers=[\n        [\n            [\n                \"/media/root/help/pyjom/samples/\",\n                \"/media/root/parrot/pyjom/samples/\",\n                \"/media/root/parrot1/pyjom/samples/\",  # new location of sample media files.\n                \"/root/Desktop/works/pyjom/src/samples/\",\n                \"/media/root/help1/pyjom/samples/\",\n            ],\n            \"/root/Desktop/works/pyjom/samples/\",\n        ]\n    ],\n    template=\"pets_with_music\",\n    template_config={",
        "type": "code",
        "location": "/tests/test_auto_local_producer.py:28-56"
    },
    "1699": {
        "file_id": 153,
        "content": "This code sets up a local producer for video files, specifying the directory path, reviewer logs to be considered, and filters based on objects detected and minimum time. It also includes path replacers for sample media file locations and defines a template for the output.",
        "type": "comment"
    }
}