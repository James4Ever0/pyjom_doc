{
    "3200": {
        "file_id": 385,
        "content": "        output = \"output/%d.flv\" % index\n        print(\"ffmpeg -y -ss %s -to %s -i %s %s\" % (start2, end2, filename, output))\nelif (\n    flag == \"filter\"\n):  # to make sure the selected set will be evenly spaced. no two elements will get closer to each other than 5 seconds.\n    import random\n    durationMinThreshold = 0.6\n    durationMaxThreshold = 7.833\n    fakeQualificationFunction = lambda: random.uniform(\n        durationMinThreshold, durationMaxThreshold\n    )\n    fakeAcceptFunction = lambda: random.random() > 0.5\n    # select the closest one! must be closer than 0.9 to 1.1\n    candidates = []\n    import datetime\n    getTimeObject = lambda timeString: datetime.datetime.strptime(\n        timeString, \"%H:%M:%S.%f\"\n    )\n    getTimeString = lambda timeObject: timeObject.strftime(\"%H:%M:%S.%f\")\n    mTimeDelta = datetime.timedelta(milliseconds=100)  # 0.1 seconds\n    standardStartDatetime = datetime.datetime(year=1900, month=1, day=1)\n    standardStartTimestamp = standardStartDatetime.timestamp()\n    getTimestamp = lambda timeObject: timeObject.timestamp() - standardStartTimestamp",
        "type": "code",
        "location": "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/load_data_do_experiment.py:74-99"
    },
    "3201": {
        "file_id": 385,
        "content": "This code snippet is responsible for filtering and selecting video scenes based on specific duration criteria. It ensures that the selected set of scenes is evenly spaced, with no two elements being closer than 5 seconds. The code uses random functions to generate duration thresholds and filters candidate scenes accordingly. It also includes time-related functions for converting between string and datetime formats, and calculating timestamps from datetimes.",
        "type": "comment"
    },
    "3202": {
        "file_id": 385,
        "content": "    for index, (start, end, duration) in enumerate(sceneCuts):\n        estimatedDurationAfterCut = duration - 0.2\n        if (\n            estimatedDurationAfterCut < durationMinThreshold\n            or estimatedDurationAfterCut > durationMaxThreshold\n        ):\n            continue\n        startCutDatetime = getTimeObject(start) + mTimeDelta\n        endCutDatetime = getTimeObject(end) - mTimeDelta\n        # print(getTimeStamp(startDatetime), getTimeStamp(endDatetime))\n        # print(startDatetime, endDatetime)\n        startCutTimestamp, endCutTimestamp = getTimestamp(\n            startCutDatetime\n        ), getTimestamp(endCutDatetime)\n        candidates.append(\n            (startCutTimestamp, endCutTimestamp, estimatedDurationAfterCut)\n        )\n    shuffledCandidates = [\n        (index, startCutDatetime, endCutDatetime, estimatedDurationAfterCut)\n        for index, (\n            startCutDatetime,\n            endCutDatetime,\n            estimatedDurationAfterCut,\n        ) in enumerate(candidates)\n    ]\n    random.shuffle(shuffledCandidates)",
        "type": "code",
        "location": "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/load_data_do_experiment.py:101-127"
    },
    "3203": {
        "file_id": 385,
        "content": "Iterates through scene cuts, filters based on duration threshold, converts timestamps to Unix timestamps, appends as candidates, shuffles the candidates and assigns index.",
        "type": "comment"
    },
    "3204": {
        "file_id": 385,
        "content": "    bannedIndexs = set()\n    neighborThreshold = 5\n    def getNeighborIndexs(index, candidates, neighborThreshold, checkNeighbor):\n        assert neighborThreshold > 0\n        assert index < len(candidates) and index >= 0\n        leftNeighbors = candidates[:index][::-1]\n        rightNeighbors = candidates[index + 1 :]\n        neighborIndexs = []\n        for mIndex, neighbor in enumerate(leftNeighbors):\n            currentIndex = index - mIndex - 1\n            assert candidates[currentIndex] == neighbor\n            assert currentIndex >= 0 and currentIndex < len(candidates)\n            if checkNeighbor(neighbor, candidates[index]):\n                neighborIndexs.append(currentIndex)\n                print(\"left index:\", currentIndex)\n            else:\n                break\n        for mIndex, neighbor in enumerate(rightNeighbors):\n            currentIndex = index + mIndex + 1\n            assert candidates[currentIndex] == neighbor\n            assert currentIndex >= 0 and currentIndex < len(candidates)\n            if checkNeighbor(neighbor, candidates[index]):",
        "type": "code",
        "location": "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/load_data_do_experiment.py:128-150"
    },
    "3205": {
        "file_id": 385,
        "content": "This function, `getNeighborIndexs`, takes an index, a list of candidates, and two parameters: `neighborThreshold` and `checkNeighbor`. It checks the neighboring values from both sides of the given index, appending their indices to the list if they satisfy a certain condition defined by `checkNeighbor`. It prints the left indices found while iterating through the candidates.",
        "type": "comment"
    },
    "3206": {
        "file_id": 385,
        "content": "                neighborIndexs.append(currentIndex)\n                print(\"right index:\", currentIndex)\n            else:\n                break\n        return neighborIndexs\n    def checkNeighborForClipCandiates(clip_a, clip_b, threshold):\n        assert threshold > 0\n        s_a, e_a, l_a = clip_a\n        s_b, e_b, l_b = clip_b\n        e_min = min(e_a, e_b)\n        s_max = max(s_a, s_b)\n        distance = s_max - e_min\n        return distance < threshold  # check if is neighbor\n    while True:\n        print(\"BANNED:\", len(bannedIndexs), \"TOTAL:\", len(candidates))\n        target = fakeQualificationFunction()\n        isSimilar = lambda a, b, threshold: min(a, b) / max(a, b) >= threshold\n        similarThreshold = 0.9\n        if len(bannedIndexs) == len(shuffledCandidates):\n            print(\"No avaliable candidates\")\n            break\n        for (\n            index,\n            startCutDatetime,\n            endCutDatetime,\n            estimatedDurationAfterCut,\n        ) in shuffledCandidates:\n            if index in bannedIndexs:",
        "type": "code",
        "location": "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/load_data_do_experiment.py:151-180"
    },
    "3207": {
        "file_id": 385,
        "content": "The code is iterating over candidate indexes and checking if they are neighbors. It appends the current index to a list of neighborIndexs, and checks if two clips are neighbors using a threshold value. If there are no available candidates left, it breaks the loop.",
        "type": "comment"
    },
    "3208": {
        "file_id": 385,
        "content": "                continue\n            if isSimilar(estimatedDurationAfterCut, target, similarThreshold):\n                accept = fakeAcceptFunction()\n                if accept:\n                    print(\n                        \"Accepting candidate\",\n                        (\n                            index,\n                            startCutDatetime,\n                            endCutDatetime,\n                            estimatedDurationAfterCut,\n                        ),\n                    )\n                    print(\"target:\", target)\n                    bannedIndexs.add(index)\n                    neighborIndexs = getNeighborIndexs(\n                        index,\n                        candidates,\n                        neighborThreshold,\n                        lambda a, b: checkNeighborForClipCandiates(\n                            a, b, neighborThreshold\n                        ),\n                    )\n                    print(\"NEIGHBOR INDEXS:\", neighborIndexs)\n                    for neighborIndex in neighborIndexs:",
        "type": "code",
        "location": "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/load_data_do_experiment.py:181-205"
    },
    "3209": {
        "file_id": 385,
        "content": "This code continues until finding a candidate that meets the similarity threshold, then accepts it if the fake acceptance function returns true. If accepted, it prints information about the candidate and its neighbors, along with the target duration.",
        "type": "comment"
    },
    "3210": {
        "file_id": 385,
        "content": "                        bannedIndexs.add(neighborIndex)\n                        print(\"also banned:\", neighborIndex, candidates[neighborIndex])\n        random.shuffle(shuffledCandidates)",
        "type": "code",
        "location": "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/load_data_do_experiment.py:206-208"
    },
    "3211": {
        "file_id": 385,
        "content": "The code adds the current neighbor index to a list of banned indices, prints it along with the candidate at that index, and then shuffles the remaining candidates.",
        "type": "comment"
    },
    "3212": {
        "file_id": 386,
        "content": "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/get_scene_cuts.sh",
        "type": "filepath"
    },
    "3213": {
        "file_id": 386,
        "content": "This code uses the SceneDetect library to detect scenes in a video file and split it into separate clips based on scene changes. It opens the video, creates a SceneManager object, adds a ContentDetector with a threshold value, detects scenes using the detector, retrieves the list of detected scenes, and then splits the video using ffmpeg according to the scene list.",
        "type": "summary"
    },
    "3214": {
        "file_id": 386,
        "content": "scenedetect -i sample.mp4 -s video.stats.csv detect-content list-scenes -f sample_scenes.csv\n# for dynamic analysis:\n# https://github.com/Breakthrough/PySceneDetect/README.md\n# from scenedetect import open_video, SceneManager, split_video_ffmpeg\n# from scenedetect.detectors import ContentDetector\n# from scenedetect.video_splitter import split_video_ffmpeg\n# def split_video_into_scenes(video_path, threshold=27.0):\n#     # Open our video, create a scene manager, and add a detector.\n#     video = open_video(video_path)\n#     scene_manager = SceneManager()\n#     scene_manager.add_detector(\n#         ContentDetector(threshold=threshold))\n#     scene_manager.detect_scenes(video, show_progress=True)\n#     scene_list = scene_manager.get_scene_list()\n#     split_video_ffmpeg(video_path, scene_list, show_progress=True)",
        "type": "code",
        "location": "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/get_scene_cuts.sh:1-16"
    },
    "3215": {
        "file_id": 386,
        "content": "This code uses the SceneDetect library to detect scenes in a video file and split it into separate clips based on scene changes. It opens the video, creates a SceneManager object, adds a ContentDetector with a threshold value, detects scenes using the detector, retrieves the list of detected scenes, and then splits the video using ffmpeg according to the scene list.",
        "type": "comment"
    },
    "3216": {
        "file_id": 387,
        "content": "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/generate_random_clip_lengths.py",
        "type": "filepath"
    },
    "3217": {
        "file_id": 387,
        "content": "This code generates 30 random clip lengths using a truncated Gaussian distribution with mean and standard deviation, ensuring values are within specified bounds. It utilizes the truncnorm function from scipy.stats for generating the distribution.",
        "type": "summary"
    },
    "3218": {
        "file_id": 387,
        "content": "std, mean = 1.6674874515595588, 2.839698412698412\nscale, loc = std, mean\n# using gaussian distribution\n# accepting both mean and standard deviation\n# this is truncated gaussian, not just normal distribution\nmyclip_a, myclip_b = 0.6, 7.833\n# while you need to make sure the value is in bound.\n# import random\nfrom scipy.stats import truncnorm\na, b = (myclip_a - loc) / scale, (myclip_b - loc) / scale\nrandVar = truncnorm(a,b)\nrandomFunction = lambda: randVar.rvs(1)[0]*scale+loc\n# inBound = lambda number: min(nMax, max(nMin, number))\n# randomFunction = lambda: inBound(random.gauss(mean, std))\nfor _ in range(30):\n    print(randomFunction())",
        "type": "code",
        "location": "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/generate_random_clip_lengths.py:1-21"
    },
    "3219": {
        "file_id": 387,
        "content": "This code generates 30 random clip lengths using a truncated Gaussian distribution with mean and standard deviation, ensuring values are within specified bounds. It utilizes the truncnorm function from scipy.stats for generating the distribution.",
        "type": "comment"
    },
    "3220": {
        "file_id": 388,
        "content": "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/download_sample.sh",
        "type": "filepath"
    },
    "3221": {
        "file_id": 388,
        "content": "This code uses yt-dlp to download a sample video from Bilibili at the given URL and save it as \"sample.mp4\".",
        "type": "summary"
    },
    "3222": {
        "file_id": 388,
        "content": "yt-dlp -o sample.mp4 https://www.bilibili.com/video/BV1HS4y1w7PK",
        "type": "code",
        "location": "/tests/calculate_separate_video_scene_duration_in_dog_video_with_bgm/download_sample.sh:1-1"
    },
    "3223": {
        "file_id": 388,
        "content": "This code uses yt-dlp to download a sample video from Bilibili at the given URL and save it as \"sample.mp4\".",
        "type": "comment"
    },
    "3224": {
        "file_id": 389,
        "content": "/tests/anime_highlight_cuts/theme_collector/yolov8_train_save_test.py",
        "type": "filepath"
    },
    "3225": {
        "file_id": 389,
        "content": "The code is training a YOLO object detection model, validating its performance, and then exporting it to be used later. It uses the \"yolov8n.pt\" pre-trained model, trains it for 3 epochs with the provided dataset, evaluates its validation accuracy, displays the results, and finally exports the trained model as \"pip_detector.pth\".",
        "type": "summary"
    },
    "3226": {
        "file_id": 389,
        "content": "from ultralytics import YOLO\n# pip install opencv-python==4.5.5.64\n# shit?\n# https://github.com/asweigart/pyautogui/issues/706\nmodel = YOLO(\"yolov8n.pt\")\n# print(model)\n# model.to('mps')\n# The operator 'aten::_slow_conv2d_forward' is not current implemented for the MPS device.\n# fuck.\n# breakpoint()\nimport rich\ntrain_result = model.train(epochs=3, data=\"./pip_dataset/pip_dataset.yaml\")\nprint(\"TRAIN RESULT?\")\nrich.print(train_result)\nval_result = model.val()\nprint(\"VALIDATION RESULT?\")\nrich.print(val_result)\ntest_result = model(\"./pip_dataset/images/test/000000003099.png\")\ntest_boxes = test_result[0].boxes\ntest_classes, test_xywh, test_confidence = (\n    test_boxes.cls.numpy(),\n    test_boxes.xywh.numpy(), # the xy in this xywh means the center of the bounding box.\n    test_boxes.conf.numpy(),\n)\nprint(\"XYWH?\", test_xywh)\nprint(\"CLASSES?\", test_classes)\nprint(\"CONFIDENCE?\", test_confidence)\n# model.export(format=\"pytorch\", path=\"./pip_detector.pth\")",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/yolov8_train_save_test.py:1-39"
    },
    "3227": {
        "file_id": 389,
        "content": "The code is training a YOLO object detection model, validating its performance, and then exporting it to be used later. It uses the \"yolov8n.pt\" pre-trained model, trains it for 3 epochs with the provided dataset, evaluates its validation accuracy, displays the results, and finally exports the trained model as \"pip_detector.pth\".",
        "type": "comment"
    },
    "3228": {
        "file_id": 390,
        "content": "/tests/anime_highlight_cuts/theme_collector/yolov8_test.py",
        "type": "filepath"
    },
    "3229": {
        "file_id": 390,
        "content": "This code imports and processes images using the YOLO model, filters frames based on criteria, selects candidates for main frame detection, draws a rectangle around the detected frame, and displays an image with the PIP frame.",
        "type": "summary"
    },
    "3230": {
        "file_id": 390,
        "content": "from ultralytics import YOLO\n## yolov8 tracking needs special ultralytics version. it is been updated too damn often. you need to downgrade.\n## https://github.com/mikel-brostrom/yolov8_tracking\n## this might add unwanted overheads. warning!\n# no one will miss `genesis.pt`, right?\nmodel = YOLO(\"general_ver1.pt\")\n## TODO: create dataset to prevent detection of pure color/gradient borders\n# model = YOLO(\"ver3.pt\")\n# find trained weights on huggingface:\n# https://huggingface.co/James4Ever0/yolov8_pip_ultralytics\n# imagePaths = [\n#     \"000000003099.png\",\n#     \"simple_pip.png\",\n#     \"no_border_0.jpg\",\n#     \"has_border_0.jpg\",\n#     \"has_border_1.jpg\",\n#     \"has_border_2.jpg\",\n# ]\nimport os\nimagePaths = [\n    fpath\n    for fpath in os.listdir(\".\")\n    if fpath.split(\".\")[-1].lower() in (\"jpg\", \"jpeg\", \"png\")\n]\nimport cv2\nframeRatioFilters = [(16 / 9, 0.2, \"landscape\")]\nframeAreaThreshold = 0.15\nfor imagePath in imagePaths:\n    image = cv2.imread(imagePath)\n    output = model(image)\n    height, width, _ = image.shape\n    center = (width / 2, height / 2)",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/yolov8_test.py:1-43"
    },
    "3231": {
        "file_id": 390,
        "content": "This code imports the YOLO model from ultralytics, loads a specific model file, and defines image paths. It also retrieves all image files in the current directory, filters frames based on aspect ratio and area threshold, and processes each image using the loaded YOLO model. This might involve downgrading the ultralytics version due to frequent updates and creating a dataset to prevent detection of pure color/gradient borders as TODO tasks.",
        "type": "comment"
    },
    "3232": {
        "file_id": 390,
        "content": "    # print(\"CENTER:\",center)\n    candidates = []\n    for xyxy in output[0].boxes.xyxy.numpy().astype(int).tolist():\n        x0, y0, x1, y1 = xyxy\n        currentFrameWidth = x1 - x0\n        currentFrameHeight = y1 - y0\n        currentFrameArea = currentFrameWidth * currentFrameHeight\n        # area filter? a must.\n        if currentFrameArea / (height * width) < frameAreaThreshold:\n            continue\n        else:\n            # filter out malformed frames? just for anime?\n            currentFrameRatio = currentFrameWidth / currentFrameHeight\n            if all(\n                [\n                    (\n                        currentFrameRatio < frameRatioStandard - frameRatioMargin\n                        or currentFrameRatio > frameRatioStandard + frameRatioMargin\n                    )\n                    for frameRatioStandard, frameRatioMargin, _ in frameRatioFilters\n                ]\n            ):\n                continue\n            candidates.append((x0, y0, x1, y1))\n    # sort it by area, then by centrality?",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/yolov8_test.py:44-69"
    },
    "3233": {
        "file_id": 390,
        "content": "This code filters out detected frames based on area, frame aspect ratio, and possibly malformed frames. It appends valid frames to the 'candidates' list, which may be sorted by area and centrality later in the script.",
        "type": "comment"
    },
    "3234": {
        "file_id": 390,
        "content": "    candidates.sort(\n        key=lambda points: -(points[2] - points[0]) * (points[3] - points[1])\n    )\n    # print(\"SORT_AREA:\", [(points[2] - points[0]) * (points[3] - points[1]) for points in candidates])\n    candidates = candidates[:2]\n    candidates.sort(\n        key=lambda points: (((points[2] + points[0]) / 2) - center[0]) ** 2\n        + (((points[3] + points[1]) / 2) - center[1]) ** 2\n    )\n    # print(\"SORT_CENTRALITY:\", [(((points[2] + points[0]) / 2) - center[0]) ** 2\n    # + (((points[3] + points[1]) / 2) - center[1]) ** 2 for points in candidates])\n    if len(candidates) > 0:\n        print(\"main frame found.\")\n        x0, y0, x1, y1 = candidates[0]\n        cv2.rectangle(image, (x0, y0), (x1, y1), (0, 0, 255), thickness=10)\n    else:\n        print(\"no main frame found.\")\n    cv2.imshow(\"PIP\", image)\n    cv2.waitKey(0)",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/yolov8_test.py:71-89"
    },
    "3235": {
        "file_id": 390,
        "content": "The code sorts the candidates by area and centrality, selects two candidates, and if a main frame is found, it draws a rectangle around it. If no main frame is found, it displays a message. Finally, it shows the image with the PIP frame.",
        "type": "comment"
    },
    "3236": {
        "file_id": 391,
        "content": "/tests/anime_highlight_cuts/theme_collector/view_boundingbox.py",
        "type": "filepath"
    },
    "3237": {
        "file_id": 391,
        "content": "This code reads a bounding box coordinates, calculates the minimum x and y values, and then uses OpenCV to draw a rectangle on an image at these coordinates. The color of the rectangle is green (0, 255, 0) and the thickness is 3 pixels. Finally, it displays the image with the rectangle drawn in a window named \"PIP\".",
        "type": "summary"
    },
    "3238": {
        "file_id": 391,
        "content": "x, y, w, h = [1118.5, 545.5, 1585, 1069]\nmin_x, min_y = int(x - (w / 2)), int(y - (h / 2))\nimport cv2\nimagePath = \"\"\nimage = cv2.imread(imagePath)\np0, p1 = (min_x, min_y), (min_x + w, min_y + h)\ncv2.rectangle(image, p0, p1, (0, 255, 0), 3)\ncv2.imshow(\"PIP\", image)",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/view_boundingbox.py:1-11"
    },
    "3239": {
        "file_id": 391,
        "content": "This code reads a bounding box coordinates, calculates the minimum x and y values, and then uses OpenCV to draw a rectangle on an image at these coordinates. The color of the rectangle is green (0, 255, 0) and the thickness is 3 pixels. Finally, it displays the image with the rectangle drawn in a window named \"PIP\".",
        "type": "comment"
    },
    "3240": {
        "file_id": 392,
        "content": "/tests/anime_highlight_cuts/theme_collector/test_video_overlay.sh",
        "type": "filepath"
    },
    "3241": {
        "file_id": 392,
        "content": "This script combines two video files, scales the first one to specific dimensions, and overlays them. It is used for creating a video highlight with theme overlay. The basepath variable contains the downloaded videos' location. The resulting video is saved as output.mp4 if both inputs are present, or output_1.mp4 if only the second input video is provided.",
        "type": "summary"
    },
    "3242": {
        "file_id": 392,
        "content": "video_0=\"[Sakurato] Onii-chan wa Oshimai! [未删减][02][AVC-8bit 1080p AAC][CHT].mp4\"\nvideo_1=\"[MLU-S] Onii-chan wa Oshimai! - 03 [1080p][Multi Subs].mkv\"\nbasepath=\"/Users/jamesbrown/Downloads/anime_download\"\nvideo_2=\"[Sakurato] Onii-chan wa Oshimai! [01][AVC-8bit 1080p AAC][CHT].mp4\"\n# ffmpeg -y -t 0:04:00 -i \"$basepath/$video_0\" -t 0:04:00 -i \"$basepath/$video_1\" -filter_complex \"[0:v]scale=1152:648[v0];[1:v][v0]overlay=384:216\" output.mp4\nffmpeg -y -t 0:04:00 -i \"$basepath/$video_2\" output_1.mp4",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/test_video_overlay.sh:1-9"
    },
    "3243": {
        "file_id": 392,
        "content": "This script combines two video files, scales the first one to specific dimensions, and overlays them. It is used for creating a video highlight with theme overlay. The basepath variable contains the downloaded videos' location. The resulting video is saved as output.mp4 if both inputs are present, or output_1.mp4 if only the second input video is provided.",
        "type": "comment"
    },
    "3244": {
        "file_id": 393,
        "content": "/tests/anime_highlight_cuts/theme_collector/strip_optimizer_from_trained_best_model.py",
        "type": "filepath"
    },
    "3245": {
        "file_id": 393,
        "content": "This code imports the \"strip_optimizer\" function from the \"torch_utils\" module, then it specifies the original model path (\"general_ver1_with_optimizer.pt\") and the exported model path (\"general_ver1.pt\"). The \"strip_optimizer\" function is called with these paths to remove any optimizers associated with the original model while saving a new model without them at the specified export path.",
        "type": "summary"
    },
    "3246": {
        "file_id": 393,
        "content": "from ultralytics.yolo.utils.torch_utils import strip_optimizer\nmodel_path = \"general_ver1_with_optimizer.pt\"\nexport_path = \"general_ver1.pt\"\nstrip_optimizer(f=model_path, s=export_path)",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/strip_optimizer_from_trained_best_model.py:1-6"
    },
    "3247": {
        "file_id": 393,
        "content": "This code imports the \"strip_optimizer\" function from the \"torch_utils\" module, then it specifies the original model path (\"general_ver1_with_optimizer.pt\") and the exported model path (\"general_ver1.pt\"). The \"strip_optimizer\" function is called with these paths to remove any optimizers associated with the original model while saving a new model without them at the specified export path.",
        "type": "comment"
    },
    "3248": {
        "file_id": 394,
        "content": "/tests/anime_highlight_cuts/theme_collector/screenshot_tracemoe.py",
        "type": "filepath"
    },
    "3249": {
        "file_id": 394,
        "content": "This code sends a JPEG image to the trace.moe API for anime character recognition and stores the results in the 'data' variable. It then prints the data using rich library, handles potential errors, and retrieves necessary information from the results, including anilist ID, filename, episode (if available), start and end timestamps, and similarity rating.",
        "type": "summary"
    },
    "3250": {
        "file_id": 394,
        "content": "# anilist has typo on \"Yahari Ore no Seishun Lovecome wa Machigatte Iru.\" which might be harmful.\n# imagePath = \"/Users/jamesbrown/Downloads/anime_download/dress_test_pictures/女装0.jpeg\"\nimagePath = \"/Users/jamesbrown/Downloads/gay_anime_shot.jpeg\"\nimport requests\ndata =requests.post(\"https://api.trace.moe/search\",\n  data=open(imagePath, \"rb\"), # since this is smallest\n  headers={\"Content-Type\": \"image/jpeg\"}\n).json() # remember you must change your ip later.\nimport rich\nrich.print(data) # the anime character recognition website is not running so well.\nerror = data['error']\nassert error == \"\"\nresults = data.get('result',[])\nfor result in results: # already sorted.\n    anilist_id = result['anilist'] # well. we only got one.\n    filename = result['filename'] # need parsing right?\n    episode = result.get('episode', None) # really we don't have episode here.\n    start, end = result['from'], result['to']\n    similarity = result['similarity']\nbreakpoint()",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/screenshot_tracemoe.py:1-25"
    },
    "3251": {
        "file_id": 394,
        "content": "This code sends a JPEG image to the trace.moe API for anime character recognition and stores the results in the 'data' variable. It then prints the data using rich library, handles potential errors, and retrieves necessary information from the results, including anilist ID, filename, episode (if available), start and end timestamps, and similarity rating.",
        "type": "comment"
    },
    "3252": {
        "file_id": 395,
        "content": "/tests/anime_highlight_cuts/theme_collector/screenshot_saucenao.py",
        "type": "filepath"
    },
    "3253": {
        "file_id": 395,
        "content": "This code uses the SauceNao API to identify an anime source from a given image file, displaying results such as similarity and URLs, and extracting relevant data for anime cuts including part, title, estimated time, and IDs from various platforms.",
        "type": "summary"
    },
    "3254": {
        "file_id": 395,
        "content": "# saucenao (if fail, use trace.moe)\n# use proxies, since we are using free tiers.\nimport os\nSAUCENAO_API_KEY=os.environ.get('SAUCENAO_API_KEY') # how to run this without api key?\nprint(\"API KEY?\", SAUCENAO_API_KEY)\n# sauce = SauceNao(api_key=SAUCENAO_API_KEY) # shit. not working!\nfilepath = \"/Users/jamesbrown/Downloads/anime_download/dress_test_pictures/女装0.jpeg\"\n# import asyncio\n# loop = asyncio.get_event_loop()\n# results = loop.run_until_complete(sauce.from_file(filepath))\n# results = await sauce.from_url('https://i.imgur.com/QaKpV3s.png')\n# no api key. fuck.\nfrom saucenao_api import SauceNao\nsauce = SauceNao(SAUCENAO_API_KEY)\nwith open(filepath,'rb') as f:\n    results = sauce.from_file(f)\n    long_remaining = results.long_remaining # wait till next day? wtf?\n    short_remaining = results.short_remaining\n    result_results = len(results)\n    print(results)\n    best = results[0]\n    similarity = best.similarity\n    # just trust anilist.\n    urls = best.urls # https://anilist.co/anime/ https://anidb.net/anime/ https://myanimelist.net/anime/",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/screenshot_saucenao.py:1-25"
    },
    "3255": {
        "file_id": 395,
        "content": "The code aims to use the SauceNao API to identify an anime source from a given image file. It first checks if the SAUCENAO_API_KEY is set in the environment variables and prints it out. Then, it creates a SauceNao object with the API key and tries to find similar images using the image file path. The code then displays the remaining time before the results become available (long_remaining and short_remaining), the number of results found (result_results), the best match's similarity, and the URLs associated with the best match. If no API key is provided, the code indicates that it will not be able to use SauceNao API.",
        "type": "comment"
    },
    "3256": {
        "file_id": 395,
        "content": "    best_data =  best.raw.get('data',{})\n    part = best_data.get('part', None) # not always.\n    title = best.title\n    est_time =best_data.get('est_time',None) # be like: '00:16:21 / 00:25:12'\n    if est_time:\n        start_end = [timestamp.strip() for timestamp in est_time.split(\"/\")]\n        start_time, end_time = start_end\n    # these ids must be the same across different images.\n    anidb_aid = best_data.get('anidb_aid',None)\n    mal_id = best_data.get('mal_id',None)\n    anilist_id = best_data.get('anilist_id',None)\n    breakpoint()",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/screenshot_saucenao.py:26-37"
    },
    "3257": {
        "file_id": 395,
        "content": "Extracts relevant data for an anime cut: part (may not always be available), title, estimated time (in the format \"start / end\"), and IDs from different platforms - AniDB (anidb_aid), MyAnimeList (mal_id), and AniList (anilist_id).",
        "type": "comment"
    },
    "3258": {
        "file_id": 396,
        "content": "/tests/anime_highlight_cuts/theme_collector/pack_source_dataset.sh",
        "type": "filepath"
    },
    "3259": {
        "file_id": 396,
        "content": "This command uses 7-Zip (7z) to create a compressed archive named \"pip_source_dataset.7z\" that includes all .mp4 and .csv files in the current directory, likely for efficient storage or transfer.",
        "type": "summary"
    },
    "3260": {
        "file_id": 396,
        "content": "7z a pip_source_dataset.7z *.mp4 *.csv",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/pack_source_dataset.sh:1-1"
    },
    "3261": {
        "file_id": 396,
        "content": "This command uses 7-Zip (7z) to create a compressed archive named \"pip_source_dataset.7z\" that includes all .mp4 and .csv files in the current directory, likely for efficient storage or transfer.",
        "type": "comment"
    },
    "3262": {
        "file_id": 397,
        "content": "/tests/anime_highlight_cuts/theme_collector/make_picture_in_picture_challange.py",
        "type": "filepath"
    },
    "3263": {
        "file_id": 397,
        "content": "This code sets the base path for video files, imports os module, and uses os.path.join() to create file paths for source_video and background_video. It also sets a placeholder value for video duration (10) and comments on using ffplay and saving metadata in filenames.",
        "type": "summary"
    },
    "3264": {
        "file_id": 397,
        "content": "basepath = \"/Users/jamesbrown/Downloads/anime_download\"\nimport os\nsource_video = os.path.join(\n    basepath, \"[Sakurato] Onii-chan wa Oshimai! [未删减][02][AVC-8bit 1080p AAC][CHT].mp4\"\n)\nbackground_video = os.path.join(\n    basepath, \"[MLU-S] Onii-chan wa Oshimai! - 03 [1080p][Multi Subs].mkv\"\n)\nvideo_duration = 10  # just for test.\n# use ffplay?\n# better save metadata in the filename.",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/make_picture_in_picture_challange.py:1-16"
    },
    "3265": {
        "file_id": 397,
        "content": "This code sets the base path for video files, imports os module, and uses os.path.join() to create file paths for source_video and background_video. It also sets a placeholder value for video duration (10) and comments on using ffplay and saving metadata in filenames.",
        "type": "comment"
    },
    "3266": {
        "file_id": 398,
        "content": "/tests/anime_highlight_cuts/theme_collector/keyboard_listener.py",
        "type": "filepath"
    },
    "3267": {
        "file_id": 398,
        "content": "This code uses the pynput library to listen for keyboard events. It defines two functions, `on_press` and `on_release`, to handle key presses and releases respectively. The listener object is created with these functions assigned as event handlers, and then the program enters a loop where it continuously listens for keystrokes until the listener is stopped or terminated.",
        "type": "summary"
    },
    "3268": {
        "file_id": 398,
        "content": "from pynput.keyboard import Listener\ndef on_press(key):\n    try:\n        print(\"alphanumeric key {0} pressed\".format(key.char))\n    except AttributeError:\n        print(\"special key {0} pressed\".format(key))\ndef on_release(key):\n    print(\"{0} released\".format(key))\nlistener = Listener(on_press=on_press, on_release=on_release)\n# listener.start()\nwith listener:\n    listener.join()",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/keyboard_listener.py:1-18"
    },
    "3269": {
        "file_id": 398,
        "content": "This code uses the pynput library to listen for keyboard events. It defines two functions, `on_press` and `on_release`, to handle key presses and releases respectively. The listener object is created with these functions assigned as event handlers, and then the program enters a loop where it continuously listens for keystrokes until the listener is stopped or terminated.",
        "type": "comment"
    },
    "3270": {
        "file_id": 399,
        "content": "/tests/anime_highlight_cuts/theme_collector/create_rounded_rectangle.py",
        "type": "filepath"
    },
    "3271": {
        "file_id": 399,
        "content": "The code defines a function called \"rectangle\" that creates an 800x400 black image, draws a regular rectangle and a rounded rectangle on it using PIL, converts the image to numpy array, prints its shape, data type, and maximum value, displays the image using OpenCV, and then waits for a key press.",
        "type": "summary"
    },
    "3272": {
        "file_id": 399,
        "content": "from PIL import Image, ImageDraw\nimport cv2\nimport numpy as np\ndef rectangle():\n    image = Image.new(\"RGB\", (800, 400), \"black\")  # width, height?\n    draw = ImageDraw.Draw(image)\n    # Draw a regular rectangle\n    draw.rectangle((200, 100, 300, 200), fill=\"white\")\n    # Draw a rounded rectangle\n    draw.rounded_rectangle((50, 50, 150, 150), fill=\"white\", radius=20)\n    npArray = np.array(image)  # /255\n    # uint8? then float64? great.\n    print(npArray)\n    print(npArray.shape, npArray.dtype, npArray.max())  # 255?\n    cv2.imshow(\"mask\", npArray)\n    # maybe we just want \"1\" instead of \"255\"\n    # divide by 255 then.\n    cv2.waitKey(0)\nrectangle()",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/create_rounded_rectangle.py:1-23"
    },
    "3273": {
        "file_id": 399,
        "content": "The code defines a function called \"rectangle\" that creates an 800x400 black image, draws a regular rectangle and a rounded rectangle on it using PIL, converts the image to numpy array, prints its shape, data type, and maximum value, displays the image using OpenCV, and then waits for a key press.",
        "type": "comment"
    },
    "3274": {
        "file_id": 400,
        "content": "/tests/anime_highlight_cuts/theme_collector/create_dataset.py",
        "type": "filepath"
    },
    "3275": {
        "file_id": 400,
        "content": "This code creates a new directory, reads video frames, extracts data points, labels them, and saves images as JPEGs in YAML format. The process ends with \"dataset created.\" message after the loop.",
        "type": "summary"
    },
    "3276": {
        "file_id": 400,
        "content": "import yaml\n# why you are taking so much RAM?\n## suggest that you label some (many) still image and mark out the picture-in-picture parts from it? about 2000 images?\n## man just make sure these pictures are not \"pip\" so we can put borders and arrange them randomly to create our super dataset. use MSCOCO/coco128?\ntrain_path = \"images/train\"\ntest_path = \"images/test\"\ntrain_label_path = \"labels/train\"\ntest_label_path = \"labels/test\"\nbasepath = \"pip_dataset\"\ndata = {\n    \"path\": f\"../{basepath}\",  # dataset root dir\n    \"train\": train_path,  # train images (relative to 'path')\n    \"val\": train_path,  # val images (relative to 'path')\n    \"test\": test_path,\n    \"names\": {0: \"active_frame\"},\n}\nimport os\nos.system(f\"rm -rf {basepath}\")\nindex = 1\nos.makedirs(os.path.join(basepath, train_path), exist_ok=True)\nos.makedirs(os.path.join(basepath, test_path), exist_ok=True)\nos.makedirs(os.path.join(basepath, train_label_path), exist_ok=True)\nos.makedirs(os.path.join(basepath, test_label_path), exist_ok=True)\nwith open(\"pip_dataset/pip_dataset.yaml\", \"w+\") as f:",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/create_dataset.py:1-39"
    },
    "3277": {
        "file_id": 400,
        "content": "This code creates a new dataset by copying and renaming files from existing \"train\" and \"test\" directories into a new directory named \"pip_dataset\". It also creates label files for the copied images in the same manner. The resulting dataset is stored in a YAML file named \"pip_dataset/pip_dataset.yaml\".",
        "type": "comment"
    },
    "3278": {
        "file_id": 400,
        "content": "    f.write(yaml.dump(data, default_flow_style=False))\nimport cv2\nimport pandas\ncsvNames = [fpath for fpath in os.listdir(\".\") if fpath.endswith(\".csv\")]\nimport progressbar\nremainder = 7 # changed? heck?\nfor csvName in csvNames:\n    dataframe = pandas.read_csv(csvName)\n    videoFileName = f'{csvName.split(\".\")[0]}.mp4'\n    #\n    frameIndex = 0\n    cap = cv2.VideoCapture(videoFileName)\n    myIterator = progressbar.progressbar(dataframe.iterrows())\n    frame_height, frame_width = cap.get(cv2.CAP_PROP_FRAME_HEIGHT), cap.get(\n        cv2.CAP_PROP_FRAME_WIDTH\n    )\n    while True:\n        succ, image = cap.read()\n        nextRow = next(myIterator, None)\n        if nextRow is None:\n            break\n        if succ:\n            frameIndex += 1\n            if frameIndex % remainder != 0:\n                continue\n            _, _, min_x, min_y, w, h = nextRow[1].tolist()\n            if (min_x, min_y, w, h) == (0, 0, 0, 0) or w == 0 or h == 0:\n                continue\n            index += 1\n            imageName = f'{f\"{index}\".zfill(12)}.png'",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/create_dataset.py:40-73"
    },
    "3279": {
        "file_id": 400,
        "content": "Reading CSV files, extracting relevant data and frame index, creating image names based on the index, writing dataset to YAML format.",
        "type": "comment"
    },
    "3280": {
        "file_id": 400,
        "content": "            labelName = f'{f\"{index}\".zfill(12)}.txt'\n            dataPoints = [\n                (min_x + w / 2) / frame_width,\n                (min_y + h / 2) / frame_height,\n                w / frame_width,\n                h / frame_height,\n            ]\n            with open(os.path.join(basepath, train_label_path, labelName), \"w+\") as f:\n                content = \" \".join(([\"0\"] + [f\"{number:.3f}\" for number in dataPoints]))\n                f.write(content)\n            cv2.imwrite(os.path.join(basepath, train_path, imageName), image)\n            del image\n        else:\n            break\n    cap.release()\n    del cap\n    del dataframe\ntestVideo = \"output.mp4\"\nw, h = 1152, 648\nmin_x, min_y = 384, 216\nprint(\"creating 4min pip dataset\")\ncap = cv2.VideoCapture(testVideo)\nframe_height, frame_width = cap.get(cv2.CAP_PROP_FRAME_HEIGHT), cap.get(\n    cv2.CAP_PROP_FRAME_WIDTH\n)\ndataPoints = [\n    (min_x + w / 2) / frame_width,\n    (min_y + h / 2) / frame_height,\n    w / frame_width,\n    h / frame_height,\n]\nframeCounter = 0",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/create_dataset.py:74-110"
    },
    "3281": {
        "file_id": 400,
        "content": "The code reads an input video file, extracts and saves data points for each frame, and stores the labeled data in a text file. It also writes each frame to an image file.",
        "type": "comment"
    },
    "3282": {
        "file_id": 400,
        "content": "while True:\n    succ, image = cap.read()\n    if succ:\n        frameCounter += 1\n        if frameCounter % remainder != 0:\n            continue\n        index += 1\n        imageName = f'{f\"{index}\".zfill(12)}.png'\n        labelName = f'{f\"{index}\".zfill(12)}.txt'\n        with open(os.path.join(basepath, train_label_path, labelName), \"w+\") as f:\n            content = \" \".join(([\"0\"] + [f\"{number:.3f}\" for number in dataPoints]))\n            f.write(content)\n        cv2.imwrite(os.path.join(basepath, train_path, imageName), image)\n        del image\n    else:\n        break\ncap.release()\ndel cap\nprint(\"creating reference dataset\")\ntestVideo = \"output_1.mp4\"\ncap = cv2.VideoCapture(testVideo)\nframe_height, frame_width = cap.get(cv2.CAP_PROP_FRAME_HEIGHT), cap.get(\n    cv2.CAP_PROP_FRAME_WIDTH\n)\ndataPoints = [0.5, 0.5, 1, 1]\nframeCounter = 0\nwhile True:\n    succ, image = cap.read()\n    if succ:\n        frameCounter += 1\n        if frameCounter % remainder != 0:\n            continue\n        index += 1\n        imageName = f'{f\"{index}\".zfill(12)}.png'",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/create_dataset.py:111-152"
    },
    "3283": {
        "file_id": 400,
        "content": "Code snippet reads frames from a video, creates label files for each frame containing data points, and saves corresponding images. The loop iterates until the end of the video is reached, skipping non-remainder frames. It uses OpenCV to read and write image data and handles file writing.",
        "type": "comment"
    },
    "3284": {
        "file_id": 400,
        "content": "        labelName = f'{f\"{index}\".zfill(12)}.txt'\n        with open(os.path.join(basepath, train_label_path, labelName), \"w+\") as f:\n            content = \" \".join(([\"0\"] + [f\"{number:.3f}\" for number in dataPoints]))\n            f.write(content)\n        cv2.imwrite(os.path.join(basepath, train_path, imageName), image)\n        del image\n    else:\n        break\ncap.release()\ndel cap\nprint(\"dataset created.\")",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/create_dataset.py:153-166"
    },
    "3285": {
        "file_id": 400,
        "content": "This code creates a dataset by iterating over data points and saving them as labels in text files. It also saves corresponding images as JPEGs. Finally, it prints \"dataset created.\" after the loop ends.",
        "type": "comment"
    },
    "3286": {
        "file_id": 401,
        "content": "/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py",
        "type": "filepath"
    },
    "3287": {
        "file_id": 401,
        "content": "This code generates a COCO PIP dataset, creates background images with stripes, calculates text colors, applies random text overlays using OpenCV's putText function, and performs various image processing tasks to create a COCO-style pip dataset.",
        "type": "summary"
    },
    "3288": {
        "file_id": 401,
        "content": "# use what? better use some standard library.\n# you must know where you have put all these images.\n# DONE: remember to upload dataset creation things to kaggle as separate python scripts and execute it in separate process to prevent memory leaks (hopefully)\nimport cv2\nimport numpy as np\nimport os\nfrom string import punctuation\nimport random\n# import itertools\nfrom PIL import Image, ImageDraw\nimageBasePath = \"/kaggle/input/mscoco/mscoco_resized/train2014\"\nimagePaths = [\n    fpath\n    for fpath in os.listdir(imageBasePath)\n    if fpath.split(\".\")[-1] in (\"jpg\", \"jpeg\", \"png\")\n]\ntrain_path = \"images/train\"\ntest_path = \"images/test\"\ntrain_label_path = \"labels/train\"\ntest_label_path = \"labels/test\"\nbasepath = \"pip_dataset\"\ntrain_path_relative = os.path.join(basepath, train_path)\ntrain_label_path_relative = os.path.join(basepath, train_label_path)\nwidth = 800\nhalf_width = int(width / 2)  # either use 1,2,4 images.\ntextTotalHeight = 300  # either add to top or bottom.\ngetMarginRatio = lambda: random.choice(\n    [0, random.random() * 0.15, random.random() * 0.1, random.random() * 0.05]",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py:1-37"
    },
    "3289": {
        "file_id": 401,
        "content": "The code is importing necessary libraries and setting up the required paths for image and label files. It will create a PIP dataset by combining images and labels, resizing them to 800 width, and possibly adding text with a random margin ratio. The final dataset will be saved in a specified directory. Memory leaks are mentioned as a concern, so separate scripts are recommended for execution.",
        "type": "comment"
    },
    "3290": {
        "file_id": 401,
        "content": ")  # this margin is used randomly. we can make it 0 or as is.\ntextOrigin = (-30, 30)\nfontScale = 1\nfont = cv2.FONT_HERSHEY_SIMPLEX\nfontThickness = 2\ngetRadius = lambda: random.randint(1, 30)\nimageIndex = (\n    sorted(\n        [int(fpath.split(\".\")[0]) for fpath in os.listdir(train_path_relative)],\n        key=lambda index: -index,\n    )[0]\n    + 1\n)  # shall be increased on demand.\nprint(\"START MARKING PICTURES WITH INDEX:\", imageIndex)\nMAX_COCO_PIP_IMAGE_COUNT = 10000  # well, super huge. is it?\n# don't insert 20000 cause it will break shit.\nalphabets = \"abcdefghijklmnopqrstuvwxyz\"\nALPHABETS = alphabets.upper()\nnumbers = \"0123456789\"\ncharacterList = list(alphabets + ALPHABETS + numbers + punctuation + \" \")\ngetRandomCharacter = lambda: random.choice(characterList)\ngetRandomCharacters = lambda charCount: \"\".join(\n    [getRandomCharacter() for _ in range(charCount)]\n)\ngetRandomLinesOfCharacters = lambda lineCount, charCount: \"\\r\".join(\n    [getRandomCharacters(charCount) for _ in range(lineCount)]\n)\nimageFormats = [1, 2, 4]",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py:38-73"
    },
    "3291": {
        "file_id": 401,
        "content": "This code initializes variables for creating a COCO PIP dataset. It sets text origin, font scale, and font type. It defines functions to get random character or characters, and handles image formats. The image index is incremented and the maximum allowed image count is set.",
        "type": "comment"
    },
    "3292": {
        "file_id": 401,
        "content": "textFormats = [\"up\", \"down\", \"none\"]\nbackgroundFormats = [\"solidColor\", \"horizontalStripes\", \"verticalStripes\", \"gradients\"]\ncolors = [\n    (0, 0, 0),\n    (255, 255, 255),\n    (0, 0, 192),\n    (255, 255, 64),\n    (0, 255, 0),\n    (0, 0, 255),\n    (255, 0, 0),\n]\ncolorsNumpyArray = [np.array(color) for color in colors]\ncolorsWithIndex = [(index, color) for index, color in enumerate(colors)]\n# we are not doing this while testing.\n# imageFormat = random.choice(imageFormats)\n# textFormat = random.choice(textFormats)\n# backgroundFormat = random.choice(backgroundFormats)\ndef get_gradient_2d(start, stop, width, height, is_horizontal):\n    if is_horizontal:\n        return np.tile(np.linspace(start, stop, width), (height, 1))\n    else:\n        return np.tile(np.linspace(start, stop, height), (width, 1)).T\ndef get_gradient_3d(width, height, start_list, stop_list, is_horizontal_list):\n    result = np.zeros((height, width, len(start_list)), dtype=np.float64)\n    for i, (start, stop, is_horizontal) in enumerate(\n        zip(start_list, stop_list, is_horizontal_list)",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py:74-104"
    },
    "3293": {
        "file_id": 401,
        "content": "This code generates a COCO-style dataset for object detection using random color combinations. It includes lists of text formats, background formats, and colors, which are then converted to numpy arrays. The code also defines functions to generate 2D and 3D gradients for backgrounds. However, image format, text format, and background format selections are commented out while testing.",
        "type": "comment"
    },
    "3294": {
        "file_id": 401,
        "content": "    ):\n        result[:, :, i] = get_gradient_2d(start, stop, width, height, is_horizontal)\n    return result.astype(np.uint8)\n# for imageFormat, textFormat, backgroundFormat in itertools.product(\n#     imageFormats, textFormats, backgroundFormats\n# ):  # you can use these things to get test output picture names.\nprint(\"creating coco pip dataset:\")\nimport progressbar\nfor _i in progressbar.progressbar(range(MAX_COCO_PIP_IMAGE_COUNT)):\n    imageFormat = random.choice(imageFormats)\n    textFormat = random.choice(textFormats)\n    backgroundFormat = random.choice(backgroundFormats)\n    colorDistances = {}\n    selectedImages = [\n        cv2.imread(os.path.join(imageBasePath, imagePath), cv2.IMREAD_COLOR)\n        for imagePath in random.sample(imagePaths, k=imageFormat)\n    ]\n    for image in selectedImages:\n        averageColor = np.average(image.reshape((-1, 3)), axis=0)\n        for index, colorNumpyArray in enumerate(colorsNumpyArray):\n            colorDistances[index] = colorDistances.get(index, []) + [\n                np.sum(np.abs(averageColor - colorNumpyArray))",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py:105-130"
    },
    "3295": {
        "file_id": 401,
        "content": "Creating a COCO PIP dataset: randomly selects image, text, and background formats to generate test output pictures. Chooses multiple images for each format, averages their colors, compares them with color arrays, and adds distances to the dictionary.",
        "type": "comment"
    },
    "3296": {
        "file_id": 401,
        "content": "            ]\n    sortedColorsWithIndex = sorted(\n        colorsWithIndex, key=lambda element: -np.sum(colorDistances[element[0]])\n    )  # the further the better.\n    # sortedColors = [color for _, color in sortedColorsWithIndex]\n    ## create background first.\n    imageCanvasHeight = half_width if imageFormat == 2 else width\n    textCanvasHeight = 0 if textFormat == \"none\" else textTotalHeight\n    backgroundShape = (imageCanvasHeight + textCanvasHeight, width, 3)  # height, width\n    _, color_main = sortedColorsWithIndex[0]\n    if backgroundFormat in [\"horizontalStripes\", \"verticalStripes\", \"gradients\"]:\n        # fill background with color_main first.\n        _, color_sub = sortedColorsWithIndex[1]\n        if backgroundFormat in [\"horizontalStripes\", \"verticalStripes\"]:\n            backgroundImage = np.zeros(backgroundShape, dtype=np.uint8)\n            backgroundImage[:, :, 0] = color_main[0]\n            backgroundImage[:, :, 1] = color_main[1]\n            backgroundImage[:, :, 2] = color_main[2]\n            stripeCount = random.randint(2, 5)",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py:131-156"
    },
    "3297": {
        "file_id": 401,
        "content": "Code creates a background for an image based on the furthest color from the given colors. It sorts the colors by distance from their average and chooses the furthest one. If the background format is \"horizontalStripes\", \"verticalStripes\" or \"gradients\", it fills the background with this color and another color chosen from the sorted list, then generates a random stripe count for the background image.",
        "type": "comment"
    },
    "3298": {
        "file_id": 401,
        "content": "            if backgroundFormat == \"verticalStripes\":  # slice width\n                arr = np.linspace(0, backgroundShape[1], stripeCount + 1)\n                for width_start, width_end in [\n                    (int(arr[i]), int(arr[i + 1]))\n                    for i in range(stripeCount)\n                    if i % 2 == 1\n                ]:\n                    backgroundImage[:, width_start:width_end, 0] = color_sub[0]\n                    backgroundImage[:, width_start:width_end, 1] = color_sub[1]\n                    backgroundImage[:, width_start:width_end, 2] = color_sub[2]\n            else:  # horizontal. slice height.\n                arr = np.linspace(0, backgroundShape[0], stripeCount + 1)\n                for height_start, height_end in [\n                    (int(arr[i]), int(arr[i + 1]))\n                    for i in range(stripeCount)\n                    if i % 2 == 1\n                ]:\n                    backgroundImage[height_start:height_end, :, 0] = color_sub[0]\n                    backgroundImage[height_start:height_end, :, 1] = color_sub[1]",
        "type": "code",
        "location": "/tests/anime_highlight_cuts/theme_collector/create_coco_pip_dataset_standalone.py:157-176"
    },
    "3299": {
        "file_id": 401,
        "content": "Code snippet generates a background image with vertical or horizontal stripes based on the `backgroundFormat`. For the \"verticalStripes\" format, it creates an array of strip widths and sets the corresponding pixel values for each strip. Otherwise, for the \"horizontal\" format, it creates an array of strip heights and sets the corresponding pixel values for each strip.",
        "type": "comment"
    }
}