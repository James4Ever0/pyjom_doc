{
    "5200": {
        "file_id": 673,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/taobao_query.sh",
        "type": "filepath"
    },
    "5201": {
        "file_id": 673,
        "content": "The JSON data includes store and category information, login requirements, addresses, types for TMALL_MARKET_O2O, and user location settings/preferences with device info, geolocation details, and nested service options for online platforms.",
        "type": "summary"
    },
    "5202": {
        "file_id": 673,
        "content": "## require login?\n# {\n#   \"ret\": [\n#     \"FAIL_SYS_USER_VALIDATE::登陆成功后请点击重试获得查询结果!\"\n#   ],\n#   \"data\": {}\n# }⏎       \n# use h5api?\n# http://59.82.113.156/gw/\n# seems all the same.\ncurl -H \"x-sign: azYBCM002xAAKW%2BhAZ1epg3vUDRc2W%2BpbLkKnJg3oIA%2FZg%2Bl%2Be3cZFL5P4FTFDk8Lia77SVlqaBU41ulP5grHc7tzTlviW%2Bpb4lvqW\" -H \"x-sgext: JAF6pNmPrGQougwhMeo8qQ%3D%3D\" \"http://h5api.m.taobao.com/h5/mtop.taobao.wsearch.appsearch/1.0/?data=%7B%22LBS%22%3A%22%7B%5C%22TB%5C%22%3A%5C%22%7B%5C%5C%5C%22stores%5C%5C%5C%22%3A%5B%7B%5C%5C%5C%22code%5C%5C%5C%22%3A%5C%5C%5C%22236736190%5C%5C%5C%22%2C%5C%5C%5C%22bizType%5C%5C%5C%22%3A%5C%5C%5C%222%5C%5C%5C%22%2C%5C%5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%2224%5C%5C%5C%22%7D%5D%7D%5C%22%2C%5C%22TMALL_MARKET_B2C%5C%22%3A%5C%22%7B%5C%5C%5C%22stores%5C%5C%5C%22%3A%5B%7B%5C%5C%5C%22code%5C%5C%5C%22%3A%5C%5C%5C%22107%5C%5C%5C%22%2C%5C%5C%5C%22bizType%5C%5C%5C%22%3A%5C%5C%5C%22REGION_TYPE_REGION%5C%5C%5C%22%2C%5C%5C%5C%22addrId%5C%5C%5C%22%3A%5C%5C%5C%229056332332%5C%5C%5C%22%2C%5C%",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/taobao_query.sh:1-11"
    },
    "5203": {
        "file_id": 673,
        "content": "Checking if login is required and using the h5api with the provided URL.",
        "type": "comment"
    },
    "5204": {
        "file_id": 673,
        "content": "5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%22CHOOSE_ADDR%5C%5C%5C%22%7D%5D%7D%5C%22%2C%5C%22TMALL_MARKET_O2O%5C%22%3A%5C%22%7B%5C%5C%5C%22stores%5C%5C%5C%22%3A%5B%7B%5C%5C%5C%22code%5C%5C%5C%22%3A%5C%5C%5C%22235565019%5C%5C%5C%22%2C%5C%5C%5C%22bizType%5C%5C%5C%22%3A%5C%5C%5C%22DELIVERY_TIME_HALF_DAY%5C%5C%5C%22%2C%5C%5C%5C%22addrId%5C%5C%5C%22%3A%5C%5C%5C%229056332332%5C%5C%5C%22%2C%5C%5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%22CHOOSE_ADDR%5C%5C%5C%22%7D%5D%7D%5C%22%7D%22%2C%22URL_REFERER_ORIGIN%22%3A%22%2F%2Fs.m.taobao.com%2Fh5entry%3Fg_channelSrp%3Dvideointeract%26g_tab%3Dtbexperience%26g_pfilter%3Ddaren%26g_closeModues%3Dtab%26closeExpSubTab%3Dtrue%26g_csearchdoor_spm%3Da310p.14955560%26spm%3Da310p.13800399%26launchMode%3Dandroid_new_task%26g_closeExpSubTab%3Dtrue%22%2C%22ad_type%22%3A%221.0%22%2C%22apptimestamp%22%3A%221665607023%22%2C%22areaCode%22%3A%22CN%22%2C%22brand%22%3A%22Xiaomi%22%2C%22canP4pVideoPlay%22%3A%22true%22%2C%22channelSrp%22%3A%22videointeract%22%2C%22cityCode%22%3A%223201",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/taobao_query.sh:11-11"
    },
    "5205": {
        "file_id": 673,
        "content": "Code snippet representing JSON data with information on stores and categories. It includes store codes, bizTypes, addresses, and types for TMALL_MARKET_O2O. The URL_REFERER_ORIGIN specifies the referer origin as \"s.m.taobao.com\".",
        "type": "comment"
    },
    "5206": {
        "file_id": 673,
        "content": "00%22%2C%22closeExpSubTab%22%3A%22true%22%2C%22closeModues%22%3A%22tab%22%2C%22countryNum%22%3A%22156%22%2C%22csearchdoor_spm%22%3A%22a310p.14955560%22%2C%22device%22%3A%22Mi+MIX+2%22%2C%22editionCode%22%3A%22CN%22%2C%22from%22%3A%22input%22%2C%22globalLbs%22%3A%22%7B%5C%22biz_common%5C%22%3A%7B%5C%22recommendedAddress%5C%22%3A%7B%5C%22addressId%5C%22%3A%5C%229056332332%5C%22%2C%5C%22area%5C%22%3A%5C%22%E6%A0%96%E9%9C%9E%E5%8C%BA%5C%22%2C%5C%22areaDivisionCode%5C%22%3A%5C%22320113%5C%22%2C%5C%22city%5C%22%3A%5C%22%E5%8D%97%E4%BA%AC%E5%B8%82%5C%22%2C%5C%22cityDivisionCode%5C%22%3A%5C%22320100%5C%22%2C%5C%22detailText%5C%22%3A%5C%22%E6%96%87%E8%8B%91%E8%B7%AF9%E5%8F%B7%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E5%9C%86%E9%80%9A%E5%BF%AB%E9%80%92%5C%22%2C%5C%22lat%5C%22%3A%5C%2232.11078%5C%22%2C%5C%22lng%5C%22%3A%5C%22118.932821%5C%22%2C%5C%22province%5C%22%3A%5C%22%E6%B1%9F%E8%8B%8F%E7%9C%81%5C%22%2C%5C%22provinceDivisionCode%5C%22%3A%5C%22320000%5C%22%2C%5C%22town%5C%22%3A%5",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/taobao_query.sh:11-11"
    },
    "5207": {
        "file_id": 673,
        "content": "This code segment represents a JSON object with various parameters, including the device model, country, search input source, and recommended address information for geolocation. It seems to be part of a larger API request or webpage interaction, likely related to user location settings or preferences.",
        "type": "comment"
    },
    "5208": {
        "file_id": 673,
        "content": "C%22%E4%BB%99%E6%9E%97%E8%A1%97%E9%81%93%5C%22%2C%5C%22townDivisionCode%5C%22%3A%5C%22320113007%5C%22%2C%5C%22type%5C%22%3A%5C%22deliver%5C%22%7D%7D%2C%5C%22eleme%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22999%5C%22%7D%5D%7D%2C%5C%22meeting_place%5C%22%3A%7B%7D%2C%5C%22on_time_promise%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22353585008%5C%22%7D%2C%7B%5C%22storeId%5C%22%3A%5C%22353612036%5C%22%7D%2C%7B%5C%22storeId%5C%22%3A%5C%22525826023%5C%22%7D%5D%7D%2C%5C%22same_city_buy%5C%22%3A%7B%7D%2C%5C%22tmall_market_o2o%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22235565019%5C%22%7D%5D%7D%2C%5C%22txd%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22707447478%5C%22%7D%5D%7D%7D%22%2C%22gpsEnabled%22%3A%22false%22%2C%\"",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/taobao_query.sh:11-11"
    },
    "5209": {
        "file_id": 673,
        "content": "This code contains nested JSON objects representing various services and store information for an online platform. It includes options for food delivery, eleme, meeting place, on-time promise, same city buy, tmall_market_o2o, and txd with their respective store IDs. GPS is disabled.",
        "type": "comment"
    },
    "5210": {
        "file_id": 674,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/run_weishi.sh",
        "type": "filepath"
    },
    "5211": {
        "file_id": 674,
        "content": "This command starts Mitmproxy in Socks5 mode, listens on port 8050 for incoming connections, writes logs to weishi.log, and enables handling of WebSocket streams.",
        "type": "summary"
    },
    "5212": {
        "file_id": 674,
        "content": "mitmproxy --mode socks5 --listen-port 8050 -w weishi.log --set stream_websocket=true",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/run_weishi.sh:1-1"
    },
    "5213": {
        "file_id": 674,
        "content": "This command starts Mitmproxy in Socks5 mode, listens on port 8050 for incoming connections, writes logs to weishi.log, and enables handling of WebSocket streams.",
        "type": "comment"
    },
    "5214": {
        "file_id": 675,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/run_gg.sh",
        "type": "filepath"
    },
    "5215": {
        "file_id": 675,
        "content": "This command starts mitmproxy in socks5 mode, listening on port 8050 and logs to gg.log. It also enables websocket streaming support. The user asks for domain name confirmation and doubts about IP stability.",
        "type": "summary"
    },
    "5216": {
        "file_id": 675,
        "content": "mitmproxy --mode socks5 --listen-port 8050 -w gg.log --set stream_websocket=true\n# what is the domain name for this service? are you sure the ip will not change?",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/run_gg.sh:1-3"
    },
    "5217": {
        "file_id": 675,
        "content": "This command starts mitmproxy in socks5 mode, listening on port 8050 and logs to gg.log. It also enables websocket streaming support. The user asks for domain name confirmation and doubts about IP stability.",
        "type": "comment"
    },
    "5218": {
        "file_id": 676,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/README.md",
        "type": "filepath"
    },
    "5219": {
        "file_id": 676,
        "content": "This code seems to be related to the tiktok_douyin module of pyjom project. It refers to a server address (111.48.141.77:8081) and mentions that the direction arrows indicate request and response, suggesting it deals with network communication. The code also references a query related to taobao guangguang, indicating it could be used for data retrieval from the Tmall platform of Taobao, involving an app crawler. It also refers to a JAR file for further information on how this is implemented.",
        "type": "summary"
    },
    "5220": {
        "file_id": 676,
        "content": "weishi use jce with TYPE_COMPRESS\nwhat is this server doing?\n111.48.141.77:8081\nmaybe the direction is not right.\n-> is response.\n<- is request.\nhttps://github.com/tsuzcx/qq_apk/blob/36c43445f737ed1c8854ce9dadac3979a0fc8b90/com.tencent.tim/classes.jar/com/tencent/beacon/base/net/b/d.java\nfor taobao guangguang it seems just a query away. but that query is a long one. hard to tell.\n淘口令解析\n淘宝app爬虫",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/README.md:1-17"
    },
    "5221": {
        "file_id": 676,
        "content": "This code seems to be related to the tiktok_douyin module of pyjom project. It refers to a server address (111.48.141.77:8081) and mentions that the direction arrows indicate request and response, suggesting it deals with network communication. The code also references a query related to taobao guangguang, indicating it could be used for data retrieval from the Tmall platform of Taobao, involving an app crawler. It also refers to a JAR file for further information on how this is implemented.",
        "type": "comment"
    },
    "5222": {
        "file_id": 677,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/guangguang_update.sh",
        "type": "filepath"
    },
    "5223": {
        "file_id": 677,
        "content": "The code fetches Taobao API content recommendations using JSONP, specific parameters, and JavaScript version 2.6.1 with authentication cookies in two GET requests; it also sends a POST request with JSON format to an API endpoint including authentication, but the purpose remains unclear.",
        "type": "summary"
    },
    "5224": {
        "file_id": 677,
        "content": "# curl 'https://h5api.m.taobao.com/h5/mtop.taobao.content.detail.mix.recommend.h5/1.0/?jsv=2.6.1&appKey=12574478&t=1652513788601&sign=898aac6857c0497f83579230a5117e9e&api=mtop.taobao.content.detail.mix.recommend.h5&v=1.0&H5Request=true&preventFallback=true&type=jsonp&dataType=jsonp&callback=mtopjsonp3&data=%7B%22contentId%22%3A%22346882467812%22%2C%22source%22%3A%22guangguang_cainixihuan%22%2C%22pageSize%22%3A5%2C%22pageIndex%22%3A0%2C%22bizParameters%22%3A%22%7B%5C%22itemIds%5C%22%3A%5B%5D%2C%5C%22contentId%5C%22%3A%5C%22346882467812%5C%22%2C%5C%22videoId%5C%22%3A%5C%22346882467812%5C%22%7D%22%2C%22extendParameters%22%3A%22%7B%5C%22expoContents%5C%22%3A%5C%22346882467812%5C%22%2C%5C%22slideAction%5C%22%3A%5C%22up%5C%22%2C%5C%22utparam%5C%22%3Anull%2C%5C%22page%5C%22%3A%5C%22guess-guangguang%5C%22%7D%22%7D' -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0' -H 'Accept: */*' -H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'Connection: keep-alive' ",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/guangguang_update.sh:1-1"
    },
    "5225": {
        "file_id": 677,
        "content": "This code is making a GET request to retrieve data from the Taobao API endpoint for content recommendations. It uses JSONP as the data type and callback parameter, specifies the content ID and source, and sets some other parameters like page size and index.",
        "type": "comment"
    },
    "5226": {
        "file_id": 677,
        "content": "-H 'Referer: https://market.m.taobao.com/' -H 'Cookie: cna=xXJJF/edElYCAd9ok0ozTO9S; isg=BJCQTV2Txmwd0ZnJwllsjEHhYtfiWXSjzRmbHophXOu-xTBvMmlEM-b3nQUlDix7; tfstk=cXgPBIwvIGQj6XUTrzaedIY7JeERZ4r3bZPLqdArAHqPwSrci16Limmag5IpJuf..; l=eBSy3J_rg94a6G7SBOfahurza77OSIOYYuPzaNbMiOCP9L1H5PGOW64n2rTMC31Nh6zWR3orgupwBeYBYIc8c1UNiHwStXDmn; miid=5838535061391394454; enc=iGbYsBExryBryNGDIeLiB3TSNdcdTPSzvhRgC0EExZrv5jHl85qb6bwqwxCyHxis8MkbUtiGLNI%2FRL7axbcx4GXUUuIsmiBDAl4K%2BLKyFBGK0mR%2FlBHvBVipuG5%2BY2CL; thw=cn; t=bc8cdf0df40cdf9cf6967741f7a75f8a; _m_h5_tk=8461de16a664d8efdf7a03b9cb8551f9_1652520895580; _m_h5_tk_enc=4a0616ef73708445252bf305732ce7fe; xlly_s=1' -H 'Sec-Fetch-Dest: script' -H 'Sec-Fetch-Mode: no-cors' -H 'Sec-Fetch-Site: same-site' -H 'TE: trailers'\n# how to get the freaking cat?\n# but what are these signs?\ncurl  'https://h5api.m.taobao.com/h5/mtop.taobao.content.detail.mix.recommend.h5/1.0/?jsv=2.6.1&appKey=12574478&t=1652513788601&sign=898aac6857c0497f83579230a5117e9e&api=mtop.taobao.c",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/guangguang_update.sh:1-7"
    },
    "5227": {
        "file_id": 677,
        "content": "This code is making a HTTP GET request to 'https://h5api.m.taobao.com/h5/mtop.taobao.content.detail.mix.recommend.h5/1.0/' with various headers, including Cookie and Referer. The purpose might be to fetch data from the server or interact with the website's API. It seems to involve authentication as it contains multiple cookies and other tokens.",
        "type": "comment"
    },
    "5228": {
        "file_id": 677,
        "content": "ontent.detail.mix.recommend.h5&v=1.0&H5Request=true&preventFallback=true&type=jsonp&dataType=jsonp&callback=mtopjsonp3&data=%7B%22contentId%22%3A%22346882467812%22%2C%22source%22%3A%22guangguang_cainixihuan%22%2C%22pageSize%22%3A5%2C%22pageIndex%22%3A0%2C%22bizParameters%22%3A%22%7B%5C%22itemIds%5C%22%3A%5B%5D%2C%5C%22contentId%5C%22%3A%5C%22346882467812%5C%22%2C%5C%22videoId%5C%22%3A%5C%22346882467812%5C%22%7D%22%2C%22extendParameters%22%3A%22%7B%5C%22expoContents%5C%22%3A%5C%22346882467812%5C%22%2C%5C%22slideAction%5C%22%3A%5C%22up%5C%22%2C%5C%22utparam%5C%22%3Anull%2C%5C%22page%5C%22%3A%5C%22guess-guangguang%5C%22%7D%22%7D'  -H \"Cookie: _m_h5_tk=8461de16a664d8efdf7a03b9cb8551f9_1652520895580; _m_h5_tk_enc=4a0616ef73708445252bf305732ce7fe;\"\n# mtop.taobao.content.detail.mix.recommend.h5\n# execute it twice to get the cookie. no need for other shits.\n# jsv\n# \t2.6.1\n# appKey\n# \t12574478\n# t\n# \t1652513695322\n# sign\n# \t8b9b8134ff54f4d4a725dc37db8f10e1\n# api\n# \tmtop.taobao.content.detail.mix.detail.h5\n# v",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/guangguang_update.sh:7-22"
    },
    "5229": {
        "file_id": 677,
        "content": "The code is making a GET request to retrieve the recommended content from Taobao's API. It includes specific parameters, such as content ID, source, page size, and page index. The request is using JSONP format with a specified callback function \"mtopjsonp3\". The cookies _m_h5_tk and _m_h5_tk_enc are included in the headers for authentication. The code is written in JavaScript (jsv) using version 2.6.1. The request will be executed twice, but it's unclear why, as there are no other relevant instructions provided.",
        "type": "comment"
    },
    "5230": {
        "file_id": 677,
        "content": "# \t1.0\n# H5Request\n# \ttrue\n# preventFallback\n# \ttrue\n# type\n# \tjsonp\n# dataType\n# \tjsonp\n# callback\n# \tmtopjsonp1\n# data\n# \t{\"contentId\":\"346882467812\",\"source\":\"guangguang_cainixihuan\",\"extendParameters\":\"{\\\"page\\\":\\\"guess-guangguang\\\",\\\"product_type\\\":\\\"videointeract\\\"}\"}\n# contentId, videoId, expoContents, all have videoId inside\n# https://market.m.taobao.com/app/tb-source-app/video-fullpage/pages/index?wh_weex=true&wx_navbar_hidden=true&origin=VideoInteract%7Ca310p.13800399.0.0%7C%7B%22contentId%22%3A%22346882467812%22%7D&contentId=346882467812&source=guess-guangguang&type=guangguang_cainixihuan&spm=a2141.1.guessitemtab_1.3&accountId=0&videoUrl=https%3A%2F%2Fcloud.video.taobao.com%2Fplay%2Fu%2Fnull%2Fp%2F1%2Fe%2F6%2Ft%2F1%2F346882467812.mp4&coverImage=https%3A%2F%2Fimg.alicdn.com%2Fimgextra%2Fi2%2F604321789%2FO1CN01rVTgs31P5PIQ7r2JR_!!604321789.jpg&id=346882467812&sourceType=other&suid=7f31e56f-2878-4462-9a5a-acd7d5deeec5&ut_sk=1.W4yy2CtIMUMDAA1l3Dnx4jNG_21646297_1651742283972.Copy.tblive-video&",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/guangguang_update.sh:23-39"
    },
    "5231": {
        "file_id": 677,
        "content": "This code seems to be a request for video information from Taobao API, specifying parameters like contentId, source, and extendParameters. It is using JSONP as the data type and includes a callback function \"mtopjsonp1\". The URL points to video resources on Taobao's platform.",
        "type": "comment"
    },
    "5232": {
        "file_id": 677,
        "content": "un=42ad1253bebcb796f3ba5a7177d3a823&share_crt_v=1&un_site=0&sp_abtk=common_tblive-video_commonInfo&sp_tk=55Sf5a%2B55Zyo54S25pyJ5Li65LiK5a2Q5piv5Y675L2g&cpp=1&shareurl=true&short_name=h.fJE9C6B&bxsign=scdEMXp8zB45hs84KNhAae8siAPZ43wmqm4C-4UXtj2EzGyI0oMyb12vk2tKevOe4p1bZfPRmWxc9UVR3vFx6qhAj6WS0roAs_XJt2bkVF7n1o6YetJv7wgLiCitW-wW5CW&sm=ee59f9&app=firefox\n# https://g.alicdn.com/tnode/fullpageshortvideo/2.1.0/main.json.json\n# wtf is this shit? binary?\n# https://g.alicdn.com/tnode/fullpageshortvideo/2.1.0/main.json.json\nset $parameter=\"359455393248\"\ncurl  'https://h5api.m.taobao.com/h5/mtop.taobao.content.detail.mix.recommend.h5/1.0/?jsv=2.6.1&api=mtop.taobao.content.detail.mix.recommend.h5&v=1.0&H5Request=true&preventFallback=true&type=jsonp&dataType=jsonp&callback=mtopjsonp3&data=%7B%22contentId%22%3A%22'$parameter'%22%2C%22source%22%3A%22guangguang_cainixihuan%22%2C%22pageSize%22%3A5%2C%22pageIndex%22%3A0%2C%22bizParameters%22%3A%22%7B%5C%22itemIds%5C%22%3A%5B%5D%2C%5C%22contentId%5C%22%3A%5C%",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/guangguang_update.sh:39-47"
    },
    "5233": {
        "file_id": 677,
        "content": "This code seems to be a URL for fetching data using the cURL command-line tool. It makes a GET request to 'https://h5api.m.taobao.com/...' with specific parameters like jsv, api, preventFallback, type, dataType, and callback, along with the contentId and source. The purpose of this request is unclear as it's mentioned that \"wtf is this shit? binary?\"",
        "type": "comment"
    },
    "5234": {
        "file_id": 677,
        "content": "22'$parameter'%5C%22%2C%5C%22videoId%5C%22%3A%5C%22'$parameter'%5C%22%7D%22%2C%22extendParameters%22%3A%22%7B%5C%22expoContents%5C%22%3A%5C%22'$parameter'%5C%22%2C%5C%22slideAction%5C%22%3A%5C%22up%5C%22%2C%5C%22utparam%5C%22%3Anull%2C%5C%22page%5C%22%3A%5C%22guess-guangguang%5C%22%7D%22%7D'  -H \"Cookie: _m_h5_tk=8461de16a664d8efdf7a03b9cb8551f9_1652520895580; _m_h5_tk_enc=4a0616ef73708445252bf305732ce7fe;\"",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/guangguang_update.sh:47-47"
    },
    "5235": {
        "file_id": 677,
        "content": "This code is sending a POST request with parameters in JSON format to an API endpoint. The request includes \"videoId\" and \"extendParameters\" which contain values from '$parameter'. It also sets a Cookie header for authentication.",
        "type": "comment"
    },
    "5236": {
        "file_id": 678,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/get_url.py",
        "type": "filepath"
    },
    "5237": {
        "file_id": 678,
        "content": "This code uses the requests library to send a GET request to a specific URL, passing parameters in the query string. The response cookies are printed, and then another GET request is sent with those cookies included. Finally, the response data is printed.",
        "type": "summary"
    },
    "5238": {
        "file_id": 678,
        "content": "import requests\ns = requests.Session()\nparameter=\"359455393248\"\nurl = 'https://h5api.m.taobao.com/h5/mtop.taobao.content.detail.mix.recommend.h5/1.0/?jsv=2.6.1&appKey=12574478&t=1652513788601&api=mtop.taobao.content.detail.mix.recommend.h5&v=1.0&H5Request=true&preventFallback=true&type=jsonp&dataType=jsonp&callback=mtopjsonp3&data=%7B%22contentId%22%3A%22{}%22%2C%22source%22%3A%22guangguang_cainixihuan%22%2C%22pageSize%22%3A5%2C%22pageIndex%22%3A0%2C%22bizParameters%22%3A%22%7B%5C%22itemIds%5C%22%3A%5B%5D%2C%5C%22contentId%5C%22%3A%5C%22{}%5C%22%2C%5C%22videoId%5C%22%3A%5C%22{}%5C%22%7D%22%2C%22extendParameters%22%3A%22%7B%5C%22expoContents%5C%22%3A%5C%22{}%5C%22%2C%5C%22slideAction%5C%22%3A%5C%22up%5C%22%2C%5C%22utparam%5C%22%3Anull%2C%5C%22page%5C%22%3A%5C%22guess-guangguang%5C%22%7D%22%7D'.format(parameter,parameter,parameter,parameter)\ns.get(url)\nprint(s.cookies) # must be valid url then you will be set cookie.\nr = s.get(url)\ndata = r.text\nprint(data)",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/get_url.py:1-15"
    },
    "5239": {
        "file_id": 678,
        "content": "This code uses the requests library to send a GET request to a specific URL, passing parameters in the query string. The response cookies are printed, and then another GET request is sent with those cookies included. Finally, the response data is printed.",
        "type": "comment"
    },
    "5240": {
        "file_id": 679,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/get_frida_codeshare_source.sh",
        "type": "filepath"
    },
    "5241": {
        "file_id": 679,
        "content": "This script retrieves the project source from Frida CodeShare using the provided parameter and outputs it in a format that can be easily consumed by various programming languages, such as JSON5 or JavaScript. However, there is a potential code injection warning due to the use of shell commands like `grep`, `sed`, and `python3` for data processing.",
        "type": "summary"
    },
    "5242": {
        "file_id": 679,
        "content": "# warning! potential code injection.\n# better use some json5 formatter instead.\n# this is strict! fuck.\nPARAM=$1\necho \"// script name: $PARAM\"\necho\n# exit\ncurl \"https://codeshare.frida.re/@$PARAM/\" 2>/dev/null | grep \"projectSource: \" | sed 's/projectSource:/\"projectSource\":/;s/^/{/;s/,$//;s/$/}/' | python3 -c \"d=input();import json;p=json.loads(d);print(p['projectSource'])\"\n# curl \"https://codeshare.frida.re/@Gand3lf/xamarin-antiroot/\" 2>/dev/null | grep \"projectSource: \" | sed 's/^/var a={/;s/$/}\\; console.log(a.projectSource);/' | node",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/get_frida_codeshare_source.sh:1-9"
    },
    "5243": {
        "file_id": 679,
        "content": "This script retrieves the project source from Frida CodeShare using the provided parameter and outputs it in a format that can be easily consumed by various programming languages, such as JSON5 or JavaScript. However, there is a potential code injection warning due to the use of shell commands like `grep`, `sed`, and `python3` for data processing.",
        "type": "comment"
    },
    "5244": {
        "file_id": 680,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/frida_globalswitch_apk.js",
        "type": "filepath"
    },
    "5245": {
        "file_id": 680,
        "content": "The code disables SSL-SPDY and SPDY for packet capture debugging, and attempts to print class names using Frida in an APK, but fails to hook 'Response' methods. It uses Java classes in 'mtopsdk.network' to track requests, log details, and initializes ANetworkCallImpl, while modifying 'mtopsdk.mtop.global.SwitchConfig' using Frida for URL logging.",
        "type": "summary"
    },
    "5246": {
        "file_id": 680,
        "content": "////////////////////////////////////////////////////////////////////////\n// try to disable security? disable ssl-spdy and spdy\n////////////////////////////////////////////////////////////////////////\n// try this first anyway.\nsetTimeout(function () {\n    console.log('start——*-*-*-*-*-');\n   Java.perform(function () {\n       var SwitchConfig = Java.use('mtopsdk.mtop.global.SwitchConfig');\n       SwitchConfig.isGlobalSpdySwitchOpen.overload().implementation = function () {\n           var ret = this.isGlobalSpdySwitchOpen.apply(this, arguments);\n           console.log(\"开启抓包\" + ret);\n           return false;\n       }\n       SwitchConfig.isGlobalSpdySslSwitchOpen.overload().implementation = function () {\n        var ret = this.isGlobalSpdySslSwitchOpen.apply(this, arguments);\n        console.log(\"开启抓包\" + ret);\n        return false;\n       }\n   });\n});\n// ————————————————\n// 版权声明：本文为CSDN博主「哈里哈气」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n// 原文链接：https://blog.csdn.net/qq_34067821/article/details/103203549\n////////////////////////////////////////////////////////////////////////",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/frida_globalswitch_apk.js:2-27"
    },
    "5247": {
        "file_id": 680,
        "content": "This code attempts to disable SSL-SPDY and SPdy by overriding the isGlobalSpdySwitchOpen and isGlobalSpdySslSwitchOpen methods of the SwitchConfig class. It sets both switches to off, effectively disabling them, in order to enable packet capture for debugging purposes. The code is attributed to a CSDN blog post by the author \"哈里哈气\".",
        "type": "comment"
    },
    "5248": {
        "file_id": 680,
        "content": "// print class names\n////////////////////////////////////////////////////////////////////////\n// var callback = {\n// \t'onMatch': function(cname){\n// \t\t//lets just print out the class name.\n// \t\tconsole.log(cname);\n// \t},\n// \t'onComplete': function() {\n// \t\tconsole.log(\"done\");\n// \t},\n// \t'onError': function(){\n// \t\tconsole.log(\"There is error\");\n// \t}\n// };\n// Java.perform(function(){\n// \tJava.enumerateLoadedClasses(callback);\t//onMatch: function (className)\n// });\n////////////////////////////////////////////////////////////////////////// failed to hook request/response methods as expected\n////////////////////////////////////////////////////////////////////////\n// // Java.perform(function () {\n// //     // Function to hook is defined here\n// //     //所有响应\n// in this apk we do not find 'Response' shit.\n// //     var Response = Java.use('mtopsdk.network.domain.Response');\n// //     Response.$init.overload('mtopsdk.network.domain.Response$Builder').implementation = function() {\n// //         //PrintStack()\n// //         console.log(\"Response \" + arguments[0].body)",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/frida_globalswitch_apk.js:28-59"
    },
    "5249": {
        "file_id": 680,
        "content": "The code aims to print class names using Frida in an APK. It defines a callback with 'onMatch' and 'onComplete' functions, then uses Java.enumerateLoadedClasses() to obtain the class names. The code also attempts to hook 'Response' methods but failed as they were not found in the APK.",
        "type": "comment"
    },
    "5250": {
        "file_id": 680,
        "content": "// //         var ret = this.$init.apply(this, arguments);\n// //         //all request\n// //         console.log(\"Response \" + this.toString())\n// //         return ret;\n// //     };\n// //     //所有请求\n// //     var RequestBuilder = Java.use('mtopsdk.network.domain.Request$Builder');\n// //     RequestBuilder.build.overload().implementation = function() {\n// //         //PrintStack()\n// //         var ret = this.build.apply(this, arguments);\n// //         //all request\n// //         console.log(\"RequestBuilder \" + ret.toString())\n// //         return ret;\n// //     };\n// //     //所有请求\n// //     var ANetworkCallImpl = Java.use('mtopsdk.network.impl.ANetworkCallImpl');\n// //     ANetworkCallImpl.$init.overload('mtopsdk.network.domain.Request', 'android.content.Context').implementation = function() {\n// //         //PrintStack()\n// //         console.log('ANetworkCallImpl ' + arguments[0])\n// //         var ret = this.$init.apply(this, arguments);\n// //         return ret;\n// //     };\n// //     //所有请求url\n// //     var AbstractNetworkConverter = Java.use(",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/frida_globalswitch_apk.js:60-87"
    },
    "5251": {
        "file_id": 680,
        "content": "This code is manipulating several Java classes in the 'mtopsdk.network' package for tracking all requests, logging the request details and builder objects, and initializing an ANetworkCallImpl with a Request object and Context.",
        "type": "comment"
    },
    "5252": {
        "file_id": 680,
        "content": "// //         'mtopsdk.mtop.protocol.converter.impl.AbstractNetworkConverter'\n// //     );\n// //     AbstractNetworkConverter.buildBaseUrl.overload(\n// //         'mtopsdk.framework.domain.MtopContext',\n// //         'java.lang.String',\n// //         'java.lang.String'\n// //     ).implementation = function() {\n// //         console.log(\"buildBaseUrl \"+arguments[1]+' '+arguments[2])\n// //         var ret = this.buildBaseUrl.apply(this, arguments);\n// //         //url\n// //         console.log(\"buildBaseUrl \"+ret)\n// //         return ret;\n// //     };\n// //     // 禁用spdy协议\n// //     var SwitchConfig = Java.use('mtopsdk.mtop.global.SwitchConfig');\n// //     SwitchConfig.setGlobalSpdySslSwitchOpen.overload().implementation = function() {\n// //         var ret = this.isGlobalSpdySwitchOpen.apply(this, arguments);\n// //         console.log('isGlobalSpdySwitchOpenl ' + ret)\n// //         return false;\n// //     };\n// // });",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/frida_globalswitch_apk.js:88-112"
    },
    "5253": {
        "file_id": 680,
        "content": "This code is using Frida to instrument the 'mtopsdk.mtop.global.SwitchConfig' class in an APK. It overrides the 'setGlobalSpdySslSwitchOpen' method to always return false, disabling SPDY protocol. Additionally, it modifies the 'AbstractNetworkConverter.buildBaseUrl' method to log the arguments and base URL.",
        "type": "comment"
    },
    "5254": {
        "file_id": 681,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/disable_ssl.js",
        "type": "filepath"
    },
    "5255": {
        "file_id": 681,
        "content": "Bypasses Universal Android SSL Pinning using frida, replacing checkTrustedRecursive implementation to enable SSL communication.",
        "type": "summary"
    },
    "5256": {
        "file_id": 681,
        "content": "// script name: sowdust/universal-android-ssl-pinning-bypass-2\n/* \n   Universal Android SSL Pinning Bypass\n   by Mattia Vinci and Maurizio Agazzini \n   $ frida -U -f org.package.name -l universal-ssl-check-bypass.js --no-pause\n    https://techblog.mediaservice.net/2018/11/universal-android-ssl-check-bypass-2/\n*/\nJava.perform(function() {\n    var array_list = Java.use(\"java.util.ArrayList\");\n    var ApiClient = Java.use('com.android.org.conscrypt.TrustManagerImpl');\n    ApiClient.checkTrustedRecursive.implementation = function(a1, a2, a3, a4, a5, a6) {\n        // console.log('Bypassing SSL Pinning');\n        var k = array_list.$new();\n        return k;\n    }\n}, 0);",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/disable_ssl.js:1-22"
    },
    "5257": {
        "file_id": 681,
        "content": "Bypasses Universal Android SSL Pinning using frida, replacing checkTrustedRecursive implementation to enable SSL communication.",
        "type": "comment"
    },
    "5258": {
        "file_id": 682,
        "content": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/decodeTaobaoQuery.py",
        "type": "filepath"
    },
    "5259": {
        "file_id": 682,
        "content": "The code decodes a Taobao query string, parses the URL-encoded data into JSON format with various parameters, and prints it using pprint for readability.",
        "type": "summary"
    },
    "5260": {
        "file_id": 682,
        "content": "import urllib.parse\nimport json\na = \"\"\"%7B%22LBS%22%3A%22%7B%5C%22TB%5C%22%3A%5C%22%7B%5C%5C%5C%22stores%5C%5C%5C%22%3A%5B%7B%5C%5C%5C%22code%5C%5C%5C%22%3A%5C%5C%5C%22236736190%5C%5C%5C%22%2C%5C%5C%5C%22bizType%5C%5C%5C%22%3A%5C%5C%5C%222%5C%5C%5C%22%2C%5C%5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%2224%5C%5C%5C%22%7D%5D%7D%5C%22%2C%5C%22TMALL_MARKET_B2C%5C%22%3A%5C%22%7B%5C%5C%5C%22stores%5C%5C%5C%22%3A%5B%7B%5C%5C%5C%22code%5C%5C%5C%22%3A%5C%5C%5C%22107%5C%5C%5C%22%2C%5C%5C%5C%22bizType%5C%5C%5C%22%3A%5C%5C%5C%22REGION_TYPE_REGION%5C%5C%5C%22%2C%5C%5C%5C%22addrId%5C%5C%5C%22%3A%5C%5C%5C%229056332332%5C%5C%5C%22%2C%5C%5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%22CHOOSE_ADDR%5C%5C%5C%22%7D%5D%7D%5C%22%2C%5C%22TMALL_MARKET_O2O%5C%22%3A%5C%22%7B%5C%5C%5C%22stores%5C%5C%5C%22%3A%5B%7B%5C%5C%5C%22code%5C%5C%5C%22%3A%5C%5C%5C%22235565019%5C%5C%5C%22%2C%5C%5C%5C%22bizType%5C%5C%5C%22%3A%5C%5C%5C%22DELIVERY_TIME_HALF_DAY%5C%5C%5C%22%2C%5C%5C%5C%22addrId%5C%5C%5C%22%3A%5C%5C%5C%229056332332%5C%5C%5C%22%2C%",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/decodeTaobaoQuery.py:1-3"
    },
    "5261": {
        "file_id": 682,
        "content": "This code is decoding a Taobao query string containing information about various stores and their types, likely used for filtering or search purposes.",
        "type": "comment"
    },
    "5262": {
        "file_id": 682,
        "content": "5C%5C%5C%22type%5C%5C%5C%22%3A%5C%5C%5C%22CHOOSE_ADDR%5C%5C%5C%22%7D%5D%7D%5C%22%7D%22%2C%22URL_REFERER_ORIGIN%22%3A%22%2F%2Fs.m.taobao.com%2Fh5entry%3Fg_channelSrp%3Dvideointeract%26g_tab%3Dtbexperience%26g_pfilter%3Ddaren%26g_closeModues%3Dtab%26closeExpSubTab%3Dtrue%26g_csearchdoor_spm%3Da310p.14955560%26spm%3Da310p.13800399%26launchMode%3Dandroid_new_task%26g_closeExpSubTab%3Dtrue%22%2C%22ad_type%22%3A%221.0%22%2C%22apptimestamp%22%3A%221665607023%22%2C%22areaCode%22%3A%22CN%22%2C%22brand%22%3A%22Xiaomi%22%2C%22canP4pVideoPlay%22%3A%22true%22%2C%22channelSrp%22%3A%22videointeract%22%2C%22cityCode%22%3A%22320100%22%2C%22closeExpSubTab%22%3A%22true%22%2C%22closeModues%22%3A%22tab%22%2C%22countryNum%22%3A%22156%22%2C%22csearchdoor_spm%22%3A%22a310p.14955560%22%2C%22device%22%3A%22Mi+MIX+2%22%2C%22editionCode%22%3A%22CN%22%2C%22from%22%3A%22input%22%2C%22globalLbs%22%3A%22%7B%5C%22biz_common%5C%22%3A%7B%5C%22recommendedAddress%5C%22%3A%7B%5C%22addressId%5C%22%3A%5C%229056332332%5C%22%2",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/decodeTaobaoQuery.py:3-3"
    },
    "5263": {
        "file_id": 682,
        "content": "This code contains a complex JSON object with various parameters like type, URL_REFERER_ORIGIN, ad_type, areaCode, brand, canP4pVideoPlay, channelSrp, cityCode, closeExpSubTab, closeModues, countryNum, csearchdoor\\_spm, device, editionCode, from, and globalLbs. These parameters are used to describe the source of the request, user's location, device information, and other relevant data for an API call.",
        "type": "comment"
    },
    "5264": {
        "file_id": 682,
        "content": "C%5C%22area%5C%22%3A%5C%22%E6%A0%96%E9%9C%9E%E5%8C%BA%5C%22%2C%5C%22areaDivisionCode%5C%22%3A%5C%22320113%5C%22%2C%5C%22city%5C%22%3A%5C%22%E5%8D%97%E4%BA%AC%E5%B8%82%5C%22%2C%5C%22cityDivisionCode%5C%22%3A%5C%22320100%5C%22%2C%5C%22detailText%5C%22%3A%5C%22%E6%96%87%E8%8B%91%E8%B7%AF9%E5%8F%B7%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E5%9C%86%E9%80%9A%E5%BF%AB%E9%80%92%5C%22%2C%5C%22lat%5C%22%3A%5C%2232.11078%5C%22%2C%5C%22lng%5C%22%3A%5C%22118.932821%5C%22%2C%5C%22province%5C%22%3A%5C%22%E6%B1%9F%E8%8B%8F%E7%9C%81%5C%22%2C%5C%22provinceDivisionCode%5C%22%3A%5C%22320000%5C%22%2C%5C%22town%5C%22%3A%5C%22%E4%BB%99%E6%9E%97%E8%A1%97%E9%81%93%5C%22%2C%5C%22townDivisionCode%5C%22%3A%5C%22320113007%5C%22%2C%5C%22type%5C%22%3A%5C%22deliver%5C%22%7D%7D%2C%5C%22eleme%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22999%5C%22%7D%5D%7D%2C%5C%22meeting_place%5C%22%3A%7B%7D%2C%5C%22on_time_promise%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/decodeTaobaoQuery.py:3-3"
    },
    "5265": {
        "file_id": 682,
        "content": "This code block represents a JSON object containing information about the location, delivery details, and stores related to an order. The location data includes area, city, province, town, and latitude/longitude coordinates. There are also delivery-related details such as type (deliver), and store information with store IDs.",
        "type": "comment"
    },
    "5266": {
        "file_id": 682,
        "content": "%22353585008%5C%22%7D%2C%7B%5C%22storeId%5C%22%3A%5C%22353612036%5C%22%7D%2C%7B%5C%22storeId%5C%22%3A%5C%22525826023%5C%22%7D%5D%7D%2C%5C%22same_city_buy%5C%22%3A%7B%7D%2C%5C%22tmall_market_o2o%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22235565019%5C%22%7D%5D%7D%2C%5C%22txd%5C%22%3A%7B%5C%22storeInfos%5C%22%3A%5B%7B%5C%22storeId%5C%22%3A%5C%22707447478%5C%22%7D%5D%7D%7D%22%2C%22gpsEnabled%22%3A%22false%22%2C%\"\"\"\nb =urllib.parse.unquote(a)\n# c=json.loads(b)\nimport pprint\n# pprint.pprint(c)\npprint.pprint(b)",
        "type": "code",
        "location": "/tests/taobao_guangguang_download_哇哦视频_淘宝逛逛_tiktok_douyin/decodeTaobaoQuery.py:3-8"
    },
    "5267": {
        "file_id": 682,
        "content": "This code is parsing a URL-encoded string and loading its content into a JSON format. It then prints the parsed JSON data using the pprint module for better readability.",
        "type": "comment"
    },
    "5268": {
        "file_id": 683,
        "content": "/tests/moviepy_loop_video_till_target/test.py",
        "type": "filepath"
    },
    "5269": {
        "file_id": 683,
        "content": "This code imports the \"main\" function from the \"loop_till_target\" module and sets the target duration of the video to 20 seconds. It uses a GIF file named \"cute_cat_gif\" as input, applies the main function to it, and saves the resulting video as \"cute_cat_gif_20_secs_plus.gif\". The code also checks if the final duration of the video is greater than or equal to the target duration using an assertion statement.",
        "type": "summary"
    },
    "5270": {
        "file_id": 683,
        "content": "from loop_till_target import main\ntarget_secs = 20\nvideo_in = \"/root/Desktop/works/pyjom/samples/video/cute_cat_gif.gif\"\n# no right codec! fuck. GIF not supported?\nvideo_out = f\"/root/Desktop/works/pyjom/samples/video/cute_cat_gif_{target_secs}_secs_plus.gif\"\nfvd = main(video_in, target_secs, f_out=video_out, in_place=False,debug=True)\nassert fvd >= target_secs",
        "type": "code",
        "location": "/tests/moviepy_loop_video_till_target/test.py:1-11"
    },
    "5271": {
        "file_id": 683,
        "content": "This code imports the \"main\" function from the \"loop_till_target\" module and sets the target duration of the video to 20 seconds. It uses a GIF file named \"cute_cat_gif\" as input, applies the main function to it, and saves the resulting video as \"cute_cat_gif_20_secs_plus.gif\". The code also checks if the final duration of the video is greater than or equal to the target duration using an assertion statement.",
        "type": "comment"
    },
    "5272": {
        "file_id": 684,
        "content": "/tests/moviepy_loop_video_till_target/loop_till_target.py",
        "type": "filepath"
    },
    "5273": {
        "file_id": 684,
        "content": "This code uses ffmpeg to create a video clip with repeating segments, splitting the input video into original and reversed parts, and concatenates them based on loop strategy. It replaces sections of the input video until reaching the target duration and saves the output at specified location.",
        "type": "summary"
    },
    "5274": {
        "file_id": 684,
        "content": "import os\n# moviepy's shit.\nfrom moviepy.editor import VideoFileClip  # , concatenate_videoclips\n# import moviepy.video.fx.all as vfx\ndef main(\n    f_in: str,\n    target_secs: float,\n    f_out: str = \"\",\n    in_place: bool = True,\n    debug: bool = False,\n    # accuracy_float:int=4\n    # audio:bool=False, # it will cause trouble?\n):\n    # print(\"___\")\n    # print(\"AUDIO?\",audio)\n    # print(\"IN PLACE?\",in_place)\n    # print(\"___\")\n    assert os.path.exists(f_in)\n    assert target_secs > 0\n    # target_secs_str =(\"{\"+f':.{accuracy_float}f'+\"}\").format(target_secs)\n    targetFilePath = f_out\n    if not in_place:\n        assert f_out != \"\"\n    else:\n        targetFilePath = f_in\n    clip = VideoFileClip(f_in)\n    # if not audio:\n    #     clip = clip.without_audio()\n    # newclip = clip.fx(vfx.time_mirror) # error?\n    # newclip = clip\n    import ffmpeg\n    file_input_split = ffmpeg.input(f_in).filter_multi_output(\n        \"split\"\n    )  # this is infinite split.\n    videoDuration = clip.duration\n    import math\n    import tempfile",
        "type": "code",
        "location": "/tests/moviepy_loop_video_till_target/loop_till_target.py:1-47"
    },
    "5275": {
        "file_id": 684,
        "content": "The code imports necessary libraries and defines a function \"main\" that takes input file, target duration, output file (optional), performs in-place editing (optional), and debug mode (optional). It asserts the existence of the input file and positive target duration. Depending on options, it either splits or mirrors the video using ffmpeg before processing.",
        "type": "comment"
    },
    "5276": {
        "file_id": 684,
        "content": "    import shutil\n    fileExtension = f_in.split(\".\")[-1]\n    assert fileExtension != \"\"\n    loopStrategy = [\n        (-1) ** i for i in range(math.ceil(target_secs / videoDuration))\n    ]  # zero division error?\n    if debug:\n        print(\"Loop strategy:\")\n        print(loopStrategy)\n    clips = []\n    file_input_original = file_input_split[0].filter_multi_output(\"split\")\n    file_input_reverse = (\n        file_input_split[1].filter(\"reverse\").filter_multi_output(\"split\")\n    )\n    for index, signal in enumerate(loopStrategy):\n        mindex = index // 2\n        if signal == 1:\n            file_input = file_input_original[mindex]\n            clips.append(file_input)\n        else:\n            file_input_reverse2 = file_input_reverse[mindex]\n            clips.append(file_input_reverse2)\n    # final = concatenate_videoclips(clips)\n    final = ffmpeg.concat(*clips)\n    finalVideoDuration = len(loopStrategy) * videoDuration\n    with tempfile.NamedTemporaryFile(\n        \"w+\",\n        suffix=f\".{fileExtension}\",\n    ) as f:",
        "type": "code",
        "location": "/tests/moviepy_loop_video_till_target/loop_till_target.py:48-82"
    },
    "5277": {
        "file_id": 684,
        "content": "This code is creating a video clip with repeating segments. It splits the input video into two parts, original and reversed. Then, it loops through a list of loop strategies to determine which segment (original or reversed) should be used for each iteration. The final video is created by concatenating these segments together using ffmpeg. The resulting video's duration will be determined by the length of the loop strategy list multiplied by the original video's duration.",
        "type": "comment"
    },
    "5278": {
        "file_id": 684,
        "content": "        tmpFilePath = f.name\n        # warning! what is the audio shit?\n        # print(\"TMP FILE PATH?\",tmpFilePath)\n        # breakpoint()\n        # final.write_videofile(tmpFilePath, fps=clip.fps)\n        # finalVideoDuration = final.duration\n        final.output(tmpFilePath).run(overwrite_output=True)\n        shutil.copy(tmpFilePath, targetFilePath)\n    return finalVideoDuration\nif __name__ == \"__main__\":\n    import argparse\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input\", help=\"input file\", required=True, type=str)\n    parser.add_argument(\"-o\", \"--output\", help=\"output file\", default=\"\", type=str)\n    parser.add_argument(\n        \"-r\",\n        \"--replace\",\n        help=\"replace original input file\",\n        action=\"store_true\",\n        default=False,\n    )\n    # parser.add_argument(\n    #     \"-a\",\n    #     \"--audio\",\n    #     help=\"include audio from input\",\n    #     action=\"store_true\",\n    #     default=False,\n    # )\n    parser.add_argument(\n        \"-t\", \"--target\", help=\"target seconds\", required=True, type=float",
        "type": "code",
        "location": "/tests/moviepy_loop_video_till_target/loop_till_target.py:83-116"
    },
    "5279": {
        "file_id": 684,
        "content": "This code takes an input video file and replaces a specific section of the video with another video until a target duration is reached. The final output is saved at the specified output location.",
        "type": "comment"
    },
    "5280": {
        "file_id": 684,
        "content": "    )\n    args = parser.parse_args()\n    if not args.replace:\n        assert args.output != \"\"\n    main(\n        args.input,\n        args.target,\n        f_out=args.output,\n        in_place=args.replace,\n        # audio=args.audio\n    )",
        "type": "code",
        "location": "/tests/moviepy_loop_video_till_target/loop_till_target.py:117-128"
    },
    "5281": {
        "file_id": 684,
        "content": "The code initializes a parser, parses command line arguments, asserts the absence of replace flag or an output path specified, and then calls the main function with the input, target, output (if applicable), and replace (if applicable) arguments.",
        "type": "comment"
    },
    "5282": {
        "file_id": 685,
        "content": "/tests/title_cover_generator/tokenizer.py",
        "type": "filepath"
    },
    "5283": {
        "file_id": 685,
        "content": "This code defines a custom tokenizer class, T5PegasusTokenizer, which extends the BertTokenizer. It takes an optional pre_tokenizer function as input and initializes the base tokenizer. The _tokenize method splits the text into tokens using the pre_tokenizer, and if the token is in the vocabulary, it adds it to split_tokens. If not, it extends split_tokens with tokens generated by the base tokenizer's _tokenize method.",
        "type": "summary"
    },
    "5284": {
        "file_id": 685,
        "content": "import jieba\nfrom transformers import BertTokenizer\n# alike structure as DianJing. but is it for gpt2?\nclass T5PegasusTokenizer(BertTokenizer):\n    def __init__(self, pre_tokenizer=lambda x: jieba.cut(x, HMM=False), *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.pre_tokenizer = pre_tokenizer\n    def _tokenize(self, text, *arg, **kwargs):\n        split_tokens = []\n        for text in self.pre_tokenizer(text):\n            if text in self.vocab:\n                split_tokens.append(text)\n            else:\n                split_tokens.extend(super()._tokenize(text))\n        return split_tokens",
        "type": "code",
        "location": "/tests/title_cover_generator/tokenizer.py:1-17"
    },
    "5285": {
        "file_id": 685,
        "content": "This code defines a custom tokenizer class, T5PegasusTokenizer, which extends the BertTokenizer. It takes an optional pre_tokenizer function as input and initializes the base tokenizer. The _tokenize method splits the text into tokens using the pre_tokenizer, and if the token is in the vocabulary, it adds it to split_tokens. If not, it extends split_tokens with tokens generated by the base tokenizer's _tokenize method.",
        "type": "comment"
    },
    "5286": {
        "file_id": 686,
        "content": "/tests/title_cover_generator/spacy_word_swapper.py",
        "type": "filepath"
    },
    "5287": {
        "file_id": 686,
        "content": "The code uses Spacy and Jieba tokenizer to check if a string contains English, removes non-English elements, and prints the tokens along with their POS and dependency tags. Proper nouns list may be updated and improvements are potential.",
        "type": "summary"
    },
    "5288": {
        "file_id": 686,
        "content": "# just use some simple analysis to extract the template. may not be cost effective like DianJing also you can try the freaking gpt2 model, or pegasus.\nfrom commons import sample_data\n# first assume all to be freaking chinese.\n# import nltk\nimport spacy\nimport jieba\nfrom spacy.lang.zh.examples import sentences \nimport re\ndef recursiveCompiledSearch(compiledRegex, pattern,initPos=0,resultTotal = []):\n    result = compiledRegex.search(pattern)\n    if result !=None:\n        match = result[0]\n        span = result.span()\n        realSpan = (span[0]+initPos, span[1]+initPos)\n        # initialSpan = span[0]\n        endSpan = span[1]\n        initPos += endSpan\n        mresult = {\"match\":match, \"span\":realSpan}\n        resultTotal.append(mresult)\n        newPattern = pattern[endSpan:]\n        return recursiveCompiledSearch(compiledRegex,newPattern,initPos,resultTotal)\n    else: return resultTotal\nnlp = spacy.load(\"zh_core_web_sm\")\n# proper_nouns = ['守望先锋','第五人格']\n# whatever. we can always change shit.\n# nlp.tokenizer.pkuseg_update_user_dict(proper_nouns)",
        "type": "code",
        "location": "/tests/title_cover_generator/spacy_word_swapper.py:1-30"
    },
    "5289": {
        "file_id": 686,
        "content": "The code is importing necessary libraries and defining a function for recursive text search. It uses the Spacy library for Chinese language processing, but it seems to be in progress as it mentions potential improvements and updates. The proper nouns list may be updated or changed later.",
        "type": "comment"
    },
    "5290": {
        "file_id": 686,
        "content": "# this is imoortant.\nenglish = re.compile(r\"([a-zA-Z]+([ \\-,\\.:;?!]+)?)+\")\ndef check_has_language(string,language_re): result = recursiveCompiledSearch(language_re,string,resultTotal=[]); return len(result) >0\nfor elem in sample_data:\n    hasSpace = False\n    # we need to eliminate some english things.\n    # we also have some spaces. remove them before proceed.\n    if \" \" in elem:\n        hasSpace = True\n        elem = elem.replace(\" \", \"\")\n    # some flashy text will never be accepted. if outside of english, chinese we accept nothing.\n    # english is not included in spacy.\n    data = [x for x in jieba.cut(elem)] # contradictory.\n    english_check = check_has_language(elem,english)\n    if english_check:\n        print(\"HAS ENGLISH\")\n        print(elem)\n        continue\n    # check if words contains english. remove these titles.\n    # print(data)\n    nlp.tokenizer.pkuseg_update_user_dict(data)\n    doc = nlp(elem)\n    print(doc.text)\n    for token in doc:\n        print(token.text, token.pos_, token.dep_)",
        "type": "code",
        "location": "/tests/title_cover_generator/spacy_word_swapper.py:31-56"
    },
    "5291": {
        "file_id": 686,
        "content": "This code checks if a given string contains English language, removes spaces and non-English elements using Jieba tokenizer and Spacy, and then prints the tokens along with their part of speech (POS) and dependency tags for further analysis.",
        "type": "comment"
    },
    "5292": {
        "file_id": 687,
        "content": "/tests/title_cover_generator/pyltp_server.py",
        "type": "filepath"
    },
    "5293": {
        "file_id": 687,
        "content": "The code initializes LTP models for NLP tasks, offering functions for segmentation, part-of-speech tagging, named entity recognition, and dependency syntax parsing. It uses PyLTL to extract subject-predicate-object triples from sentences, identifies relationships, and appends them to Dynamic_relation if applicable.",
        "type": "summary"
    },
    "5294": {
        "file_id": 687,
        "content": "# !/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# create on 5/26/20\n__author__ = \"sinsa\"\nimport os\nimport logging\nfrom logging import info, error, warn\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - PID:%(process)d - %(levelname)s: %(message)s\",\n)\nfrom pyltp import Segmentor\nfrom pyltp import Postagger\nfrom pyltp import NamedEntityRecognizer\nfrom pyltp import Parser\nfrom pyltp import SentenceSplitter\nclass LTP_MODEL:\n    def __init__(self):\n        LTP_DATA_DIR = \"./pyltp_data/ltp_data_v3.4.0\"  # ltp模型目录的路径\n        info(\"loading models ...\")\n        self.cws_model_path = os.path.join(\n            LTP_DATA_DIR, \"cws.model\"\n        )  # 分词模型路径，模型名称为`cws.model`\n        self.segmentor = Segmentor(self.cws_model_path)  # 初始化实例\n        # self.segmentor.load(self.cws_model_path)  # 加载模型\n        info(\"has loaded 分词模型\")\n        self.pos_model_path = os.path.join(\n            LTP_DATA_DIR, \"pos.model\"\n        )  # 词性标注模型路径，模型名称为`pos.model`\n        self.postaggers = Postagger(self.pos_model_path)  # 初始化实例",
        "type": "code",
        "location": "/tests/title_cover_generator/pyltp_server.py:1-35"
    },
    "5295": {
        "file_id": 687,
        "content": "This code initializes the necessary LTP (Language Technology Platform) models for Natural Language Processing tasks. It sets the LTP data directory, loads and initializes models for word segmentation, part-of-speech tagging, named entity recognition, and parsing. The logger is configured to provide status updates during the loading process.",
        "type": "comment"
    },
    "5296": {
        "file_id": 687,
        "content": "        # self.postaggers.load(self.pos_model_path)  # 加载模型\n        info(\"has loaded 词性标注模型\")\n        self.ner_model_path = os.path.join(\n            LTP_DATA_DIR, \"ner.model\"\n        )  # 命名实体识别模型路径，模型名称为`pos.model`\n        self.recognizer = NamedEntityRecognizer(self.ner_model_path)  # 初始化实例\n        # self.recognizer.load(self.ner_model_path)  # 加载模型\n        info(\"has loaded 命名实体识别模型\")\n        self.par_model_path = os.path.join(\n            LTP_DATA_DIR, \"parser.model\"\n        )  # 依存句法分析模型路径，模型名称为`parser.model`\n        self.parser = Parser(self.par_model_path)  # 初始化实例\n        # self.parser.load(self.par_model_path)  # 加载模型\n        info(\"has loaded 依存句法分析模型\")\n    def __release__(self):\n        self.segmentor.release()  # 释放模型\n        self.postaggers.release()  # 释放模型\n        self.recognizer.release()  # 释放模型\n        self.parser.release()  # 释放模型\n    def SplitSentence(self, sentence):\n        sents_list = SentenceSplitter.split(sentence)  # 分句\n        return list(sents_list)\n    def segment(self, input_list):",
        "type": "code",
        "location": "/tests/title_cover_generator/pyltp_server.py:36-61"
    },
    "5297": {
        "file_id": 687,
        "content": "The code loads three models (POS tagging, Named Entity Recognition, and Dependency Parsing) and initializes corresponding recognizers or parsers for each model. It also provides methods to release the models when finished and split a sentence into individual sentences.",
        "type": "comment"
    },
    "5298": {
        "file_id": 687,
        "content": "        \"\"\"\n        功能：实现分词文本的分词\n        返回值：每个文本的形成一个列表[['word1','word2'],['word1','word3'],……]\n        \"\"\"\n        segmented_text_list = []\n        for text in input_list:\n            words = self.segmentor.segment(text)  # 分词\n            segmented_text_list.append(list(words))\n        return segmented_text_list\n    def postagger(self, input_list, return_words_list=False):\n        \"\"\"\n        功能：实现文本中每个词的词性标注\n        返回值：每个文本是一个列表，列表中的每个词也是个列表[[['word1',u'O'],['word2',u'O']],[['word2',u'O'],['word5',u'O']],……]\n        \"\"\"\n        postagger_text_list = []\n        words_list = self.segment(input_list)\n        postags_list = []\n        for words in words_list:\n            postags = self.postaggers.postag(words)  # 词性标注\n            postags_list.append(list(postags))\n            words_postags = list(zip(words, list(postags)))\n            postagger_text_list.append(words_postags)\n        if return_words_list:\n            return words_list, postags_list\n        else:\n            return postagger_text_list\n    def NamedEntityRecognizer(self, input_list, Entity_dist=False, repead=False):",
        "type": "code",
        "location": "/tests/title_cover_generator/pyltp_server.py:62-90"
    },
    "5299": {
        "file_id": 687,
        "content": "This code defines three functions: \"segment\", \"postagger\", and \"NamedEntityRecognizer\". The \"segment\" function takes a list of texts as input, performs segmentation on each text to obtain a list of words, and returns the segmented text as a list of lists. The \"postagger\" function takes a list of texts and performs part-of-speech tagging on each word in the list. It then returns the tagged text as a list of lists. If the \"return_words_list\" parameter is True, it also returns the original words list. The \"NamedEntityRecognizer\" function recognizes named entities in the input texts based on the provided parameters (\"Entity_dist\" and \"repead\").",
        "type": "comment"
    }
}