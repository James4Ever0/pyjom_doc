{
    "2300": {
        "file_id": 235,
        "content": "    const values = new Int32Array(numPixels * numChannels)\n        // are you sure about the width?\n    // can you make this faster? shit?\n    // this shit is no numpy. fuck.\n    for (let i = 0; i < numPixels; i++)\n        for (let c = 0; c < numChannels; ++c)\n        // if (type == 'bmp') {\n        //     // ABGR?\n        //     // values[i * numChannels + c] = image.data[i * 4+c]\n        //     values[i * numChannels + c] = image.data[i * 4 + 3 - c]\n        // } else {\n            values[i * numChannels + c] = image.data[i * 4 + c]\n            // }\n    return tf.tensor3d(values, [image.height, image.width, numChannels], 'int32')\n}\napp.get('/', async(req, res) => {\n    res.send('nsfw nodejs server')\n})\napp.post('/nsfw', upload.single('image'), async(req, res) => {\n    if (!req.file) res.status(400).send('Missing image multipart/form-data')\n    else {\n        try {\n            console.log('file uploaded:', req.file)\n            if (req.file.fieldname == 'image') {\n                type = req.file.mimetype // deal with it later.",
        "type": "code",
        "location": "/tests/nsfw_violence_drug_detection/nsfwjs_test.js:424-452"
    },
    "2301": {
        "file_id": 235,
        "content": "This code defines a function that converts an image into a TensorFlow tensor3d array. It takes the number of pixels and channels as inputs, iterates over each pixel and channel, and assigns values from the image data to the tensor3d array based on the image's format (BMP or other). The function returns the resulting tensor3d array. The app also has two routes: a GET route that returns \"nsfw nodejs server\" and a POST route for handling image uploads, which logs the file information if it is an image.",
        "type": "comment"
    },
    "2302": {
        "file_id": 235,
        "content": "                extension = req.file.originalname.split(\".\").slice(-1)[0].toLowerCase()\n                if (extension == 'gif' || type == 'image/gif') {\n                    let image = req.file.buffer\n                    let predictions = await _model.classifyGif(image, { topk: 3, fps: 1 })\n                        // image.dispose()\n                    predictions.message = 'success'\n                    res.json(predictions)\n                } else {\n                    if (extension == 'bmp') {\n                        type = 'image/bmp'\n                    }\n                    let image = await convert(req.file.buffer, type) // here we have buffer.\n                    let predictions = await _model.classify(image)\n                    predictions.message = 'success'\n                        // image.dispose()\n                    res.json(predictions)\n                }\n            }\n            // we need some file format hints.\n        } catch (e) {\n            console.log(e)\n            res.json({ message: 'error' })",
        "type": "code",
        "location": "/tests/nsfw_violence_drug_detection/nsfwjs_test.js:453-475"
    },
    "2303": {
        "file_id": 235,
        "content": "This code handles file uploads and classifies images based on their format. It checks if the image is a GIF, in which case it uses a specialized function for classification, otherwise it converts non-GIF images to a specified type and performs classification. The code catches any errors that occur during this process and sends an appropriate response.",
        "type": "comment"
    },
    "2304": {
        "file_id": 235,
        "content": "        }\n    }\n})\nconst load_model = async() => {\n    _model = await nsfw.load()\n}\n// Keep the model in memory, make sure it's loaded only once\nload_model().then(() => {\n    console.log('server ready')\n    app.listen(8511)\n})\n// curl --request POST localhost:8080/nsfw --header 'Content-Type: multipart/form-data' --data-binary 'image=@/full/path/to/picture.jpg'",
        "type": "code",
        "location": "/tests/nsfw_violence_drug_detection/nsfwjs_test.js:476-491"
    },
    "2305": {
        "file_id": 235,
        "content": "The code loads an NSFW content detection model and keeps it in memory. It ensures the model is loaded only once and starts the server on port 8511. When a POST request with an image is received, the model classifies the content as NSFW or not.",
        "type": "comment"
    },
    "2306": {
        "file_id": 236,
        "content": "/tests/nsfw_violence_drug_detection/nsfwjs_gif.js",
        "type": "filepath"
    },
    "2307": {
        "file_id": 236,
        "content": "This code imports TensorFlow and nsfwjs libraries, processes GIF frames at 1fps, loads a model for classification using predictions, and sets up a file stream to read data in chunks for partial processing.",
        "type": "summary"
    },
    "2308": {
        "file_id": 236,
        "content": "const tf = require('@tensorflow/tfjs-node')\nconst nsfw = require('nsfwjs')\n// predictions [\n//     [\n//       { className: 'Neutral', probability: 0.9845383167266846 },\n//       { className: 'Porn', probability: 0.009829860180616379 },\n//       { className: 'Drawing', probability: 0.003906613681465387 }\n//     ],\n//     [\n//       { className: 'Neutral', probability: 0.9763429760932922 },\n//       { className: 'Porn', probability: 0.014182578772306442 },\n//       { className: 'Drawing', probability: 0.007088858168572187 }\n//     ],\n//     [\n//       { className: 'Neutral', probability: 0.9598317742347717 },\n//       { className: 'Drawing', probability: 0.03286046162247658 },\n//       { className: 'Porn', probability: 0.003989457152783871 }\n//     ]\n//   ]\nfilepath = \"/root/Desktop/works/pyjom/samples/video/kitty_flash_15fps.gif\"\n// mechanism: choose three most likely categories per chosen frame, process at 1fps.\n// no other classes?\n// filepath = \"/root/Desktop/works/pyjom/samples/video/cat_invalid_eye_rolling.gif\"",
        "type": "code",
        "location": "/tests/nsfw_violence_drug_detection/nsfwjs_gif.js:1-27"
    },
    "2309": {
        "file_id": 236,
        "content": "Code imports TensorFlow and nsfwjs libraries, and defines an array of prediction results for three frames. The filepath is set to \"/root/Desktop/works/pyjom/samples/video/kitty_flash_15fps.gif\". The code chooses the top three categories from each frame, processes them at 1fps, and does not consider other classes.",
        "type": "comment"
    },
    "2310": {
        "file_id": 236,
        "content": "const fs = require('fs');\n// Store file data chunks in this array\nlet chunks = [];\n// We can use this variable to store the final data\nlet fileBuffer;\n// Read file into stream.Readable\nlet fileStream = fs.createReadStream(filepath);\n// An error occurred with the stream\nfileStream.once('error', (err) => {\n    // Be sure to handle this properly!\n    console.error(err);\n});\nlet _model\nconst load_model = async() => {\n    _model = await nsfw.load()\n    console.log('model ready')\n}\n// Keep the model in memory, make sure it's loaded only once\n// File is done being read\nfileStream.once('end', () => {\n    // create the final data Buffer from data chunks;\n    fileBuffer = Buffer.concat(chunks);\n    // do shit here.\n    console.log(\"filebuffer ready\")\n    load_model().then(() => {\n        _model.classifyGif(fileBuffer, { topk: 3, fps: 1 })\n            .then(predictions => console.log('predictions', predictions))\n            .catch(error => console.log('model error', error))\n    })\n    // Of course, you can do anything else you need to here, like emit an event!",
        "type": "code",
        "location": "/tests/nsfw_violence_drug_detection/nsfwjs_gif.js:29-64"
    },
    "2311": {
        "file_id": 236,
        "content": "The code reads a file into a stream, stores it in chunks, combines the chunks into a final data buffer, and then loads a model to classify the GIF using its predictions. This allows for efficient processing of large files and accurate detection of content.",
        "type": "comment"
    },
    "2312": {
        "file_id": 236,
        "content": "});\n// Data is flushed from fileStream in chunks,\n// this callback will be executed for each chunk\nfileStream.on('data', (chunk) => {\n    chunks.push(chunk); // push data chunk to array\n    // We can perform actions on the partial data we have so far!\n});",
        "type": "code",
        "location": "/tests/nsfw_violence_drug_detection/nsfwjs_gif.js:65-73"
    },
    "2313": {
        "file_id": 236,
        "content": "This code snippet sets up a file stream that reads data in chunks. The 'data' event triggers for each chunk, and pushes the chunk into an array (chunks). This allows performing actions on partial data as it arrives.",
        "type": "comment"
    },
    "2314": {
        "file_id": 237,
        "content": "/tests/nsfw_violence_drug_detection/launch_nodejs_server.sh",
        "type": "filepath"
    },
    "2315": {
        "file_id": 237,
        "content": "This line of code runs a JavaScript file named \"nsfwjs_test.js\" using the Node.js runtime environment. The purpose could be to execute tests or perform specific operations related to nsfw (not safe for work) detection, specifically for violence and drug-related content.",
        "type": "summary"
    },
    "2316": {
        "file_id": 237,
        "content": "node nsfwjs_test.js",
        "type": "code",
        "location": "/tests/nsfw_violence_drug_detection/launch_nodejs_server.sh:1-1"
    },
    "2317": {
        "file_id": 237,
        "content": "This line of code runs a JavaScript file named \"nsfwjs_test.js\" using the Node.js runtime environment. The purpose could be to execute tests or perform specific operations related to nsfw (not safe for work) detection, specifically for violence and drug-related content.",
        "type": "comment"
    },
    "2318": {
        "file_id": 238,
        "content": "/tests/nsfw_violence_drug_detection/init_nsfwjs.sh",
        "type": "filepath"
    },
    "2319": {
        "file_id": 238,
        "content": "Installing global dependencies for TF.js, nsfwjs, jpeg-js, express, and multer in the codebase.",
        "type": "summary"
    },
    "2320": {
        "file_id": 238,
        "content": "npm i -g @tensorflow/tfjs-node nsfwjs jpeg-js express multer",
        "type": "code",
        "location": "/tests/nsfw_violence_drug_detection/init_nsfwjs.sh:1-1"
    },
    "2321": {
        "file_id": 238,
        "content": "Installing global dependencies for TF.js, nsfwjs, jpeg-js, express, and multer in the codebase.",
        "type": "comment"
    },
    "2322": {
        "file_id": 239,
        "content": "/tests/basic_pitch_multi_midi_conversion/test.sh",
        "type": "filepath"
    },
    "2323": {
        "file_id": 239,
        "content": "Creates a new folder called \"output_path\", then uses the 'basic-pitch' command to convert MIDI files from \"/media/root/help/pyjom/tests/bilibili_practices/bilibili_tarot/some_bgm.mp3\" into audio format, saving them in the newly created folder.",
        "type": "summary"
    },
    "2324": {
        "file_id": 239,
        "content": "mkdir output_path\nbasic-pitch --sonify-midi output_path /media/root/help/pyjom/tests/bilibili_practices/bilibili_tarot/some_bgm.mp3",
        "type": "code",
        "location": "/tests/basic_pitch_multi_midi_conversion/test.sh:1-2"
    },
    "2325": {
        "file_id": 239,
        "content": "Creates a new folder called \"output_path\", then uses the 'basic-pitch' command to convert MIDI files from \"/media/root/help/pyjom/tests/bilibili_practices/bilibili_tarot/some_bgm.mp3\" into audio format, saving them in the newly created folder.",
        "type": "comment"
    },
    "2326": {
        "file_id": 240,
        "content": "/tests/mmd_human_dance_pose/test_detection_yolo.py",
        "type": "filepath"
    },
    "2327": {
        "file_id": 240,
        "content": "Importing necessary libraries and setting proxy environments to ensure proper model loading. Loading the YOLOv5 model from a local directory, and performing inference on an image file. Saving and displaying results. Some confusion regarding the 'bird' detection category.",
        "type": "summary"
    },
    "2328": {
        "file_id": 240,
        "content": "import torch\nimport os\nos.environ[\"http_proxy\"] = \"\"\nos.environ[\"https_proxy\"] = \"\"\n# Model\nlocalModelDir = '/root/Desktop/works/pyjom/pyjom/models/yolov5/ultralytics_yolov5_master/'\n# import os\nos.environ[\"YOLOV5_MODEL_DIR\"] = '/root/Desktop/works/pyjom/pyjom/models/yolov5/' # this is strange. must be a hack in the localModelDir\nmodel = torch.hub.load(localModelDir, 'yolov5s',source=\"local\")  # or yolov5m, yolov5l, yolov5x, custom\n# Images\nimg = '/media/root/help/pyjom/samples/image/miku_on_green.png'  # or file, Path, PIL, OpenCV, numpy, list\n# Inference\nresults = model(img)\n# Results\n# results.print() # or .show(),\nresults.save()\n# print(type(results),dir(results))\n# breakpoint()\nimport cv2\nimage = cv2.imread(\"runs/detect/exp3/miku_on_green.jpg\")\ncv2.imshow(\"NONE\",image)\n# results.print()  # or .show(),\n# hold it.\n# image 1/1: 720x1280 1 bird # what the fuck is a bird?\n# os.system(\"pause\")\n# input()\n# this shit has been detected but not in the right category.",
        "type": "code",
        "location": "/tests/mmd_human_dance_pose/test_detection_yolo.py:1-32"
    },
    "2329": {
        "file_id": 240,
        "content": "Importing necessary libraries and setting proxy environments to ensure proper model loading. Loading the YOLOv5 model from a local directory, and performing inference on an image file. Saving and displaying results. Some confusion regarding the 'bird' detection category.",
        "type": "comment"
    },
    "2330": {
        "file_id": 241,
        "content": "/tests/mitm_chatbot_framework/README.md",
        "type": "filepath"
    },
    "2331": {
        "file_id": 241,
        "content": "The code represents the MITM (Man-in-the-Middle) Chatbot, which goes beyond traditional chat applications. This indicates that it likely involves advanced functionality or interactions beyond typical text-based conversations.",
        "type": "summary"
    },
    "2332": {
        "file_id": 241,
        "content": "mitm chatbot, beyond chat",
        "type": "code",
        "location": "/tests/mitm_chatbot_framework/README.md:1-1"
    },
    "2333": {
        "file_id": 241,
        "content": "The code represents the MITM (Man-in-the-Middle) Chatbot, which goes beyond traditional chat applications. This indicates that it likely involves advanced functionality or interactions beyond typical text-based conversations.",
        "type": "comment"
    },
    "2334": {
        "file_id": 242,
        "content": "/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/test_bilibili.sh",
        "type": "filepath"
    },
    "2335": {
        "file_id": 242,
        "content": "This code utilizes yt-dlp to download Bilibili video sections with authentication, handles subtitles and danmaku, supports multiple portions, updates cookies, allows title-only downloads, and retrieves metadata.",
        "type": "summary"
    },
    "2336": {
        "file_id": 242,
        "content": "# 关于视频合集 分p视频的分析逻辑：\n# https://github.com/Satoing/python_bilibili_downloader/blob/master/bilibili_video.py\n# 解析这个接口可以得到分p或者合集的信息 以及字幕信息 AI生成的字幕\n# https://api.bilibili.com/x/web-interface/view?bvid=BV1Fs411k7e9\n# https://api.bilibili.com/x/web-interface/view?bvid=BV1Cg411E7NF\nURL=\"https://www.bilibili.com/video/BV1Fs411k7e9\" #老戴 马克思佩恩 分p视频\n# 也可以直接网页parse\n# executing this you will get \"subtitle\" in \"danmaku\" as language, in xml format.\n# 对于海量弹幕的某些视频 （超电磁炮 12w asoul的某些二创 3w）不建议进行弹幕分析 可以通过API获取弹幕总数 不下载弹幕 \n# yt-dlp --skip-download --list-subs -I 1 \"https://www.bilibili.com/video/BV1Fs411k7e9\"\n# URL=\"https://www.bilibili.com/video/BV1Cg411E7NF\" #苏打baka 魔改机箱 合集\n# 合集视频 用bilibili_api 或者直接网页parse即可\n# it has multiple videos. what to do?\n# --force-keyframes-at-cuts\n# man i just need the first chapter.\n# yt-dlp --download-sections \"*0:05:00-0:06:30\" --playlist-items \"1\" \"$URL\" # only first video.\n# premium?\n# this feature is awesome! how to extract cookies programmatically from browser?\n# Use --cookies-from-browser o",
        "type": "code",
        "location": "/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/test_bilibili.sh:1-26"
    },
    "2337": {
        "file_id": 242,
        "content": "This code snippet is for downloading specific sections of Bilibili videos using yt-dlp. It provides URLs for both single video parts and video collections, explains how to handle subtitles and danmaku (comments), and suggests using the --cookies-from-browser option for premium access.",
        "type": "comment"
    },
    "2338": {
        "file_id": 242,
        "content": "r --cookies for the authentication. See  https://github.com/yt-dlp/yt-dlp/wiki/FAQ#how-do-i-pass-cookies-to-yt-dlp \n# not working for chromium on kali? (no bilibili cookie found) maybe it is relocated.\n# cookies = yt_dlp.cookies.extract_cookies_from_browser(BROWSER_NAME) -> YourubeDLCookieJar\n# save as Netscape HTTP Cookie File.\n# cookies.save(OUTPUT_FILE_PATH) \n# since we have issue playing content at tail of video, we do this.\n# yt-dlp --download-sections \"*0:05:00-0:06:30\" --playlist-items \"1\" --cookies-from-browser firefox --force-keyframes-at-cuts \"$URL\" # pass cookies.\n# forcing keyframe is much slower. but it produces better results.\n# yt-dlp --download-sections \"*0:05:00-0:06:30\" --playlist-items \"1\" --cookies-from-browser firefox --force-keyframes-at-cuts \"$URL\" # pass cookies.\n# you may want to add some margin at tail (or head) if not using \"--force-keyframes-at-cuts\", be it 10 seconds. usually jigs happens at 5 secs. but we are careful.\n# yt-dlp --download-sections \"*0:04:50-0:06:40\" --playlist-items \"1\" --cookies-from-browser firefox \"$URL\" # pass cookies.",
        "type": "code",
        "location": "/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/test_bilibili.sh:26-42"
    },
    "2339": {
        "file_id": 242,
        "content": "The code is trying to download a specific portion of a Bilibili video, ensuring authentication by passing cookies from the browser (Firefox in this case) to yt-dlp. It forces keyframes at cuts for better results but notes that it's slower. The code provides different options to account for potential issues and suggests adding margin at tail or head if not using --force-keyframes-at-cuts, with a recommended 10 seconds or even 5 seconds depending on the need for caution.",
        "type": "comment"
    },
    "2340": {
        "file_id": 242,
        "content": "# what if we download multiple sections?\n# no combination? shit.\n# if not at the very tail, other tails can be better than the last tail. but it is just my guess. better to keep all these margins!\n# yt-dlp --download-sections \"*0:04:50-0:05:40\" --download-sections \"*0:05:50-0:06:40\" --playlist-items \"1\" --cookies-from-browser firefox -o \"%(uploader_id)s-%(id)s-%(title)s-%(autonumber)s.%(ext)s\" \"$URL\" # pass cookies.\n# since we have cron job now, no need to do the old-school thing.\nyt-dlp --download-sections \"*0:04:50-0:05:40\" --download-sections \"*0:05:50-0:06:40\" --playlist-items \"1\" --cookies /root/.browser_cookies_exported/firefox.cookies -o \"%(uploader_id)s-%(id)s-%(title)s-%(autonumber)s.%(ext)s\" \"$URL\" # pass cookies in different way\n# like this: '2142762-BV1Fs411k7e9_p1-老戴《马克思佩恩 3》全收集流程攻略【共14期完结】 p01 EP-01-00002.mp4'\n# https://github.com/yt-dlp/yt-dlp#readme -> \"OUTPUT TEMPLATE\"\n# https://github.com/yt-dlp/yt-dlp/issues/4579\n# you better use stored cookies instead of retrieving cookies every time.",
        "type": "code",
        "location": "/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/test_bilibili.sh:44-59"
    },
    "2341": {
        "file_id": 242,
        "content": "The code tests downloading multiple video portions from Bilibili using yt-dlp with cookies stored, instead of retrieving them every time. It mentions that keeping all margins is better and suggests using a different format for the output file name.",
        "type": "comment"
    },
    "2342": {
        "file_id": 242,
        "content": "# or you can update cookies regularly with cronjob.\n# just want metadata?\n# if you want title for each video in playlist, you just get it from elsewhere or parse the damn output filename (slow, man!)\n# this seems to only have video description. nothing else! not even video length.\n# yt-dlp --write-description --write-playlist-metafiles --skip-download \"$URL\"\n# hey i don't want many download links. i just want title.\n# yt-dlp --write-info-json  --write-playlist-metafiles --skip-download \"$URL\" # this will get metadata main playlist and every video in the playlist in separate json files.\n# this is one of the video in that playlist. \"https://www.bilibili.com/video/BV1Fs411k7e9?p=1\n# you can get comments with this tool.\n## no comments?\n# yt-dlp --write-info-json --skip-download \"$URL\"\n# download-sections can be used multiple times?",
        "type": "code",
        "location": "/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/test_bilibili.sh:60-75"
    },
    "2343": {
        "file_id": 242,
        "content": "This code snippet provides various options for downloading or obtaining metadata from a Bilibili playlist using yt-dlp. The user can choose to update cookies regularly, download only the video title, or retrieve metadata for the entire playlist and each individual video in separate JSON files. The user can also use specific URLs to obtain comments without actually downloading the videos. The code suggests multiple usage scenarios for the 'download-sections' functionality.",
        "type": "comment"
    },
    "2344": {
        "file_id": 243,
        "content": "/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/cron_update_cookies_stored_under_root_home.py",
        "type": "filepath"
    },
    "2345": {
        "file_id": 243,
        "content": "This script creates a directory for cookie storage if it doesn't already exist, and then extracts and saves cookies from Firefox and Chromium browsers.",
        "type": "summary"
    },
    "2346": {
        "file_id": 243,
        "content": "# 0 * * * * /usr/bin/python3 /root/Desktop/works/pyjom/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/cron_update_cookies_stored_under_root_home.py\nimport os\nimport shutil\ncookies_path = \"/root/.browser_cookies_exported\"\nif not (os.path.exists(cookies_path) or os.path.isdir(cookies_path)):\n    if os.path.isfile(cookies_path):\n        os.remove(cookies_path)\n    elif os.path.isdir(cookies_path):\n        shutil.rmtree(cookies_path)\n    elif os.path.islink(cookies_path):\n        os.unlink(cookies_path)\n    os.mkdir(cookies_path)\nimport yt_dlp\nbrowser_names = [\"firefox\",\"chromium\"]\nfor browser_name in browser_names:\n    cookies = yt_dlp.cookies.extract_cookies_from_browser(browser_name)\n    filepath = os.path.join(cookies_path,f\"{browser_name}.cookies\")\n    cookies.save(filepath)",
        "type": "code",
        "location": "/tests/download_sections_video_portion_partial_download_youtube_yt_dlp_bilibili/cron_update_cookies_stored_under_root_home.py:1-24"
    },
    "2347": {
        "file_id": 243,
        "content": "This script creates a directory for cookie storage if it doesn't already exist, and then extracts and saves cookies from Firefox and Chromium browsers.",
        "type": "comment"
    },
    "2348": {
        "file_id": 244,
        "content": "/tests/microsoft_xiaobing_conversation_bing/xiaobing_server_keepalive.sh",
        "type": "filepath"
    },
    "2349": {
        "file_id": 244,
        "content": "This script continuously runs the \"chat_with_session_id.js\" Node.js program in a loop, likely for testing or maintaining an active conversation state.",
        "type": "summary"
    },
    "2350": {
        "file_id": 244,
        "content": "cd /root/Desktop/works/pyjom/tests/microsoft_xiaobing_conversation_bing\nwhile true; do\n    node chat_with_session_id.js\ndone",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/xiaobing_server_keepalive.sh:1-5"
    },
    "2351": {
        "file_id": 244,
        "content": "This script continuously runs the \"chat_with_session_id.js\" Node.js program in a loop, likely for testing or maintaining an active conversation state.",
        "type": "comment"
    },
    "2352": {
        "file_id": 245,
        "content": "/tests/microsoft_xiaobing_conversation_bing/test_curl_bing_search_normal_conversation_chitchat.sh",
        "type": "filepath"
    },
    "2353": {
        "file_id": 245,
        "content": "The code uses cURL to make a POST request for English chat, sets headers and cookies, and tests Bing search functionality with Python-related queries.",
        "type": "summary"
    },
    "2354": {
        "file_id": 245,
        "content": "curl 'https://cn.bing.com/english/zochatv2?cc=cn&ensearch=0' \\\n  -H 'authority: cn.bing.com' \\\n  -H 'accept: */*' \\\n  -H 'accept-language: en-US,en;q=0.9' \\\n  -H 'content-type: text/plain;charset=UTF-8' \\\n  -H 'cookie: MUID=1B560BA4BCDC678502F21A48BDF2660B; MUIDB=1B560BA4BCDC678502F21A48BDF2660B; _EDGE_V=1; SRCHD=AF=NOFORM; SRCHUID=V=2&GUID=5F8EE8D909ED4343AF0A332575F18DCC&dmnchg=1; _UR=QS=0&TQS=0; _FP=hta=off; MMCASM=ID=EB1F15CA82AF4F2EACA836E498185727; _clck=pkzyck|1|f48|0; MicrosoftApplicationsTelemetryDeviceId=0fa0bc06-15c9-4c72-bba4-c2eb1d1d4998; MSFPC=GUID=02bec15aac9e4b00b0f093e37277467c&HASH=02be&LV=202207&V=4&LU=1658791106497; ZHCHATSTRONGATTRACT=TRUE; _ITAB=STAB=TR; imgv=flts=20220824&lodlg=2&gts=20220908; _tarLang=default=ja; _TTSS_OUT=hist=WyJlbiIsImphIl0=; _TTSS_IN=hist=WyJlcyIsInpoLUhhbnMiLCJlbiIsImF1dG8tZGV0ZWN0Il0=; ZHLASTACTIVECHAT=0; _EDGE_S=SID=1ECE53E4DFC262F3137041F9DEEC63B0; _SS=SID=1ECE53E4DFC262F3137041F9DEEC63B0&PC=U316; SRCHS=PC=U316; dsc=order=ShopOrderImagesOverS",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/test_curl_bing_search_normal_conversation_chitchat.sh:1-6"
    },
    "2355": {
        "file_id": 245,
        "content": "Making a POST request to retrieve English conversation chat using Curl with specified headers and cookies.",
        "type": "comment"
    },
    "2356": {
        "file_id": 245,
        "content": "hop; ENSEARCH=BENVER=0; SUID=M; SRCHUSR=DOB=20220725&T=1663127833000&TPC=1663086470000; ZHCHATWEAKATTRACT=TRUE; ipv6=hit=1663131446469&t=4; ABDEF=V=13&ABDV=11&MRNB=1663128202067&MRB=0; _HPVN=CS=eyJQbiI6eyJDbiI6NTIsIlN0IjoyLCJRcyI6MCwiUHJvZCI6IlAifSwiU2MiOnsiQ24iOjUyLCJTdCI6MCwiUXMiOjAsIlByb2QiOiJIIn0sIlF6Ijp7IkNuIjo1MiwiU3QiOjEsIlFzIjowLCJQcm9kIjoiVCJ9LCJBcCI6dHJ1ZSwiTXV0ZSI6dHJ1ZSwiTGFkIjoiMjAyMi0wOS0xNFQwMDowMDowMFoiLCJJb3RkIjowLCJHd2IiOjAsIkRmdCI6bnVsbCwiTXZzIjowLCJGbHQiOjAsIkltcCI6MjM0Mn0=; RECSEARCH=SQs=[{\"q\":\"teddy%20funny\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"python%20download%20with%20progress%20bar\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"python%20download%20tqdm\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"python%20multithread%20download\"%2C\"c\":1%2C\"ad\":true}%2C{\"q\":\"python%20tqdm\"%2C\"c\":1%2C\"ad\":true}%2C{\"q\":\"python%20megabyte%20human%20readable\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"python%20request%20get%20header%20without%20download\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"python%20request%20get%20response%20header%20wi",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/test_curl_bing_search_normal_conversation_chitchat.sh:6-6"
    },
    "2357": {
        "file_id": 245,
        "content": "This code snippet sets various environment variables and cookies for a web request. The request includes multiple search queries related to Python, such as \"teddy funny\", \"python download with progress bar\", \"python tqdm\", etc. It appears to be testing the Bing search functionality through a series of requests.",
        "type": "comment"
    },
    "2358": {
        "file_id": 245,
        "content": "thout%20download\"%2C\"c\":1%2C\"ad\":false}%2C{\"q\":\"aiohttp%20args%20allow%20redirect\"%2C\"c\":1%2C\"ad\":false}]; SNRHOP=I=&TS=; ZHSEARCHCHATSTATUS=STATUS=1; SRCHHPGUSR=SRCHLANG=en&BRW=NOTP&BRH=S&CW=602&CH=603&SW=1280&SH=800&DPR=2.200000047683716&UTC=480&DM=1&PV=12.5.0&BZA=0&HV=1663129340&WTS=63798724633&SCW=1164&SCH=2909&PRVCW=1163&PRVCH=603' \\\n  -H 'origin: https://cn.bing.com' \\\n  -H 'referer: https://cn.bing.com/search?q=aiohttp+args+allow+redirect&form=QBLH&sp=-1&pq=aiohttp+args+allow+redirec&sc=8-26&qs=n&sk=&cvid=44FA71281A5246FF9D0859E4146194FF&ghsh=0&ghacc=0&ghpl=' \\\n  -H 'sec-ch-ua: \"Google Chrome\";v=\"105\", \"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"105\"' \\\n  -H 'sec-ch-ua-arch: \"arm\"' \\\n  -H 'sec-ch-ua-bitness: \"64\"' \\\n  -H 'sec-ch-ua-full-version: \"105.0.5195.102\"' \\\n  -H 'sec-ch-ua-full-version-list: \"Google Chrome\";v=\"105.0.5195.102\", \"Not)A;Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"105.0.5195.102\"' \\\n  -H 'sec-ch-ua-mobile: ?0' \\\n  -H 'sec-ch-ua-model: ' \\\n  -H 'sec-ch-ua-platform: \"macOS\"' \\\n  -H 'sec-ch-ua-platform-version: \"12.5.0\"' \\",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/test_curl_bing_search_normal_conversation_chitchat.sh:6-17"
    },
    "2359": {
        "file_id": 245,
        "content": "This code seems to be making a CURL request with specific headers for Bing search functionality. It is sending a GET request to the Bing search API, specifying parameters like origin, referer, user agent, and other relevant details for the search query \"aiohttp args allow redirect\".",
        "type": "comment"
    },
    "2360": {
        "file_id": 245,
        "content": "  -H 'sec-fetch-dest: empty' \\\n  -H 'sec-fetch-mode: cors' \\\n  -H 'sec-fetch-site: same-origin' \\\n  -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36' \\\n  --data-raw '{\"zoTextResponse\":\"我在，是有什么事吗？\",\"zoIsGCSResponse\":\"true\",\"zoSearchQuery\":\"aiohttp args allow redirect\",\"zoTimestampUtc\":\"Wed, 14 Sep 2022 05:28:25 GMT\",\"zoIsStartOfSession\":\"false\",\"zoRequestId\":\"c18862bd321ea770ac1609f9b552d4bb\",\"conversationId\":\"712e7968-9607-4abc-9c51-847f15bc6620\",\"query\":{\"NormalizedQuery\":\"0xd701543d84662163ce6999\"},\"from\":\"chatbox\",\"traceId\":\"632156f9d8a842048d33001cbeb8df23\"}' \\\n  --compressed",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/test_curl_bing_search_normal_conversation_chitchat.sh:18-23"
    },
    "2361": {
        "file_id": 245,
        "content": "This code sets headers and data for a POST request using cURL, mimicking a Chrome browser on Mac OS X 10.15.7 with specific timestamps and search query. The data includes conversation details for a chatbot session.",
        "type": "comment"
    },
    "2362": {
        "file_id": 246,
        "content": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js",
        "type": "filepath"
    },
    "2363": {
        "file_id": 246,
        "content": "The code utilizes \"request\" library, manages IDs and delays, handles GET/POST requests with error handling, sets up a chat server, uses Microsoft Xiaoice for responses, and includes test code.",
        "type": "summary"
    },
    "2364": {
        "file_id": 246,
        "content": "var request = require(\"request\");\n// var mysqld = require(\"./mysql\");\n// const { init: initDB, Counter, Chatid } = require(\"./db\");\nfunction getRequestId() {\n    return (ot() + ot() + ot() + ot() + ot() + ot() + ot() + ot()).toLowerCase();\n}\nconst sleep = (ms) => {\n    return new Promise(resolve => setTimeout(resolve, ms))\n}\nfunction ot() {\n    return (((1 + Math.random()) * 65536) | 0).toString(16).substring(1);\n}\nfunction i(n, i) {\n    for (\n        var s, c, e = 4, l = i.length / e - 1, r = [\n            [],\n            [],\n            [],\n            []\n        ], o = 0; o < 4 * e; o++\n    )\n        r[o % 4][Math.floor(o / 4)] = n[o];\n    for (r = t(r, i, 0, e), s = 1; s < l; s++)\n        (r = u(r, e)), (r = f(r, e)), (r = h(r, e)), (r = t(r, i, s, e));\n    for (\n        r = u(r, e), r = f(r, e), r = t(r, i, l, e), c = new Array(4 * e), o = 0; o < 4 * e; o++\n    )\n        c[o] = r[o % 4][Math.floor(o / 4)];\n    return c;\n}\nfunction u(n, t) {\n    for (var r, i = 0; i < 4; i++)\n        for (r = 0; r < t; r++) n[i][r] = o[n[i][r]];",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:1-37"
    },
    "2365": {
        "file_id": 246,
        "content": "This code imports the \"request\" library and contains functions for generating a unique request ID, sleeping for a specified time, and working with arrays. It also includes a function for string manipulation and an algorithm that performs some operations on input arrays.",
        "type": "comment"
    },
    "2366": {
        "file_id": 246,
        "content": "    return n;\n}\nfunction f(n, t) {\n    for (var i, u = new Array(4), r = 1; r < 4; r++) {\n        for (i = 0; i < 4; i++) u[i] = n[r][(i + r) % t];\n        for (i = 0; i < 4; i++) n[r][i] = u[i];\n    }\n    return n;\n}\nfunction h(n) {\n    for (var t, r, u, i = 0; i < 4; i++) {\n        for (t = new Array(4), r = new Array(4), u = 0; u < 4; u++)\n            (t[u] = n[u][i]),\n            (r[u] = n[u][i] & 128 ? (n[u][i] << 1) ^ 283 : n[u][i] << 1);\n        n[0][i] = r[0] ^ t[1] ^ r[1] ^ t[2] ^ t[3];\n        n[1][i] = t[0] ^ r[1] ^ t[2] ^ r[2] ^ t[3];\n        n[2][i] = t[0] ^ t[1] ^ r[2] ^ t[3] ^ r[3];\n        n[3][i] = t[0] ^ r[0] ^ t[1] ^ t[2] ^ r[3];\n    }\n    return n;\n}\nfunction t(n, t, i, r) {\n    for (var f, u = 0; u < 4; u++)\n        for (f = 0; f < r; f++) n[u][f] ^= t[i * 4 + f][u];\n    return n;\n}\nfunction e(n) {\n    for (var t = 0; t < 4; t++) n[t] = o[n[t]];\n    return n;\n}\nfunction c(n) {\n    for (var i = n[0], t = 0; t < 3; t++) n[t] = n[t + 1];\n    return (n[3] = i), n;\n}\nfunction rr(n) {\n    for (\n        var h,",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:38-80"
    },
    "2367": {
        "file_id": 246,
        "content": "This code contains multiple functions that perform various operations on a 4x4 matrix. The 'g' function seems to return a value 'n'. The 'f' function rearranges the elements within each row of the 4x4 matrix. The 'h' function applies XOR operations between different elements in the matrix, resulting in modified values for each row. The 't' function performs XOR operations between the given matrix and another 4x4 matrix, affecting specific rows based on provided indices. The 'e' function replaces the values in the matrix with corresponding values from a lookup table 'o'. Lastly, the 'c' function rearranges the elements in the matrix by shifting each row one position to the left and moving the last row as the first. The function 'rr' appears to be incomplete as it lacks the closing brace '}'.",
        "type": "comment"
    },
    "2368": {
        "file_id": 246,
        "content": "            i,\n            o = 4,\n            r = n.length / 4,\n            s = r + 6,\n            f = new Array(o * (s + 1)),\n            u = new Array(4),\n            t = 0; t < r; t++\n    )\n        (h = [n[4 * t], n[4 * t + 1], n[4 * t + 2], n[4 * t + 3]]), (f[t] = h);\n    for (t = r; t < o * (s + 1); t++) {\n        for (f[t] = new Array(4), i = 0; i < 4; i++) u[i] = f[t - 1][i];\n        if (t % r == 0)\n            for (u = e(c(u)), i = 0; i < 4; i++) u[i] ^= l[t / r][i];\n        else r > 6 && t % r == 4 && (u = e(u));\n        for (i = 0; i < 4; i++) f[t][i] = f[t - r][i] ^ u[i];\n    }\n    return f;\n}\nfunction r(n) {\n    for (\n        var h,\n            i,\n            o = 4,\n            r = n.length / 4,\n            s = r + 6,\n            f = new Array(o * (s + 1)),\n            u = new Array(4),\n            t = 0; t < r; t++\n    )\n        (h = [n[4 * t], n[4 * t + 1], n[4 * t + 2], n[4 * t + 3]]), (f[t] = h);\n    for (t = r; t < o * (s + 1); t++) {\n        for (f[t] = new Array(4), i = 0; i < 4; i++) u[i] = f[t - 1][i];",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:81-113"
    },
    "2369": {
        "file_id": 246,
        "content": "This code appears to be decrypting an input array, `n`, by manipulating its elements and storing the results in a new array, `f`. The process involves breaking down `n` into smaller chunks of 4 elements each and applying different operations based on the position within the original array. It also includes a step to XOR specific elements with values from another array, `l`, and an optional encryption/decryption operation if the current position is divisible by `r` and greater than 6. Finally, it returns the modified array `f`.",
        "type": "comment"
    },
    "2370": {
        "file_id": 246,
        "content": "        if (t % r == 0)\n            for (u = e(c(u)), i = 0; i < 4; i++) u[i] ^= l[t / r][i];\n        else r > 6 && t % r == 4 && (u = e(u));\n        for (i = 0; i < 4; i++) f[t][i] = f[t - r][i] ^ u[i];\n    }\n    return f;\n}\nfunction a(n, t, u) {\n    var c = 16,\n        a,\n        y,\n        l,\n        w,\n        o,\n        e,\n        f,\n        nt;\n    if (!(u == 128 || u == 192 || u == 256)) return \"\";\n    for (n = s(n), t = s(t), a = u / 8, y = new Array(a), f = 0; f < a; f++)\n        y[f] = isNaN(t.charCodeAt(f)) ? 0 : t.charCodeAt(f);\n    l = i(y, rr(y));\n    l = l.concat(l.slice(0, a - 16));\n    var h = new Array(c),\n        k = new Date().getTime(),\n        tt = k % 1e3,\n        it = Math.floor(k / 1e3),\n        rt = Math.floor(Math.random() * 65535);\n    for (f = 0; f < 2; f++) h[f] = (tt >>> (f * 8)) & 255;\n    for (f = 0; f < 2; f++) h[f + 2] = (rt >>> (f * 8)) & 255;\n    for (f = 0; f < 4; f++) h[f + 4] = (it >>> (f * 8)) & 255;\n    for (w = \"\", f = 0; f < 8; f++) w += String.fromCharCode(h[f]);\n    var ut = rr(l),",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:114-146"
    },
    "2371": {
        "file_id": 246,
        "content": "This code encodes and decodes a string using a specific encryption algorithm. It takes an input string, splits it into chunks of 16 characters, then applies a series of XOR operations on each chunk before combining the results. The result is an encoded or decoded string based on the provided parameters.",
        "type": "comment"
    },
    "2372": {
        "file_id": 246,
        "content": "        b = Math.ceil(n.length / c),\n        d = new Array(b);\n    for (o = 0; o < b; o++) {\n        for (e = 0; e < 4; e++) h[15 - e] = (o >>> (e * 8)) & 255;\n        for (e = 0; e < 4; e++) h[11 - e] = (o / 4294967296) >>> (e * 8);\n        var ft = i(h, ut),\n            g = o < b - 1 ? c : ((n.length - 1) % c) + 1,\n            p = new Array(g);\n        for (f = 0; f < g; f++)\n            (p[f] = ft[f] ^ n.charCodeAt(o * c + f)),\n            (p[f] = String.fromCharCode(p[f]));\n        d[o] = p.join(\"\");\n    }\n    return (nt = w + d.join(\"\")), v(nt);\n}\nfunction v(n) {\n    for (\n        var i = \"0x\",\n            r = [\n                \"0\",\n                \"1\",\n                \"2\",\n                \"3\",\n                \"4\",\n                \"5\",\n                \"6\",\n                \"7\",\n                \"8\",\n                \"9\",\n                \"a\",\n                \"b\",\n                \"c\",\n                \"d\",\n                \"e\",\n                \"f\",\n            ],\n            t = 0; t < n.length; t++\n    )\n        i += r[n.charCodeAt(t) >> 4] + r[n.charCodeAt(t) & 15];",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:147-186"
    },
    "2373": {
        "file_id": 246,
        "content": "This code takes a string, splits it into chunks of specific size, and encodes each chunk using a simple encoding scheme. It then joins the encoded chunks together and returns the result, which is further processed in the v() function.",
        "type": "comment"
    },
    "2374": {
        "file_id": 246,
        "content": "    return i;\n}\nfunction s(n) {\n    var t = n.replace(/[\\u0080-\\u07ff]/g, function(n) {\n        var t = n.charCodeAt(0);\n        return String.fromCharCode(192 | (t >> 6), 128 | (t & 63));\n    });\n    return t.replace(/[\\u0800-\\uffff]/g, function(n) {\n        var t = n.charCodeAt(0);\n        return String.fromCharCode(\n            224 | (t >> 12),\n            128 | ((t >> 6) & 63),\n            128 | (t & 63)\n        );\n    });\n}\nvar o = [\n        99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118,\n        202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114,\n        192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49,\n        21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9,\n        131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209,\n        0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170,\n        251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143,",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:187-212"
    },
    "2375": {
        "file_id": 246,
        "content": "This code snippet defines a function 's' that takes in a string 'n', and replaces any non-basic Latin characters with their respective 3-byte sequences. It then returns the modified string. Additionally, there is an array of numbers representing a sequence that is used for some purpose in the codebase.",
        "type": "comment"
    },
    "2376": {
        "file_id": 246,
        "content": "        146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236,\n        95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34,\n        42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6,\n        36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213,\n        78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166,\n        180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3,\n        246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217,\n        142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230,\n        66, 104, 65, 153, 45, 15, 176, 84, 187, 22,\n    ],\n    l = [\n        [0, 0, 0, 0],\n        [1, 0, 0, 0],\n        [2, 0, 0, 0],\n        [4, 0, 0, 0],\n        [8, 0, 0, 0],\n        [16, 0, 0, 0],\n        [32, 0, 0, 0],\n        [64, 0, 0, 0],\n        [128, 0, 0, 0],\n        [27, 0, 0, 0],\n        [54, 0, 0, 0],\n    ];\n// n.encrypt = a\nasync function iceAI_word(",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:213-237"
    },
    "2377": {
        "file_id": 246,
        "content": "This code contains two arrays of numbers. The first array, `a`, seems to be encrypted or encoded data. The second array, `l`, represents a set of bitmasks. The function `iceAI_word` appears to use these arrays for encryption and decryption purposes, but the specific implementation details are not included in the provided code snippet.",
        "type": "comment"
    },
    "2378": {
        "file_id": 246,
        "content": "    // ToUserName,\n    // FromUserName,\n    // CreateTime,\n    // MsgType,\n    Content,\n    config,\n    query\n    // MsgId,\n) {\n    await sleep(1000);\n    // for whatever reason you have to wait for this long.\n    try {\n        var wquery = a(Content, \"3d9d5f16-5df0-43d7-902e-19274eecdc41\", 256);\n        console.log(\"encrypt:\" + wquery);\n        // let config = {};\n        // if ((await mysqld.isHaveChatIdIn(fromQQ)) == true) {\n        //     console.log(\"没有chatid，获取新id\")\n        //     config = await mysqld.getChatId(fromQQ);\n        // } else {\n        //     config = await newChatId(fromQQ);\n        // }\n        if (config) {\n            console.log(\"config:\" + config);\n        } else {\n            console.log('no config for xiaoice chat.')\n            return;\n        }\n        var h = {\n            zoTextResponse: \"\",\n            zoIsGCSResponse: false,\n            zoSearchQuery: query,\n            zoTimestampUtc: \"\",\n            zoIsStartOfSession: true,\n            zoRequestId: getRequestId(),\n            conversationId: config.conversationId,",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:238-274"
    },
    "2379": {
        "file_id": 246,
        "content": "The code waits for 1 second, then encrypts the message with a specific key and prints it to the console. It also checks if there's an existing chat ID for the fromQQ parameter. If not, it gets a new one by calling `mysqld.getChatId` or `newChatId`. The code then logs the config, creating a conversation ID, and assigns it to the h object.",
        "type": "comment"
    },
    "2380": {
        "file_id": 246,
        "content": "            query: { NormalizedQuery: wquery },\n            from: \"chatbox\",\n            traceId: config.traceId,\n        };\n        var url = \"https://cn.bing.com/english/zochatv2?cc=cn&ensearch=0\";\n        // {\"zoTextResponse\":\"\",\"zoIsGCSResponse\":\"false\",\"zoSearchQuery\":\"123\",\"zoTimestampUtc\":\"\",\"zoIsStartOfSession\":\"true\",\"zoRequestId\":\"ff90e6f70a6048d4fe5cc3c3327bbd32\",\"conversationId\":\"4a91fb33-73f7-43d4-b7b6-ba86a16e32fb\",\"query\":{\"NormalizedQuery\":\"0x23028811be44f661169365\"},\"from\":\"chatbox\",\"traceId\":\"B224B190F87941CD94AD0AC31A189D30\"}\n        let result = await getContents({\n            url: url,\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"text/plain;charset=UTF-8\",\n                origin: \"https://cn.bing.com\",\n                referer: \"https://cn.bing.com/search?q=123&form=QBLH&sp=-1&pq=123&sc=6-3&qs=n&sk=&cvid=566F001FDA424EEB805E1C175363B5AE\",\n                \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36\",",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:275-288"
    },
    "2381": {
        "file_id": 246,
        "content": "Sending a POST request to Bing's chat API endpoint with a normalized query, specifying the from source as \"chatbox\", and including a trace ID for identification purposes. The URL is set to the Bing chat API endpoint, headers include content type, origin, referer, and user-agent, all necessary information for the API request.",
        "type": "comment"
    },
    "2382": {
        "file_id": 246,
        "content": "                Connection: \"keep-alive\",\n            },\n            body: JSON.stringify(h),\n        });\n        if (result == null){ return}\n        // {\"content\":\"嘿 啾 嘿 啾啊\",\"type\":1,\"delayContents\":null,\"entityInfo\":[{\"Entity\":\"嘿 啾 嘿 啾啊\",\"IsEntity\":false}],\"target\":\"b\",\"history\":null,\"hasClientIdinMem\":true,\"needSayHello\":false,\"isHookStr\":false,\"showChatBox\":true,\"metadata\":{\"AnswerFeed\":\"RandomChitChatService\",\"EmotionInfo\":\"{\\\"EmotionClassificationInfo\\\":[{\\\"Category\\\":\\\"Sad\\\",\\\"Score\\\":0.0651140139},{\\\"Category\\\":\\\"Happy\\\",\\\"Score\\\":0.139467061},{\\\"Category\\\":\\\"Surprise\\\",\\\"Score\\\":0.176786855},{\\\"Category\\\":\\\"Angry\\\",\\\"Score\\\":0.358794},{\\\"Category\\\":\\\"Disgust\\\",\\\"Score\\\":0.2598381}],\\\"NeutralScore\\\":0.9992748,\\\"DomainInMatchScenario\\\":\\\"None\\\"}\"}}\n        result = JSON.parse(result);\n        if (result.content) {\n            var reply = result.content;\n            reply = reply.replace(\"小冰\", \"小姝\");\n            var message = 1;\n            var unuseless =\n                \"看的我一脸懵逼，都开始怀疑我的智商",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:289-302"
    },
    "2383": {
        "file_id": 246,
        "content": "Sends a POST request to the API with request parameters, parses the response as JSON, and replaces \"小冰\" with \"小姝\" if present in the response content.",
        "type": "comment"
    },
    "2384": {
        "file_id": 246,
        "content": "了。哎呀，不好意思，我刚刚好像走神了,感觉你知道的挺多的呢,额，我现在也不知道该说些什么,这个…不太好说啊,我语文不太好，不确定是不是懂了你的意思,刚刚不小心溜号了，真是不好意思这个我要好好想想再说这很难说，还是让我想想吧哦哦，这样啊我怎么理解比较好呢？\";\n            if (unuseless.indexOf(reply) != -1) {\n                console.log('xiaoice is returning useless reply', reply)\n                    //   message = 2;\n                    //   Log.trace(\"iceAi have unuseless message\");\n                    //   request(\n                    //     {\n                    //       url:\n                    //         \"http://api.qingyunke.com/api.php?key=free&appid=0&msg=\" +\n                    //         encodeURIComponent(msg2),\n                    //       method: \"GET\",\n                    //     },\n                    //     function (error, response, body) {\n                    //       var result = JSON.parse(body);\n                    //       reply = result.content;\n                    //       var logtext = \"\";\n                    //       return;\n                    //     }\n                    //   );\n            } else {\n                return reply;",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:302-322"
    },
    "2385": {
        "file_id": 246,
        "content": "Code is checking if the reply is useless (stored in unnecessary array) and returning it. If not, it returns the reply. If it's useless, it makes a request to an API for a new response and returns it.",
        "type": "comment"
    },
    "2386": {
        "file_id": 246,
        "content": "            }\n        }\n    } catch (e) {\n        console.log('ERROR FETCHING XIAOBING CHAT', e)\n            // will return nothing.\n            // sleep for 1 second?\n            // would you sleep for a while?\n    }\n}\nasync function newChatId(query) {\n    var options = options || {};\n    var httpOptions = {\n        url: \"https://cn.bing.com/search?q=\" + encodeURIComponent(query) + \"&form=QBLH&rdr=1&rdrig=E8F3C1A722454F949CCC4B98C4570A4A\",\n        method: \"get\",\n        timeout: 1000,\n        headers: {\n            accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\",\n            \"accept-language\": \"zh-CN,zh;q=0.9\",\n            \"cache-control\": \"max-age=0\",\n            \"sec-ch-ua\": '\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"',\n            \"sec-ch-ua-arch\": '\"x86\"',\n            \"sec-ch-ua-bitness\": '\"64\"',\n            \"sec-ch-ua-full-version\": '\"102.0.5005.63\"',\n            \"sec-ch-ua-mobile\": \"?0\",",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:323-347"
    },
    "2387": {
        "file_id": 246,
        "content": "This code appears to be a function for fetching a new chat ID based on a given query. If an error occurs during the fetch, it logs an error and may sleep for a second before retrying. The HTTP options include various headers for language and browser information, indicating that this function likely makes a GET request to retrieve the new chat ID from a Microsoft Bing search page.",
        "type": "comment"
    },
    "2388": {
        "file_id": 246,
        "content": "            \"sec-ch-ua-model\": '\"\"',\n            \"sec-ch-ua-platform\": '\"Windows\"',\n            \"sec-ch-ua-platform-version\": '\"10.0.0\"',\n            \"sec-fetch-dest\": \"document\",\n            \"sec-fetch-mode\": \"navigate\",\n            \"sec-fetch-site\": \"same-origin\",\n            cookie: \"MUID=005F25E7699168532D05342768F769B3; MUIDB=005F25E7699168532D05342768F769B3; _EDGE_V=1; SRCHD=AF=NOFORM; SRCHUID=V=2&GUID=31127A3BD4B84FF08E8E51EEEA34857F&dmnchg=1; _UR=QS=0&TQS=0; _HPVN=CS=eyJQbiI6eyJDbiI6MSwiU3QiOjAsIlFzIjowLCJQcm9kIjoiUCJ9LCJTYyI6eyJDbiI6MSwiU3QiOjAsIlFzIjowLCJQcm9kIjoiSCJ9LCJReiI6eyJDbiI6MSwiU3QiOjAsIlFzIjowLCJQcm9kIjoiVCJ9LCJBcCI6dHJ1ZSwiTXV0ZSI6dHJ1ZSwiTGFkIjoiMjAyMi0wNi0xMVQwMDowMDowMFoiLCJJb3RkIjowLCJHd2IiOjAsIkRmdCI6bnVsbCwiTXZzIjowLCJGbHQiOjAsIkltcCI6NH0=; SUID=M; SRCHUSR=DOB=20220611&T=1659599964000&TPC=1659599966000; ZHCHATSTRONGATTRACT=TRUE; ZHCHATWEAKATTRACT=TRUE; _EDGE_S=SID=05C5058B7100688001DB147D702E698C; _SS=SID=05C5058B7100688001DB147D702E698C; _tarLang=default=zh-Hans; ",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:348-354"
    },
    "2389": {
        "file_id": 246,
        "content": "This code sets various HTTP headers and cookies for a web request, such as user-agent information and session identifiers. It includes details about the browser model, platform, and version, as well as cookies that store user information and preferences.",
        "type": "comment"
    },
    "2390": {
        "file_id": 246,
        "content": "_TTSS_IN=hist=WyJlbiIsImF1dG8tZGV0ZWN0Il0=; _TTSS_OUT=hist=WyJ6aC1IYW5zIl0=; ipv6=hit=1659603639345&t=4; SNRHOP=I=&TS=; SRCHHPGUSR=SRCHLANG=zh-Hans&BRW=NOTP&BRH=S&CW=599&CH=657&SW=1366&SH=768&DPR=1&UTC=480&DM=0&PV=0.3.0&BZA=0&HV=1659600073&WTS=63795196764\",\n            \"sec-fetch-user\": \"?1\",\n            accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\",\n            \"accept-language\": \"zh-CN,zh;q=0.9\",\n            \"cache-control\": \"max-age=0\",\n            \"upgrade-insecure-requests\": \"1\",\n            Referer: \"referer: https://cn.bing.com/search?q=\" + encodeURIComponent(query) + \"&form=QBLHCN&sp=-1&pq=a&sc=6-1&qs=n&sk=&cvid=A91AB41228AD45E694D5F2EEBF87FE70\",\n            \"Referrer-Policy\": \"strict-origin-when-cross-origin\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36\",\n        },\n    };\n    let body = await getContents(httpOptions)",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:354-365"
    },
    "2391": {
        "file_id": 246,
        "content": "The code is setting up HTTP request options for a GET request to Bing.com, with headers including user agent, accept language, and upgrade insecure requests, and specifying the referer as the current query search term on Bing's Chinese site. It then sends the request using getContents function and stores the response body in the 'body' variable.",
        "type": "comment"
    },
    "2392": {
        "file_id": 246,
        "content": "    //console.log(body)\n    if (body.indexOf(\"conversationId\") == -1) {\n        console.log(\"请求chatid失败\");\n        return;\n    }\n    console.log(body.indexOf(\"conversationId\"));\n    console.log(body.indexOf(\"iframeTalkStatus\"));\n    let config =\n        '{\"' +\n        body.substring(\n            body.indexOf(\"conversationId\"),\n            body.indexOf(\"iframeTalkStatus\")\n        ) +\n        '\":\"\"}';\n    config = JSON.parse(config);\n    console.log(config);\n    // mysqld.addChatId(fromQQ, config);\n    return config;\n}\nasync function getAuth(opts, redis) {\n    cookie = await post(opts);\n    //redis.set(\"ice_cookie\", cookie)\n    log.info(\"new cookie:\" + cookie);\n    return cookie;\n}\nfunction post(opts) {\n    return new Promise((resolve, reject) => {\n        request(opts, function(error, response) {\n            if (error) throw new Error(error);\n            if (response.statusCode != \"200\") {\n                console.log(\"requestCode:\" + response.statusCode);\n            }\n            console.log(\"requestCode:\" + response.statusCode);",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:367-401"
    },
    "2393": {
        "file_id": 246,
        "content": "This code appears to handle API requests, logging, and cookie management. It checks the response for specific parameters, extracts them, and parses the data into a JSON object. The `post` function makes a POST request and logs the response status code. The `getAuth` function uses this `post` function and handles the asynchronous result of the API call to set the cookie in Redis.",
        "type": "comment"
    },
    "2394": {
        "file_id": 246,
        "content": "            var responseCookies = response.headers[\"set-cookie\"];\n            console.log(response.body);\n            var requestCookies = \"\";\n            for (var i = 0; i < responseCookies.length; i++) {\n                var oneCookie = responseCookies[i];\n                oneCookie = oneCookie.split(\";\");\n                requestCookies = requestCookies + oneCookie[0] + \";\";\n            }\n            resolve(requestCookies);\n        });\n    });\n}\nfunction getContents(opts) {\n    return new Promise((resolve, reject) => {\n        request(opts, function(error, response) {\n            try {\n                if (error) reject(error);\n                if (response.statusCode != \"200\") {\n                    console.log(\"requestCode:\" + response.statusCode);\n                }\n                console.log(\"requestCode:\" + response.statusCode);\n                var responseCookies = response.headers[\"set-cookie\"];\n                resolve(response.body);\n            } catch (e) {\n                console.log('ERROR', e)\n                console.log('request failed')",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:402-429"
    },
    "2395": {
        "file_id": 246,
        "content": "Code snippet handles HTTP requests, retrieves response cookies and body content, and handles errors. It uses the request library to make GET requests with optional headers and parameters, then processes the response status code and cookies before resolving the Promise with response body or rejecting with an error.",
        "type": "comment"
    },
    "2396": {
        "file_id": 246,
        "content": "                resolve(null);\n            }\n        });\n    });\n}\n// module.exports = { iceAI_word };\n// let test_request = \"不会吧\"\n// let test_request = \"python\"\nconst http = require('http');\nfunction getQueryParams(reqUrl) {\n    current_url = new URL('http://localhost' + reqUrl)\n    params = current_url.searchParams\n    console.log('query parameters:', params)\n    return params\n}\nlet topic_chatId_dict = {}\nconst requestListener = function(req, res) {\n    console.log(\"________________________________________________\")\n    console.log(\"REQUEST AT:\", req.url, req.method)\n    if (req.url == \"/\") {\n        res.writeHead(200);\n        res.end('xiaoice chat server');\n    } else if (req.url.split(\"?\")[0] == '/chat') {\n        callback = (result) => {\n            res.writeHead(200);\n            content = { \"msg\": 'success', 'reply': result }\n            res.end(JSON.stringify(content))\n        }\n        params = getQueryParams(req.url)\n        message = params.get(\"message\")\n        topic = params.get(\"topic\")\n        if (message == null) {",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:430-462"
    },
    "2397": {
        "file_id": 246,
        "content": "This code sets up a chat server that listens for incoming requests and handles them. It checks if the request is for a chat, extracts the message and topic from the query parameters, and calls a callback function with the result to send back as a response. The `getQueryParams` function helps extract the query parameters from the URL.",
        "type": "comment"
    },
    "2398": {
        "file_id": 246,
        "content": "            message = \"你好呀\"\n        }\n        if (topic == null) {\n            topic = \"hhh\"\n        }\n        message = message.split(\" \").pop()\n        console.log(\"MESSAGE:\", message)\n        console.log(\"TOPIC:\", topic)\n        if (topic_chatId_dict[topic] == null) {\n            topic_chatId_dict[topic] = newChatId(topic)\n        }\n        chatId = topic_chatId_dict[topic]\n        if (chatId != null) {\n            response = iceAI_word(message, chatId,topic)\n            response.then((content) => {\n                console.log(\"REAL RESPONSE:\", content)\n                if (content != null) {\n                    callback(content)\n                } else {\n                    res.writeHead(401);\n                    res.end(JSON.stringify({ 'msg': 'empty response from microsoft xiaoice' }))\n                }\n            })\n        } else {\n            res.writeHead(401)\n            res.end(JSON.stringify({ 'msg': 'error when getting chatid' }))\n        }\n    } else {\n        res.writeHead(400);\n        res.end('please use /chat?topic={topic}&message={message} to chat with xiaoice.')",
        "type": "code",
        "location": "/tests/microsoft_xiaobing_conversation_bing/chat_with_session_id.js:463-494"
    },
    "2399": {
        "file_id": 246,
        "content": "This code handles chat requests with Microsoft Xiaoice, extracting the topic and message from the URL parameters. It assigns a unique chat ID to the topic if it doesn't exist in the dictionary, calls the iceAI_word function to get a response, and sends it back as the HTTP response body. If any step fails or returns null, an error message is sent instead.",
        "type": "comment"
    }
}